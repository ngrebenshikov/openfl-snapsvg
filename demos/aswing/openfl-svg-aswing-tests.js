(function () { "use strict";
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	ApplicationMain.completed = 0;
	ApplicationMain.loaders = new haxe.ds.StringMap();
	ApplicationMain.urlLoaders = new haxe.ds.StringMap();
	ApplicationMain.total = 0;
	openfl.Lib.get_current().loaderInfo = openfl.display.LoaderInfo.create(null);
	try {
		if(Reflect.hasField(window,"winParameters")) Reflect.setField(openfl.Lib.get_current().loaderInfo,"parameters",(Reflect.field(window,"winParameters"))());
		openfl.Lib.get_current().get_stage().loaderInfo = openfl.Lib.get_current().loaderInfo;
	} catch( e ) {
	}
	ApplicationMain.preloader = new NMEPreloader();
	openfl.Lib.get_current().addChild(ApplicationMain.preloader);
	ApplicationMain.preloader.onInit();
	var loader = new openfl.display.Loader();
	ApplicationMain.loaders.set("2.jpg",loader);
	ApplicationMain.total++;
	var loader1 = new openfl.display.Loader();
	ApplicationMain.loaders.set("princess.jpg",loader1);
	ApplicationMain.total++;
	var resourcePrefix = "__ASSET__:bitmap_";
	var _g = 0;
	var _g1 = haxe.Resource.listNames();
	while(_g < _g1.length) {
		var resourceName = _g1[_g];
		++_g;
		if(StringTools.startsWith(resourceName,resourcePrefix)) {
			var type = Type.resolveClass(StringTools.replace(resourceName.substring(resourcePrefix.length),"_","."));
			if(type != null) {
				ApplicationMain.total++;
				var instance = Type.createInstance(type,[0,0,true,16777215,ApplicationMain.bitmapClass_onComplete]);
			}
		}
	}
	if(ApplicationMain.total == 0) ApplicationMain.begin(); else {
		var $it0 = ApplicationMain.loaders.keys();
		while( $it0.hasNext() ) {
			var path = $it0.next();
			var loader2 = ApplicationMain.loaders.get(path);
			loader2.contentLoaderInfo.addEventListener("complete",ApplicationMain.loader_onComplete);
			loader2.load(new openfl.net.URLRequest(path));
		}
		var $it1 = ApplicationMain.urlLoaders.keys();
		while( $it1.hasNext() ) {
			var path1 = $it1.next();
			var urlLoader = ApplicationMain.urlLoaders.get(path1);
			urlLoader.addEventListener("complete",ApplicationMain.loader_onComplete);
			urlLoader.load(new openfl.net.URLRequest(path1));
		}
	}
};
ApplicationMain.begin = function() {
	ApplicationMain.preloader.addEventListener(openfl.events.Event.COMPLETE,ApplicationMain.preloader_onComplete);
	ApplicationMain.preloader.onLoaded();
};
ApplicationMain.bitmapClass_onComplete = function(instance) {
	ApplicationMain.completed++;
	var classType = Type.getClass(instance);
	classType.preload = instance;
	if(ApplicationMain.completed == ApplicationMain.total) ApplicationMain.begin();
};
ApplicationMain.loader_onComplete = function(event) {
	ApplicationMain.completed++;
	ApplicationMain.preloader.onUpdate(ApplicationMain.completed,ApplicationMain.total);
	if(ApplicationMain.completed == ApplicationMain.total) ApplicationMain.begin();
};
ApplicationMain.preloader_onComplete = function(event) {
	ApplicationMain.preloader.removeEventListener(openfl.events.Event.COMPLETE,ApplicationMain.preloader_onComplete);
	openfl.Lib.get_current().removeChild(ApplicationMain.preloader);
	ApplicationMain.preloader = null;
	if(Reflect.field(Main,"main") == null) {
		var mainDisplayObj = Type.createInstance(DocumentClass,[]);
		if(js.Boot.__instanceof(mainDisplayObj,openfl.display.DisplayObject)) openfl.Lib.get_current().addChild(mainDisplayObj);
	} else Reflect.callMethod(Main,Reflect.field(Main,"main"),[]);
};
var openfl = {};
openfl.events = {};
openfl.events.IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl.events.IEventDispatcher;
openfl.events.IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl.events.IEventDispatcher.prototype = {
	__class__: openfl.events.IEventDispatcher
};
openfl.events.EventDispatcher = function(target) {
	if(target != null) this.__target = target; else this.__target = this;
	this.__eventMap = [];
};
$hxClasses["openfl.events.EventDispatcher"] = openfl.events.EventDispatcher;
openfl.events.EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl.events.EventDispatcher.__interfaces__ = [openfl.events.IEventDispatcher];
openfl.events.EventDispatcher.compareListeners = function(l1,l2) {
	if(l1.mPriority == l2.mPriority) return 0; else if(l1.mPriority > l2.mPriority) return -1; else return 1;
};
openfl.events.EventDispatcher.prototype = {
	addEventListener: function(type,inListener,useCapture,inPriority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(inPriority == null) inPriority = 0;
		if(useCapture == null) useCapture = false;
		var stage = openfl.Lib.__getStage();
		if((type == openfl.events.Event.RENDER || type == openfl.events.Event.ENTER_FRAME || type == openfl.events.Event.STAGE_RENDERED) && null != stage && this != stage) return stage.addEventListener(type,inListener,useCapture,inPriority,useWeakReference);
		var capture;
		if(useCapture == null) capture = false; else capture = useCapture;
		var priority;
		if(inPriority == null) priority = 0; else priority = inPriority;
		var list = this.getList(type);
		if(!this.existList(type)) {
			list = [];
			this.setList(type,list);
		}
		list.push(new openfl.events.Listener(inListener,capture,priority));
		list.sort(openfl.events.EventDispatcher.compareListeners);
	}
	,dispatchEvent: function(event) {
		if(event.target == null) event.target = this.__target;
		if(event.currentTarget == null) event.currentTarget = this.__target;
		var capture = event.eventPhase == openfl.events.EventPhase.CAPTURING_PHASE;
		if(this.existList(event.type)) {
			var list = this.getList(event.type);
			var idx = 0;
			while(idx < list.length) {
				var listener = list[idx];
				if(listener.mUseCapture == capture) {
					listener.dispatchEvent(event);
					if(event.__getIsCancelledNow()) return true;
				}
				if(idx < list.length && listener != list[idx]) {
				} else idx++;
			}
			return true;
		}
		return false;
	}
	,existList: function(type) {
		return this.__eventMap != null && this.__eventMap[type] != undefined;
	}
	,getList: function(type) {
		return this.__eventMap[type];
	}
	,hasEventListener: function(type) {
		return this.existList(type);
	}
	,removeEventListener: function(type,listener,inCapture) {
		if(inCapture == null) inCapture = false;
		if(!this.existList(type)) return;
		var list = this.getList(type);
		var capture;
		if(inCapture == null) capture = false; else capture = inCapture;
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].Is(listener,capture)) {
				list.splice(i,1);
				return;
			}
		}
	}
	,setList: function(type,list) {
		this.__eventMap[type] = list;
	}
	,toString: function() {
		return "[ " + this.__name__ + " ]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl.events.EventDispatcher
};
openfl.display = {};
openfl.display.IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl.display.IBitmapDrawable;
openfl.display.IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl.display.IBitmapDrawable.prototype = {
	__class__: openfl.display.IBitmapDrawable
};
openfl.display.DisplayObject = function() {
	openfl.events.EventDispatcher.call(this,null);
	this.___id = openfl.utils.Uuid.uuid();
	this.set_parent(null);
	this.set_transform(new openfl.geom.Transform(this));
	this.__x = 0.0;
	this.__y = 0.0;
	this.__scaleX = 1.0;
	this.__scaleY = 1.0;
	this.__rotation = 0.0;
	this.__width = 0.0;
	this.__height = 0.0;
	this.set_visible(true);
	this.set_alpha(1.0);
	this.__filters = new Array();
	this.__boundsRect = new openfl.geom.Rectangle();
	this.__scrollRect = null;
	this.__mask = null;
	this.__maskingObj = null;
	this.set___combinedVisible(this.get_visible());
	var _this = openfl.Lib.get_snap();
	var e123 = [];
	var me123 = _this;
	this.snap = me123.group.apply(me123, e123);
	openfl.Lib.__setSurfaceId(this.snap,this.___id);
	openfl.Lib.get_freeSnap().append(this.snap);
};
$hxClasses["openfl.display.DisplayObject"] = openfl.display.DisplayObject;
openfl.display.DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl.display.DisplayObject.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.DisplayObject.__super__ = openfl.events.EventDispatcher;
openfl.display.DisplayObject.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispatchEvent: function(event) {
		var result = this.__dispatchEvent(event);
		if(event.__getIsCancelled()) return true;
		if(event.bubbles && this.parent != null) this.parent.dispatchEvent(event);
		return result;
	}
	,drawToSurface: function(inSurface,matrix,inColorTransform,blendMode,clipRect,smoothing) {
		var oldAlpha = this.alpha;
		this.set_alpha(1);
		this.__render(inSurface,clipRect);
		this.set_alpha(oldAlpha);
	}
	,getBounds: function(targetCoordinateSpace) {
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		if(this.get__boundsInvalid()) this.validateBounds();
		var m = this.transform.__getFullMatrix(null);
		if(targetCoordinateSpace != null) m.concat(targetCoordinateSpace.transform.__getFullMatrix(null).invert());
		var rect = this.__boundsRect.transform(m);
		return rect;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,getScreenBounds: function() {
		if(this.get__boundsInvalid()) this.validateBounds();
		return this.__boundsRect.clone();
	}
	,getSurfaceTransform: function() {
		var fm;
		if(null == this.parent) fm = this.transform.__getFullMatrix(null); else {
			var m = this.transform.__getFullMatrix(null);
			m.concat(this.parent.transform.__getFullMatrix(null).invert());
			fm = m;
		}
		return fm;
	}
	,globalToLocal: function(inPos) {
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		return this.transform.__getFullMatrix(null).invert().transformPoint(inPos);
	}
	,handleGraphicsUpdated: function(gfx) {
		this.__applyFilters(this.snap);
		this.___renderFlags |= 32;
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.renderNextWake();
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		var boundingBox;
		if(shapeFlag == null) boundingBox = true; else boundingBox = !shapeFlag;
		if(!boundingBox) return this.__getObjectUnderPoint(new openfl.geom.Point(x,y)) != null; else {
			var gfx = this.__getGraphics();
			if(gfx != null) {
				var extX = gfx.__extent.x;
				var extY = gfx.__extent.y;
				var local = this.globalToLocal(new openfl.geom.Point(x,y));
				if(local.x - extX < 0 || local.y - extY < 0 || (local.x - extX) * this.get_scaleX() > this.get_width() || (local.y - extY) * this.get_scaleY() > this.get_height()) return false; else return true;
			}
			return false;
		}
	}
	,invalidateGraphics: function() {
		var gfx = this.__getGraphics();
		if(gfx != null) {
			gfx.set___changed(true);
			gfx.__clearNextCycle = true;
		}
		this.renderNextWake();
	}
	,localToGlobal: function(point) {
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		return this.transform.__getFullMatrix(null).transformPoint(point);
	}
	,setSurfaceVisible: function(inValue) {
		if(null != this.snap) this.snap.attr({ visibility : inValue?"visible":"hidden"});
		this.renderNextWake();
	}
	,toString: function() {
		return "[DisplayObject name=" + this.name + " id=" + this.___id + "]";
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			var gfx = this.__getGraphics();
			if(gfx == null) {
				this.__boundsRect.x = this.get_x();
				this.__boundsRect.y = this.get_y();
				this.__boundsRect.width = 0;
				this.__boundsRect.height = 0;
			} else {
				this.__boundsRect = gfx.__extentWithFilters.clone();
				if(this.scale9Grid != null) {
					this.__boundsRect.width *= this.__scaleX;
					this.__boundsRect.height *= this.__scaleY;
					this.__width = this.__boundsRect.width;
					this.__height = this.__boundsRect.height;
				} else {
					this.__width = this.__boundsRect.width * this.__scaleX;
					this.__height = this.__boundsRect.height * this.__scaleY;
				}
				gfx.boundsDirty = false;
			}
			this.___renderFlags &= -65;
		}
	}
	,__setTransform: function(matrix) {
		var el = this.snap.node;
		if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1 && matrix.tx == 0 && matrix.ty == 0) {
			if(null != this.__cacheTransformString) {
				el.removeAttribute("transform");
				this.__cacheTransformString = null;
			}
		} else {
			var transformString = "matrix(" + matrix.a + ", " + matrix.b + ", " + matrix.c + ", " + matrix.d + ", " + matrix.tx + ", " + matrix.ty + ")";
			if(this.__cacheTransformString != transformString) {
				el.setAttribute("transform",transformString);
				this.__cacheTransformString = transformString;
			}
		}
	}
	,__addToStage: function(newParent,beforeSibling) {
		if(this.__isOnStage()) return;
		var gfx = this.__getGraphics();
		if(null == gfx) return;
		if(newParent.snap != null && newParent.name != "Stage") {
			if(beforeSibling != null && beforeSibling.__getGraphics() != null) openfl.Lib.__appendSurface(this.snap,beforeSibling.snap); else openfl.Lib.__appendSurface(this.snap,null,null,newParent.snap);
			this.__setTransform(this.getSurfaceTransform());
		} else if(newParent.name == "Stage") openfl.Lib.__appendSurface(this.snap);
		if(this.__isOnStage()) {
			this.get_stage().snapIdToDisplayObjects.set(this.___id,this);
			var evt = new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false);
			this.dispatchEvent(evt);
		}
		this.renderNextWake();
	}
	,__getBlendModeSvg: function() {
		return null;
	}
	,__applyFilters: function(surface) {
		var blendFilter = null;
		var filterBuf = new StringBuf();
		if(null != blendFilter) filterBuf.b += Std.string(blendFilter);
		if(this.__filters != null && this.__filters.length > 0) {
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				filterBuf.add(filter.__getSvg());
			}
		}
		var filtersString = filterBuf.b;
		if(this.cacheFiltersString != filtersString) {
			if(null == filtersString || "" == filtersString) surface.attr({ filter : "none"}); else surface.attr({ filter : openfl.Lib.get_snap().filter(filtersString)});
			this.cacheFiltersString = filtersString;
		}
	}
	,__broadcast: function(event) {
		this.__dispatchEvent(event);
	}
	,__clearFlag: function(mask) {
		this.___renderFlags &= ~mask;
	}
	,__contains: function(child) {
		return false;
	}
	,__dispatchEvent: function(event) {
		if(event.target == null) event.target = this;
		event.currentTarget = this;
		return openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,__fireEvent: function(event) {
		var stack = [];
		if(this.parent != null) this.parent.__getInteractiveObjectStack(stack);
		var l = stack.length;
		if(l > 0) {
			event.__setPhase(openfl.events.EventPhase.CAPTURING_PHASE);
			stack.reverse();
			var _g = 0;
			while(_g < stack.length) {
				var obj = stack[_g];
				++_g;
				event.currentTarget = obj;
				obj.__dispatchEvent(event);
				if(event.__getIsCancelled()) return;
			}
		}
		event.__setPhase(openfl.events.EventPhase.AT_TARGET);
		event.currentTarget = this;
		this.__dispatchEvent(event);
		if(event.__getIsCancelled()) return;
		if(event.bubbles) {
			event.__setPhase(openfl.events.EventPhase.BUBBLING_PHASE);
			stack.reverse();
			var _g1 = 0;
			while(_g1 < stack.length) {
				var obj1 = stack[_g1];
				++_g1;
				event.currentTarget = obj1;
				obj1.__dispatchEvent(event);
				if(event.__getIsCancelled()) return;
			}
		}
	}
	,__getFullMatrix: function(localMatrix) {
		return this.transform.__getFullMatrix(localMatrix);
	}
	,__getGraphics: function() {
		return null;
	}
	,__getInteractiveObjectStack: function(outStack) {
		var io = this;
		if(io != null) outStack.push(io);
		if(this.parent != null) this.parent.__getInteractiveObjectStack(outStack);
	}
	,__getMatrix: function() {
		return this.transform.get_matrix();
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null;
		var element = Snap.getElementByPoint(point.x,point.y);
		while(null != element) {
			var el = element.node;
			if(null != el.id && "" != el.id && this.get_stage().snapIdToDisplayObjects.exists(el.id)) {
				var obj = this.get_stage().snapIdToDisplayObjects.get(el.id);
				var p = obj;
				while(null != p) {
					if(this == p) return obj;
					p = p.parent;
				}
			}
			element = element.parent();
		}
		return null;
	}
	,__invalidateBounds: function() {
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.renderNextWake();
	}
	,__invalidateMatrix: function(local) {
		if(local == null) local = false;
		if(local) this.___renderFlags |= 4; else this.___renderFlags |= 8;
		this.renderNextWake();
	}
	,__isOnStage: function() {
		return openfl.Lib.__isOnStage(this.snap);
	}
	,__matrixOverridden: function() {
		this.__x = this.transform.get_matrix().tx;
		this.__y = this.transform.get_matrix().ty;
		this.___renderFlags |= 16;
		this.___renderFlags |= 4;
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.renderNextWake();
	}
	,__removeFromStage: function() {
		if(openfl.Lib.__isOnStage(this.snap)) {
			openfl.Lib.__removeSurface(this.snap);
			this.get_stage().snapIdToDisplayObjects.remove(this.___id);
			var evt = new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false);
			this.dispatchEvent(evt);
		}
		this.renderNextWake();
	}
	,__render: function(inMask,clipRect) {
		if(!this.__combinedVisible) return;
		var gfx = this.__getGraphics();
		if(gfx == null) return;
		if(null != this.get_mask()) this.get_mask().__render(inMask,clipRect);
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		if(gfx.__render(inMask,this.__filters,1,1)) {
			this.__applyFilters(this.snap);
			this.___renderFlags |= 32;
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		var fullAlpha;
		fullAlpha = (this.parent != null?this.parent.__combinedAlpha:1) * this.alpha;
		if(inMask != null) {
		} else {
			if((this.___renderFlags & 32) != 0) {
				var m = this.getSurfaceTransform();
				this.__setTransform(m);
				this.___renderFlags &= -33;
			}
			var el = this.snap.node;
			el.setAttribute("opacity",Std.string(this.alpha));
		}
		if(null != clipRect) this.updateClipRect(clipRect);
	}
	,updateClipRect: function(inRect) {
		var rect = this.getClipRect().node;
		if(rect.getAttribute("width") != (inRect.width == null?"null":"" + inRect.width) || rect.getAttribute("height") != (inRect.height == null?"null":"" + inRect.height)) {
			rect.setAttribute("width",inRect.width == null?"null":"" + inRect.width);
			rect.setAttribute("height",inRect.height == null?"null":"" + inRect.height);
		}
	}
	,getClipRect: function() {
		if(null == this.__clipRect) {
			var url = this.snap.attr("clip-path");
			if(null == url || "" == url || "none" == url) {
				var rect = openfl.Lib.get_snap().rect(0,0,this.get_width(),this.get_height(),0,0);
				this.snap.attr("clip-path",rect);
				this.__clipRect = rect;
			} else {
				var clipPath = Snap.select("#" + tools.Helper.getAnchorIdFromUrl(url));
				this.__clipRect = clipPath.select("rect");
			}
		}
		return this.__clipRect;
	}
	,__setDimensions: function() {
		if(this.scale9Grid != null) {
			this.__boundsRect.width *= this.__scaleX;
			this.__boundsRect.height *= this.__scaleY;
			this.__width = this.__boundsRect.width;
			this.__height = this.__boundsRect.height;
		} else {
			this.__width = this.__boundsRect.width * this.__scaleX;
			this.__height = this.__boundsRect.height * this.__scaleY;
		}
	}
	,__setFlag: function(mask) {
		this.___renderFlags |= mask;
	}
	,__setFlagToValue: function(mask,value) {
		if(value) this.___renderFlags |= mask; else this.___renderFlags &= ~mask;
	}
	,__setFullMatrix: function(inValue) {
		return this.transform.__setFullMatrix(inValue);
	}
	,__setMatrix: function(inValue) {
		this.transform._matrix.copy(inValue);
		return inValue;
	}
	,__testFlag: function(mask) {
		return (this.___renderFlags & mask) != 0;
	}
	,__validateMatrix: function() {
		var parentMatrixInvalid = (this.___renderFlags & 8) != 0 && this.parent != null;
		if((this.___renderFlags & 4) != 0 || parentMatrixInvalid) {
			if(parentMatrixInvalid) this.parent.__validateMatrix();
			var m = this.transform.get_matrix();
			if((this.___renderFlags & 16) != 0) this.___renderFlags &= -5;
			if((this.___renderFlags & 4) != 0) {
				m.identity();
				m.scale(this.__scaleX,this.__scaleY);
				var rad = this.__rotation * openfl.geom.Transform.DEG_TO_RAD;
				if(rad != 0.0) m.rotate(rad);
				m.translate(this.__x,this.__y);
				this.transform._matrix.copy(m);
				m;
			}
			var cm = this.transform.__getFullMatrix(null);
			var fm;
			if(this.parent == null) fm = m; else fm = this.parent.transform.__getFullMatrix(m);
			this._fullScaleX = fm._sx;
			this._fullScaleY = fm._sy;
			if(cm.a != fm.a || cm.b != fm.b || cm.c != fm.c || cm.d != fm.d || cm.tx != fm.tx || cm.ty != fm.ty) {
				this.transform.__setFullMatrix(fm);
				this.___renderFlags |= 32;
			}
			this.___renderFlags &= -29;
		}
	}
	,get__bottommostSurface: function() {
		return this.snap;
	}
	,get_filters: function() {
		if(this.__filters == null) return [];
		var result = new Array();
		var _g = 0;
		var _g1 = this.__filters;
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			result.push(filter.clone());
		}
		return result;
	}
	,get__boundsInvalid: function() {
		var gfx = this.__getGraphics();
		if(gfx == null) return (this.___renderFlags & 64) != 0; else return (this.___renderFlags & 64) != 0 || gfx.boundsDirty;
	}
	,set_filters: function(filters) {
		var oldFilterCount;
		if(this.__filters == null) oldFilterCount = 0; else oldFilterCount = this.__filters.length;
		if(filters == null) {
			this.__filters = null;
			if(oldFilterCount > 0) this.invalidateGraphics();
		} else {
			this.__filters = new Array();
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				this.__filters.push(filter.clone());
			}
			this.invalidateGraphics();
		}
		return filters;
	}
	,get_height: function() {
		if(this.get__boundsInvalid()) this.validateBounds();
		return this.__height;
	}
	,set_height: function(inValue) {
		if(this.get__boundsInvalid()) this.validateBounds();
		var h = this.__boundsRect.height;
		if(this.__scaleY * h != inValue) {
			if(h == 0) {
				this.__scaleY = 1;
				this.__invalidateMatrix(true);
				this.___renderFlags |= 64;
				if(this.parent != null) this.parent.___renderFlags |= 64;
				this.renderNextWake();
				h = this.__boundsRect.height;
			}
			if(h <= 0) return 0;
			this.__scaleY = inValue / h;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		this.renderNextWake();
		return inValue;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(inValue) {
		if(this.__mask != null) {
			this.__mask.__maskingObj = null;
			openfl.Lib.get_freeSnap().append(this.__mask.snap);
			var maskId = StringTools.replace(StringTools.replace(this.snap.attr("mask"),"url(",""),")","");
			if(maskId.indexOf("#") != -1) maskId = maskId.substring(maskId.indexOf("#") + 1,maskId.length - 1);
			var maskSnap = Snap.select("#" + maskId);
			if(null != maskSnap) maskSnap.remove();
		}
		this.__mask = inValue;
		if(this.__mask != null) this.__mask.__maskingObj = this;
		var el = this.snap.node;
		var snapMask = el.getAttribute("mask");
		if(null != this.get_mask() && (null == snapMask || "none" == snapMask)) {
			if(null != this.get_mask().snap) {
				if(!this.get_mask().__isOnStage()) openfl.Lib.get_current().addChild(this.get_mask());
				this.snap.attr({ mask : this.get_mask().snap});
			}
		} else if(null == this.get_mask()) {
			if(null != snapMask && "none" != snapMask) el.setAttribute("mask","none");
		}
		return this.__mask;
	}
	,get__matrixChainInvalid: function() {
		return (this.___renderFlags & 8) != 0;
	}
	,get__matrixInvalid: function() {
		return (this.___renderFlags & 4) != 0;
	}
	,get_mouseX: function() {
		return this.globalToLocal(new openfl.geom.Point(this.get_stage().get_mouseX(),0)).x;
	}
	,get_mouseY: function() {
		return this.globalToLocal(new openfl.geom.Point(0,this.get_stage().get_mouseY())).y;
	}
	,set___combinedVisible: function(inValue) {
		if(this.__combinedVisible != inValue) {
			this.__combinedVisible = inValue;
			this.setSurfaceVisible(inValue);
			this.renderNextWake();
		}
		return this.__combinedVisible;
	}
	,set_alpha: function(inValue) {
		this.alpha = inValue;
		this.renderNextWake();
		return inValue;
	}
	,set_blendMode: function(inValue) {
		this.blendMode = inValue;
		this.renderNextWake();
		return inValue;
	}
	,set_parent: function(inValue) {
		if(inValue == this.parent) return inValue;
		this.__invalidateMatrix();
		if(this.parent != null) {
			HxOverrides.remove(this.parent.__children,this);
			this.parent.__invalidateBounds();
		}
		if(inValue != null) {
			inValue.___renderFlags |= 64;
			if(inValue.parent != null) inValue.parent.___renderFlags |= 64;
			inValue.renderNextWake();
		}
		if(this.parent == null && inValue != null) {
			this.parent = inValue;
			var evt = new openfl.events.Event(openfl.events.Event.ADDED,true,false);
			this.dispatchEvent(evt);
		} else if(this.parent != null && inValue == null) {
			this.parent = inValue;
			var evt1 = new openfl.events.Event(openfl.events.Event.REMOVED,true,false);
			this.dispatchEvent(evt1);
		} else this.parent = inValue;
		return inValue;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(inValue) {
		if(this.__rotation != inValue) {
			this.__rotation = inValue;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		return inValue;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(inValue) {
		if(this.__scaleX != inValue) {
			this.__scaleX = inValue;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		return inValue;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(inValue) {
		if(this.__scaleY != inValue) {
			this.__scaleY = inValue;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		return inValue;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(inValue) {
		this.__scrollRect = inValue;
		this.renderNextWake();
		return inValue;
	}
	,get_stage: function() {
		var gfx = this.__getGraphics();
		if(gfx != null) return openfl.Lib.__getStage();
		return null;
	}
	,get__topmostSurface: function() {
		return this.snap;
	}
	,get__surface: function() {
		return this.get__topmostSurface();
	}
	,set_transform: function(inValue) {
		this.transform = inValue;
		this.__x = this.transform.get_matrix().tx;
		this.__y = this.transform.get_matrix().ty;
		this.__invalidateMatrix(true);
		return inValue;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(inValue) {
		this.set___combinedVisible(this.parent != null?this.parent.__combinedVisible && inValue:inValue);
		if(this.__visible != inValue) {
			this.__visible = inValue;
			this.setSurfaceVisible(inValue);
		}
		this.renderNextWake();
		return this.__visible;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(inValue) {
		if(this.__x != inValue) {
			this.__x = inValue;
			this.__invalidateMatrix(true);
			if(this.parent != null) this.parent.__invalidateBounds();
		}
		return inValue;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(inValue) {
		if(this.__y != inValue) {
			this.__y = inValue;
			this.__invalidateMatrix(true);
			if(this.parent != null) this.parent.__invalidateBounds();
		}
		return inValue;
	}
	,get_width: function() {
		if(this.get__boundsInvalid()) this.validateBounds();
		return this.__width;
	}
	,set_width: function(inValue) {
		if(this.get__boundsInvalid()) this.validateBounds();
		var w = this.__boundsRect.width;
		if(this.__scaleX * w != inValue) {
			if(w == 0) {
				this.__scaleX = 1;
				this.__invalidateMatrix(true);
				this.___renderFlags |= 64;
				if(this.parent != null) this.parent.___renderFlags |= 64;
				this.renderNextWake();
				w = this.__boundsRect.width;
			}
			if(w <= 0) return 0;
			this.__scaleX = inValue / w;
			this.__invalidateMatrix(true);
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		this.renderNextWake();
		return inValue;
	}
	,__getSrWindow: function() {
		return this._srWindow;
	}
	,__srUpdateDivs: function() {
	}
	,renderNextWake: function() {
		if(null != this.parent) this.parent.addToRenderList(this); else if(null != this.__maskingObj) this.__maskingObj.renderNextWake();
	}
	,__class__: openfl.display.DisplayObject
	,__properties__: {get__surface:"get__surface",get__topmostSurface:"get__topmostSurface",get__matrixInvalid:"get__matrixInvalid",get__matrixChainInvalid:"get__matrixChainInvalid",get__boundsInvalid:"get__boundsInvalid",get__bottommostSurface:"get__bottommostSurface",set___combinedVisible:"set___combinedVisible",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_stage:"get_stage",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_parent:"set_parent",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_blendMode:"set_blendMode",set_alpha:"set_alpha"}
});
openfl.display.InteractiveObject = function() {
	openfl.display.DisplayObject.call(this);
	this.tabEnabled = false;
	this.mouseEnabled = true;
	this.doubleClickEnabled = true;
	this.set_tabIndex(0);
};
$hxClasses["openfl.display.InteractiveObject"] = openfl.display.InteractiveObject;
openfl.display.InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl.display.InteractiveObject.__super__ = openfl.display.DisplayObject;
openfl.display.InteractiveObject.prototype = $extend(openfl.display.DisplayObject.prototype,{
	toString: function() {
		return "[InteractiveObject name=" + this.name + " id=" + this.___id + "]";
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.mouseEnabled) return null; else return openfl.display.DisplayObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(inIndex) {
		return this.__tabIndex = inIndex;
	}
	,__class__: openfl.display.InteractiveObject
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex"})
});
openfl.display.DisplayObjectContainer = function() {
	this.__children = new Array();
	this.renderList = new haxe.ds.ObjectMap();
	this.mouseChildren = true;
	this.tabChildren = true;
	openfl.display.InteractiveObject.call(this);
	this.__combinedAlpha = this.alpha;
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl.display.DisplayObjectContainer;
openfl.display.DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl.display.DisplayObjectContainer.__super__ = openfl.display.InteractiveObject;
openfl.display.DisplayObjectContainer.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	addChild: function(object) {
		if(object == null) throw "DisplayObjectContainer asked to add null child object";
		if(object == this) throw "Adding to self";
		this.__addedChildren = true;
		if(object.parent == this) {
			this.setChildIndex(object,this.__children.length - 1);
			return object;
		}
		object.set_parent(this);
		if(this.__isOnStage()) object.__addToStage(this);
		if(this.__children == null) this.__children = new Array();
		this.__children.push(object);
		this.addToRenderList(object);
		return object;
	}
	,addChildAt: function(object,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		this.__addedChildren = true;
		if(object.parent == this) {
			this.setChildIndex(object,index);
			return object;
		}
		if(index == this.__children.length) return this.addChild(object); else {
			if(this.__isOnStage()) object.__addToStage(this,this.__children[index]);
			this.__children.splice(index,0,object);
			object.set_parent(this);
		}
		this.addToRenderList(object);
		return object;
	}
	,contains: function(child) {
		return this.__contains(child);
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		throw "getChildAt : index out of bounds " + index + "/" + this.__children.length;
		return null;
	}
	,getChildByName: function(inName) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.name == inName) return child;
		}
		return null;
	}
	,getChildIndex: function(inChild) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == inChild) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var result = new Array();
		this.__getObjectsUnderPoint(point,result);
		return result;
	}
	,removeChild: function(inChild) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child == inChild) {
				HxOverrides.remove(this.__children,child);
				child.__removeFromStage();
				child.set_parent(null);
				return child;
			}
		}
		throw "removeChild : none found?";
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__removeChild(this.__children[index]);
		throw "removeChildAt(" + index + ") : none found?";
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new openfl.errors.RangeError("The supplied index is out of bounds.");
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index > this.__children.length) throw "Invalid index position " + index;
		var oldIndex = this.getChildIndex(child);
		if(oldIndex < 0) {
			var msg = "setChildIndex : object " + child.name + " not found.";
			if(child.parent == this) {
				var realindex = -1;
				var _g1 = 0;
				var _g = this.__children.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.__children[i] == child) {
						realindex = i;
						break;
					}
				}
				if(realindex != -1) msg += "Internal error: Real child index was " + (realindex == null?"null":"" + realindex); else msg += "Internal error: Child was not in __children array!";
			}
			throw msg;
		}
		if(index < oldIndex) {
			var i1 = oldIndex;
			while(i1 > index) {
				this.swapChildren(this.__children[i1],this.__children[i1 - 1]);
				i1--;
			}
		} else if(oldIndex < index) {
			var i2 = oldIndex;
			while(i2 < index) {
				this.swapChildren(this.__children[i2],this.__children[i2 + 1]);
				i2++;
			}
		}
	}
	,swapChildren: function(child1,child2) {
		var c1 = -1;
		var c2 = -1;
		var swap;
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child1) c1 = i; else if(this.__children[i] == child2) c2 = i;
		}
		if(c1 != -1 && c2 != -1) {
			swap = this.__children[c1];
			this.__children[c1] = this.__children[c2];
			this.__children[c2] = swap;
			swap = null;
			this.__swapSurface(c1,c2);
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,toString: function() {
		return "[DisplayObjectContainer name=" + this.name + " id=" + this.___id + "]";
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			openfl.display.InteractiveObject.prototype.validateBounds.call(this);
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var obj = _g1[_g];
				++_g;
				if(obj.get_visible()) {
					var r = obj.getBounds(this);
					if(r.width != 0 || r.height != 0) {
						if(this.__boundsRect.width == 0 && this.__boundsRect.height == 0) this.__boundsRect = r.clone(); else this.__boundsRect.extendBounds(r);
					}
				}
			}
			if(this.scale9Grid != null) {
				this.__boundsRect.width *= this.__scaleX;
				this.__boundsRect.height *= this.__scaleY;
				this.__width = this.__boundsRect.width;
				this.__height = this.__boundsRect.height;
			} else {
				this.__width = this.__boundsRect.width * this.__scaleX;
				this.__height = this.__boundsRect.height * this.__scaleY;
			}
		}
	}
	,__addToStage: function(newParent,beforeSibling) {
		openfl.display.InteractiveObject.prototype.__addToStage.call(this,newParent,beforeSibling);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(null != child && (child.__getGraphics() == null || !child.__isOnStage())) child.__addToStage(this);
		}
	}
	,__broadcast: function(event) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__broadcast(event);
		}
		this.dispatchEvent(event);
	}
	,__contains: function(child) {
		if(child == null) return false;
		if(this == child) return true;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c == child || c.__contains(child)) return true;
		}
		return false;
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null;
		var l = this.__children.length - 1;
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			var result = null;
			if(this.mouseEnabled) result = this.__children[l - i].__getObjectUnderPoint(point);
			if(result != null) if(this.mouseChildren) return result; else return this;
		}
		return openfl.display.InteractiveObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,__getObjectsUnderPoint: function(point,stack) {
		var l = this.__children.length - 1;
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			var result = this.__children[l - i].__getObjectUnderPoint(point);
			if(result != null) stack.push(result);
		}
	}
	,__invalidateMatrix: function(local) {
		if(local == null) local = false;
		if(!((this.___renderFlags & 8) != 0) && !((this.___renderFlags & 4) != 0)) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__invalidateMatrix();
			}
		}
		openfl.display.InteractiveObject.prototype.__invalidateMatrix.call(this,local);
	}
	,__removeChild: function(child) {
		HxOverrides.remove(this.__children,child);
		child.__removeFromStage();
		child.set_parent(null);
		return child;
	}
	,__removeFromStage: function() {
		openfl.display.InteractiveObject.prototype.__removeFromStage.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__removeFromStage();
		}
	}
	,__render: function(inMask,clipRect) {
		if(!this.__visible) return;
		if(this.__scrollRect != null) clipRect = this.__scrollRect;
		openfl.display.InteractiveObject.prototype.__render.call(this,inMask,clipRect);
		if(this.parent != null) this.__combinedAlpha = this.parent.__combinedAlpha * this.alpha; else this.__combinedAlpha = this.alpha;
		var $it0 = this.renderList.keys();
		while( $it0.hasNext() ) {
			var child = $it0.next();
			if(child.__visible) {
				if(clipRect != null) {
					if((child.___renderFlags & 4) != 0 || (child.___renderFlags & 8) != 0) child.__validateMatrix();
				}
				child.__render(inMask,clipRect);
			}
		}
		this.renderList = new haxe.ds.ObjectMap();
		if(this.__addedChildren) this.__addedChildren = false;
	}
	,__swapSurface: function(c1,c2) {
		if(this.__children[c1] == null) throw "Null element at index " + c1 + " length " + this.__children.length;
		if(this.__children[c2] == null) throw "Null element at index " + c2 + " length " + this.__children.length;
		var surface1 = this.__children[c1].snap;
		var surface2 = this.__children[c2].snap;
		if(surface1 != null && surface2 != null) openfl.Lib.__swapSurface(surface1,surface2);
	}
	,set___combinedVisible: function(inVal) {
		if(inVal != this.__combinedVisible) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.set___combinedVisible(child.get_visible() && inVal);
			}
		}
		return openfl.display.InteractiveObject.prototype.set___combinedVisible.call(this,inVal);
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,set_scrollRect: function(inValue) {
		inValue = openfl.display.InteractiveObject.prototype.set_scrollRect.call(this,inValue);
		return inValue;
	}
	,addToRenderList: function(o) {
		if(!(this.renderList.h.__keys__[o.__id__] != null)) {
			this.renderList.set(o,true);
			this.renderNextWake();
		}
	}
	,__class__: openfl.display.DisplayObjectContainer
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
openfl.display.Sprite = function() {
	openfl.display.DisplayObjectContainer.call(this);
	var graphicsSnap = ((function($this) {
		var $r;
		var _this = openfl.Lib.get_snap();
		var e123 = [];
		var me123 = _this;
		$r = me123.group.apply(me123, e123);
		return $r;
	}(this))).addClass("graphics");
	this.snap.append(graphicsSnap);
	this.__graphics = new openfl.display.Graphics(graphicsSnap);
	this.__graphics.displayObject = this;
	this.buttonMode = false;
};
$hxClasses["openfl.display.Sprite"] = openfl.display.Sprite;
openfl.display.Sprite.__name__ = ["openfl","display","Sprite"];
openfl.display.Sprite.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Sprite.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.__isOnStage()) this.get_stage().__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.__isOnStage()) {
			this.get_stage().__stopDrag(this);
			var l = this.parent.__children.length - 1;
			var obj = this.get_stage();
			var _g1 = 0;
			var _g = this.parent.__children.length;
			while(_g1 < _g) {
				var i = _g1++;
				var result = this.parent.__children[l - i].__getObjectUnderPoint(new openfl.geom.Point(this.get_stage().get_mouseX(),this.get_stage().get_mouseY()));
				if(result != null) obj = result;
			}
			if(obj != this) this.__dropTarget = obj; else this.__dropTarget = this.get_stage();
		}
	}
	,toString: function() {
		return "[Sprite name=" + this.name + " id=" + this.___id + "]";
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,get_dropTarget: function() {
		return this.__dropTarget;
	}
	,get_graphics: function() {
		return this.__graphics;
	}
	,set_useHandCursor: function(cursor) {
		if(cursor == this.useHandCursor) return cursor;
		if(this.__cursorCallbackOver != null) this.removeEventListener(openfl.events.MouseEvent.ROLL_OVER,this.__cursorCallbackOver);
		if(this.__cursorCallbackOut != null) this.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,this.__cursorCallbackOut);
		if(!cursor) openfl.Lib.__setCursor(openfl._Lib.CursorType.Default); else {
			this.__cursorCallbackOver = function(_) {
				openfl.Lib.__setCursor(openfl._Lib.CursorType.Pointer);
			};
			this.__cursorCallbackOut = function(_1) {
				openfl.Lib.__setCursor(openfl._Lib.CursorType.Default);
			};
			this.addEventListener(openfl.events.MouseEvent.ROLL_OVER,this.__cursorCallbackOver);
			this.addEventListener(openfl.events.MouseEvent.ROLL_OUT,this.__cursorCallbackOut);
		}
		this.useHandCursor = cursor;
		return cursor;
	}
	,__class__: openfl.display.Sprite
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{set_useHandCursor:"set_useHandCursor",get_graphics:"get_graphics",get_dropTarget:"get_dropTarget"})
});
var Main = function() {
	openfl.display.Sprite.call(this);
	org.aswing.AsWingManager.initAsStandard(openfl.Lib.get_current());
	openfl.Lib.get_current().addChild(new ComSet());
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = openfl.display.Sprite;
Main.prototype = $extend(openfl.display.Sprite.prototype,{
	__class__: Main
});
var DocumentClass = function() {
	Main.call(this);
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	get_stage: function() {
		return openfl.Lib.get_current().get_stage();
	}
	,__class__: DocumentClass
});
var ComSet = function() {
	openfl.display.Sprite.call(this);
	ComSet.WINDOW = new org.aswing.JWindow(this);
	this.tabpane = new org.aswing.JTabbedPane();
	this.tabpane.append(new componetset.Windows());
	this.tabpane.append(new componetset.Buttons());
	this.tabpane.append(new componetset.Scrolls());
	this.tabpane.append(new componetset.Containers());
	this.tabpane.append(new componetset.HeavyComs());
	this.tabpane.append(new componetset.Menus());
	this.tabpane.append(new componetset.Decorators());
	ComSet.WINDOW.setBackgroundDecorator(new org.aswing.SolidBackground(org.aswing.UIManager.getColor("window")));
	ComSet.WINDOW.setBorder(new org.aswing.border.EmptyBorder(null,new org.aswing.Insets(4,4,4,4)));
	ComSet.WINDOW.setContentPane(this.tabpane);
	ComSet.WINDOW.setSizeWH(openfl.Lib.get_current().get_stage().get_stageWidth(),openfl.Lib.get_current().get_stage().get_stageHeight());
	ComSet.WINDOW.show();
	openfl.Lib.get_current().get_stage().addEventListener(openfl.events.Event.RESIZE,function(e) {
		ComSet.WINDOW.setSizeWH(openfl.Lib.get_current().get_stage().get_stageWidth(),openfl.Lib.get_current().get_stage().get_stageHeight());
	});
};
$hxClasses["ComSet"] = ComSet;
ComSet.__name__ = ["ComSet"];
ComSet.__super__ = openfl.display.Sprite;
ComSet.prototype = $extend(openfl.display.Sprite.prototype,{
	__class__: ComSet
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw "No string matched";
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw "Invalid date format : " + s;
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = new Array();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
Lambda.map = function(it,f) {
	var l = new List();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		l.add(f(x));
	}
	return l;
};
Lambda.iter = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		f(x);
	}
};
Lambda.fold = function(it,f,first) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		first = f(x,first);
	}
	return first;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) return null; else return this.h[0];
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,__class__: List
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 9;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 3;
	this.outline = new openfl.display.Sprite();
	this.outline.get_graphics().lineStyle(1,color,0.15,true);
	this.outline.get_graphics().drawRoundRect(0,0,width,height,padding * 2,padding * 2);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl.display.Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl.display.Sprite;
NMEPreloader.prototype = $extend(openfl.display.Sprite.prototype,{
	getBackgroundColor: function() {
		return 16777215;
	}
	,getHeight: function() {
		var height = 0;
		if(height > 0) return height; else return openfl.Lib.get_current().get_stage().get_stageHeight();
	}
	,getWidth: function() {
		var width = 0;
		if(width > 0) return width; else return openfl.Lib.get_current().get_stage().get_stageWidth();
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded == 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
var org = {};
org.aswing = {};
org.aswing.Decorator = function() { };
$hxClasses["org.aswing.Decorator"] = org.aswing.Decorator;
org.aswing.Decorator.__name__ = ["org","aswing","Decorator"];
org.aswing.Decorator.prototype = {
	__class__: org.aswing.Decorator
};
org.aswing.Icon = function() { };
$hxClasses["org.aswing.Icon"] = org.aswing.Icon;
org.aswing.Icon.__name__ = ["org","aswing","Icon"];
org.aswing.Icon.__interfaces__ = [org.aswing.Decorator];
org.aswing.Icon.prototype = {
	__class__: org.aswing.Icon
};
var cases = {};
cases.CircleIcon = function(color,width,height) {
	this.shape = new openfl.display.Sprite();
	this.color = color;
	this.width = width;
	this.height = height;
};
$hxClasses["cases.CircleIcon"] = cases.CircleIcon;
cases.CircleIcon.__name__ = ["cases","CircleIcon"];
cases.CircleIcon.__interfaces__ = [org.aswing.Icon];
cases.CircleIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		g.fillEllipse(new org.aswing.graphics.SolidBrush(this.color),x,y,this.width,this.height);
	}
	,getIconHeight: function(com) {
		return this.height;
	}
	,getIconWidth: function(com) {
		return this.width;
	}
	,getDisplay: function(com) {
		return this.shape;
	}
	,__class__: cases.CircleIcon
};
cases.ColorDotIcon = function(size,color) {
	if(size == null) size = 20;
	this.shape = new openfl.display.Sprite();
	this.size = size;
	if(color == null) color = org.aswing.ASColor.RED;
	this.color = color;
};
$hxClasses["cases.ColorDotIcon"] = cases.ColorDotIcon;
cases.ColorDotIcon.__name__ = ["cases","ColorDotIcon"];
cases.ColorDotIcon.__interfaces__ = [org.aswing.Icon];
cases.ColorDotIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		g.fillCircle(new org.aswing.graphics.SolidBrush(this.color),x + this.size / 2,y + this.size / 2,this.size / 2);
	}
	,getIconHeight: function(com) {
		return this.size;
	}
	,getIconWidth: function(com) {
		return this.size;
	}
	,getDisplay: function(com) {
		return this.shape;
	}
	,__class__: cases.ColorDotIcon
};
cases.ColorIcon = function(color,width,height) {
	this.shape = new openfl.display.Shape();
	this.color = color;
	this.width = width;
	this.height = height;
};
$hxClasses["cases.ColorIcon"] = cases.ColorIcon;
cases.ColorIcon.__name__ = ["cases","ColorIcon"];
cases.ColorIcon.__interfaces__ = [org.aswing.Icon];
cases.ColorIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		g.fillRectangle(new org.aswing.graphics.SolidBrush(this.color),x,y,this.width,this.height);
	}
	,getIconHeight: function(com) {
		return this.height;
	}
	,getIconWidth: function(com) {
		return this.width;
	}
	,getDisplay: function(com) {
		return this.shape;
	}
	,__class__: cases.ColorIcon
};
org.aswing.AWSprite = function() {
	this.clipMasked = false;
	openfl.display.Sprite.call(this);
	this.usingBitmap = false;
	this.clipMaskRect = new org.aswing.geom.IntRectangle();
	this.setClipMasked(this.clipMasked);
	this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__awSpriteMouseDownListener));
	this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__awStageRemovedFrom));
};
$hxClasses["org.aswing.AWSprite"] = org.aswing.AWSprite;
org.aswing.AWSprite.__name__ = ["org","aswing","AWSprite"];
org.aswing.AWSprite.__super__ = openfl.display.Sprite;
org.aswing.AWSprite.prototype = $extend(openfl.display.Sprite.prototype,{
	d_addChild: function(child) {
		return this.addChild(child);
	}
	,d_addChildAt: function(child,index) {
		return this.addChildAt(child,index);
	}
	,d_removeChild: function(child) {
		return this.removeChild(child);
	}
	,isChild: function(child) {
		return this.contains(child);
	}
	,d_removeChildAt: function(index) {
		return this.removeChildAt(index);
	}
	,d_getChildAt: function(index) {
		return this.getChildAt(index);
	}
	,d_getChildByName: function(name) {
		return this.getChildByName(name);
	}
	,d_getChildIndex: function(child) {
		return this.getChildIndex(child);
	}
	,containsChild: function(child) {
		return this.contains(child);
	}
	,d_setChildIndex: function(child,index) {
		this.setChildIndex(child,index);
	}
	,d_swapChildren: function(child1,child2) {
		this.swapChildren(child1,child2);
	}
	,d_swapChildrenAt: function(index1,index2) {
		this.swapChildrenAt(index1,index2);
	}
	,get_d_numChildren: function() {
		return this.__children.length;
	}
	,getHighestIndexUnderForeground: function() {
		if(this.foregroundChild == null) return this.__children.length; else return this.__children.length - 1;
	}
	,getLowestIndexAboveBackground: function() {
		if(this.backgroundChild == null) return 0; else return 1;
	}
	,bringToTop: function(child) {
		var index = this.__children.length - 1;
		if(this.foregroundChild != null) {
			if(this.foregroundChild != child) index = this.__children.length - 2;
		}
		this.setChildIndex(child,index);
	}
	,bringToBottom: function(child) {
		var index = 0;
		if(this.backgroundChild != null) {
			if(this.backgroundChild != child) index = 1;
		}
		this.setChildIndex(child,index);
	}
	,setChildIndex: function(child,index) {
		if(child == null || !this.contains(child)) {
			console.log("setChildIndex : object DisplayObject " + child.toString() + " not found.");
			return;
		}
		openfl.display.Sprite.prototype.setChildIndex.call(this,child,index);
	}
	,setBackgroundChild: function(child) {
		if(child != this.backgroundChild) {
			if(this.backgroundChild != null) this.removeChild(this.backgroundChild);
			this.backgroundChild = child;
			if(child != null) this.addChildAt(child,0);
		}
	}
	,getBackgroundChild: function() {
		return this.backgroundChild;
	}
	,setForegroundChild: function(child) {
		if(child != this.foregroundChild) {
			if(this.foregroundChild != null) this.removeChild(this.foregroundChild);
			this.foregroundChild = child;
			if(child != null) this.addChild(child);
		}
	}
	,getForegroundChild: function() {
		return this.foregroundChild;
	}
	,setClipMasked: function(m) {
		if(m != this.clipMasked) {
			this.clipMasked = m;
			this.setUsingBitmap(this.cacheAsBitmap && this.clipMasked);
			if(this.clipMasked) {
				this.checkCreateMaskShape();
				if(this.maskShape.parent != this) {
				}
				this.setClipMaskRect(this.clipMaskRect);
			} else {
				if(this.maskShape != null && this.maskShape.parent == this) {
				}
				this.set_scrollRect(null);
			}
		}
	}
	,setClipMaskRect: function(b) {
		if(this.maskShape != null) {
			this.maskShape.get_graphics().clear();
			this.maskShape.get_graphics().beginFill(16777215);
			this.maskShape.get_graphics().drawRect(b.x,b.y,b.width,b.height);
			this.maskShape.get_graphics().endFill();
		}
		this.set_scrollRect(new openfl.geom.Rectangle(b.x,b.y,b.width,b.height));
		this.clipMaskRect.setRect(b);
	}
	,setUsingBitmap: function(b) {
		if(this.usingBitmap != b) {
			this.usingBitmap = b;
			this.usingBitmapChanged();
		}
	}
	,usingBitmapChanged: function() {
		this.cacheAsBitmap = this.usingBitmap;
	}
	,checkCreateMaskShape: function() {
		if(this.maskShape == null) this.maskShape = new openfl.display.Shape();
	}
	,isClipMasked: function() {
		return this.clipMasked;
	}
	,__awSpriteMouseDownListener: function(e) {
		this.pressedTarget = org.aswing.AsWingUtils["as"](e.target,openfl.display.DisplayObject);
		this.get_stage().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__awStageMouseUpListener),false,0,false);
	}
	,__awStageRemovedFrom: function(e) {
		this.pressedTarget = null;
		if(this.get_stage() != null) this.get_stage().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__awStageMouseUpListener));
	}
	,__awStageMouseUpListener: function(e) {
		if(this.get_stage() != null) this.get_stage().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__awStageMouseUpListener));
		var isOutSide = false;
		var target = org.aswing.AsWingUtils["as"](e.target,openfl.display.DisplayObject);
		if(!(this == target || org.aswing.AsWingUtils.isAncestorDisplayObject(this,target))) isOutSide = true;
		this.dispatchEvent(new org.aswing.event.ReleaseEvent("release",this.pressedTarget,isOutSide,e));
		if(isOutSide) this.dispatchEvent(new org.aswing.event.ReleaseEvent("releaseOutSide",this.pressedTarget,isOutSide,e));
		this.pressedTarget = null;
	}
	,toString: function() {
		var p = this;
		var str = p.name;
		while(p.parent != null) {
			var name;
			if(p.parent == p.get_stage()) name = "Stage"; else name = p.parent.name;
			p = p.parent;
			str = name + "." + str;
		}
		return str;
	}
	,__class__: org.aswing.AWSprite
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_d_numChildren:"get_d_numChildren"})
});
org.aswing.ASColor = function(rgb,alpha) {
	if(alpha == null) alpha = 1;
	if(rgb == null) rgb = 0;
	this.rgb = rgb;
	this.alpha = Math.min(1,Math.max(0,alpha));
	this.hlsCounted = false;
};
$hxClasses["org.aswing.ASColor"] = org.aswing.ASColor;
org.aswing.ASColor.__name__ = ["org","aswing","ASColor"];
org.aswing.ASColor.getASColor = function(r,g,b,a) {
	if(a == null) a = 1;
	return new org.aswing.ASColor(org.aswing.ASColor.getRGBWith(r,g,b),a);
};
org.aswing.ASColor.getWithARGB = function(argb) {
	var rgb = argb & 16777215;
	var alpha = (argb >>> 24) / 255;
	return new org.aswing.ASColor(rgb,alpha);
};
org.aswing.ASColor.getASColorWithHLS = function(h,l,s,a) {
	if(a == null) a = 1;
	var c = new org.aswing.ASColor(0,a);
	c.hlsCounted = true;
	c.hue = Math.max(0,Math.min(1,h));
	c.luminance = Math.max(0,Math.min(1,l));
	c.saturation = Math.max(0,Math.min(1,s));
	var H = c.hue;
	var L = c.luminance;
	var S = c.saturation;
	var p1;
	var p2;
	var r;
	var g;
	var b;
	p1 = p2 = 0;
	H = H * 360;
	if(L < 0.5) p2 = L * (1 + S); else p2 = L + S - L * S;
	p1 = 2 * L - p2;
	if(S == 0) {
		r = L;
		g = L;
		b = L;
	} else {
		r = org.aswing.ASColor.hlsValue(p1,p2,H + 120);
		g = org.aswing.ASColor.hlsValue(p1,p2,H);
		b = org.aswing.ASColor.hlsValue(p1,p2,H - 120);
	}
	r *= 255;
	g *= 255;
	b *= 255;
	var color_n = ((r | 0) << 16) + ((g | 0) << 8) + b;
	var color_rgb = Std["int"](Math.max(0,Math.min(16777215,Math.round(color_n))));
	c.rgb = color_rgb;
	return c;
};
org.aswing.ASColor.hlsValue = function(p1,p2,h) {
	if(h > 360) h = h - 360;
	if(h < 0) h = h + 360;
	if(h < 60) return p1 + (p2 - p1) * h / 60;
	if(h < 180) return p2;
	if(h < 240) return p1 + (p2 - p1) * (240 - h) / 60;
	return p1;
};
org.aswing.ASColor.getRGBWith = function(rr,gg,bb) {
	var r = rr;
	var g = gg;
	var b = bb;
	if(r > 255) r = 255;
	if(g > 255) g = 255;
	if(b > 255) b = 255;
	var color_n = (r << 16) + (g << 8) + b;
	return color_n;
};
org.aswing.ASColor.prototype = {
	getAlpha: function() {
		return this.alpha;
	}
	,getRGB: function() {
		return this.rgb;
	}
	,getARGB: function() {
		var a = this.alpha * 255 | 0;
		return this.rgb | a << 24;
	}
	,getRed: function() {
		return (this.rgb & 16711680) >> 16;
	}
	,getGreen: function() {
		return (this.rgb & 65280) >> 8;
	}
	,getBlue: function() {
		return this.rgb & 255;
	}
	,getHue: function() {
		this.countHLS();
		return this.hue;
	}
	,getLuminance: function() {
		this.countHLS();
		return this.luminance;
	}
	,getSaturation: function() {
		this.countHLS();
		return this.saturation;
	}
	,countHLS: function() {
		if(this.hlsCounted) return;
		this.hlsCounted = true;
		var rr = this.getRed() / 255.0;
		var gg = this.getGreen() / 255.0;
		var bb = this.getBlue() / 255.0;
		var rnorm;
		var gnorm;
		var bnorm;
		var minval;
		var maxval;
		var msum;
		var mdiff;
		var r;
		var g;
		var b;
		r = g = b = 0;
		if(rr > 0) r = rr;
		if(r > 1) r = 1;
		if(gg > 0) g = gg;
		if(g > 1) g = 1;
		if(bb > 0) b = bb;
		if(b > 1) b = 1;
		minval = r;
		if(g < minval) minval = g;
		if(b < minval) minval = b;
		maxval = r;
		if(g > maxval) maxval = g;
		if(b > maxval) maxval = b;
		rnorm = gnorm = bnorm = 0;
		mdiff = maxval - minval;
		msum = maxval + minval;
		this.luminance = 0.5 * msum;
		if(maxval != minval) {
			rnorm = (maxval - r) / mdiff;
			gnorm = (maxval - g) / mdiff;
			bnorm = (maxval - b) / mdiff;
		} else {
			this.saturation = this.hue = 0;
			return;
		}
		if(this.luminance < 0.5) this.saturation = mdiff / msum; else this.saturation = mdiff / (2.0 - msum);
		if(r == maxval) this.hue = 60.0 * (6.0 + bnorm - gnorm); else if(g == maxval) this.hue = 60.0 * (2.0 + rnorm - bnorm); else this.hue = 60.0 * (4.0 + gnorm - rnorm);
		if(this.hue > 360) this.hue = this.hue - 360;
		this.hue /= 360;
	}
	,changeAlpha: function(newAlpha) {
		return new org.aswing.ASColor(this.getRGB(),newAlpha);
	}
	,changeHue: function(newHue) {
		return org.aswing.ASColor.getASColorWithHLS(newHue,this.getLuminance(),this.getSaturation(),this.getAlpha());
	}
	,changeLuminance: function(newLuminance) {
		return org.aswing.ASColor.getASColorWithHLS(this.getHue(),newLuminance,this.getSaturation(),this.getAlpha());
	}
	,changeSaturation: function(newSaturation) {
		return org.aswing.ASColor.getASColorWithHLS(this.getHue(),this.getLuminance(),newSaturation,this.getAlpha());
	}
	,scaleHLS: function(hScale,lScale,sScale) {
		var h = this.getHue() * hScale;
		var l = this.getLuminance() * lScale;
		var s = this.getSaturation() * sScale;
		return org.aswing.ASColor.getASColorWithHLS(h,l,s,this.alpha);
	}
	,offsetHLS: function(hOffset,lOffset,sOffset) {
		var h = this.getHue() + hOffset;
		if(h > 1) h -= 1;
		if(h < 0) h += 1;
		var l = this.getLuminance() + lOffset;
		var s = this.getSaturation() + sOffset;
		return org.aswing.ASColor.getASColorWithHLS(h,l,s,this.alpha);
	}
	,darker: function(factor) {
		if(factor == null) factor = 0.7;
		var r = this.getRed();
		var g = this.getGreen();
		var b = this.getBlue();
		return org.aswing.ASColor.getASColor(r * factor | 0,g * factor | 0,b * factor | 0,this.alpha);
	}
	,brighter: function(factor) {
		if(factor == null) factor = 0.7;
		var r = this.getRed();
		var g = this.getGreen();
		var b = this.getBlue();
		var i = Math.floor(1.0 / (1.0 - factor));
		if(r == 0 && g == 0 && b == 0) return org.aswing.ASColor.getASColor(i | 0,i | 0,i | 0,this.alpha);
		if(r > 0 && r < i) r = i;
		if(g > 0 && g < i) g = i;
		if(b > 0 && b < i) b = i;
		return org.aswing.ASColor.getASColor(r / factor | 0,g / factor | 0,b / factor | 0,this.alpha);
	}
	,toString: function() {
		return "ASColor(rgb:" + StringTools.hex(this.rgb) + ", alpha:" + this.alpha + ")";
	}
	,equals: function(o) {
		var c;
		if(js.Boot.__instanceof(o,org.aswing.ASColor)) c = o; else c = null;
		if(c != null) return c.alpha == this.alpha && c.rgb == this.rgb; else return false;
	}
	,clone: function() {
		return new org.aswing.ASColor(this.getRGB(),this.getAlpha());
	}
	,__class__: org.aswing.ASColor
};
org.aswing.graphics = {};
org.aswing.graphics.IBrush = function() { };
$hxClasses["org.aswing.graphics.IBrush"] = org.aswing.graphics.IBrush;
org.aswing.graphics.IBrush.__name__ = ["org","aswing","graphics","IBrush"];
org.aswing.graphics.IBrush.prototype = {
	__class__: org.aswing.graphics.IBrush
};
org.aswing.graphics.SolidBrush = function(color) {
	this.color = color;
};
$hxClasses["org.aswing.graphics.SolidBrush"] = org.aswing.graphics.SolidBrush;
org.aswing.graphics.SolidBrush.__name__ = ["org","aswing","graphics","SolidBrush"];
org.aswing.graphics.SolidBrush.__interfaces__ = [org.aswing.graphics.IBrush];
org.aswing.graphics.SolidBrush.prototype = {
	getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		this.color = color;
	}
	,beginFill: function(target) {
		target.beginFill(this.color.getRGB(),this.color.getAlpha());
	}
	,endFill: function(target) {
		target.endFill();
	}
	,__class__: org.aswing.graphics.SolidBrush
};
org.aswing.Component = function() {
	this.bounds = new org.aswing.geom.IntRectangle();
	org.aswing.Component.AWML_INDEX++;
	this.awmlIndex = org.aswing.Component.AWML_INDEX;
	this.drawTransparentTrigger = true;
	org.aswing.AWSprite.call(this);
	this.setName("Component");
	this.ui = null;
	this.clientProperty = null;
	this.alignmentX = 0;
	this.alignmentY = 0;
	this.opaque = false;
	this.opaqueSet = false;
	this.valid = false;
	this.enabled = true;
	this.focusable = false;
	this.focusableSet = false;
	this.cachePreferSizes = true;
	this.fontValidated = false;
	this.readyToPaint = false;
	this.toolTipText = null;
	this.uiElement = false;
	this.border = org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE;
	this.backgroundDecorator = org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE;
	this.foregroundDecorator = org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE;
	this.font = org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_FONT;
	this.background = org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_BACKGROUND_COLOR;
	this.foreground = org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_FOREGROUND_COLOR;
	this.mideground = org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_MIDEGROUND_COLOR;
	this.styleTune = org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_STYLE_TUNE;
	this.addEventListener(openfl.events.FocusEvent.FOCUS_IN,$bind(this,this.__focusIn));
	this.addEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.__focusOut));
	this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__mouseDown));
	this.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__mouseClick));
	this.addEventListener(openfl.events.Event.ADDED,$bind(this,this.__componentAdded));
};
$hxClasses["org.aswing.Component"] = org.aswing.Component;
org.aswing.Component.__name__ = ["org","aswing","Component"];
org.aswing.Component.__super__ = org.aswing.AWSprite;
org.aswing.Component.prototype = $extend(org.aswing.AWSprite.prototype,{
	__componentAdded: function(e) {
		if(this.isUIElement()) {
			var dis = org.aswing.AsWingUtils["as"](e.target,openfl.display.DisplayObject);
			if(dis != null) {
				if(dis != this) {
					if(org.aswing.AsWingUtils.getOwnerComponent(dis.parent) == this) this.makeAllTobeUIElement(org.aswing.AsWingUtils["as"](e.target,openfl.display.DisplayObject));
				}
			}
		}
	}
	,makeAllTobeUIElement: function(dis) {
		if(dis == null) return;
		if(js.Boot.__instanceof(dis,org.aswing.Component)) {
			var c;
			if(js.Boot.__instanceof(dis,org.aswing.Component)) c = dis; else c = null;
			c.uiElement = true;
		}
		if(js.Boot.__instanceof(dis,openfl.display.DisplayObjectContainer)) {
			var con;
			if(js.Boot.__instanceof(dis,openfl.display.DisplayObjectContainer)) con = dis; else con = null;
			var _g1 = 0;
			var _g = con.__children.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.makeAllTobeUIElement(con.getChildAt(i));
			}
		}
	}
	,setAwmlID: function(id) {
		this.awmlID = id;
	}
	,getAwmlID: function() {
		return this.awmlID;
	}
	,setAwmlNamespace: function(theNamespace) {
		this.awmlNamespace = theNamespace;
	}
	,getAwmlNamespace: function() {
		return this.awmlNamespace;
	}
	,setAwmlIndex: function(index) {
		this.awmlIndex = index;
	}
	,getAwmlIndex: function() {
		return this.awmlIndex;
	}
	,getUIClassID: function() {
		return "ComponentUI";
	}
	,setName: function(name) {
		this.name = name;
	}
	,getName: function() {
		return this.name;
	}
	,updateUI: function() {
	}
	,isUIElement: function() {
		return this.uiElement;
	}
	,setUIElement: function(b) {
		if(this.uiElement != b) {
			this.uiElement = b;
			if(b) this.makeAllTobeUIElement(this);
		}
	}
	,getDefaultBasicUIClass: function() {
		return null;
	}
	,setUI: function(newUI) {
		if(this.ui != null) this.ui.uninstallUI(this);
		this.ui = newUI;
		if(this.ui != null) this.ui.installUI(this);
		this.revalidate();
		this.repaint();
	}
	,getUI: function() {
		return this.ui;
	}
	,setBorder: function(b) {
		if(b != this.border) {
			if(this.border != null && this.border.getDisplay(this) != null) this.removeChild(this.border.getDisplay(this));
			this.border = b;
			if(this.border != null && this.border.getDisplay(this) != null) this.addChildAt(this.border.getDisplay(this),this.getLowestIndexAboveBackground());
			this.repaint();
			this.revalidate();
		}
	}
	,getBorder: function() {
		return this.border;
	}
	,getInsets: function() {
		if(this.border == null) return new org.aswing.Insets(); else return this.border.getBorderInsets(this,this.getSize().getBounds());
	}
	,setResizerMargin: function(m) {
		if(this.resizerMargin != m) {
			this.resizerMargin = m;
			this.revalidate();
			this.repaint();
		}
	}
	,getResizerMargin: function() {
		var m = this.resizerMargin;
		if(m == null) return new org.aswing.plaf.InsetsUIResource(); else if(js.Boot.__instanceof(m,org.aswing.plaf.UIResource)) return new org.aswing.plaf.InsetsUIResource(m.top,m.left,m.bottom,m.right); else return new org.aswing.Insets(m.top,m.left,m.bottom,m.right);
	}
	,setBackgroundDecorator: function(bg) {
		if(bg != this.backgroundDecorator) {
			var old = this.backgroundDecorator;
			this.backgroundDecorator = bg;
			if(bg != null) this.setBackgroundChild(bg.getDisplay(this)); else this.setBackgroundChild(null);
			this.dispatchEvent(new org.aswing.event.PropertyChangeEvent("backgroundDecorator",old,bg));
		}
	}
	,getBackgroundDecorator: function() {
		return this.backgroundDecorator;
	}
	,setForegroundDecorator: function(fg) {
		if(fg != this.foregroundDecorator) {
			var old = this.backgroundDecorator;
			this.foregroundDecorator = fg;
			if(fg != null) this.setForegroundChild(fg.getDisplay(this)); else this.setForegroundChild(null);
			this.dispatchEvent(new org.aswing.event.PropertyChangeEvent("foregroundDecorator",old,fg));
		}
	}
	,getForegroundDecorator: function() {
		return this.foregroundDecorator;
	}
	,set_d_visible: function(value) {
		this.set_visible(value);
		return value;
	}
	,get_d_visible: function() {
		return this.get_visible();
	}
	,setVisible: function(v) {
		if(v != this.get_d_visible()) {
			this.set_d_visible(v);
			if(v) this.dispatchEvent(new org.aswing.event.AWEvent("shown",false,false)); else this.dispatchEvent(new org.aswing.event.AWEvent("hidden",false,false));
			if(v) this.repaint();
			this.revalidate();
		}
	}
	,isVisible: function() {
		return this.get_visible();
	}
	,isOnStage: function() {
		return this.get_stage() != null;
	}
	,isShowing: function() {
		if(this.isOnStage() && this.isVisible()) {
			if(this.parent == this.get_stage()) return true; else if(this.getParent() != null) return this.getParent().isShowing(); else return org.aswing.AsWingUtils.isDisplayObjectShowing(this.parent);
		}
		return false;
	}
	,setFont: function(newFont) {
		if(this.font != newFont) {
			this.font = newFont;
			this.setFontValidated(false);
			this.repaint();
			this.revalidate();
		}
	}
	,isFontValidated: function() {
		return this.fontValidated;
	}
	,setFontValidated: function(b) {
		this.fontValidated = b;
	}
	,getFont: function() {
		if(this.font != null && this.font != org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_FONT) return this.font; else if(this.getStyleProxy() != null) return this.getStyleProxy().getFont(); else return org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_FONT;
	}
	,setBackground: function(c) {
		if(this.background != c) {
			this.background = c;
			this.repaint();
		}
	}
	,getBackground: function() {
		if(this.background != null && this.background != org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR) return this.background; else if(this.getStyleProxy() != null) return this.getStyleProxy().getBackground(); else return org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR;
	}
	,setForeground: function(c) {
		if(this.foreground != c) {
			this.foreground = c;
			this.repaint();
		}
	}
	,getForeground: function() {
		if(this.foreground != null && this.foreground != org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR) return this.foreground; else if(this.getStyleProxy() != null) return this.getStyleProxy().getForeground(); else return org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR;
	}
	,setMideground: function(c) {
		if(this.mideground != c) {
			this.mideground = c;
			this.repaint();
		}
	}
	,getMideground: function() {
		if(this.mideground != null && this.mideground != org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR) return this.mideground; else if(this.getStyleProxy() != null) return this.getStyleProxy().getMideground(); else return org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR;
	}
	,setStyleTune: function(c) {
		if(this.styleTune != c) {
			this.styleTune = c;
			this.repaint();
		}
	}
	,getStyleTune: function() {
		if(this.styleTune != null && this.styleTune != org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_STYLE_TUNE) return this.styleTune; else if(this.getStyleProxy() != null) return this.getStyleProxy().getStyleTune(); else return org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_STYLE_TUNE;
	}
	,setStyleProxy: function(proxy) {
		this.styleProxy = proxy;
	}
	,getStyleProxy: function() {
		if(this.styleProxy != null) return this.styleProxy; else if(this.getParent() != null) return this.getParent(); else if(js.Boot.__instanceof(this.parent,org.aswing.Component)) return org.aswing.AsWingUtils["as"](this.parent,org.aswing.Component); else return null;
	}
	,setOpaque: function(b) {
		this.setOpaqueSet(true);
		if(this.opaque != b) {
			this.opaque = b;
			this.repaint();
		}
	}
	,isOpaque: function() {
		return this.opaque;
	}
	,isOpaqueSet: function() {
		return this.opaqueSet;
	}
	,setOpaqueSet: function(b) {
		this.opaqueSet = b;
	}
	,setAlpha: function(alpha) {
		this.set_alpha(alpha);
	}
	,getAlpha: function() {
		return this.alpha;
	}
	,getMousePosition: function() {
		return new org.aswing.geom.IntPoint(Std["int"](this.get_mouseX()),Std["int"](this.get_mouseY()));
	}
	,getPaintBounds: function() {
		return this.getInsets().getInsideBounds(this.getPaintBoundsInRoot());
	}
	,setComBounds: function(b) {
		this.setLocationXY(b.x,b.y);
		this.setSizeWH(b.width,b.height);
	}
	,setComBoundsXYWH: function(x,y,w,h) {
		this.setLocationXY(x,y);
		this.setSizeWH(w,h);
	}
	,getComBounds: function(rv) {
		if(rv != null) {
			rv.setRect(this.bounds);
			return rv;
		} else return new org.aswing.geom.IntRectangle(this.bounds.x,this.bounds.y,this.bounds.width,this.bounds.height);
	}
	,setLocation: function(newPos) {
		var oldPos = this.bounds.getLocation();
		if(!newPos.equals(oldPos)) {
			this.bounds.setLocation(newPos);
			this.locate();
			this.dispatchEvent(new org.aswing.event.MovedEvent(oldPos,newPos));
		}
	}
	,setLocationXY: function(x,y) {
		this.setLocation(new org.aswing.geom.IntPoint(x,y));
	}
	,setGlobalLocation: function(gp) {
		var newPos = this.parent.globalToLocal(new openfl.geom.Point(gp.x,gp.y));
		this.setLocationXY(newPos.x | 0,newPos.y | 0);
	}
	,setGlobalLocationXY: function(x,y) {
		this.setGlobalLocation(new org.aswing.geom.IntPoint(x,y));
	}
	,getLocation: function(rv) {
		if(rv != null) {
			rv.setLocationXY(this.bounds.x,this.bounds.y);
			return rv;
		} else return new org.aswing.geom.IntPoint(this.bounds.x,this.bounds.y);
	}
	,getGlobalLocation: function(rv) {
		var gp = this.localToGlobal(new openfl.geom.Point(0,0));
		if(rv != null) {
			rv.setLocationXY(gp.x | 0,gp.y | 0);
			return rv;
		} else return new org.aswing.geom.IntPoint(gp.x | 0,gp.y | 0);
	}
	,globalToComponent: function(p) {
		var np = new openfl.geom.Point(p.x,p.y);
		np = this.globalToLocal(np);
		return new org.aswing.geom.IntPoint(np.x | 0,np.y | 0);
	}
	,componentToGlobal: function(p) {
		var np = new openfl.geom.Point(p.x,p.y);
		np = this.localToGlobal(np);
		return new org.aswing.geom.IntPoint(np.x | 0,np.y | 0);
	}
	,setBounds: function(b) {
		this.setComBounds(b);
	}
	,setSize: function(newSize) {
		newSize.width = Std["int"](Math.max(0,newSize.width));
		newSize.height = Std["int"](Math.max(0,newSize.height));
		var oldSize = new org.aswing.geom.IntDimension(this.bounds.width,this.bounds.height);
		if(!newSize.equals(oldSize)) {
			this.bounds.setSize(newSize);
			this.size();
			this.dispatchEvent(new org.aswing.event.ResizedEvent(oldSize,newSize));
		}
	}
	,setSizeWH: function(w,h) {
		this.setSize(new org.aswing.geom.IntDimension(w,h));
	}
	,getSize: function(rv) {
		if(rv != null) {
			rv.setSizeWH(this.bounds.width,this.bounds.height);
			return rv;
		} else return new org.aswing.geom.IntDimension(this.bounds.width,this.bounds.height);
	}
	,pack: function() {
		this.setSize(this.getPreferredSize());
	}
	,setWidth: function(width) {
		this.setSizeWH(width,this.getHeight());
	}
	,setHeight: function(height) {
		this.setSizeWH(this.getWidth(),height);
	}
	,getWidth: function() {
		return this.bounds.width;
	}
	,getHeight: function() {
		return this.bounds.height;
	}
	,setX: function(x) {
		this.setLocationXY(x,this.getY());
	}
	,setY: function(y) {
		this.setLocationXY(this.getX(),y);
	}
	,getX: function() {
		return this.bounds.x;
	}
	,getY: function() {
		return this.bounds.y;
	}
	,setEnabled: function(b) {
		if(this.enabled != b) {
			this.enabled = b;
			this.mouseEnabled = b;
			this.repaint();
		}
	}
	,isEnabled: function() {
		return this.enabled;
	}
	,setClipBounds: function(b) {
		if(b == null && this.clipBounds == null) return;
		var changed = false;
		if(b == null && this.clipBounds != null) {
			this.clipBounds = null;
			changed = true;
		} else if(!b.equals(this.clipBounds)) {
			this.clipBounds = b.clone();
			changed = true;
		}
		if(changed) this.layoutClipAndTrigger(null);
	}
	,getClipBounds: function() {
		if(this.clipBounds == null) return null;
		return this.clipBounds.clone();
	}
	,setClipSize: function(size) {
		var bounds = new org.aswing.geom.IntRectangle();
		if(this.clipBounds != null) bounds.setLocation(this.clipBounds.getLocation());
		bounds.setSize(size);
		this.setClipBounds(bounds);
	}
	,isFocusable: function() {
		return this.focusable;
	}
	,setFocusable: function(b) {
		this.focusable = b;
		this.setFocusableSet(true);
	}
	,isFocusableSet: function() {
		return this.focusableSet;
	}
	,setFocusableSet: function(b) {
		this.focusableSet = b;
	}
	,setDragEnabled: function(b) {
		this.dragEnabled = b;
	}
	,isDragEnabled: function() {
		return this.dragEnabled;
	}
	,setDropTrigger: function(b) {
		this.dropTrigger = b;
	}
	,isDropTrigger: function() {
		return this.dropTrigger;
	}
	,addDragAcceptableInitiator: function(com) {
		if(this.dragAcceptableInitiator == null) this.dragAcceptableInitiator = new haxe.ds.IntMap();
		this.dragAcceptableInitiator.set(com.getAwmlIndex(),true);
	}
	,removeDragAcceptableInitiator: function(com) {
		if(this.dragAcceptableInitiator != null) this.dragAcceptableInitiator.remove(com.getAwmlIndex());
	}
	,setDragAcceptableInitiatorAppraiser: function(func) {
		this.dragAcceptableInitiatorAppraiser = func;
	}
	,isDragAcceptableInitiator: function(com) {
		if(this.dragAcceptableInitiator != null) return this.dragAcceptableInitiator.get(com.getAwmlIndex()) == true; else if(this.dragAcceptableInitiatorAppraiser != null) return this.dragAcceptableInitiatorAppraiser(com); else return false;
	}
	,setToolTipText: function(t) {
		this.toolTipText = t;
		if(t == null) org.aswing.JSharedToolTip.getSharedInstance().unregisterComponent(this); else org.aswing.JSharedToolTip.getSharedInstance().registerComponent(this);
	}
	,getToolTipText: function() {
		return this.toolTipText;
	}
	,locate: function() {
		var _x = this.getX();
		var _y = this.getY();
		this.set_d_x(_x);
		this.set_d_y(_y);
	}
	,set_d_x: function(value) {
		org.aswing.AWSprite.prototype.set_x.call(this,value);
		return value;
	}
	,set_d_y: function(value) {
		org.aswing.AWSprite.prototype.set_y.call(this,value);
		return value;
	}
	,get_d_x: function() {
		return org.aswing.AWSprite.prototype.get_x.call(this);
	}
	,get_d_y: function() {
		return org.aswing.AWSprite.prototype.get_y.call(this);
	}
	,set_x: function(value) {
		this.setX(value | 0);
		return value;
	}
	,get_x: function() {
		return this.getX();
	}
	,set_y: function(value) {
		this.setY(value | 0);
		return value;
	}
	,get_y: function() {
		return this.getY();
	}
	,set_width: function(value) {
		this.setWidth(value | 0);
		return value;
	}
	,get_width: function() {
		return this.getWidth();
	}
	,set_height: function(value) {
		this.setHeight(value | 0);
		return value;
	}
	,get_height: function() {
		return this.getHeight();
	}
	,setAlignmentX: function(ax) {
		if(this.alignmentX != ax) {
			this.alignmentX = ax;
			this.repaint();
		}
	}
	,setAlignmentY: function(ay) {
		if(this.alignmentY != ay) {
			this.alignmentY = ay;
			this.repaint();
		}
	}
	,getAlignmentX: function() {
		return this.alignmentX;
	}
	,getAlignmentY: function() {
		return this.alignmentY;
	}
	,getClientProperty: function(key,defaultValue) {
		if(this.clientProperty == null) return defaultValue;
		if(this.clientProperty.exists(key)) return this.clientProperty.get(key); else return defaultValue;
	}
	,putClientProperty: function(key,value) {
		if(this.clientProperty == null) this.clientProperty = new haxe.ds.StringMap();
		this.clientProperty.set(key,value);
	}
	,countMinimumSize: function() {
		if(this.ui != null) return this.ui.getMinimumSize(this); else return this.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(0,0));
	}
	,countMaximumSize: function() {
		if(this.ui != null) return this.ui.getMaximumSize(this); else return org.aswing.geom.IntDimension.createBigDimension();
	}
	,countPreferredSize: function() {
		if(this.ui != null) return this.ui.getPreferredSize(this); else return this.getSize();
	}
	,setCachePreferSizes: function(b) {
		this.cachePreferSizes = b;
		if(!b) {
			this.cachedMaximumSize = null;
			this.cachedMinimumSize = null;
			this.cachedPreferredSize = null;
		}
	}
	,isCachePreferSizes: function() {
		return this.cachePreferSizes;
	}
	,getMinimumSize: function() {
		if(this.isDirectReturnSize(this.minimumSize)) return this.minimumSize.clone(); else if(this.isCachePreferSizes() && this.cachedMinimumSize != null) return this.cachedMinimumSize.clone(); else {
			var tempSize = this.mixSetSize(this.countMinimumSize(),this.minimumSize);
			if(this.isCachePreferSizes()) {
				this.cachedMinimumSize = tempSize;
				return this.cachedMinimumSize.clone();
			} else return tempSize;
		}
	}
	,getMaximumSize: function() {
		if(this.isDirectReturnSize(this.maximumSize)) return this.maximumSize.clone(); else if(this.isCachePreferSizes() && this.cachedMaximumSize != null) return this.cachedMaximumSize.clone(); else {
			var tempSize = this.mixSetSize(this.countMaximumSize(),this.maximumSize);
			if(this.isCachePreferSizes()) {
				this.cachedMaximumSize = tempSize;
				return this.cachedMaximumSize.clone();
			} else return tempSize;
		}
	}
	,getPreferredSize: function() {
		if(this.isDirectReturnSize(this.preferredSize)) return this.preferredSize.clone(); else if(this.isCachePreferSizes() && this.cachedPreferredSize != null) return this.cachedPreferredSize.clone(); else {
			var tempSize = this.mixSetSize(this.countPreferredSize(),this.preferredSize);
			if(this.isCachePreferSizes()) {
				this.cachedPreferredSize = tempSize;
				return this.cachedPreferredSize.clone();
			} else return tempSize;
		}
	}
	,isDirectReturnSize: function(s) {
		return s != null && (s.width != -1 && s.height != -1);
	}
	,mixSetSize: function(counted,setted) {
		if(setted != null) {
			if(setted.width != -1) counted.width = setted.width; else if(setted.height != -1) counted.height = setted.height;
		}
		return counted;
	}
	,setMinimumSize: function(minimumSize) {
		if(minimumSize == null) this.minimumSize = null; else this.minimumSize = minimumSize.clone();
	}
	,setMaximumSize: function(maximumSize) {
		if(maximumSize == null) this.maximumSize = null; else this.maximumSize = maximumSize.clone();
	}
	,setPreferredSize: function(preferredSize) {
		if(preferredSize == null) this.preferredSize = null; else this.preferredSize = preferredSize.clone();
	}
	,getPreferredWidth: function() {
		return this.getPreferredSize().width;
	}
	,setPreferredWidth: function(preferredWidth) {
		if(this.preferredSize == null) this.preferredSize = new org.aswing.geom.IntDimension(-1,-1);
		this.preferredSize.width = preferredWidth;
	}
	,getPreferredHeight: function() {
		return this.getPreferredSize().height;
	}
	,setPreferredHeight: function(preferredHeight) {
		if(this.preferredSize == null) this.preferredSize = new org.aswing.geom.IntDimension(-1,-1);
		this.preferredSize.height = preferredHeight;
	}
	,getMaximumWidth: function() {
		return this.getMaximumSize().width;
	}
	,setMaximumWidth: function(maximumWidth) {
		if(this.maximumSize == null) this.maximumSize = new org.aswing.geom.IntDimension(-1,-1);
		this.maximumSize.width = maximumWidth;
	}
	,getMaximumHeight: function() {
		return this.getMaximumSize().height;
	}
	,setMaximumHeight: function(maximumHeight) {
		if(this.maximumSize == null) this.maximumSize = new org.aswing.geom.IntDimension(-1,-1);
		this.maximumSize.height = maximumHeight;
	}
	,getMinimumWidth: function() {
		return this.getMinimumSize().width;
	}
	,setMinimumWidth: function(minimumWidth) {
		if(this.minimumSize == null) this.minimumSize = new org.aswing.geom.IntDimension(-1,-1);
		this.minimumSize.width = minimumWidth;
	}
	,getMinimumHeight: function() {
		return this.getMinimumSize().height;
	}
	,setMinimumHeight: function(minimumHeight) {
		if(this.minimumSize == null) this.minimumSize = new org.aswing.geom.IntDimension(-1,-1);
		this.minimumSize.height = minimumHeight;
	}
	,hitTestMouse: function() {
		if(this.isOnStage()) return this.hitTestPoint(this.get_stage().get_mouseX(),this.get_stage().get_mouseY(),false); else return false;
	}
	,revalidate: function() {
		this.invalidate();
		org.aswing.RepaintManager.getInstance().addInvalidComponent(this);
	}
	,revalidateIfNecessary: function() {
		org.aswing.RepaintManager.getInstance().addInvalidComponent(this);
	}
	,repaint: function() {
		if(this.isVisible() && this.isReadyToPaint()) org.aswing.RepaintManager.getInstance().addRepaintComponent(this);
	}
	,repaintAndRevalidate: function() {
		this.repaint();
		this.revalidate();
	}
	,size: function() {
		this.readyToPaint = true;
		this.repaint();
		this.invalidate();
	}
	,invalidate: function() {
		this.invalidateTree();
		this.invalidatePreferSizeCaches();
	}
	,invalidateTree: function() {
		this.valid = false;
		var par = this.getParent();
		if(par != null && par.isValid()) par.invalidateTree();
	}
	,invalidatePreferSizeCaches: function() {
		this.clearPreferSizeCaches();
		var par = this.getParent();
		if(par != null) par.invalidatePreferSizeCaches();
	}
	,clearPreferSizeCaches: function() {
		this.cachedMaximumSize = null;
		this.cachedMinimumSize = null;
		this.cachedPreferredSize = null;
	}
	,validate: function() {
		if(!this.valid) this.valid = true;
	}
	,paintImmediately: function() {
		if(this.isVisible() && this.isReadyToPaint()) {
			var paintBounds = this.getPaintBoundsInRoot();
			this.layoutClipAndTrigger(null);
			this.paint(this.getInsets().getInsideBounds(paintBounds));
		}
	}
	,isReadyToPaint: function() {
		return this.readyToPaint;
	}
	,paint: function(b) {
		this.get_graphics().clear();
		var g = new org.aswing.graphics.Graphics2D(this.get_graphics());
		if(this.isEnabled() && this.drawTransparentTrigger) g.fillRectangle(org.aswing.Component.bg_trigger_brush,b.x,b.y,b.width,b.height);
		if(this.backgroundDecorator != null) this.backgroundDecorator.updateDecorator(this,g,b.clone());
		if(this.ui != null) this.ui.paint(this,g,b.clone());
		if(this.border != null) this.border.updateBorder(this,g,this.getInsets().getOutsideBounds(b.clone()));
		if(this.foregroundDecorator != null) this.foregroundDecorator.updateDecorator(this,g,b.clone());
		this.dispatchEvent(new org.aswing.event.AWEvent("paint",false,false));
	}
	,paintFocusRect: function(force) {
		if(force == null) force = false;
		var fm = org.aswing.FocusManager.getManager(this.get_stage());
		if(this.ui != null && fm != null) {
			if(force || fm.isTraversing() && this.isFocusOwner()) {
				var fr = fm.moveFocusRectUpperTo(this);
				fr.get_graphics().clear();
				this.ui.paintFocus(this,new org.aswing.graphics.Graphics2D(fr.get_graphics()),new org.aswing.geom.IntRectangle(0,0,Std["int"](this.getWidth()),Std["int"](this.getHeight())));
			}
		}
	}
	,layoutClipAndTrigger: function(paintBounds) {
		if(paintBounds == null) {
			var b = new org.aswing.geom.IntRectangle(0,0,Std["int"](this.getWidth()),Std["int"](this.getHeight()));
			var r = this.getPaintBoundsInRoot();
			var x1 = Std["int"](Math.max(b.x,r.x));
			var x2 = Std["int"](Math.min(b.x + b.width,r.x + r.width));
			var y1 = Std["int"](Math.max(b.y,r.y));
			var y2 = Std["int"](Math.min(b.y + b.height,r.y + r.height));
			paintBounds = new org.aswing.geom.IntRectangle(x1,y1,x2 - x1,y2 - y1);
		} else paintBounds = paintBounds.clone();
		if(this.clipBounds != null) {
			paintBounds.x = Std["int"](Math.max(paintBounds.x,this.clipBounds.x));
			paintBounds.y = Std["int"](Math.max(paintBounds.y,this.clipBounds.y));
			paintBounds.width = Std["int"](Math.min(paintBounds.width,this.clipBounds.width));
			paintBounds.height = Std["int"](Math.min(paintBounds.height,this.clipBounds.height));
		}
		this.setClipMaskRect(paintBounds);
	}
	,getPaintBoundsInRoot: function() {
		var minSize = this.getMinimumSize();
		var maxSize = this.getMaximumSize();
		var size = this.getSize();
		var paintBounds = new org.aswing.geom.IntRectangle(0,0,size.width,size.height);
		if(size.width > maxSize.width) {
			paintBounds.width = maxSize.width;
			paintBounds.x = Std["int"]((size.width - paintBounds.width) * this.getAlignmentX());
		}
		if(size.height > maxSize.height) {
			paintBounds.height = maxSize.height;
			paintBounds.y = Std["int"]((size.height - paintBounds.height) * this.getAlignmentY());
		}
		if(paintBounds.width < minSize.width) paintBounds.width = minSize.width;
		if(paintBounds.height < minSize.height) paintBounds.height = minSize.height;
		return paintBounds;
	}
	,isValid: function() {
		return this.valid;
	}
	,isValidateRoot: function() {
		if(this.get_stage() != null && this.getParent() == null) return true;
		return false;
	}
	,getParent: function() {
		return this.container;
	}
	,reAppendToParent: function(constraints) {
		if(this.container != null) {
			var index = this.container.getIndex(this);
			var con = this.container;
			con.remove(this);
			con.insert(index,this,constraints);
		}
	}
	,parentReAppendChildren: function() {
		if(this.container != null) this.container.reAppendChildren();
	}
	,getRootPaneAncestor: function() {
		var pa = this.parent;
		while(pa != null) {
			if(js.Boot.__instanceof(pa,org.aswing.JRootPane)) if(js.Boot.__instanceof(pa,org.aswing.JRootPane)) return pa; else return null;
			pa = pa.parent;
		}
		return null;
	}
	,getKeyboardManager: function() {
		var rootPane = this.getRootPaneAncestor();
		if(rootPane != null) return rootPane.getKeyboardManager();
		return null;
	}
	,removeFromContainer: function() {
		if(this.getParent() != null) this.getParent().remove(this);
		if(this.parent != null) this.parent.removeChild(this);
	}
	,setConstraints: function(constraints) {
		this.constraints = constraints;
	}
	,getConstraints: function() {
		return this.constraints;
	}
	,transferFocus: function() {
		return this.transferFocusWithDirection(1);
	}
	,transferFocusBackward: function() {
		return this.transferFocusWithDirection(-1);
	}
	,transferFocusWithDirection: function(dir) {
		var pa = this.getParent();
		if(pa == null) if(js.Boot.__instanceof(this,org.aswing.Container)) pa = this; else pa = null;
		if(pa != null) {
			var nextFocus = null;
			if(dir > 0) nextFocus = pa.getFocusTraversalPolicy().getComponentAfter(this); else nextFocus = pa.getFocusTraversalPolicy().getComponentBefore(this);
			if(nextFocus != null) return nextFocus.requestFocus();
		}
		return false;
	}
	,isFocusOwner: function() {
		var fm = org.aswing.FocusManager.getManager(this.get_stage());
		return fm != null && fm.getFocusOwner() == this;
	}
	,requestFocus: function() {
		if((this.isFocusable() || this.getFocusTransmit() != null) && this.isEnabled() && this.isShowing()) {
			this.makeFocus();
			return true;
		}
		return false;
	}
	,makeFocus: function() {
		if(this.getFocusTransmit() != null) this.getFocusTransmit().requestFocus(); else {
			var ifo = this.getInternalFocusObject();
		}
	}
	,getInternalFocusObject: function() {
		var ifo = null;
		if(this.ui != null) ifo = this.ui.getInternalFocusObject(this);
		if(ifo != null) return ifo; else return this;
	}
	,getFocusManager: function() {
		return org.aswing.FocusManager.getManager(this.get_stage());
	}
	,fireFocusKeyDownEvent: function(e) {
		this.dispatchEvent(new org.aswing.event.FocusKeyEvent("focusKeyDown",e.charCode,e.keyCode,e.keyLocation,e.ctrlKey,e.altKey,e.shiftKey));
	}
	,fireFocusKeyUpEvent: function(e) {
		this.dispatchEvent(new org.aswing.event.FocusKeyEvent("focusKeyUp",e.charCode,e.keyCode,e.keyLocation,e.ctrlKey,e.altKey,e.shiftKey));
	}
	,fireDragRecognizedEvent: function(touchedChild) {
		this.dispatchEvent(new org.aswing.event.DragAndDropEvent("dragRecognized",this,null,new org.aswing.geom.IntPoint(Std["int"](this.get_stage().get_mouseX()),Std["int"](this.get_stage().get_mouseY()))));
	}
	,fireDragEnterEvent: function(dragInitiator,sourceData,mousePos,relatedTarget) {
		this.dispatchEvent(new org.aswing.event.DragAndDropEvent("dragEnter",dragInitiator,sourceData,mousePos,this,relatedTarget));
	}
	,fireDragOverringEvent: function(dragInitiator,sourceData,mousePos) {
		this.dispatchEvent(new org.aswing.event.DragAndDropEvent("dragOverring",dragInitiator,sourceData,mousePos,this));
	}
	,fireDragExitEvent: function(dragInitiator,sourceData,mousePos,relatedTarget) {
		this.dispatchEvent(new org.aswing.event.DragAndDropEvent("dragExit",dragInitiator,sourceData,mousePos,this,relatedTarget));
	}
	,fireDragDropEvent: function(dragInitiator,sourceData,mousePos) {
		this.dispatchEvent(new org.aswing.event.DragAndDropEvent("dragDrop",dragInitiator,sourceData,mousePos,this));
	}
	,__mouseClick: function(e) {
		var time = openfl.Lib.getTimer();
		var mousePoint = this.getMousePosition();
		if(mousePoint.equals(this._lastClickPoint) && time - this.lastClickTime < org.aswing.Component.MAX_CLICK_INTERVAL) this.clickCount++; else this.clickCount = 1;
		this.lastClickTime = time;
		this.dispatchEvent(new org.aswing.event.ClickCountEvent("clickCount",this.clickCount));
		this._lastClickPoint = mousePoint;
	}
	,__mouseDown: function(e) {
		this.checkRequestFocusWhenMouseDown(e);
		if(this.isDragEnabled()) {
			this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__mouseMove));
			this.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__rollOut));
			this.get_stage().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__mouseUp),false,0,false);
			this.pressingPoint = this.getMousePosition();
		}
	}
	,getFocusTransmit: function() {
		return null;
	}
	,checkRequestFocusWhenMouseDown: function(e) {
		if(!((this.isFocusable() || this.getFocusTransmit() != null) && this.isEnabled())) return;
		var fm = org.aswing.FocusManager.getManager(this.get_stage());
		if(fm == null) return;
		var focusOwner = fm.getFocusOwner();
		var target = org.aswing.AsWingUtils["as"](e.target,openfl.display.DisplayObject);
		if(focusOwner == null) {
			var focusObj = null;
			if(focusObj == null) this.requestFocus(); else if(!this.contains(focusObj)) this.requestFocus();
		} else if(focusOwner == this) {
		} else if(!org.aswing.AsWingUtils.isAncestor(this,focusOwner)) this.requestFocus(); else if(focusOwner.contains(target)) {
		} else {
			var tarCom = org.aswing.AsWingUtils.getOwnerComponent(target);
			if(tarCom == this) this.requestFocus(); else if(!org.aswing.AsWingUtils.isAncestorComponent(this,tarCom)) this.requestFocus();
		}
	}
	,__mouseUp: function(e) {
		this.stopListernDragRec();
	}
	,__mouseMove: function(e) {
		var mp = this.getMousePosition();
		if(mp.distanceSq(this.pressingPoint) > 1) {
			this.fireDragRecognizedEvent(null);
			this.stopListernDragRec();
		}
	}
	,__rollOut: function(e) {
		this.stopListernDragRec();
	}
	,stopListernDragRec: function() {
	}
	,__focusIn: function(e) {
		if(e.target == this.getInternalFocusObject() && this.isFocusable()) {
			var fm = org.aswing.FocusManager.getManager(this.get_stage());
			if(fm == null) return;
			var focusOwner = fm.getFocusOwner();
			if(this != focusOwner) {
				fm.setFocusOwner(this);
				if(null != focusOwner) focusOwner.paintFocusRect();
				this.paintFocusRect();
				this.dispatchEvent(new org.aswing.event.AWEvent("focusGained"));
			}
		}
	}
	,__focusOut: function(e) {
		if(e.relatedObject == null) return;
		if(e.target == this.getInternalFocusObject() && this.isFocusable()) {
			var fm = org.aswing.FocusManager.getManager(this.get_stage());
			if(fm == null) return;
			var focusOwner = fm.getFocusOwner();
			if(this == focusOwner) {
				fm.setFocusOwner(null);
				this.paintFocusRect();
				this.dispatchEvent(new org.aswing.event.AWEvent("focusLost"));
			}
		}
	}
	,__class__: org.aswing.Component
	,__properties__: $extend(org.aswing.AWSprite.prototype.__properties__,{set_d_visible:"set_d_visible",get_d_visible:"get_d_visible",set_d_x:"set_d_x",get_d_x:"get_d_x",set_d_y:"set_d_y",get_d_y:"get_d_y"})
});
org.aswing.Container = function() {
	org.aswing.Component.call(this);
	this.setName("Container");
	this.focusTraversalPolicy = null;
	this.children = new Array();
	this.layout = new org.aswing.EmptyLayout();
};
$hxClasses["org.aswing.Container"] = org.aswing.Container;
org.aswing.Container.__name__ = ["org","aswing","Container"];
org.aswing.Container.__super__ = org.aswing.Component;
org.aswing.Container.prototype = $extend(org.aswing.Component.prototype,{
	setLayout: function(layout) {
		this.layout = layout;
		this.revalidate();
	}
	,getLayout: function() {
		return this.layout;
	}
	,setFocusTraversalPolicy: function(ftp) {
		this.focusTraversalPolicy = ftp;
	}
	,getFocusTraversalPolicy: function() {
		if(this.focusTraversalPolicy == null) {
			var ftp = null;
			if(this.getParent() != null) ftp = this.getParent().getFocusTraversalPolicy();
			if(ftp == null) {
				var fm = org.aswing.FocusManager.getManager(this.get_stage());
				if(fm != null) ftp = fm.getDefaultFocusTraversalPolicy();
				if(ftp == null) ftp = new org.aswing.ContainerOrderFocusTraversalPolicy();
			}
			return ftp;
		} else return this.focusTraversalPolicy;
	}
	,invalidate: function() {
		this.layout.invalidateLayout(this);
		org.aswing.Component.prototype.invalidate.call(this);
	}
	,validate: function() {
		if(!this.valid) {
			this.doLayout();
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.children[i].validate();
			}
			this.valid = true;
		}
	}
	,doLayout: function() {
		if(this.isVisible()) this.layout.layoutContainer(this);
	}
	,reAppendChildren: function() {
		var chs = this.children.slice();
		this.removeAll();
		var _g1 = 0;
		var _g = chs.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.append(chs[i]);
		}
		this.revalidate();
	}
	,append: function(com,constraints) {
		this.insertImp(-1,com,constraints);
	}
	,appendAll: function(coms) {
		var _g1 = 0;
		var _g = coms.length;
		while(_g1 < _g) {
			var i = _g1++;
			var com = org.aswing.AsWingUtils["as"](coms[i],org.aswing.Component);
			if(com != null) this.append(com);
		}
	}
	,insert: function(i,com,constraints) {
		this.insertImp(i,com,constraints);
	}
	,insertAll: function(index,coms) {
		var _g = 0;
		while(_g < coms.length) {
			var i = coms[_g];
			++_g;
			var com;
			if(js.Boot.__instanceof(i,org.aswing.Component)) com = i; else com = null;
			if(com != null) {
				this.insert(index,com);
				index++;
			}
		}
	}
	,insertImp: function(i,com,constraints) {
		if(i > this.getComponentCount()) throw new org.aswing.error.Error("illegal component position when insert comp to container");
		if(js.Boot.__instanceof(com,org.aswing.Container)) {
			var cn = this;
			while(cn != null) {
				if(cn == com) throw new org.aswing.error.Error("adding container's parent to itself");
				cn = cn.getParent();
			}
		}
		if(com.getParent() != null) com.removeFromContainer();
		com.container = this;
		if(i < 0) {
			this.children.push(com);
			this.addChild(com);
		} else {
			this.addChildAt(com,this.getChildIndexWithComponentIndex(i));
			this.children.splice(i,0,com);
		}
		this.layout.addLayoutComponent(com,constraints == null?com.getConstraints():constraints);
		this.dispatchEvent(new org.aswing.event.ContainerEvent("comAdded",this,com));
		if(this.valid) this.revalidate(); else this.invalidatePreferSizeCaches();
	}
	,removeChild: function(child) {
		this.checkChildRemoval(child);
		return org.aswing.Component.prototype.removeChild.call(this,child);
	}
	,removeChildAt: function(index) {
		this.checkChildRemoval(this.getChildAt(index));
		return org.aswing.Component.prototype.removeChildAt.call(this,index);
	}
	,checkChildRemoval: function(child) {
		if(js.Boot.__instanceof(child,org.aswing.Component)) {
			var c;
			if(js.Boot.__instanceof(child,org.aswing.Component)) c = child; else c = null;
			if(c.getParent() != null) throw new org.aswing.error.Error("You should call remove method to remove a component child!");
		}
	}
	,remove: function(com) {
		var i = this.getIndex(com);
		if(i >= 0) return this.removeAt(i);
		return null;
	}
	,removeAt: function(i) {
		return this.removeAtImp(i);
	}
	,removeAtImp: function(i) {
		if(i < 0) return null;
		var com = this.children[i];
		if(com != null) {
			this.children.splice(i,1);
			org.aswing.Component.prototype.removeChild.call(this,com);
			com.container = null;
			this.layout.removeLayoutComponent(com);
			this.dispatchEvent(new org.aswing.event.ContainerEvent("comRemoved",this,com));
			if(this.valid) this.revalidate(); else this.invalidatePreferSizeCaches();
		}
		return com;
	}
	,removeAll: function() {
		while(this.children.length > 0) this.removeAt(this.children.length - 1);
	}
	,getComponents: function() {
		return this.children;
	}
	,getComponent: function(index) {
		if(index < 0 || index >= this.children.length) throw new org.aswing.error.Error("Index out of container children bounds!!!");
		return this.children[index];
	}
	,getIndex: function(com) {
		var n = this.children.length;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			if(com == this.children[i]) return i;
		}
		return -1;
	}
	,getComponentCount: function() {
		return this.children.length;
	}
	,isAncestorOf: function(c) {
		var p = c.getParent();
		if(c == null || p == null) return false;
		while(p != null) {
			if(p == this) return true;
			p = p.getParent();
		}
		return false;
	}
	,getChildIndexWithComponentIndex: function(index) {
		var count = this.getComponentCount();
		if(index < 0 || index > count) throw new org.aswing.error.Error("Out of index counting bounds, it should be >=0 and <= component count!");
		if(index == count) return this.getHighestIndexUnderForeground(); else return this.getChildIndex(this.getComponent(index));
	}
	,getComponentIndexWithChildIndex: function(index) {
		var count = this.__children.length;
		if(index < 0 || index > count) throw new org.aswing.error.Error("Out of index counting bounds, it should be >=0 and <= numChildren!");
		if(index == count) return this.getComponentCount(); else {
			var aboveCount = 0;
			var _g = index;
			while(_g < count) {
				var i = _g++;
				if(Std["is"](this.getChildAt(i),org.aswing.Component)) aboveCount++;
			}
			return this.getComponentCount() - aboveCount;
		}
		return 0;
	}
	,countMinimumSize: function() {
		var size = null;
		if(this.ui != null) size = this.ui.getMinimumSize(this);
		if(size == null) size = this.layout.minimumLayoutSize(this);
		if(size == null) size = org.aswing.Component.prototype.countMinimumSize.call(this);
		return size;
	}
	,countMaximumSize: function() {
		var size = null;
		if(this.ui != null) size = this.ui.getMaximumSize(this);
		if(size == null) size = this.layout.maximumLayoutSize(this);
		if(size == null) size = org.aswing.Component.prototype.countMaximumSize.call(this);
		return size;
	}
	,countPreferredSize: function() {
		var size = null;
		if(this.ui != null) size = this.ui.getPreferredSize(this);
		if(size == null) size = this.layout.preferredLayoutSize(this);
		if(size == null) size = org.aswing.Component.prototype.countPreferredSize.call(this);
		return size;
	}
	,__class__: org.aswing.Container
});
org.aswing.JPanel = function(layout) {
	org.aswing.Container.call(this);
	this.setName("JPanel");
	if(layout == null) layout = new org.aswing.FlowLayout();
	this.layout = layout;
	this.updateUI();
};
$hxClasses["org.aswing.JPanel"] = org.aswing.JPanel;
org.aswing.JPanel.__name__ = ["org","aswing","JPanel"];
org.aswing.JPanel.__super__ = org.aswing.Container;
org.aswing.JPanel.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicPanelUI;
	}
	,getUIClassID: function() {
		return "PanelUI";
	}
	,__class__: org.aswing.JPanel
});
var componetset = {};
componetset.Buttons = function() {
	org.aswing.JPanel.call(this,new org.aswing.BorderLayout(5,5));
	this.name = "Basic Controls";
	var top = org.aswing.SoftBox.createVerticalBox(4);
	this.append(top,"North");
	var jbuttons = new org.aswing.JPanel();
	var jbtn1 = new org.aswing.JButton("JButton");
	var jbtn2 = new org.aswing.JButton("JButton Disabled");
	jbtn2.setEnabled(false);
	var jbtn3 = new org.aswing.JButton("With Icon",new cases.ColorDotIcon(20,org.aswing.ASColor.RED));
	jbuttons.append(jbtn1);
	jbuttons.append(jbtn2);
	jbuttons.append(jbtn3);
	top.append(jbuttons);
	var tfs = new org.aswing.JPanel();
	var tf1 = new org.aswing.JTextField("Input Text",10);
	var tf2 = new org.aswing.JTextField("Not-Editable",12);
	tf2.setEditable(false);
	var tf3 = new org.aswing.JTextField("Disabled");
	tf3.setEnabled(false);
	tfs.append(tf1);
	tfs.append(tf2);
	tfs.append(tf3);
	top.append(tfs);
	var toggles = new org.aswing.JPanel();
	var tog1 = new org.aswing.JToggleButton("JToggleButton");
	var tog2 = new org.aswing.JToggleButton("Disabled");
	tog2.setEnabled(false);
	var tog3 = new org.aswing.JToggleButton("Icon",new cases.ColorDotIcon(10,org.aswing.ASColor.BLUE));
	toggles.append(tog1);
	toggles.append(tog2);
	toggles.append(tog3);
	top.append(toggles);
	var checks = new org.aswing.JPanel();
	var che1 = new org.aswing.JCheckBox("JCheckBox");
	var che2 = new org.aswing.JCheckBox("Disabled");
	che2.setEnabled(false);
	var che3 = new org.aswing.JCheckBox("Selected Disabled");
	che3.setSelected(true);
	che3.setEnabled(false);
	checks.append(che1);
	checks.append(che2);
	checks.append(che3);
	top.append(checks);
	var radios = new org.aswing.JPanel();
	var rad1 = new org.aswing.JRadioButton("JRadioButton");
	var rad2 = new org.aswing.JRadioButton("Disabled");
	rad2.setEnabled(false);
	var rad3 = new org.aswing.JRadioButton("Selected Disabled");
	rad3.setSelected(true);
	rad3.setEnabled(false);
	var rad4 = new org.aswing.JRadioButton("In fact they are in a Group");
	var group = new org.aswing.ButtonGroup();
	group.append(rad1);
	group.append(rad2);
	group.append(rad3);
	group.append(rad4);
	radios.append(rad1);
	radios.append(rad2);
	radios.append(rad3);
	radios.append(rad4);
	top.append(radios);
	var combos = new org.aswing.JPanel();
	var combo1 = new org.aswing.JComboBox(["JComboBox","is","enabled","and","editable!","!!","!!!!"]);
	combo1.setSelectedIndex(0);
	combo1.setEditable(true);
	combo1.setPreferredWidth(120);
	var combo2 = new org.aswing.JComboBox(["Not-Editable","This is","enabled","but","not","editable!"]);
	combo2.setSelectedIndex(0);
	combo2.setPreferredWidth(120);
	combo2.setEditable(false);
	var combo3 = new org.aswing.JComboBox(["Disabled","This is","disabled","!"]);
	combo3.setPreferredWidth(80);
	combo3.setSelectedIndex(0);
	combo3.setEnabled(false);
	combos.append(combo1);
	combos.append(combo2);
	combos.append(combo3);
	top.append(combos);
	var ads = new org.aswing.JPanel();
	var ad1 = new org.aswing.JAdjuster(3);
	var ad2 = new org.aswing.JAdjuster(6);
	ad2.setValueTranslator(function(value) {
		return Math.round(value) + "%";
	});
	var ad3 = new org.aswing.JAdjuster(7);
	ad3.setValueTranslator(function(value1) {
		return Math.round(value1) + "cm";
	});
	ad3.setEditable(false);
	var ad4 = new org.aswing.JAdjuster(4);
	ad4.setEnabled(false);
	ads.append(ad1);
	ads.append(ad2);
	ads.append(ad3);
	ads.append(ad4);
	top.append(ads);
	var st1 = new org.aswing.JStepper(3);
	var st2 = new org.aswing.JStepper(6);
	st2.setValueTranslator(function(value2) {
		return Math.round(value2) + "%";
	});
	var st3 = new org.aswing.JStepper(7);
	st3.setValueTranslator(function(value3) {
		return Math.round(value3) + "cm";
	});
	st3.setEditable(false);
	var st4 = new org.aswing.JStepper(4);
	st4.setEnabled(false);
	ads.append(st1);
	ads.append(st2);
	ads.append(st3);
	ads.append(st4);
	var ta = new org.aswing.JTextArea();
	this.append(new org.aswing.JScrollPane(ta),"Center");
};
$hxClasses["componetset.Buttons"] = componetset.Buttons;
componetset.Buttons.__name__ = ["componetset","Buttons"];
componetset.Buttons.__super__ = org.aswing.JPanel;
componetset.Buttons.prototype = $extend(org.aswing.JPanel.prototype,{
	__class__: componetset.Buttons
});
componetset.Containers = function() {
	org.aswing.JPanel.call(this,new org.aswing.BorderLayout());
	this.name = "Containers";
	var split = new org.aswing.JSplitPane(0);
	var accordion = new org.aswing.JAccordion();
	accordion.appendTab(new org.aswing.JButton(),"Button",null,"a button in accordion");
	accordion.appendTab(new org.aswing.JTextArea("1\n2\n3\n4\n"),"TextArea",null,"a text area in accordion");
	accordion.appendTab(new org.aswing.JPanel(),"A empty panel",null,"a empty panel in accordion");
	var toolbar = new org.aswing.JToolBar();
	toolbar.append(new org.aswing.JLabel("This is a ToolBar"));
	toolbar.append(new org.aswing.JSeparator(1));
	toolbar.append(new org.aswing.JButton("Button"));
	toolbar.append(new org.aswing.JButton("Button 2"));
	toolbar.append(new org.aswing.JToggleButton("Toggle Button"));
	var toolbarContainer = new org.aswing.JPanel(new org.aswing.BorderLayout());
	toolbarContainer.append(toolbar,"North");
	split.setTopComponent(accordion);
	split.setBottomComponent(toolbarContainer);
	this.append(split,"Center");
};
$hxClasses["componetset.Containers"] = componetset.Containers;
componetset.Containers.__name__ = ["componetset","Containers"];
componetset.Containers.__super__ = org.aswing.JPanel;
componetset.Containers.prototype = $extend(org.aswing.JPanel.prototype,{
	__class__: componetset.Containers
});
componetset.Decorators = function() {
	org.aswing.JPanel.call(this,new org.aswing.BorderLayout(5,5));
	this.name = "Decorators";
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__init));
};
$hxClasses["componetset.Decorators"] = componetset.Decorators;
componetset.Decorators.__name__ = ["componetset","Decorators"];
componetset.Decorators.__super__ = org.aswing.JPanel;
componetset.Decorators.prototype = $extend(org.aswing.JPanel.prototype,{
	__init: function(e) {
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__init));
		this.thePane = new org.aswing.JPanel();
		this.thePane.setOpaque(true);
		this.thePane.setLayout(new org.aswing.CenterLayout());
		this.thePane.append(new org.aswing.JLabel("Decorated Panel"));
		this.append(this.thePane,"Center");
		var top = org.aswing.Box.createHorizontalBox(2);
		this.append(top,"North");
		var borders = org.aswing.SoftBox.createVerticalBox(2);
		borders.setBorder(new org.aswing.border.TitledBorder(null,"Border Set",3));
		this.titleBorder = new org.aswing.JRadioButton("Title Border");
		this.bevelBorder = new org.aswing.JRadioButton("Bevel Border");
		this.lineBorder = new org.aswing.JRadioButton("Line Border");
		this.sideLineBorder = new org.aswing.JRadioButton("Side Line Border");
		this.emptyBorder = new org.aswing.JRadioButton("Empty Border");
		this.noBorder = new org.aswing.JRadioButton("No Border");
		borders.append(this.titleBorder);
		borders.append(this.bevelBorder);
		borders.append(this.lineBorder);
		borders.append(this.sideLineBorder);
		borders.append(this.emptyBorder);
		borders.append(this.noBorder);
		var group = new org.aswing.ButtonGroup();
		group.append(this.titleBorder);
		group.append(this.bevelBorder);
		group.append(this.lineBorder);
		group.append(this.sideLineBorder);
		group.append(this.emptyBorder);
		group.append(this.noBorder);
		top.append(borders);
		var bgs = org.aswing.SoftBox.createVerticalBox(2);
		bgs.setBorder(new org.aswing.border.TitledBorder(null,"Background Set",3));
		this.solidBg = new org.aswing.JRadioButton("Solid Background");
		this.gradientBg = new org.aswing.JRadioButton("Gradient Background");
		this.pictureBg = new org.aswing.JRadioButton("Picture Background");
		this.noBg = new org.aswing.JRadioButton("No Background");
		bgs.append(this.solidBg);
		bgs.append(this.gradientBg);
		bgs.append(this.pictureBg);
		bgs.append(this.noBg);
		group = new org.aswing.ButtonGroup();
		group.append(this.solidBg);
		group.append(this.gradientBg);
		group.append(this.pictureBg);
		group.append(this.noBg);
		top.append(bgs);
		this.doListen(this.titleBorder);
		this.doListen(this.bevelBorder);
		this.doListen(this.lineBorder);
		this.doListen(this.sideLineBorder);
		this.doListen(this.emptyBorder);
		this.doListen(this.noBorder);
		this.doListen(this.solidBg);
		this.doListen(this.gradientBg);
		this.doListen(this.pictureBg);
		this.doListen(this.noBg);
		this.imgClass = new openfl.display.Loader();
		this.imgClass.load(new openfl.net.URLRequest("princess.jpg"));
	}
	,doListen: function(radio) {
		radio.addSelectionListener($bind(this,this.__selectionChanged));
		radio.setHorizontalAlignment(2);
	}
	,__selectionChanged: function(e) {
		var target;
		target = js.Boot.__cast(e.target , org.aswing.JRadioButton);
		if(!target.isSelected()) return;
		if(target == this.titleBorder) this.thePane.setBorder(new org.aswing.border.TitledBorder(null,"Title Border")); else if(target == this.lineBorder) this.thePane.setBorder(new org.aswing.border.LineBorder(null,org.aswing.ASColor.RED,1)); else if(target == this.bevelBorder) this.thePane.setBorder(new org.aswing.border.BevelBorder()); else if(target == this.sideLineBorder) this.thePane.setBorder(new org.aswing.border.SideLineBorder(null,2)); else if(target == this.emptyBorder) this.thePane.setBorder(new org.aswing.border.EmptyBorder(null,new org.aswing.Insets(5,5,5,5))); else if(target == this.noBorder) this.thePane.setBorder(null); else if(target == this.solidBg) {
			this.thePane.setBackgroundDecorator(new org.aswing.SolidBackground(org.aswing.ASColor.GREEN));
			this.thePane.repaint();
		} else if(target == this.gradientBg) {
			var colors = [16777215,15632452];
			var alphas = [1,1];
			var ratios = [0,255];
			this.thePane.setBackgroundDecorator(new org.aswing.GradientBackground(org.aswing.graphics.GradientBrush.LINEAR,colors,alphas,ratios,Math.PI / 2));
			this.thePane.repaint();
		} else if(target == this.pictureBg) {
			var bmp = this.imgClass.content;
			this.thePane.setBackgroundDecorator(new org.aswing.AssetBackground(bmp));
			this.thePane.repaint();
		} else {
			this.thePane.setBackgroundDecorator(null);
			this.thePane.repaint();
		}
	}
	,__class__: componetset.Decorators
});
componetset.HeavyComs = function() {
	org.aswing.JPanel.call(this,new org.aswing.BorderLayout());
	this.name = "HeavyComponents";
	var list = this.createList();
	var tree = new org.aswing.JTree();
	var top = org.aswing.Box.createHorizontalBox(2);
	top.append(list);
	top.append(new org.aswing.JScrollPane(tree));
	top.setPreferredHeight(200);
	top.setBorder(new org.aswing.border.TitledBorder(null,"List and Tree"));
	this.append(top,"North");
	var table = this.createTable();
	table.setBorder(new org.aswing.border.TitledBorder(null,"Table(DataGrid)"));
	this.append(table,"Center");
};
$hxClasses["componetset.HeavyComs"] = componetset.HeavyComs;
componetset.HeavyComs.__name__ = ["componetset","HeavyComs"];
componetset.HeavyComs.__super__ = org.aswing.JPanel;
componetset.HeavyComs.prototype = $extend(org.aswing.JPanel.prototype,{
	createList: function() {
		var arr = new Array();
		var str = "A long String with many many many many A long String with many many many many many chars!!!";
		var _g = 0;
		while(_g < 60) {
			var i = _g++;
			var startI = Std["int"](Math.floor(Math.random() * 40));
			var length = Std["int"](Math.floor(Math.random() * (str.length - startI)));
			arr.push(i + " " + HxOverrides.substr(str,startI,length));
		}
		var listData = new org.aswing.VectorListModel(arr);
		var list = new org.aswing.JList(listData,new org.aswing.GeneralListCellFactory(componetset.IconListCell,false,false));
		list.setBorder(new org.aswing.border.LineBorder(null,org.aswing.ASColor.RED,3));
		return new org.aswing.JScrollPane(list);
	}
	,createTable: function() {
		var data = [["iiley",100,true,23,33,"the last"],["I dont know who",-12,false,13,33,"the last"],["A little cute girl",98765,false,0,33,"the last2"],["Therion1",99,true,23,33,"the last3"],["Therion2",99,true,63,33,"the last4"],["Therion3",99,true,23,33,"the last5"],["Therion4",99,true,23,33,"the last5"]];
		var _g = 0;
		while(_g < 100) {
			var i = _g++;
			data.push(["other" + i,i,Math.random() < 0.5,13,323,i + "last"]);
		}
		var column = ["name","score","male","number","number","last"];
		var model = new org.aswing.table.DefaultTableModel().initWithDataNames(data,column);
		model.setColumnClass(1,"Number");
		model.setColumnClass(2,"Boolean");
		var sorter = new org.aswing.table.sorter.TableSorter(model);
		var table = new org.aswing.JTable(sorter);
		table.setRowHeight(22);
		sorter.setTableHeader(table.getTableHeader());
		sorter.setColumnSortable(4,false);
		sorter.setSortingStatus(3,1);
		var combEditor = new org.aswing.DefaultComboBoxCellEditor();
		combEditor.getComboBox().setListData(["Therion1","Therion2","Therion3","Therion4"]);
		table.getColumn("name").setCellEditor(combEditor);
		table.getColumn("male").setCellFactory(new org.aswing.table.GeneralTableCellFactory(componetset.SexIconCell));
		table.setDefaultCellFactory("Object",new org.aswing.table.GeneralTableCellFactory(org.aswing.table.PoorTextCell));
		table.setBorder(new org.aswing.border.EmptyBorder(new org.aswing.border.LineBorder(null,org.aswing.ASColor.RED,2),new org.aswing.Insets(5,5,5,5)));
		table.setRowSelectionInterval(10,13);
		table.setAutoResizeMode(0);
		var scrollPane = new org.aswing.JScrollPane(table);
		return scrollPane;
	}
	,__class__: componetset.HeavyComs
});
org.aswing.Cell = function() { };
$hxClasses["org.aswing.Cell"] = org.aswing.Cell;
org.aswing.Cell.__name__ = ["org","aswing","Cell"];
org.aswing.Cell.prototype = {
	__class__: org.aswing.Cell
};
org.aswing.ListCell = function() { };
$hxClasses["org.aswing.ListCell"] = org.aswing.ListCell;
org.aswing.ListCell.__name__ = ["org","aswing","ListCell"];
org.aswing.ListCell.__interfaces__ = [org.aswing.Cell];
org.aswing.ListCell.prototype = {
	__class__: org.aswing.ListCell
};
org.aswing.AbstractListCell = function() {
	org.aswing.AbstractListCell.AWML_INDEX++;
	this.awmlIndex = org.aswing.AbstractListCell.AWML_INDEX;
};
$hxClasses["org.aswing.AbstractListCell"] = org.aswing.AbstractListCell;
org.aswing.AbstractListCell.__name__ = ["org","aswing","AbstractListCell"];
org.aswing.AbstractListCell.__interfaces__ = [org.aswing.ListCell];
org.aswing.AbstractListCell.prototype = {
	getAwmlIndex: function() {
		return this.awmlIndex;
	}
	,setListCellStatus: function(list,isSelected,index) {
		var com = this.getCellComponent();
		if(isSelected) {
			com.setBackground(list.getSelectionBackground());
			com.setForeground(list.getSelectionForeground());
		} else {
			com.setBackground(list.getBackground());
			com.setForeground(list.getForeground());
		}
		com.setFont(list.getFont());
	}
	,setCellValue: function(value) {
		this.value = value;
	}
	,getCellValue: function() {
		return this.value;
	}
	,getCellComponent: function() {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,__class__: org.aswing.AbstractListCell
};
org.aswing.DefaultListCell = function() {
	org.aswing.AbstractListCell.call(this);
	if(org.aswing.DefaultListCell.sharedToolTip == null) {
		org.aswing.DefaultListCell.sharedToolTip = org.aswing.JSharedToolTip.getSharedInstance();
		org.aswing.DefaultListCell.sharedToolTip.setOffsetsRelatedToMouse(false);
		org.aswing.DefaultListCell.sharedToolTip.setOffsets(new org.aswing.geom.IntPoint(0,0));
	}
};
$hxClasses["org.aswing.DefaultListCell"] = org.aswing.DefaultListCell;
org.aswing.DefaultListCell.__name__ = ["org","aswing","DefaultListCell"];
org.aswing.DefaultListCell.__super__ = org.aswing.AbstractListCell;
org.aswing.DefaultListCell.prototype = $extend(org.aswing.AbstractListCell.prototype,{
	setCellValue: function(value) {
		org.aswing.AbstractListCell.prototype.setCellValue.call(this,value);
		this.getJLabel().setText(this.getStringValue(value));
		this.__resized(null);
	}
	,getStringValue: function(value) {
		return Std.string(value) + "";
	}
	,getCellComponent: function() {
		return this.getJLabel();
	}
	,getJLabel: function() {
		if(this.jlabel == null) {
			this.jlabel = new org.aswing.JLabel();
			this.initJLabel(this.jlabel);
		}
		return this.jlabel;
	}
	,initJLabel: function(jlabel) {
		jlabel.setHorizontalAlignment(2);
		jlabel.setOpaque(true);
		jlabel.setFocusable(false);
		jlabel.addEventListener("resized",$bind(this,this.__resized));
	}
	,__resized: function(e) {
		if(this.getJLabel().getWidth() < this.getJLabel().getPreferredWidth()) {
			this.getJLabel().setToolTipText(this.value.toString());
			org.aswing.DefaultListCell.sharedToolTip.registerComponent(this.getJLabel());
		} else {
			this.getJLabel().setToolTipText(null);
			org.aswing.DefaultListCell.sharedToolTip.unregisterComponent(this.getJLabel());
		}
	}
	,__class__: org.aswing.DefaultListCell
});
componetset.IconListCell = function() {
	org.aswing.DefaultListCell.call(this);
};
$hxClasses["componetset.IconListCell"] = componetset.IconListCell;
componetset.IconListCell.__name__ = ["componetset","IconListCell"];
componetset.IconListCell.__super__ = org.aswing.DefaultListCell;
componetset.IconListCell.prototype = $extend(org.aswing.DefaultListCell.prototype,{
	setCellValue: function(value) {
		if(this.value != value) {
			this.value = value;
			this.getJLabel().setText(value.toString());
			if(Math.random() > 0.5) this.getJLabel().setIcon(new cases.ColorIcon(new org.aswing.ASColor(Std["int"](Math.random() * 16777215)),Std["int"](10 + Math.random() * 30),Std["int"](10 + Math.random() * 30))); else this.getJLabel().setIcon(new cases.CircleIcon(new org.aswing.ASColor(Std["int"](Math.random() * 16777215)),Std["int"](10 + Math.random() * 30),Std["int"](10 + Math.random() * 30)));
		}
	}
	,__class__: componetset.IconListCell
});
componetset.Menus = function() {
	org.aswing.JPanel.call(this,new org.aswing.BorderLayout());
	this.setName("Menus");
	var bar = new org.aswing.JMenuBar();
	this.fileMenu = new org.aswing.JMenu("&File");
	var newMenu = new org.aswing.JMenu("New");
	this.fileMenu.append(newMenu);
	newMenu.addMenuItem("AS2 File").addActionListener($bind(this,this.__menuItemAct));
	newMenu.addMenuItem("AS3 File").addActionListener($bind(this,this.__menuItemAct));
	newMenu.addMenuItem("haXe File").addActionListener($bind(this,this.__menuItemAct));
	this.openItem = this.fileMenu.addMenuItem("Open...");
	this.openItem.addActionListener($bind(this,this.__menuItemAct));
	this.openItem.setAccelerator(new org.aswing.KeySequence([org.aswing.KeyStroke.VK_CONTROL,org.aswing.KeyStroke.VK_O]));
	this.fileMenu.append(new org.aswing.JSeparator(0));
	this.fileMenu.addMenuItem("&Save").addActionListener($bind(this,this.__menuItemAct));
	this.fileMenu.addMenuItem("Save").addActionListener($bind(this,this.__menuItemAct));
	this.fileMenu.addMenuItem("Close").addActionListener($bind(this,this.__menuItemAct));
	this.fileMenu.append(new org.aswing.JSeparator(0));
	this.fileMenu.addMenuItem("Exit").addActionListener($bind(this,this.__menuItemAct));
	bar.append(this.fileMenu);
	var editMenu = new org.aswing.JMenu("&Edit");
	editMenu.addMenuItem("Copy").addActionListener($bind(this,this.__menuItemAct));
	editMenu.addMenuItem("Cut").addActionListener($bind(this,this.__menuItemAct));
	editMenu.addMenuItem("Paste").addActionListener($bind(this,this.__menuItemAct));
	bar.append(editMenu);
	var optionMenu = new org.aswing.JMenu("Option");
	var check1 = new org.aswing.JCheckBoxMenuItem("Check 1");
	check1.addSelectionListener($bind(this,this.__menuSelection));
	check1.setAccelerator(new org.aswing.KeySequence([org.aswing.KeyStroke.VK_CONTROL,org.aswing.KeyStroke.VK_C]));
	optionMenu.append(check1);
	var radio1 = new org.aswing.JRadioButtonMenuItem("Radio 1");
	radio1.addSelectionListener($bind(this,this.__menuSelection));
	var radio2 = new org.aswing.JRadioButtonMenuItem("Radio 2");
	radio2.addSelectionListener($bind(this,this.__menuSelection));
	var group = new org.aswing.ButtonGroup();
	group.append(radio1);
	group.append(radio2);
	optionMenu.append(radio1);
	optionMenu.append(radio2);
	bar.append(optionMenu);
	var helpMenu = new org.aswing.JMenu("Help");
	helpMenu.addMenuItem("About...").addActionListener($bind(this,this.__aboutMenuItemAct));
	bar.append(helpMenu);
	this.append(bar,"North");
	this.textArea = new org.aswing.JTextArea();
	this.append(new org.aswing.JScrollPane(this.textArea),"Center");
	var km = new org.aswing.KeyboardManager();
	km.init(this);
	km.registerKeyAction(new org.aswing.KeySequence([org.aswing.KeyStroke.VK_SHIFT,org.aswing.KeyStroke.VK_A]),$bind(this,this.__keyAction));
};
$hxClasses["componetset.Menus"] = componetset.Menus;
componetset.Menus.__name__ = ["componetset","Menus"];
componetset.Menus.__super__ = org.aswing.JPanel;
componetset.Menus.prototype = $extend(org.aswing.JPanel.prototype,{
	__keyAction: function(e) {
		this.textArea.appendText("Key action!\n");
		this.fileMenu.remove(this.openItem);
	}
	,__menuItemAct: function(e) {
		var source;
		source = js.Boot.__cast(e.target , org.aswing.JMenuItem);
		this.textArea.appendText("Menu " + source.getText() + " acted!\n");
	}
	,__menuSelection: function(e) {
		var source;
		source = js.Boot.__cast(e.target , org.aswing.JMenuItem);
		this.textArea.appendText("Menu " + source.getText() + " selected ? " + Std.string(source.isSelected()) + "!\n");
	}
	,__aboutMenuItemAct: function(e) {
		var source;
		source = js.Boot.__cast(e.target , org.aswing.JMenuItem);
		org.aswing.JOptionPane.showMessageDialog("About","This is just a menu test demo!");
	}
	,__class__: componetset.Menus
});
componetset.Scrolls = function() {
	org.aswing.JPanel.call(this);
	this.name = "Scrolls";
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__init));
};
$hxClasses["componetset.Scrolls"] = componetset.Scrolls;
componetset.Scrolls.__name__ = ["componetset","Scrolls"];
componetset.Scrolls.__super__ = org.aswing.JPanel;
componetset.Scrolls.prototype = $extend(org.aswing.JPanel.prototype,{
	__init: function(e) {
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__init));
		this.imgClass = new openfl.display.Loader();
		this.imgClass.contentLoaderInfo.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.__COMPLETE));
		this.imgClass.load(new openfl.net.URLRequest("2.jpg"));
	}
	,__COMPLETE: function(e) {
		var bmp = this.imgClass.content;
		var asset = new org.aswing.AssetPane(bmp);
		var scrollPane = new org.aswing.JScrollPane(asset);
		scrollPane.setPreferredSize(new org.aswing.geom.IntDimension(300,300));
		this.append(scrollPane);
		var slider = new org.aswing.JSlider();
		this.append(slider);
		slider.setMajorTickSpacing(20);
		slider.setMinorTickSpacing(4);
		slider.setPaintTicks(true);
		slider.setShowValueTip(true);
		var progress = new org.aswing.JProgressBar();
		progress.setIndeterminate(true);
		this.append(progress);
	}
	,__class__: componetset.Scrolls
});
org.aswing.JLabel = function(text,icon,horizontalAlignment) {
	if(horizontalAlignment == null) horizontalAlignment = 0;
	if(text == null) text = "";
	this.textFilters = null;
	org.aswing.Component.call(this);
	this.setClipMasked(true);
	this.setName("JLabel");
	this.verticalAlignment = 0;
	this.verticalTextPosition = 0;
	this.horizontalTextPosition = 4;
	this.text = text;
	this.icon = icon;
	this.installIcon(icon);
	this.horizontalAlignment = horizontalAlignment;
	this.iconTextGap = 4;
	this.selectable = false;
	this.updateUI();
};
$hxClasses["org.aswing.JLabel"] = org.aswing.JLabel;
org.aswing.JLabel.__name__ = ["org","aswing","JLabel"];
org.aswing.JLabel.__super__ = org.aswing.Component;
org.aswing.JLabel.prototype = $extend(org.aswing.Component.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicLabelUI;
	}
	,getUIClassID: function() {
		return "LabelUI";
	}
	,installIcon: function(icon) {
		if(icon != null && icon.getDisplay(this) != null) this.addChild(icon.getDisplay(this));
	}
	,uninstallIcon: function(icon) {
		var iconDis;
		if(icon == null) iconDis = null; else iconDis = icon.getDisplay(this);
		if(iconDis != null && this.isChild(iconDis)) this.removeChild(icon.getDisplay(this));
	}
	,setText: function(text) {
		if(this.text != text) {
			this.text = text;
			this.repaint();
			this.invalidate();
		}
	}
	,getText: function() {
		return this.text;
	}
	,setSelectable: function(b) {
		this.selectable = b;
	}
	,isSelectable: function() {
		return this.selectable;
	}
	,setTextFilters: function(fs) {
		this.textFilters = fs;
		this.repaint();
	}
	,getTextFilters: function() {
		return this.textFilters;
	}
	,setIcon: function(icon) {
		if(this.icon != icon) {
			this.uninstallIcon(this.icon);
			this.icon = icon;
			this.installIcon(this.icon);
			this.repaint();
			this.invalidate();
		}
	}
	,getIcon: function() {
		return this.icon;
	}
	,getDisabledIcon: function() {
		if(this.disabledIcon == null) {
			if(this.icon != null) {
			}
		}
		return this.disabledIcon;
	}
	,setDisabledIcon: function(disabledIcon) {
		var oldValue = this.disabledIcon;
		this.disabledIcon = disabledIcon;
		if(disabledIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(disabledIcon);
			if(!this.isEnabled()) {
				this.repaint();
				this.invalidate();
			}
		}
	}
	,getVerticalAlignment: function() {
		return this.verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this.verticalAlignment) return; else {
			this.verticalAlignment = alignment | 0;
			this.repaint();
		}
	}
	,getHorizontalAlignment: function() {
		return this.horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this.horizontalAlignment) return; else {
			this.horizontalAlignment = alignment | 0;
			this.repaint();
		}
	}
	,getVerticalTextPosition: function() {
		return this.verticalTextPosition;
	}
	,setVerticalTextPosition: function(textPosition) {
		if(textPosition == this.verticalTextPosition) return; else {
			this.verticalTextPosition = textPosition | 0;
			this.repaint();
			this.revalidate();
		}
	}
	,getHorizontalTextPosition: function() {
		return this.horizontalTextPosition;
	}
	,setHorizontalTextPosition: function(textPosition) {
		if(textPosition == this.horizontalTextPosition) return; else {
			this.horizontalTextPosition = textPosition | 0;
			this.repaint();
			this.revalidate();
		}
	}
	,getIconTextGap: function() {
		return this.iconTextGap;
	}
	,setIconTextGap: function(iconTextGap) {
		var oldValue = this.iconTextGap;
		this.iconTextGap = iconTextGap | 0;
		if(iconTextGap != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,__class__: org.aswing.JLabel
});
org.aswing.table = {};
org.aswing.table.TableCell = function() { };
$hxClasses["org.aswing.table.TableCell"] = org.aswing.table.TableCell;
org.aswing.table.TableCell.__name__ = ["org","aswing","table","TableCell"];
org.aswing.table.TableCell.__interfaces__ = [org.aswing.Cell];
org.aswing.table.TableCell.prototype = {
	__class__: org.aswing.table.TableCell
};
org.aswing.table.DefaultTextCell = function() {
	org.aswing.JLabel.call(this);
	this.setHorizontalAlignment(2);
	this.setOpaque(true);
};
$hxClasses["org.aswing.table.DefaultTextCell"] = org.aswing.table.DefaultTextCell;
org.aswing.table.DefaultTextCell.__name__ = ["org","aswing","table","DefaultTextCell"];
org.aswing.table.DefaultTextCell.__interfaces__ = [org.aswing.table.TableCell];
org.aswing.table.DefaultTextCell.__super__ = org.aswing.JLabel;
org.aswing.table.DefaultTextCell.prototype = $extend(org.aswing.JLabel.prototype,{
	setComBounds: function(b) {
		this.readyToPaint = true;
		if(!b.equals(this.bounds)) {
			if(b.width != this.bounds.width || b.height != this.bounds.height) this.repaint();
			this.bounds.setRect(b);
			this.locate();
			this.valid = false;
		}
	}
	,invalidate: function() {
		this.valid = false;
	}
	,revalidate: function() {
		this.valid = false;
	}
	,setCellValue: function(value) {
		this.value = value;
		this.setText(Std.string(value) + "");
	}
	,getCellValue: function() {
		return this.value;
	}
	,setTableCellStatus: function(table,isSelected,row,column) {
		if(isSelected) {
			this.setBackground(table.getSelectionBackground());
			this.setForeground(table.getSelectionForeground());
		} else {
			this.setBackground(table.getBackground());
			this.setForeground(table.getForeground());
		}
		this.setFont(table.getFont());
	}
	,getCellComponent: function() {
		return this;
	}
	,toString: function() {
		return "TextCell[label:" + org.aswing.JLabel.prototype.toString.call(this) + "]\n";
	}
	,__class__: org.aswing.table.DefaultTextCell
});
componetset.SexIconCell = function() {
	org.aswing.table.DefaultTextCell.call(this);
	this.male_icon = new cases.CircleIcon(org.aswing.ASColor.RED,18,18);
	this.female_icon = new cases.ColorIcon(org.aswing.ASColor.BLUE,18,18);
};
$hxClasses["componetset.SexIconCell"] = componetset.SexIconCell;
componetset.SexIconCell.__name__ = ["componetset","SexIconCell"];
componetset.SexIconCell.__super__ = org.aswing.table.DefaultTextCell;
componetset.SexIconCell.prototype = $extend(org.aswing.table.DefaultTextCell.prototype,{
	setCellValue: function(value) {
		this.value = value;
		this.setText(value.toString());
		if(value != null) this.setIcon(this.male_icon); else this.setIcon(this.female_icon);
	}
	,__class__: componetset.SexIconCell
});
componetset.Windows = function() {
	org.aswing.JPanel.call(this);
	this.name = "Windows, Keys";
	this.append(new org.aswing.JLabel("Ctrl+Shift+MnemonicKey to act the button"));
	var popButton = new org.aswing.JButton("Show a simple &Popup");
	var frameButton = new org.aswing.JButton("Show a &Frame");
	org.aswing.JPanel.prototype.append.call(this,popButton);
	this.append(frameButton);
	this.popup = new org.aswing.JPopup(this,true);
	var closeButton = new org.aswing.JButton("Close");
	var cancelbutton = new org.aswing.JButton("Do nothing");
	this.popup.setLayout(new org.aswing.FlowLayout());
	this.popup.setBorder(new org.aswing.border.TitledBorder(null,"Popup, just a simple popup"));
	this.popup.append(closeButton);
	this.popup.append(cancelbutton);
	this.popup.setSizeWH(400,200);
	this.popup.setLocationXY(100,100);
	closeButton.addActionListener($bind(this,this.__closePopup));
	popButton.addActionListener($bind(this,this.__showPopup));
	frameButton.addActionListener($bind(this,this.__showFrame));
	this.frame = new org.aswing.JFrame(org.aswing.AsWingUtils.getPopupAncestor(this),"A Frame");
	this.frame.setDefaultCloseOperation(1);
	var pane = new org.aswing.JPanel();
	pane.append(new org.aswing.JLabel("Default button is close button(Press Enter to act)"));
	var closeButton2 = new org.aswing.JButton("Close");
	closeButton2.addActionListener($bind(this,this.__closeFrame));
	pane.append(closeButton2);
	var popupChild = new org.aswing.JButton("Popup a owned modal Frame(Shift+P)");
	popupChild.addActionListener($bind(this,this.__popupChild));
	pane.append(popupChild);
	this.frame.setContentPane(pane);
	pane.setBorder(new org.aswing.border.LineBorder(null,org.aswing.ASColor.RED));
	this.frame.setDefaultButton(closeButton2);
	this.frame.setComBoundsXYWH(100,100,400,240);
	this.frame.getKeyboardManager().registerKeyAction(new org.aswing.KeySequence([org.aswing.KeyStroke.VK_SHIFT,org.aswing.KeyStroke.VK_P]),$bind(this,this.__popupChild));
};
$hxClasses["componetset.Windows"] = componetset.Windows;
componetset.Windows.__name__ = ["componetset","Windows"];
componetset.Windows.__super__ = org.aswing.JPanel;
componetset.Windows.prototype = $extend(org.aswing.JPanel.prototype,{
	__showFrame: function(e) {
		this.frame.changeOwner(org.aswing.AsWingUtils.getPopupAncestor(this));
		this.frame.show();
	}
	,__closeFrame: function(e) {
		this.frame.tryToClose();
	}
	,__popupChild: function(e) {
		var fr = new org.aswing.JFrame(this.frame,"Modal Frame",true);
		fr.setComBoundsXYWH(150,150,150,80);
		fr.show();
	}
	,__showPopup: function(e) {
		this.popup.show();
	}
	,__closePopup: function(e) {
		this.popup.dispose();
	}
	,__class__: componetset.Windows
});
var haxe = {};
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.exceptionStack = function() {
	return [];
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe.Resource = function() { };
$hxClasses["haxe.Resource"] = haxe.Resource;
haxe.Resource.__name__ = ["haxe","Resource"];
haxe.Resource.listNames = function() {
	var names = new Array();
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		names.push(x.name);
	}
	return names;
};
haxe.Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe.crypto.Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe._Template = {};
haxe._Template.TemplateExpr = $hxClasses["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"] };
haxe._Template.TemplateExpr.OpVar = function(v) { var $x = ["OpVar",0,v]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; };
haxe._Template.TemplateExpr.OpExpr = function(expr) { var $x = ["OpExpr",1,expr]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; };
haxe._Template.TemplateExpr.OpIf = function(expr,eif,eelse) { var $x = ["OpIf",2,expr,eif,eelse]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; };
haxe._Template.TemplateExpr.OpStr = function(str) { var $x = ["OpStr",3,str]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; };
haxe._Template.TemplateExpr.OpBlock = function(l) { var $x = ["OpBlock",4,l]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; };
haxe._Template.TemplateExpr.OpForeach = function(expr,loop) { var $x = ["OpForeach",5,expr,loop]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; };
haxe._Template.TemplateExpr.OpMacro = function(name,params) { var $x = ["OpMacro",6,name,params]; $x.__enum__ = haxe._Template.TemplateExpr; $x.toString = $estr; return $x; };
haxe.Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) throw "Unexpected '" + Std.string(tokens.first().s) + "'";
};
$hxClasses["haxe.Template"] = haxe.Template;
haxe.Template.__name__ = ["haxe","Template"];
haxe.Template.prototype = {
	execute: function(context,macros) {
		if(macros == null) this.macros = { }; else this.macros = macros;
		this.context = context;
		this.stack = new List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(Object.prototype.hasOwnProperty.call(this.context,v)) return Reflect.field(this.context,v);
		var $it0 = this.stack.iterator();
		while( $it0.hasNext() ) {
			var ctx = $it0.next();
			if(Object.prototype.hasOwnProperty.call(ctx,v)) return Reflect.field(ctx,v);
		}
		if(v == "__current__") return this.context;
		return Reflect.field(haxe.Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new List();
		while(haxe.Template.splitter.match(data)) {
			var p = haxe.Template.splitter.matchedPos();
			if(p.pos > 0) tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe.Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				parp++;
				if(c == 40) npar++; else if(c == 41) {
					npar--;
					if(npar <= 0) break;
				} else if(c == null) throw "Unclosed macro parenthesis";
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else part += String.fromCharCode(c);
			}
			params.push(part);
			tokens.add({ p : haxe.Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) tokens.add({ p : data, s : true, l : null});
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new List();
		while(true) {
			var t = tokens.first();
			if(t == null) break;
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) break;
			l.add(this.parse(tokens));
		}
		if(l.length == 1) return l.first();
		return haxe._Template.TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) return haxe._Template.TemplateExpr.OpStr(p);
		if(t.l != null) {
			var pe = new List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe._Template.TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) throw "Unclosed 'if'";
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") throw "Unclosed 'else'";
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe._Template.TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") throw "Unclosed 'foreach'";
			return haxe._Template.TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe.Template.expr_splitter.match(p)) return haxe._Template.TemplateExpr.OpExpr(this.parseExpr(p));
		return haxe._Template.TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new List();
		var expr = data;
		while(haxe.Template.expr_splitter.match(data)) {
			var p = haxe.Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			var p1 = haxe.Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe.Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) l.add({ p : data, s : true});
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) throw l.first().p;
		} catch( s ) {
			if( js.Boot.__instanceof(s,String) ) {
				throw "Unexpected '" + s + "' in " + expr;
			} else throw(s);
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				throw "Error : " + Std.string(exc) + " in " + expr;
			}
		};
	}
	,makeConst: function(v) {
		haxe.Template.expr_trim.match(v);
		v = haxe.Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe.Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe.Template.expr_float.match(v)) {
			var f = Std.parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") return e;
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) throw field.p;
		var f = field.p;
		haxe.Template.expr_trim.match(f);
		f = haxe.Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) throw "<eof>";
		if(p.s) return this.makeConst(p.p);
		var _g = p.p;
		switch(_g) {
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) throw p1.p;
			if(p1.p == ")") return e1;
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") throw p2.p;
			var _g1 = p1.p;
			switch(_g1) {
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw "Unknown operation " + p1.p;
			}
			break;
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				return v == null || v == false;
			};
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw p.p;
	}
	,run: function(e) {
		switch(e[1]) {
		case 0:
			var v = e[2];
			this.buf.add(Std.string(this.resolve(v)));
			break;
		case 1:
			var e1 = e[2];
			this.buf.add(Std.string(e1()));
			break;
		case 2:
			var eelse = e[4];
			var eif = e[3];
			var e2 = e[2];
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) this.run(eelse);
			} else this.run(eif);
			break;
		case 3:
			var str = e[2];
			if(str == null) this.buf.b += "null"; else this.buf.b += "" + str;
			break;
		case 4:
			var l = e[2];
			var $it0 = l.iterator();
			while( $it0.hasNext() ) {
				var e3 = $it0.next();
				this.run(e3);
			}
			break;
		case 5:
			var loop = e[3];
			var e4 = e[2];
			var v2 = e4();
			try {
				var x = $iterator(v2)();
				if(x.hasNext == null) throw null;
				v2 = x;
			} catch( e5 ) {
				try {
					if(v2.hasNext == null) throw null;
				} catch( e6 ) {
					throw "Cannot iter on " + Std.string(v2);
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			while( v3.hasNext() ) {
				var ctx = v3.next();
				this.context = ctx;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e[3];
			var m = e[2];
			var v4 = Reflect.field(this.macros,m);
			var pl = new Array();
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var $it1 = params.iterator();
			while( $it1.hasNext() ) {
				var p = $it1.next();
				switch(p[1]) {
				case 0:
					var v5 = p[2];
					pl.push(this.resolve(v5));
					break;
				default:
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				this.buf.add(Std.string(v4.apply(this.macros,pl)));
			} catch( e7 ) {
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e8 ) {
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e7) + ")";
				throw msg;
			}
			break;
		}
	}
	,__class__: haxe.Template
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = new Array();
	this.cache = new Array();
	var r = haxe.Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe.Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe.Unserializer;
haxe.Unserializer.__name__ = ["haxe","Unserializer"];
haxe.Unserializer.initCodes = function() {
	var codes = new Array();
	var _g1 = 0;
	var _g = haxe.Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe.Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe.Unserializer.run = function(v) {
	return new haxe.Unserializer(v).unserialize();
};
haxe.Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw "Invalid object";
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw "Invalid object key";
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw "Invalid enum format";
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = new Array();
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			var p1 = this.pos;
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
			}
			return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid string length";
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return Math.NaN;
		case 109:
			return Math.NEGATIVE_INFINITY;
		case 112:
			return Math.POSITIVE_INFINITY;
		case 97:
			var buf = this.buf;
			var a = new Array();
			this.cache.push(a);
			while(true) {
				var c1 = this.buf.charCodeAt(this.pos);
				if(c1 == 104) {
					this.pos++;
					break;
				}
				if(c1 == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw "Invalid reference";
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw "Invalid string reference";
			return this.scache[n2];
		case 120:
			throw this.unserialize();
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw "Class not found " + name;
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw "Enum not found " + name1;
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw "Enum not found " + name2;
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw "Unknown enum index " + name2 + "@" + index;
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe.ds.StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe.ds.IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c2 = this.get(this.pos++);
			while(c2 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c2 = this.get(this.pos++);
			}
			if(c2 != 104) throw "Invalid IntMap format";
			return h1;
		case 77:
			var h2 = new haxe.ds.ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			var s3 = HxOverrides.substr(this.buf,this.pos,19);
			d = HxOverrides.strDate(s3);
			this.cache.push(d);
			this.pos += 19;
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw "Invalid bytes length";
			var codes = haxe.Unserializer.CODES;
			if(codes == null) {
				codes = haxe.Unserializer.initCodes();
				haxe.Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe.io.Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c21 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c21 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c22 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c22 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c22 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw "Class not found " + name3;
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw "Invalid custom data";
			return o2;
		default:
		}
		this.pos--;
		throw "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos;
	}
	,__class__: haxe.Unserializer
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.crypto = {};
haxe.crypto.Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe.crypto.Base64;
haxe.crypto.Base64.__name__ = ["haxe","crypto","Base64"];
haxe.crypto.Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe.crypto.BaseCode(haxe.crypto.Base64.BYTES).decodeBytes(haxe.io.Bytes.ofString(str));
};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.prototype = {
	initTable: function() {
		var tbl = new Array();
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe.io.Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw "BaseCode : invalid encoded char";
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			if(i == null) s.b += "null"; else s.b += "" + i;
			s.b += " => ";
			s.add(Std.string(this.get(i)));
			if(it.hasNext()) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe.ds.StringMap
};
haxe.io.Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
var js = {};
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
openfl.Lib = function(rootElement,width,height) {
	this.mKilled = false;
	this.__scr = rootElement;
	if(this.__scr == null) throw "Root element not found";
	this.__scr.style.setProperty("overflow","hidden","");
	if(this.__scr.style.getPropertyValue("width") != "100%") this.__scr.style.width = width + "px";
	if(this.__scr.style.getPropertyValue("height") != "100%") this.__scr.style.height = height + "px";
};
$hxClasses["openfl.Lib"] = openfl.Lib;
openfl.Lib.__name__ = ["openfl","Lib"];
openfl.Lib.__properties__ = {get_freeSnap:"get_freeSnap",get_stageSnap:"get_stageSnap",get_snap:"get_snap",get_current:"get_current"}
openfl.Lib.addCallback = function(functionName,closure) {
	openfl.Lib.mMe.__scr[functionName] = closure;
};
openfl.Lib["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
openfl.Lib.attach = function(name) {
	return new openfl.display.MovieClip();
};
openfl.Lib.getTimer = function() {
	return Std["int"]((haxe.Timer.stamp() - openfl.Lib.starttime) * 1000);
};
openfl.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl.Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl.Lib.Run = function(tgt,width,height) {
	openfl.Lib.mMe = new openfl.Lib(tgt,width,height);
	var _g1 = 0;
	var _g = tgt.attributes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var attr = tgt.attributes.item(i);
		if(StringTools.startsWith(attr.name,"data-")) {
			if(attr.name == "data-" + "framerate") openfl.Lib.__getStage().set_frameRate(Std.parseFloat(attr.value));
		}
	}
	var _g2 = 0;
	var _g11 = openfl.Lib.HTML_TOUCH_EVENT_TYPES;
	while(_g2 < _g11.length) {
		var type = _g11[_g2];
		++_g2;
		tgt.addEventListener(type,($_=openfl.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	}
	var _g3 = 0;
	var _g12 = openfl.Lib.HTML_TOUCH_ALT_EVENT_TYPES;
	while(_g3 < _g12.length) {
		var type1 = _g12[_g3];
		++_g3;
		tgt.addEventListener(type1,($_=openfl.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	}
	var _g4 = 0;
	var _g13 = openfl.Lib.HTML_DIV_EVENT_TYPES;
	while(_g4 < _g13.length) {
		var type2 = _g13[_g4];
		++_g4;
		tgt.addEventListener(type2,($_=openfl.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	}
	if(Reflect.hasField(window,"on" + "devicemotion")) window.addEventListener("devicemotion",($_=openfl.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	if(Reflect.hasField(window,"on" + "orientationchange")) window.addEventListener("orientationchange",($_=openfl.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),true);
	var _g5 = 0;
	var _g14 = openfl.Lib.HTML_WINDOW_EVENT_TYPES;
	while(_g5 < _g14.length) {
		var type3 = _g14[_g5];
		++_g5;
		window.addEventListener(type3,($_=openfl.Lib.__getStage(),$bind($_,$_.__queueStageEvent)),false);
	}
	return openfl.Lib.mMe;
};
openfl.Lib.setUserScalable = function(isScalable) {
	if(isScalable == null) isScalable = true;
	var meta = window.document.createElement("meta");
	meta.name = "viewport";
	meta.content = "user-scalable=" + (isScalable?"yes":"no");
};
openfl.Lib.trace = function(arg) {
	if(window.console != null) window.console.log(arg);
};
openfl.Lib.__appendSurface = function(surface,before,after,parent) {
	if(openfl.Lib.mMe.__scr != null) {
		if(before != null) surface.insertBefore(before); else if(after != null) surface.insertAfter(after); else if(parent != null) parent.append(surface); else openfl.Lib.get_stageSnap().append(surface);
	}
};
openfl.Lib.__appendText = function(surface,container,text,wrap,isHtml) {
	var _g1 = 0;
	var _g = surface.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		surface.removeChild(surface.childNodes[i]);
	}
	if(isHtml) container.innerHTML = text; else container.appendChild(window.document.createTextNode(text));
	container.style.setProperty("position","relative","");
	container.style.setProperty("cursor","default","");
	if(!wrap) container.style.setProperty("white-space","nowrap","");
	surface.appendChild(container);
};
openfl.Lib.__bootstrap = function() {
	if(openfl.Lib.mMe == null) {
		var target = window.document.getElementById("haxe:openfl");
		if(target == null) target = window.document.createElement("div");
		openfl.Lib.Run(target,openfl.Lib.__getWidth(),openfl.Lib.__getHeight());
	}
};
openfl.Lib.__copyStyle = function(src,tgt) {
	tgt.id = src.id;
	var _g = 0;
	var _g1 = ["left","top","transform","transform-origin","-moz-transform","-moz-transform-origin","-webkit-transform","-webkit-transform-origin","-o-transform","-o-transform-origin","opacity","display"];
	while(_g < _g1.length) {
		var prop = _g1[_g];
		++_g;
		tgt.style.setProperty(prop,src.style.getPropertyValue(prop),"");
	}
};
openfl.Lib.__createSurfaceAnimationCSS = function(surface,data,template,templateFunc,fps,discrete,infinite) {
	if(infinite == null) infinite = false;
	if(discrete == null) discrete = false;
	if(fps == null) fps = 25;
	if(surface.id == null || surface.id == "") {
		openfl.Lib.trace("Failed to create a CSS Style tag for a surface without an id attribute");
		return null;
	}
	var style = null;
	if(surface.getAttribute("data-openfl-anim") != null) style = window.document.getElementById(surface.getAttribute("data-openfl-anim")); else {
		style = openfl.Lib.mMe.__scr.appendChild(window.document.createElement("style"));
		style.sheet.id = "__openfl_anim_" + surface.id + "__";
		surface.setAttribute("data-openfl-anim",style.sheet.id);
	}
	var keyframeStylesheetRule = "";
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var perc = i / (data.length - 1) * 100;
		var frame = data[i];
		keyframeStylesheetRule += perc + "% { " + template.execute(templateFunc(frame)) + " } ";
	}
	var animationDiscreteRule;
	if(discrete) animationDiscreteRule = "steps(::steps::, end)"; else animationDiscreteRule = "";
	var animationInfiniteRule;
	if(infinite) animationInfiniteRule = "infinite"; else animationInfiniteRule = "";
	var animationTpl = "";
	var _g2 = 0;
	var _g11 = ["animation","-moz-animation","-webkit-animation","-o-animation","-ms-animation"];
	while(_g2 < _g11.length) {
		var prefix = _g11[_g2];
		++_g2;
		animationTpl += prefix + ": ::id:: ::duration::s " + animationDiscreteRule + " " + animationInfiniteRule + "; ";
	}
	var animationStylesheetRule = new haxe.Template(animationTpl).execute({ id : surface.id, duration : data.length / fps, steps : 1});
	var rules;
	if(style.sheet.rules != null) rules = style.sheet.rules; else rules = style.sheet.cssRules;
	var _g3 = 0;
	var _g12 = ["","-moz-","-webkit-","-o-","-ms-"];
	while(_g3 < _g12.length) {
		var variant = _g12[_g3];
		++_g3;
		try {
			style.sheet.insertRule("@" + variant + "keyframes " + surface.id + " {" + keyframeStylesheetRule + "}",rules.length);
		} catch( e ) {
		}
	}
	style.sheet.insertRule("#" + surface.id + " { " + animationStylesheetRule + " } ",rules.length);
	return style;
};
openfl.Lib.__designMode = function(mode) {
	if(mode) window.document.designMode = "on"; else window.document.designMode = "off";
};
openfl.Lib.__disableFullScreen = function() {
};
openfl.Lib.__disableRightClick = function() {
	if(openfl.Lib.mMe != null) try {
		openfl.Lib.mMe.__scr.oncontextmenu = function() {
			return false;
		};
	} catch( e ) {
		openfl.Lib.trace("Disable right click not supported in this browser.");
	}
};
openfl.Lib.__drawClippedImage = function(surface,tgtCtx,clipRect) {
	if(clipRect != null) {
		if(clipRect.x < 0) {
			clipRect.width += clipRect.x;
			clipRect.x = 0;
		}
		if(clipRect.y < 0) {
			clipRect.height += clipRect.y;
			clipRect.y = 0;
		}
		if(clipRect.width > surface.width - clipRect.x) clipRect.width = surface.width - clipRect.x;
		if(clipRect.height > surface.height - clipRect.y) clipRect.height = surface.height - clipRect.y;
		tgtCtx.drawImage(surface,clipRect.x,clipRect.y,clipRect.width,clipRect.height,clipRect.x,clipRect.y,clipRect.width,clipRect.height);
	} else tgtCtx.drawImage(surface,0,0);
};
openfl.Lib.__drawSurfaceRect = function(surface,tgt,x,y,rect) {
	var tgtCtx = tgt.getContext("2d");
	tgt.width = rect.width;
	tgt.height = rect.height;
	tgtCtx.drawImage(surface,rect.x,rect.y,rect.width,rect.height,0,0,rect.width,rect.height);
	tgt.style.left = x + "px";
	tgt.style.top = y + "px";
};
openfl.Lib.__drawToSurface = function(surface,tgt,matrix,alpha,clipRect,smoothing) {
	if(smoothing == null) smoothing = true;
	if(alpha == null) alpha = 1.0;
	var srcCtx = surface.getContext("2d");
	var tgtCtx = tgt.getContext("2d");
	tgtCtx.globalAlpha = alpha;
	openfl.Lib.__setImageSmoothing(tgtCtx,smoothing);
	if(surface.width > 0 && surface.height > 0) {
		if(matrix != null) {
			tgtCtx.save();
			if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1) tgtCtx.translate(matrix.tx,matrix.ty); else tgtCtx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			openfl.Lib.__drawClippedImage(surface,tgtCtx,clipRect);
			tgtCtx.restore();
		} else openfl.Lib.__drawClippedImage(surface,tgtCtx,clipRect);
	}
};
openfl.Lib.__enableFullScreen = function() {
	if(openfl.Lib.mMe != null) {
		var origWidth = openfl.Lib.mMe.__scr.style.getPropertyValue("width");
		var origHeight = openfl.Lib.mMe.__scr.style.getPropertyValue("height");
		openfl.Lib.mMe.__scr.style.setProperty("width","100%","");
		openfl.Lib.mMe.__scr.style.setProperty("height","100%","");
		openfl.Lib.__disableFullScreen = function() {
			openfl.Lib.mMe.__scr.style.setProperty("width",origWidth,"");
			openfl.Lib.mMe.__scr.style.setProperty("height",origHeight,"");
		};
	}
};
openfl.Lib.__enableRightClick = function() {
	if(openfl.Lib.mMe != null) try {
		openfl.Lib.mMe.__scr.oncontextmenu = null;
	} catch( e ) {
		openfl.Lib.trace("Enable right click not supported in this browser.");
	}
};
openfl.Lib.__fullScreenHeight = function() {
	return window.innerHeight;
};
openfl.Lib.__fullScreenWidth = function() {
	return window.innerWidth;
};
openfl.Lib.__getHeight = function() {
	var tgt;
	if(openfl.Lib.mMe != null) tgt = openfl.Lib.mMe.__scr; else tgt = window.document.getElementById("haxe:openfl");
	if(tgt != null && tgt.clientHeight > 0) return tgt.clientHeight; else return 500;
};
openfl.Lib.__getStage = function() {
	if(openfl.Lib.mStage == null) {
		var width = openfl.Lib.__getWidth();
		var height = openfl.Lib.__getHeight();
		openfl.Lib.mStage = new openfl.display.Stage(width,height);
	}
	return openfl.Lib.mStage;
};
openfl.Lib.__getWidth = function() {
	var tgt;
	if(openfl.Lib.mMe != null) tgt = openfl.Lib.mMe.__scr; else tgt = window.document.getElementById("haxe:openfl");
	if(tgt != null && tgt.clientWidth > 0) return tgt.clientWidth; else return 500;
};
openfl.Lib.__isOnStage = function(p) {
	while(p != null && p.node != openfl.Lib.get_stageSnap().node) p = p.parent();
	return p != null;
};
openfl.Lib.__parseColor = function(str,cb) {
	var re = new EReg("rgb\\(([0-9]*), ?([0-9]*), ?([0-9]*)\\)","");
	var hex = new EReg("#([0-9a-zA-Z][0-9a-zA-Z])([0-9a-zA-Z][0-9a-zA-Z])([0-9a-zA-Z][0-9a-zA-Z])","");
	if(re.match(str)) {
		var col = 0;
		var _g = 1;
		while(_g < 4) {
			var pos = _g++;
			var v = Std.parseInt(re.matched(pos));
			col = cb(col,pos - 1,v);
		}
		return col;
	} else if(hex.match(str)) {
		var col1 = 0;
		var _g1 = 1;
		while(_g1 < 4) {
			var pos1 = _g1++;
			var v1 = "0x" + hex.matched(pos1) & 255;
			v1 = cb(col1,pos1 - 1,v1);
		}
		return col1;
	} else throw "Cannot parse color '" + str + "'.";
};
openfl.Lib.__removeSurface = function(surface) {
	surface.remove();
	return surface;
};
openfl.Lib.__setSurfaceBorder = function(surface,color,size) {
	surface.style.setProperty("border-color","#" + StringTools.hex(color),"");
	surface.style.setProperty("border-style","solid","");
	surface.style.setProperty("border-width",size + "px","");
	surface.style.setProperty("border-collapse","collapse","");
};
openfl.Lib.__setSurfaceClipping = function(surface,rect) {
};
openfl.Lib.__setSurfaceFont = function(surface,font,bold,size,color,align,lineHeight) {
	surface.style.setProperty("font-family",font,"");
	surface.style.setProperty("font-weight",bold == null?"null":"" + bold,"");
	surface.style.setProperty("color","#" + StringTools.hex(color),"");
	surface.style.setProperty("font-size",size + "px","");
	surface.style.setProperty("text-align",align,"");
	surface.style.setProperty("line-height",lineHeight + "px","");
};
openfl.Lib.__setSurfaceOpacity = function(surface,alpha) {
	surface.attr({ opacity : alpha == null?"null":"" + alpha});
};
openfl.Lib.__setSurfacePadding = function(surface,padding,margin,display) {
	surface.style.setProperty("padding",padding + "px","");
	surface.style.setProperty("margin",margin + "px","");
	surface.style.setProperty("top",padding + 2 + "px","");
	surface.style.setProperty("right",padding + 1 + "px","");
	surface.style.setProperty("left",padding + 1 + "px","");
	surface.style.setProperty("bottom",padding + 1 + "px","");
	surface.style.setProperty("display",display?"inline":"block","");
};
openfl.Lib.__setSurfaceZIndexAfter = function(surface1,surface2) {
	if(surface1 != null && surface2 != null) {
		if(surface1.parentNode != surface2.parentNode && surface2.parentNode != null) surface2.parentNode.appendChild(surface1);
		if(surface2.parentNode != null) {
			var nextSibling = surface2.nextSibling;
			if(surface1.previousSibling != surface2) {
				var swap = openfl.Lib.__removeSurface(surface1);
				if(nextSibling == null) surface2.parentNode.appendChild(swap); else surface2.parentNode.insertBefore(swap,nextSibling);
			}
		}
	}
};
openfl.Lib.__swapSurface = function(snap1,snap2) {
	var surface1 = snap1.node;
	var surface2 = snap2.node;
	var parent1 = surface1.parentNode;
	var parent2 = surface2.parentNode;
	if(parent1 != null && parent2 != null) {
		if(parent1 == parent2) {
			var next1 = surface1.nextSibling;
			var next2 = surface2.nextSibling;
			if(next1 == surface2) parent1.insertBefore(surface2,surface1); else if(next2 == surface1) parent1.insertBefore(surface1,surface2); else {
				parent1.replaceChild(surface2,surface1);
				if(next2 != null) parent1.insertBefore(surface1,next2); else parent1.appendChild(surface1);
			}
		} else {
			var next21 = surface2.nextSibling;
			parent1.replaceChild(surface2,surface1);
			if(next21 != null) parent2.insertBefore(surface1,next21); else parent2.appendChild(surface1);
		}
	}
};
openfl.Lib.__setContentEditable = function(surface,contentEditable) {
	if(contentEditable == null) contentEditable = true;
	surface.setAttribute("contentEditable",contentEditable?"true":"false");
};
openfl.Lib.__setCursor = function(type) {
	if(openfl.Lib.mMe != null) switch(type[1]) {
	case 0:
		openfl.Lib.mMe.__scr.style.cursor = "pointer";
		break;
	case 1:
		openfl.Lib.mMe.__scr.style.cursor = "text";
		break;
	default:
		openfl.Lib.mMe.__scr.style.cursor = "default";
	}
};
openfl.Lib.__setImageSmoothing = function(context,enabled) {
	var _g = 0;
	var _g1 = ["imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled"];
	while(_g < _g1.length) {
		var variant = _g1[_g];
		++_g;
		context[variant] = enabled;
	}
};
openfl.Lib.__setSurfaceAlign = function(surface,align) {
	surface.style.setProperty("text-align",align,"");
};
openfl.Lib.__setSurfaceId = function(surface,name) {
	var regex = new EReg("[^a-zA-Z0-9\\-]","g");
	surface.attr({ id : regex.replace(name,"_")});
};
openfl.Lib.__setSurfaceRotation = function(surface,rotate) {
	surface.style.setProperty("transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-moz-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-webkit-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-o-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-ms-transform","rotate(" + rotate + "deg)","");
};
openfl.Lib.__setSurfaceScale = function(surface,scale) {
	surface.style.setProperty("transform","scale(" + scale + ")","");
	surface.style.setProperty("-moz-transform","scale(" + scale + ")","");
	surface.style.setProperty("-webkit-transform","scale(" + scale + ")","");
	surface.style.setProperty("-o-transform","scale(" + scale + ")","");
	surface.style.setProperty("-ms-transform","scale(" + scale + ")","");
};
openfl.Lib.__setSurfaceSpritesheetAnimation = function(surface,spec,fps) {
	return null;
};
openfl.Lib.__setSurfaceVisible = function(snap,visible) {
	snap.attr({ visibility : visible?"visible":"hidden"});
};
openfl.Lib.__setTextDimensions = function(surface,width,height,align) {
	surface.style.setProperty("width",width + "px","");
	surface.style.setProperty("height",height + "px","");
	surface.style.setProperty("overflow","hidden","");
	surface.style.setProperty("text-align",align,"");
};
openfl.Lib.__surfaceHitTest = function(surface,x,y) {
	var _g1 = 0;
	var _g = surface.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var node = surface.childNodes[i];
		if(x >= node.offsetLeft && x <= node.offsetLeft + node.offsetWidth && y >= node.offsetTop && y <= node.offsetTop + node.offsetHeight) return true;
	}
	return false;
};
openfl.Lib.get_current = function() {
	if(openfl.Lib.mMainClassRoot == null) {
		openfl.Lib.mMainClassRoot = new openfl.display.MovieClip();
		openfl.Lib.mCurrent = openfl.Lib.mMainClassRoot;
		openfl.Lib.__getStage().addChild(openfl.Lib.mCurrent);
		openfl.Lib.mMainClassRoot.get_graphics().beginFill(openfl.Lib.__getStage().get_backgroundColor(),0);
		openfl.Lib.mMainClassRoot.get_graphics().drawRect(0,0,openfl.Lib.__getWidth(),openfl.Lib.__getHeight());
		openfl.Lib.__setSurfaceId(openfl.Lib.mMainClassRoot.snap,"Root MovieClip");
		openfl.Lib.__getStage().__updateNextWake();
	}
	return openfl.Lib.mMainClassRoot;
};
openfl.Lib.get_snap = function() {
	if(openfl.Lib.mSnap == null) openfl.Lib.mSnap = new Snap("#" + "haxe-openfl-svg");
	return openfl.Lib.mSnap;
};
openfl.Lib.get_stageSnap = function() {
	if(openfl.Lib.mStageSnap == null) {
		var _this = openfl.Lib.get_snap();
		var e123 = [];
		var me123 = _this;
		openfl.Lib.mStageSnap = me123.group.apply(me123, e123);
		openfl.Lib.mStageSnap.attr({ id : "haxe-openfl-svg" + "-stage"});
	}
	return openfl.Lib.mStageSnap;
};
openfl.Lib.get_freeSnap = function() {
	if(openfl.Lib.mFreeSnap == null) {
		var _this = openfl.Lib.get_snap();
		var e123 = [];
		var me123 = _this;
		openfl.Lib.mFreeSnap = me123.group.apply(me123, e123);
		openfl.Lib.mFreeSnap.attr({ id : "haxe-openfl-svg" + "-free", visibility : "hidden"});
	}
	return openfl.Lib.mFreeSnap;
};
openfl.Lib.prototype = {
	__class__: openfl.Lib
};
openfl._Lib = {};
openfl._Lib.CursorType = $hxClasses["openfl._Lib.CursorType"] = { __ename__ : true, __constructs__ : ["Pointer","Text","Default"] };
openfl._Lib.CursorType.Pointer = ["Pointer",0];
openfl._Lib.CursorType.Pointer.toString = $estr;
openfl._Lib.CursorType.Pointer.__enum__ = openfl._Lib.CursorType;
openfl._Lib.CursorType.Text = ["Text",1];
openfl._Lib.CursorType.Text.toString = $estr;
openfl._Lib.CursorType.Text.__enum__ = openfl._Lib.CursorType;
openfl._Lib.CursorType.Default = ["Default",2];
openfl._Lib.CursorType.Default.toString = $estr;
openfl._Lib.CursorType.Default.__enum__ = openfl._Lib.CursorType;
openfl._Vector = {};
openfl._Vector.Vector_Impl_ = function() { };
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl._Vector.Vector_Impl_;
openfl._Vector.Vector_Impl_.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl._Vector.Vector_Impl_._new = function(length,fixed) {
	return new Array();
};
openfl._Vector.Vector_Impl_.concat = function(this1,a) {
	var a1 = this1.concat(a);
	return a1;
};
openfl._Vector.Vector_Impl_.copy = function(this1) {
	var a = this1.slice();
	return a;
};
openfl._Vector.Vector_Impl_.iterator = function(this1) {
	return HxOverrides.iter(this1);
};
openfl._Vector.Vector_Impl_.join = function(this1,sep) {
	return this1.join(sep);
};
openfl._Vector.Vector_Impl_.pop = function(this1) {
	return this1.pop();
};
openfl._Vector.Vector_Impl_.push = function(this1,x) {
	return this1.push(x);
};
openfl._Vector.Vector_Impl_.reverse = function(this1) {
	this1.reverse();
};
openfl._Vector.Vector_Impl_.shift = function(this1) {
	return this1.shift();
};
openfl._Vector.Vector_Impl_.unshift = function(this1,x) {
	this1.unshift(x);
};
openfl._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	var a = this1.slice(pos,end);
	return a;
};
openfl._Vector.Vector_Impl_.sort = function(this1,f) {
	this1.sort(f);
};
openfl._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	var a = this1.splice(pos,len);
	return a;
};
openfl._Vector.Vector_Impl_.toString = function(this1) {
	return this1.toString();
};
openfl._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1[i] == x) return i;
	}
	return -1;
};
openfl._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1[i] == x) return i;
		i--;
	}
	return -1;
};
openfl._Vector.Vector_Impl_.ofArray = function(a) {
	return openfl._Vector.Vector_Impl_.concat(openfl._Vector.Vector_Impl_._new(),a);
};
openfl._Vector.Vector_Impl_.convert = function(v) {
	return v;
};
openfl._Vector.Vector_Impl_.fromArray = function(a) {
	return a;
};
openfl._Vector.Vector_Impl_.toArray = function(this1) {
	return this1;
};
openfl._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
openfl._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(value < this1.length) this1 = this1.slice(0,value);
	while(value > this1.length) this1.push(null);
	return value;
};
openfl._Vector.Vector_Impl_.get_fixed = function(this1) {
	return false;
};
openfl._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return value;
};
openfl.accessibility = {};
openfl.accessibility.AccessibilityProperties = function() {
	this.description = "";
	this.forceSimple = false;
	this.name = "";
	this.noAutoLabeling = false;
	this.shortcut = "";
	this.silent = false;
};
$hxClasses["openfl.accessibility.AccessibilityProperties"] = openfl.accessibility.AccessibilityProperties;
openfl.accessibility.AccessibilityProperties.__name__ = ["openfl","accessibility","AccessibilityProperties"];
openfl.accessibility.AccessibilityProperties.prototype = {
	__class__: openfl.accessibility.AccessibilityProperties
};
openfl.display.Bitmap = function(inBitmapData,inPixelSnapping,inSmoothing) {
	if(inSmoothing == null) inSmoothing = false;
	openfl.display.DisplayObject.call(this);
	this.pixelSnapping = inPixelSnapping;
	this.smoothing = inSmoothing;
	if(inBitmapData != null) {
		this.set_bitmapData(inBitmapData);
		this.bitmapData.__referenceCount++;
	}
	if(this.pixelSnapping == null) this.pixelSnapping = openfl.display.PixelSnapping.AUTO;
	if(this.__graphics == null) {
		this.__graphics = new openfl.display.Graphics();
		this.__graphics.displayObject = this;
	}
	if(this.bitmapData != null) this.__render();
};
$hxClasses["openfl.display.Bitmap"] = openfl.display.Bitmap;
openfl.display.Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl.display.Bitmap.__super__ = openfl.display.DisplayObject;
openfl.display.Bitmap.prototype = $extend(openfl.display.DisplayObject.prototype,{
	getBitmapSurfaceTransform: function(gfx) {
		var extent = gfx.__extentWithFilters;
		var fm = this.transform.__getFullMatrix(null);
		fm.__translateTransformed(extent.get_topLeft());
		return fm;
	}
	,toString: function() {
		return "[Bitmap name=" + this.name + " id=" + this.___id + "]";
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			openfl.display.DisplayObject.prototype.validateBounds.call(this);
			if(this.bitmapData != null) {
				var r = new openfl.geom.Rectangle(0,0,this.bitmapData.get_width(),this.bitmapData.get_height());
				if(r.width != 0 || r.height != 0) {
					if(this.__boundsRect.width == 0 && this.__boundsRect.height == 0) this.__boundsRect = r.clone(); else this.__boundsRect.extendBounds(r);
				}
			}
			if(this.scale9Grid != null) {
				this.__boundsRect.width *= this.__scaleX;
				this.__boundsRect.height *= this.__scaleY;
				this.__width = this.__boundsRect.width;
				this.__height = this.__boundsRect.height;
			} else {
				this.__width = this.__boundsRect.width * this.__scaleX;
				this.__height = this.__boundsRect.height * this.__scaleY;
			}
		}
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null; else if(this.bitmapData != null) {
			var local = this.globalToLocal(point);
			if(local.x < 0 || local.y < 0 || local.x > this.get_width() / this.get_scaleX() || local.y > this.get_height() / this.get_scaleY()) return null; else return this;
		} else return openfl.display.DisplayObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,__render: function(inMask,clipRect) {
		if(!this.__combinedVisible) return;
		if(this.bitmapData == null) return;
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		var imageDataLease = this.bitmapData.__lease;
		if(imageDataLease != null && (this.__currentLease == null || imageDataLease.seed != this.__currentLease.seed || imageDataLease.time != this.__currentLease.time)) {
			var srcCanvas = this.bitmapData.___textureBuffer;
			var child = this.snap.select("*");
			if(null != child) child.remove();
			this.snap.append(openfl.Lib.get_snap().image(srcCanvas.toDataURL("image/png"),0,0,srcCanvas.width,srcCanvas.height));
			this.__currentLease = imageDataLease.clone();
			this.__applyFilters(this.snap);
			this.___renderFlags |= 32;
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		if(inMask != null) {
		} else {
			if((this.___renderFlags & 32) != 0) {
				var m = this.getSurfaceTransform();
				this.__setTransform(m);
				this.___renderFlags &= -33;
			}
			var el = this.snap.node;
			el.setAttribute("opacity",Std.string(this.alpha));
		}
	}
	,set_bitmapData: function(inBitmapData) {
		if(inBitmapData != this.bitmapData) {
			if(this.bitmapData != null) this.bitmapData.__referenceCount--;
			if(inBitmapData != null) inBitmapData.__referenceCount++;
		}
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.renderNextWake();
		this.bitmapData = inBitmapData;
		return inBitmapData;
	}
	,__class__: openfl.display.Bitmap
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
openfl.display.BitmapData = function(width,height,transparent,inFillColor) {
	if(inFillColor == null) inFillColor = -1;
	if(transparent == null) transparent = true;
	this.__locked = false;
	this.__referenceCount = 0;
	this.__leaseNum = 0;
	this.__lease = new openfl.display.ImageDataLease();
	this.__lease.set(this.__leaseNum++,new Date().getTime());
	this.___textureBuffer = window.document.createElement("canvas");
	this.___textureBuffer.width = width;
	this.___textureBuffer.height = height;
	this.__sourceCanvas = this.___textureBuffer;
	this.___id = openfl.utils.Uuid.uuid();
	this.__transparent = transparent;
	this.rect = new openfl.geom.Rectangle(0,0,width,height);
	if(this.__transparent) {
		this.__transparentFiller = window.document.createElement("canvas");
		this.__transparentFiller.width = width;
		this.__transparentFiller.height = height;
		var ctx = this.__transparentFiller.getContext("2d");
		ctx.fillStyle = "rgba(0,0,0,0);";
		ctx.fill();
	}
	if(inFillColor != null && width > 0 && height > 0) {
		if(!this.__transparent) inFillColor |= -16777216;
		this.__initColor = inFillColor;
		this.__fillRect(this.rect,inFillColor);
	}
};
$hxClasses["openfl.display.BitmapData"] = openfl.display.BitmapData;
openfl.display.BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl.display.BitmapData.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.BitmapData.getRGBAPixels = function(bitmapData) {
	var p = bitmapData.getPixels(new openfl.geom.Rectangle(0,0,bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.width:0,bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.height:0));
	var num;
	num = (bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.width:0) * (bitmapData.___textureBuffer != null?bitmapData.___textureBuffer.height:0);
	p.position = 0;
	var _g = 0;
	while(_g < num) {
		var i = _g++;
		var pos = p.position;
		var alpha = p.readByte();
		var red = p.readByte();
		var green = p.readByte();
		var blue = p.readByte();
		p.position = pos;
		p.writeByte(red);
		p.writeByte(green);
		p.writeByte(blue);
		p.writeByte(alpha);
	}
	return p;
};
openfl.display.BitmapData.loadFromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0);
	bitmapData.__loadFromBase64(base64,type,onload);
	return bitmapData;
};
openfl.display.BitmapData.loadFromBytes = function(bytes,inRawAlpha,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0);
	bitmapData.__loadFromBytes(bytes,inRawAlpha,onload);
	return bitmapData;
};
openfl.display.BitmapData.__base64Encode = function(bytes) {
	var blob = "";
	var codex = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	bytes.position = 0;
	while(bytes.position < bytes.length) {
		var by1 = 0;
		var by2 = 0;
		var by3 = 0;
		by1 = bytes.readByte();
		if(bytes.position < bytes.length) by2 = bytes.readByte();
		if(bytes.position < bytes.length) by3 = bytes.readByte();
		var by4 = 0;
		var by5 = 0;
		var by6 = 0;
		var by7 = 0;
		by4 = by1 >> 2;
		by5 = (by1 & 3) << 4 | by2 >> 4;
		by6 = (by2 & 15) << 2 | by3 >> 6;
		by7 = by3 & 63;
		blob += codex.charAt(by4);
		blob += codex.charAt(by5);
		if(bytes.position < bytes.length) blob += codex.charAt(by6); else blob += "=";
		if(bytes.position < bytes.length) blob += codex.charAt(by7); else blob += "=";
	}
	return blob;
};
openfl.display.BitmapData.__createFromHandle = function(inHandle) {
	var result = new openfl.display.BitmapData(0,0);
	result.___textureBuffer = inHandle;
	return result;
};
openfl.display.BitmapData.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readByte() == 255 && bytes.readByte() == 216;
};
openfl.display.BitmapData.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readByte() == 137 && bytes.readByte() == 80 && bytes.readByte() == 78 && bytes.readByte() == 71 && bytes.readByte() == 13 && bytes.readByte() == 10 && bytes.readByte() == 26 && bytes.readByte() == 10;
};
openfl.display.BitmapData.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readByte() == 71 && bytes.readByte() == 73 && bytes.readByte() == 70 && bytes.readByte() == 38) {
		var b = bytes.readByte();
		return (b == 7 || b == 9) && bytes.readByte() == 97;
	}
	return false;
};
openfl.display.BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(sourceBitmapData == this && sourceRect.x == destPoint.x && sourceRect.y == destPoint.y) filter.__applyFilter(this.___textureBuffer,sourceRect); else {
			var bitmapData = new openfl.display.BitmapData(sourceRect.width | 0,sourceRect.height | 0);
			bitmapData.copyPixels(sourceBitmapData,sourceRect,new openfl.geom.Point());
			filter.__applyFilter(bitmapData.___textureBuffer);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
		}
	}
	,clear: function(color) {
		this.fillRect(this.rect,color);
	}
	,clipRect: function(r) {
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= (this.___textureBuffer != null?this.___textureBuffer.width:0)) {
			r.width -= r.x + r.width - (this.___textureBuffer != null?this.___textureBuffer.width:0);
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) {
			r.height -= r.y + r.height - (this.___textureBuffer != null?this.___textureBuffer.height:0);
			if(r.height <= 0) return null;
		}
		return r;
	}
	,clone: function() {
		var bitmapData = new openfl.display.BitmapData(this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0,this.__transparent);
		var rect = new openfl.geom.Rectangle(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
		bitmapData.setPixels(rect,this.getPixels(rect));
		bitmapData.__lease.set(bitmapData.__leaseNum++,new Date().getTime());
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(rect == null) return;
		rect = this.clipRect(rect);
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imagedata = ctx.getImageData(rect.x,rect.y,rect.width,rect.height);
			var offsetX;
			var _g1 = 0;
			var _g = imagedata.data.length >> 2;
			while(_g1 < _g) {
				var i = _g1++;
				offsetX = i * 4;
				imagedata.data[offsetX] = imagedata.data[offsetX] * colorTransform.redMultiplier + colorTransform.redOffset | 0;
				imagedata.data[offsetX + 1] = imagedata.data[offsetX + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset | 0;
				imagedata.data[offsetX + 2] = imagedata.data[offsetX + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset | 0;
				imagedata.data[offsetX + 3] = imagedata.data[offsetX + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset | 0;
			}
			ctx.putImageData(imagedata,rect.x,rect.y);
		} else {
			var s = 4 * (Math.round(rect.x) + Math.round(rect.y) * this.__imageData.width);
			var offsetY;
			var offsetX1;
			var _g11 = 0;
			var _g2 = Math.round(rect.height);
			while(_g11 < _g2) {
				var i1 = _g11++;
				offsetY = i1 * this.__imageData.width;
				var _g3 = 0;
				var _g21 = Math.round(rect.width);
				while(_g3 < _g21) {
					var j = _g3++;
					offsetX1 = 4 * (j + offsetY);
					this.__imageData.data[s + offsetX1] = this.__imageData.data[s + offsetX1] * colorTransform.redMultiplier + colorTransform.redOffset | 0;
					this.__imageData.data[s + offsetX1 + 1] = this.__imageData.data[s + offsetX1 + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset | 0;
					this.__imageData.data[s + offsetX1 + 2] = this.__imageData.data[s + offsetX1 + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset | 0;
					this.__imageData.data[s + offsetX1 + 3] = this.__imageData.data[s + offsetX1 + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset | 0;
				}
			}
			this.__imageDataChanged = true;
		}
	}
	,compare: function(inBitmapTexture) {
		throw "bitmapData.compare is currently not supported for HTML5";
		return 0;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		this.rect = this.clipRect(this.rect);
		if(this.rect == null) return;
		if(destChannel == 8 && !this.__transparent) return;
		if(sourceBitmapData.___textureBuffer == null || this.___textureBuffer == null || sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceBitmapData.___textureBuffer.width) sourceRect.width = sourceBitmapData.___textureBuffer.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceBitmapData.___textureBuffer.height) sourceRect.height = sourceBitmapData.___textureBuffer.height - sourceRect.y;
		var doChannelCopy = function(imageData) {
			var srcCtx = sourceBitmapData.___textureBuffer.getContext("2d");
			var srcImageData = srcCtx.getImageData(sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height);
			var destIdx = -1;
			if(destChannel == 8) destIdx = 3; else if(destChannel == 4) destIdx = 2; else if(destChannel == 2) destIdx = 1; else if(destChannel == 1) destIdx = 0; else throw "Invalid destination BitmapDataChannel passed to BitmapData::copyChannel.";
			var pos = 4 * (Math.round(destPoint.x) + Math.round(destPoint.y) * imageData.width) + destIdx;
			var boundR = Math.round(4 * (destPoint.x + sourceRect.width));
			var setPos = function(val) {
				if(pos % (imageData.width * 4) > boundR - 1) pos += imageData.width * 4 - boundR;
				imageData.data[pos] = val;
				pos += 4;
			};
			var srcIdx = -1;
			if(sourceChannel == 8) srcIdx = 3; else if(sourceChannel == 4) srcIdx = 2; else if(sourceChannel == 2) srcIdx = 1; else if(sourceChannel == 1) srcIdx = 0; else throw "Invalid source BitmapDataChannel passed to BitmapData::copyChannel.";
			while(srcIdx < srcImageData.data.length) {
				setPos(srcImageData.data[srcIdx]);
				srcIdx += 4;
			}
		};
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData1 = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
			doChannelCopy(imageData1);
			ctx.putImageData(imageData1,0,0);
		} else {
			doChannelCopy(this.__imageData);
			this.__imageDataChanged = true;
		}
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(sourceBitmapData.___textureBuffer == null || this.___textureBuffer == null || sourceBitmapData.___textureBuffer.width == 0 || sourceBitmapData.___textureBuffer.height == 0 || sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceBitmapData.___textureBuffer.width) sourceRect.width = sourceBitmapData.___textureBuffer.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceBitmapData.___textureBuffer.height) sourceRect.height = sourceBitmapData.___textureBuffer.height - sourceRect.y;
		if(alphaBitmapData != null && alphaBitmapData.__transparent) {
			if(alphaPoint == null) alphaPoint = new openfl.geom.Point();
			var bitmapData = new openfl.display.BitmapData(sourceBitmapData.___textureBuffer != null?sourceBitmapData.___textureBuffer.width:0,sourceBitmapData.___textureBuffer != null?sourceBitmapData.___textureBuffer.height:0,true);
			bitmapData.copyPixels(sourceBitmapData,sourceRect,new openfl.geom.Point(sourceRect.x,sourceRect.y));
			bitmapData.copyChannel(alphaBitmapData,new openfl.geom.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new openfl.geom.Point(sourceRect.x,sourceRect.y),8,8);
			sourceBitmapData = bitmapData;
		}
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			if(!mergeAlpha) {
				if(this.__transparent && sourceBitmapData.__transparent) {
					var trpCtx = sourceBitmapData.__transparentFiller.getContext("2d");
					var trpData = trpCtx.getImageData(sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height);
					ctx.putImageData(trpData,destPoint.x,destPoint.y);
				}
			}
			ctx.drawImage(sourceBitmapData.___textureBuffer,sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height,destPoint.x,destPoint.y,sourceRect.width,sourceRect.height);
		} else this.__copyPixelList[this.__copyPixelList.length] = { handle : sourceBitmapData.___textureBuffer, transparentFiller : mergeAlpha?null:sourceBitmapData.__transparentFiller, sourceX : sourceRect.x, sourceY : sourceRect.y, sourceWidth : sourceRect.width, sourceHeight : sourceRect.height, destX : destPoint.x, destY : destPoint.y};
	}
	,destroy: function() {
		this.___textureBuffer = null;
	}
	,dispose: function() {
		this.__clearCanvas();
		this.___textureBuffer = null;
		this.__leaseNum = 0;
		this.__lease = null;
		this.__imageData = null;
	}
	,draw: function(source,matrix,inColorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		this.__lease.set(this.__leaseNum++,new Date().getTime());
		source.drawToSurface(this.___textureBuffer,matrix,inColorTransform,blendMode,clipRect,smoothing);
		if(inColorTransform != null) {
			var rect = new openfl.geom.Rectangle();
			var object = source;
			if(matrix != null) rect.x = matrix.tx; else rect.x = 0;
			if(matrix != null) rect.y = matrix.ty; else rect.y = 0;
			try {
				rect.width = Reflect.getProperty(source,"width");
				rect.height = Reflect.getProperty(source,"height");
			} catch( e ) {
				rect.width = this.___textureBuffer.width;
				rect.height = this.___textureBuffer.height;
			}
			this.colorTransform(rect,inColorTransform);
		}
	}
	,drawToSurface: function(inSurface,matrix,inColorTransform,blendMode,clipRect,smoothing) {
		this.__lease.set(this.__leaseNum++,new Date().getTime());
		var ctx = inSurface.getContext("2d");
		if(blendMode == openfl.display.BlendMode.ADD) ctx.globalCompositeOperation = "lighter";
		if(matrix != null) {
			ctx.save();
			if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1) ctx.translate(matrix.tx,matrix.ty); else {
				openfl.Lib.__setImageSmoothing(ctx,smoothing);
				ctx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			}
			ctx.drawImage(this.___textureBuffer,0,0);
			ctx.restore();
		} else ctx.drawImage(this.___textureBuffer,0,0);
		if(inColorTransform != null) this.colorTransform(new openfl.geom.Rectangle(0,0,this.___textureBuffer.width,this.___textureBuffer.height),inColorTransform);
		if(blendMode == openfl.display.BlendMode.ADD) ctx.globalCompositeOperation = "source-over";
	}
	,fillRect: function(rect,color) {
		if(rect == null) return;
		if(rect.width <= 0 || rect.height <= 0) return;
		if(rect.x == 0 && rect.y == 0 && rect.width == this.___textureBuffer.width && rect.height == this.___textureBuffer.height) {
			if(this.__transparent) {
				if(color >>> 24 == 0 || color == this.__initColor) return this.__clearCanvas();
			} else if((color | -16777216) == (this.__initColor | -16777216)) return this.__clearCanvas();
		}
		return this.__fillRect(rect,color);
	}
	,floodFill: function(x,y,color) {
		var wasLocked = this.__locked;
		if(!this.__locked) this.lock();
		var queue = new Array();
		queue.push(new openfl.geom.Point(x,y));
		var old = this.getPixel32(x,y);
		var iterations = 0;
		var search = new Array();
		var _g1 = 0;
		var _g;
		_g = (this.___textureBuffer != null?this.___textureBuffer.width:0) + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var column = new Array();
			var _g3 = 0;
			var _g2;
			_g2 = (this.___textureBuffer != null?this.___textureBuffer.height:0) + 1;
			while(_g3 < _g2) {
				var i1 = _g3++;
				column.push(false);
			}
			search.push(column);
		}
		var currPoint;
		var newPoint;
		while(queue.length > 0) {
			currPoint = queue.shift();
			++iterations;
			var x1 = currPoint.x | 0;
			var y1 = currPoint.y | 0;
			if(x1 < 0 || x1 >= (this.___textureBuffer != null?this.___textureBuffer.width:0)) continue;
			if(y1 < 0 || y1 >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) continue;
			search[x1][y1] = true;
			if(this.getPixel32(x1,y1) == old) {
				this.setPixel32(x1,y1,color);
				if(!search[x1 + 1][y1]) queue.push(new openfl.geom.Point(x1 + 1,y1));
				if(!search[x1][y1 + 1]) queue.push(new openfl.geom.Point(x1,y1 + 1));
				if(x1 > 0 && !search[x1 - 1][y1]) queue.push(new openfl.geom.Point(x1 - 1,y1));
				if(y1 > 0 && !search[x1][y1 - 1]) queue.push(new openfl.geom.Point(x1,y1 - 1));
			}
		}
		if(!wasLocked) this.unlock();
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		var me = this;
		var doGetColorBoundsRect = function(data) {
			var minX;
			if(me.___textureBuffer != null) minX = me.___textureBuffer.width; else minX = 0;
			var maxX = 0;
			var minY;
			if(me.___textureBuffer != null) minY = me.___textureBuffer.height; else minY = 0;
			var maxY = 0;
			var i = 0;
			while(i < data.length) {
				var value = me.getInt32(i,data);
				if(findColor) {
					if((value & mask) == color) {
						var x = Math.round(i % ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4) / 4);
						var y = Math.round(i / ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4));
						if(x < minX) minX = x;
						if(x > maxX) maxX = x;
						if(y < minY) minY = y;
						if(y > maxY) maxY = y;
					}
				} else if((value & mask) != color) {
					var x1 = Math.round(i % ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4) / 4);
					var y1 = Math.round(i / ((me.___textureBuffer != null?me.___textureBuffer.width:0) * 4));
					if(x1 < minX) minX = x1;
					if(x1 > maxX) maxX = x1;
					if(y1 < minY) minY = y1;
					if(y1 > maxY) maxY = y1;
				}
				i += 4;
			}
			if(minX < maxX && minY < maxY) return new openfl.geom.Rectangle(minX,minY,maxX - minX + 1,maxY - minY); else return new openfl.geom.Rectangle(0,0,me.___textureBuffer != null?me.___textureBuffer.width:0,me.___textureBuffer != null?me.___textureBuffer.height:0);
		};
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
			return doGetColorBoundsRect(imageData.data);
		} else return doGetColorBoundsRect(this.__imageData.data);
	}
	,getInt32: function(offset,data) {
		return (this.__transparent?data[offset + 3]:255) << 24 | data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
	}
	,getPixel: function(x,y) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return 0;
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imagedata = ctx.getImageData(x,y,1,1);
			return imagedata.data[0] << 16 | imagedata.data[1] << 8 | imagedata.data[2];
		} else {
			var offset;
			offset = 4 * y * (this.___textureBuffer != null?this.___textureBuffer.width:0) + x * 4;
			return this.__imageData.data[offset] << 16 | this.__imageData.data[offset + 1] << 8 | this.__imageData.data[offset + 2];
		}
	}
	,getPixel32: function(x,y) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return 0;
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			return this.getInt32(0,ctx.getImageData(x,y,1,1).data);
		} else return this.getInt32(4 * y * this.___textureBuffer.width + x * 4,this.__imageData.data);
	}
	,getPixels: function(rect) {
		var len = Math.round(4 * rect.width * rect.height);
		var byteArray = new openfl.utils.ByteArray();
		if(byteArray.allocated < len) byteArray.___resizeBuffer(byteArray.allocated = Std["int"](Math.max(len,byteArray.allocated * 2))); else if(byteArray.allocated > len) byteArray.___resizeBuffer(byteArray.allocated = len);
		byteArray.length = len;
		len;
		rect = this.clipRect(rect);
		if(rect == null) return byteArray;
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imagedata = ctx.getImageData(rect.x,rect.y,rect.width,rect.height);
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				byteArray.writeByte(imagedata.data[i]);
			}
		} else {
			var offset = Math.round(4 * this.__imageData.width * rect.y + rect.x * 4);
			var pos = offset;
			var boundR = Math.round(4 * (rect.x + rect.width));
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				if(pos % (this.__imageData.width * 4) > boundR - 1) pos += this.__imageData.width * 4 - boundR;
				byteArray.writeByte(this.__imageData.data[pos]);
				pos++;
			}
		}
		byteArray.position = 0;
		return byteArray;
	}
	,handle: function() {
		return this.___textureBuffer;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		var type = Type.getClassName(Type.getClass(secondObject));
		firstAlphaThreshold = firstAlphaThreshold & -1;
		var me = this;
		var doHitTest = function(imageData) {
			if(secondObject.__proto__ == null || secondObject.__proto__.__class__ == null || secondObject.__proto__.__class__.__name__ == null) return false;
			var _g = secondObject.__proto__.__class__.__name__[2];
			switch(_g) {
			case "Rectangle":
				var rect = secondObject;
				rect.x -= firstPoint.x;
				rect.y -= firstPoint.y;
				rect = me.clipRect(me.rect);
				if(me.rect == null) return false;
				var boundingBox = new openfl.geom.Rectangle(0,0,me.___textureBuffer != null?me.___textureBuffer.width:0,me.___textureBuffer != null?me.___textureBuffer.height:0);
				if(!rect.intersects(boundingBox)) return false;
				var diff = rect.intersection(boundingBox);
				var offset = 4 * (Math.round(diff.x) + Math.round(diff.y) * imageData.width) + 3;
				var pos = offset;
				var boundR = Math.round(4 * (diff.x + diff.width));
				while(pos < offset + Math.round(4 * (diff.width + imageData.width * diff.height))) {
					if(pos % (imageData.width * 4) > boundR - 1) pos += imageData.width * 4 - boundR;
					if(imageData.data[pos] - firstAlphaThreshold >= 0) return true;
					pos += 4;
				}
				return false;
			case "Point":
				var point = secondObject;
				var x = point.x - firstPoint.x;
				var y = point.y - firstPoint.y;
				if(x < 0 || y < 0 || x >= (me.___textureBuffer != null?me.___textureBuffer.width:0) || y >= (me.___textureBuffer != null?me.___textureBuffer.height:0)) return false;
				if(imageData.data[Math.round(4 * (y * (me.___textureBuffer != null?me.___textureBuffer.width:0) + x)) + 3] - firstAlphaThreshold > 0) return true;
				return false;
			case "Bitmap":
				throw "bitmapData.hitTest with a second object of type Bitmap is currently not supported for HTML5";
				return false;
			case "BitmapData":
				throw "bitmapData.hitTest with a second object of type BitmapData is currently not supported for HTML5";
				return false;
			default:
				throw "BitmapData::hitTest secondObject argument must be either a Rectangle, a Point, a Bitmap or a BitmapData object.";
				return false;
			}
		};
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData1 = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
			return doHitTest(imageData1);
		} else return doHitTest(this.__imageData);
	}
	,lock: function() {
		this.__locked = true;
		var ctx = this.___textureBuffer.getContext("2d");
		this.__imageData = ctx.getImageData(0,0,this.___textureBuffer != null?this.___textureBuffer.width:0,this.___textureBuffer != null?this.___textureBuffer.height:0);
		this.__imageDataChanged = false;
		this.__copyPixelList = [];
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		var generator = new openfl.display._BitmapData.MinstdGenerator(randomSeed);
		var ctx = this.___textureBuffer.getContext("2d");
		var imageData = null;
		if(this.__locked) imageData = this.__imageData; else imageData = ctx.createImageData(this.___textureBuffer.width,this.___textureBuffer.height);
		var _g1 = 0;
		var _g = this.___textureBuffer.width * this.___textureBuffer.height;
		while(_g1 < _g) {
			var i = _g1++;
			if(grayScale) imageData.data[i * 4] = imageData.data[i * 4 + 1] = imageData.data[i * 4 + 2] = low + generator.nextValue() % (high - low + 1); else {
				if((channelOptions & 1) == 0) imageData.data[i * 4] = 0; else imageData.data[i * 4] = low + generator.nextValue() % (high - low + 1);
				if((channelOptions & 2) == 0) imageData.data[i * 4 + 1] = 0; else imageData.data[i * 4 + 1] = low + generator.nextValue() % (high - low + 1);
				if((channelOptions & 4) == 0) imageData.data[i * 4 + 2] = 0; else imageData.data[i * 4 + 2] = low + generator.nextValue() % (high - low + 1);
			}
			if((channelOptions & 8) == 0) imageData.data[i * 4 + 3] = 255; else imageData.data[i * 4 + 3] = low + generator.nextValue() % (high - low + 1);
		}
		if(this.__locked) this.__imageDataChanged = true; else ctx.putImageData(imageData,0,0);
	}
	,scroll: function(x,y) {
		throw "bitmapData.scroll is currently not supported for HTML5";
	}
	,setPixel: function(x,y,color) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return;
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.createImageData(1,1);
			imageData.data[0] = (color & 16711680) >>> 16;
			imageData.data[1] = (color & 65280) >>> 8;
			imageData.data[2] = color & 255;
			if(this.__transparent) imageData.data[3] = 255;
			ctx.putImageData(imageData,x,y);
		} else {
			var offset = 4 * y * this.__imageData.width + x * 4;
			this.__imageData.data[offset] = (color & 16711680) >>> 16;
			this.__imageData.data[offset + 1] = (color & 65280) >>> 8;
			this.__imageData.data[offset + 2] = color & 255;
			if(this.__transparent) this.__imageData.data[offset + 3] = 255;
			this.__imageDataChanged = true;
		}
	}
	,setPixel32: function(x,y,color) {
		if(x < 0 || y < 0 || x >= (this.___textureBuffer != null?this.___textureBuffer.width:0) || y >= (this.___textureBuffer != null?this.___textureBuffer.height:0)) return;
		if(!this.__locked) {
			this.__lease.set(this.__leaseNum++,new Date().getTime());
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.createImageData(1,1);
			imageData.data[0] = (color & 16711680) >>> 16;
			imageData.data[1] = (color & 65280) >>> 8;
			imageData.data[2] = color & 255;
			if(this.__transparent) imageData.data[3] = (color & -16777216) >>> 24; else imageData.data[3] = 255;
			ctx.putImageData(imageData,x,y);
		} else {
			var offset = 4 * y * this.__imageData.width + x * 4;
			this.__imageData.data[offset] = (color & 16711680) >>> 16;
			this.__imageData.data[offset + 1] = (color & 65280) >>> 8;
			this.__imageData.data[offset + 2] = color & 255;
			if(this.__transparent) this.__imageData.data[offset + 3] = (color & -16777216) >>> 24; else this.__imageData.data[offset + 3] = 255;
			this.__imageDataChanged = true;
		}
	}
	,setPixels: function(rect,byteArray) {
		rect = this.clipRect(rect);
		if(rect == null) return;
		var len = Math.round(4 * rect.width * rect.height);
		if(!this.__locked) {
			var ctx = this.___textureBuffer.getContext("2d");
			var imageData = ctx.createImageData(rect.width,rect.height);
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				imageData.data[i] = byteArray.readByte();
			}
			ctx.putImageData(imageData,rect.x,rect.y);
		} else {
			var offset = Math.round(4 * this.__imageData.width * rect.y + rect.x * 4);
			var pos = offset;
			var boundR = Math.round(4 * (rect.x + rect.width));
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				if(pos % (this.__imageData.width * 4) > boundR - 1) pos += this.__imageData.width * 4 - boundR;
				this.__imageData.data[pos] = byteArray.readByte();
				pos++;
			}
			this.__imageDataChanged = true;
		}
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		console.log("BitmapData.threshold not implemented");
		return 0;
	}
	,unlock: function(changeRect) {
		this.__locked = false;
		var ctx = this.___textureBuffer.getContext("2d");
		if(this.__imageDataChanged) {
			if(changeRect != null) ctx.putImageData(this.__imageData,0,0,changeRect.x,changeRect.y,changeRect.width,changeRect.height); else ctx.putImageData(this.__imageData,0,0);
		}
		var _g = 0;
		var _g1 = this.__copyPixelList;
		while(_g < _g1.length) {
			var copyCache = _g1[_g];
			++_g;
			if(this.__transparent && copyCache.transparentFiller != null) {
				var trpCtx = copyCache.transparentFiller.getContext("2d");
				var trpData = trpCtx.getImageData(copyCache.sourceX,copyCache.sourceY,copyCache.sourceWidth,copyCache.sourceHeight);
				ctx.putImageData(trpData,copyCache.destX,copyCache.destY);
			}
			ctx.drawImage(copyCache.handle,copyCache.sourceX,copyCache.sourceY,copyCache.sourceWidth,copyCache.sourceHeight,copyCache.destX,copyCache.destY,copyCache.sourceWidth,copyCache.sourceHeight);
		}
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	}
	,__buildLease: function() {
		this.__lease.set(this.__leaseNum++,new Date().getTime());
	}
	,__clearCanvas: function() {
		var ctx = this.___textureBuffer.getContext("2d");
		ctx.clearRect(0,0,this.___textureBuffer.width,this.___textureBuffer.height);
	}
	,__decrNumRefBitmaps: function() {
		this.__assignedBitmaps--;
	}
	,__fillRect: function(rect,color) {
		this.__lease.set(this.__leaseNum++,new Date().getTime());
		var ctx = this.___textureBuffer.getContext("2d");
		var r = (color & 16711680) >>> 16;
		var g = (color & 65280) >>> 8;
		var b = color & 255;
		var a;
		if(this.__transparent) a = color >>> 24; else a = 255;
		if(!this.__locked) {
			var style = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
			ctx.fillStyle = style;
			ctx.fillRect(rect.x,rect.y,rect.width,rect.height);
		} else {
			var s = 4 * (Math.round(rect.x) + Math.round(rect.y) * this.__imageData.width);
			var offsetY;
			var offsetX;
			var _g1 = 0;
			var _g = Math.round(rect.height);
			while(_g1 < _g) {
				var i = _g1++;
				offsetY = i * this.__imageData.width;
				var _g3 = 0;
				var _g2 = Math.round(rect.width);
				while(_g3 < _g2) {
					var j = _g3++;
					offsetX = 4 * (j + offsetY);
					this.__imageData.data[s + offsetX] = r;
					this.__imageData.data[s + offsetX + 1] = g;
					this.__imageData.data[s + offsetX + 2] = b;
					this.__imageData.data[s + offsetX + 3] = a;
				}
			}
			this.__imageDataChanged = true;
		}
	}
	,__getLease: function() {
		return this.__lease;
	}
	,__loadFromBase64: function(base64,type,onload) {
		var _g = this;
		var img = window.document.createElement("img");
		var canvas = this.___textureBuffer;
		var drawImage = function(_) {
			canvas.width = img.width;
			canvas.height = img.height;
			var ctx = canvas.getContext("2d");
			ctx.drawImage(img,0,0);
			_g.rect = new openfl.geom.Rectangle(0,0,canvas.width,canvas.height);
			if(onload != null) onload(_g);
		};
		img.addEventListener("load",drawImage,false);
		img.src = "data:" + type + ";base64," + base64;
	}
	,__loadFromBytes: function(bytes,inRawAlpha,onload) {
		var _g = this;
		var type = "";
		if(openfl.display.BitmapData.__isPNG(bytes)) type = "image/png"; else if(openfl.display.BitmapData.__isJPG(bytes)) type = "image/jpeg"; else if(openfl.display.BitmapData.__isGIF(bytes)) type = "image/gif"; else throw new openfl.errors.IOError("BitmapData tried to read a PNG/JPG ByteArray, but found an invalid header.");
		if(inRawAlpha != null) this.__loadFromBase64(openfl.display.BitmapData.__base64Encode(bytes),type,function(_) {
			var ctx = _g.___textureBuffer.getContext("2d");
			var pixels = ctx.getImageData(0,0,_g.___textureBuffer.width,_g.___textureBuffer.height);
			var _g2 = 0;
			var _g1 = inRawAlpha.length;
			while(_g2 < _g1) {
				var i = _g2++;
				pixels.data[i * 4 + 3] = inRawAlpha.readUnsignedByte();
			}
			ctx.putImageData(pixels,0,0);
			if(onload != null) onload(_g);
		}); else this.__loadFromBase64(openfl.display.BitmapData.__base64Encode(bytes),type,onload);
	}
	,__getNumRefBitmaps: function() {
		return this.__assignedBitmaps;
	}
	,__incrNumRefBitmaps: function() {
		this.__assignedBitmaps++;
	}
	,__loadFromFile: function(inFilename,inLoader) {
		var _g = this;
		var image = window.document.createElement("img");
		if(inLoader != null) {
			var data = { image : image, texture : this.___textureBuffer, inLoader : inLoader, bitmapData : this};
			image.addEventListener("load",(function(f,a1) {
				return function(e) {
					return f(a1,e);
				};
			})($bind(this,this.__onLoad),data),false);
			image.addEventListener("error",function(e1) {
				if(!image.complete) _g.__onLoad(data,e1);
			},false);
		}
		image.src = inFilename;
		if(image.complete) {
		}
	}
	,__onLoad: function(data,e) {
		var canvas = data.texture;
		var width = data.image.width;
		var height = data.image.height;
		canvas.width = width;
		canvas.height = height;
		var ctx = canvas.getContext("2d");
		ctx.drawImage(data.image,0,0,width,height);
		data.bitmapData.width = width;
		data.bitmapData.height = height;
		data.bitmapData.rect = new openfl.geom.Rectangle(0,0,width,height);
		data.bitmapData.__buildLease();
		if(data.inLoader != null) {
			var e1 = new openfl.events.Event(openfl.events.Event.COMPLETE);
			e1.target = data.inLoader;
			data.inLoader.dispatchEvent(e1);
		}
	}
	,get_height: function() {
		if(this.___textureBuffer != null) return this.___textureBuffer.height; else return 0;
	}
	,get_transparent: function() {
		return this.__transparent;
	}
	,get_width: function() {
		if(this.___textureBuffer != null) return this.___textureBuffer.width; else return 0;
	}
	,__class__: openfl.display.BitmapData
	,__properties__: {get_width:"get_width",get_transparent:"get_transparent",get_height:"get_height"}
};
openfl.display.ImageDataLease = function() {
};
$hxClasses["openfl.display.ImageDataLease"] = openfl.display.ImageDataLease;
openfl.display.ImageDataLease.__name__ = ["openfl","display","ImageDataLease"];
openfl.display.ImageDataLease.prototype = {
	clone: function() {
		var leaseClone = new openfl.display.ImageDataLease();
		leaseClone.seed = this.seed;
		leaseClone.time = this.time;
		return leaseClone;
	}
	,set: function(s,t) {
		this.seed = s;
		this.time = t;
	}
	,__class__: openfl.display.ImageDataLease
};
openfl.display._BitmapData = {};
openfl.display._BitmapData.MinstdGenerator = function(seed) {
	if(seed == 0) this.value = 1; else this.value = seed;
};
$hxClasses["openfl.display._BitmapData.MinstdGenerator"] = openfl.display._BitmapData.MinstdGenerator;
openfl.display._BitmapData.MinstdGenerator.__name__ = ["openfl","display","_BitmapData","MinstdGenerator"];
openfl.display._BitmapData.MinstdGenerator.prototype = {
	nextValue: function() {
		var lo = 16807 * (this.value & 65535);
		var hi = 16807 * (this.value >>> 16);
		lo += (hi & 32767) << 16;
		if(lo < 0 || lo > -2147483648 - 1) {
			lo &= -2147483648 - 1;
			++lo;
		}
		lo += hi >>> 15;
		if(lo < 0 || lo > -2147483648 - 1) {
			lo &= -2147483648 - 1;
			++lo;
		}
		return this.value = lo;
	}
	,__class__: openfl.display._BitmapData.MinstdGenerator
};
openfl.display.BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl.display.BitmapDataChannel;
openfl.display.BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
openfl.display.BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl.display.BlendMode.ADD = ["ADD",0];
openfl.display.BlendMode.ADD.toString = $estr;
openfl.display.BlendMode.ADD.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ALPHA = ["ALPHA",1];
openfl.display.BlendMode.ALPHA.toString = $estr;
openfl.display.BlendMode.ALPHA.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DARKEN = ["DARKEN",2];
openfl.display.BlendMode.DARKEN.toString = $estr;
openfl.display.BlendMode.DARKEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl.display.BlendMode.DIFFERENCE.toString = $estr;
openfl.display.BlendMode.DIFFERENCE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ERASE = ["ERASE",4];
openfl.display.BlendMode.ERASE.toString = $estr;
openfl.display.BlendMode.ERASE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl.display.BlendMode.HARDLIGHT.toString = $estr;
openfl.display.BlendMode.HARDLIGHT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.INVERT = ["INVERT",6];
openfl.display.BlendMode.INVERT.toString = $estr;
openfl.display.BlendMode.INVERT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LAYER = ["LAYER",7];
openfl.display.BlendMode.LAYER.toString = $estr;
openfl.display.BlendMode.LAYER.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl.display.BlendMode.LIGHTEN.toString = $estr;
openfl.display.BlendMode.LIGHTEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl.display.BlendMode.MULTIPLY.toString = $estr;
openfl.display.BlendMode.MULTIPLY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.NORMAL = ["NORMAL",10];
openfl.display.BlendMode.NORMAL.toString = $estr;
openfl.display.BlendMode.NORMAL.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.OVERLAY = ["OVERLAY",11];
openfl.display.BlendMode.OVERLAY.toString = $estr;
openfl.display.BlendMode.OVERLAY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SCREEN = ["SCREEN",12];
openfl.display.BlendMode.SCREEN.toString = $estr;
openfl.display.BlendMode.SCREEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl.display.BlendMode.SUBTRACT.toString = $estr;
openfl.display.BlendMode.SUBTRACT.__enum__ = openfl.display.BlendMode;
openfl.display.CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : true, __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl.display.CapsStyle.NONE = ["NONE",0];
openfl.display.CapsStyle.NONE.toString = $estr;
openfl.display.CapsStyle.NONE.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.ROUND = ["ROUND",1];
openfl.display.CapsStyle.ROUND.toString = $estr;
openfl.display.CapsStyle.ROUND.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.SQUARE = ["SQUARE",2];
openfl.display.CapsStyle.SQUARE.toString = $estr;
openfl.display.CapsStyle.SQUARE.__enum__ = openfl.display.CapsStyle;
openfl.display.GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl.display.GradientType.RADIAL = ["RADIAL",0];
openfl.display.GradientType.RADIAL.toString = $estr;
openfl.display.GradientType.RADIAL.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.LINEAR = ["LINEAR",1];
openfl.display.GradientType.LINEAR.toString = $estr;
openfl.display.GradientType.LINEAR.__enum__ = openfl.display.GradientType;
openfl.display.Graphics = function(snap) {
	openfl.Lib.__bootstrap();
	if(snap == null) {
		var _this = openfl.Lib.get_snap();
		var e123 = [];
		var me123 = _this;
		this.__snap = me123.group.apply(me123, e123);
		openfl.Lib.get_freeSnap().append(this.__snap);
		this.__snap.addClass("graphics");
	} else this.__snap = snap;
	this.mLastMoveID = 0;
	this.mPenX = 0.0;
	this.mPenY = 0.0;
	this.mDrawList = new Array();
	this.mPoints = [];
	this.mSolidGradient = null;
	this.mBitmap = null;
	this.mFilling = false;
	this.mFillColour = 0;
	this.mFillAlpha = 0.0;
	this.mLastMoveID = 0;
	this.boundsDirty = true;
	this.__clearLine();
	this.mLineJobs = [];
	this.set___changed(true);
	this.nextDrawIndex = 0;
	this.__extent = new openfl.geom.Rectangle();
	this.__extentWithFilters = new openfl.geom.Rectangle();
	this._padding = 0.0;
	this.__clearNextCycle = true;
};
$hxClasses["openfl.display.Graphics"] = openfl.display.Graphics;
openfl.display.Graphics.__name__ = ["openfl","display","Graphics"];
openfl.display.Graphics.__detectIsPointInPathMode = function() {
	var canvas = window.document.createElement("canvas");
	var ctx = canvas.getContext("2d");
	if(ctx.isPointInPath == null) return openfl.display.PointInPathMode.USER_SPACE;
	ctx.save();
	ctx.translate(1,0);
	ctx.beginPath();
	ctx.rect(0,0,1,1);
	var rv;
	if(ctx.isPointInPath(0.3,0.3)) rv = openfl.display.PointInPathMode.USER_SPACE; else rv = openfl.display.PointInPathMode.DEVICE_SPACE;
	ctx.restore();
	return rv;
};
openfl.display.Graphics.prototype = {
	addDrawable: function(inDrawable) {
		if(inDrawable == null) return;
		this.mDrawList.unshift(inDrawable);
	}
	,addLineSegment: function() {
		if(this.mCurrentLine.point_idx1 > 0) this.mLineJobs.push(new openfl.display.LineJob(this.mCurrentLine.grad,this.mCurrentLine.point_idx0,this.mCurrentLine.point_idx1,this.mCurrentLine.thickness,this.mCurrentLine.alpha,this.mCurrentLine.colour,this.mCurrentLine.pixel_hinting,this.mCurrentLine.joints,this.mCurrentLine.caps,this.mCurrentLine.scale_mode,this.mCurrentLine.miter_limit));
		this.mCurrentLine.point_idx0 = this.mCurrentLine.point_idx1 = -1;
	}
	,beginBitmapFill: function(bitmap,matrix,in_repeat,in_smooth) {
		if(in_smooth == null) in_smooth = false;
		if(in_repeat == null) in_repeat = true;
		this.closePolygon(true);
		var repeat;
		if(in_repeat == null) repeat = true; else repeat = in_repeat;
		var smooth;
		if(in_smooth == null) smooth = false; else smooth = in_smooth;
		this.mFilling = true;
		this.mSolidGradient = null;
		this.__expandStandardExtent(bitmap.___textureBuffer != null?bitmap.___textureBuffer.width:0,bitmap.___textureBuffer != null?bitmap.___textureBuffer.height:0);
		this.mBitmap = { texture_buffer : bitmap.___textureBuffer, matrix : matrix == null?matrix:matrix.clone(), flags : (repeat?16:0) | (smooth?65536:0)};
	}
	,beginFill: function(color,alpha) {
		this.closePolygon(true);
		this.mFillColour = color;
		if(alpha == null) this.mFillAlpha = 1.0; else this.mFillAlpha = alpha;
		this.mFilling = true;
		this.mSolidGradient = null;
		this.mBitmap = null;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.closePolygon(true);
		this.mFilling = true;
		this.mBitmap = null;
		this.mSolidGradient = this.createGradient(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,blit: function(inTexture) {
	}
	,clear: function() {
		this.__clearLine();
		this.mPenX = 0.0;
		this.mPenY = 0.0;
		this.mDrawList = new Array();
		this.nextDrawIndex = 0;
		this.mPoints = [];
		this.mSolidGradient = null;
		this.mFilling = false;
		this.mFillColour = 0;
		this.mFillAlpha = 0.0;
		this.mLastMoveID = 0;
		this.__clearNextCycle = true;
		this.boundsDirty = true;
		this.__extent.x = 0.0;
		this.__extent.y = 0.0;
		this.__extent.width = 0.0;
		this.__extent.height = 0.0;
		this._padding = 0.0;
		this.mLineJobs = [];
		this.set___changed(true);
	}
	,closePolygon: function(inCancelFill) {
		var l = this.mPoints.length;
		if(l > 0) {
			if(l > 1) {
				if(this.mFilling && l > 2) {
					if(this.mPoints[this.mLastMoveID].x != this.mPoints[l - 1].x || this.mPoints[this.mLastMoveID].y != this.mPoints[l - 1].y) this.lineTo(this.mPoints[this.mLastMoveID].x,this.mPoints[this.mLastMoveID].y);
				}
				this.addLineSegment();
				var drawable = new openfl.display.Drawable(this.mPoints,this.mFillColour,this.mFillAlpha,this.mSolidGradient,this.mBitmap,this.mLineJobs,null,openfl.display.SnapJob.getPathJob());
				this.addDrawable(drawable);
			}
			this.mLineJobs = [];
			this.mPoints = [];
		}
		if(inCancelFill) {
			this.mFillAlpha = 0;
			this.mSolidGradient = null;
			this.mBitmap = null;
			this.mFilling = false;
		}
		this.set___changed(true);
	}
	,createCanvasColor: function(color,alpha) {
		var r = (16711680 & color) >> 16;
		var g = (65280 & color) >> 8;
		var b = 255 & color;
		return "rgba" + "(" + r + "," + g + "," + b + "," + alpha + ")";
	}
	,createCanvasGradient: function(g) {
		var gradientString = new StringBuf();
		if((g.flags & 1) == 0) gradientString.b += "L(-819.2, 0, 819.2, 0)"; else gradientString.add(Snap.format("R(0, 0, 819.2, {x}, 0)",{ x : g.focal * 819.2}));
		var points = [];
		var _g = 0;
		var _g1 = g.points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			points.push(Snap.format("{color}:{pos}",{ color : this.createCanvasColor(point.col,point.alpha), pos : point.ratio / 255 * 100 | 0}));
		}
		gradientString.add(points.join("-"));
		var gradient = openfl.Lib.get_snap().gradient(gradientString.b);
		gradient.attr({ gradientTransform : "matrix(" + g.matrix.a + "," + g.matrix.b + "," + g.matrix.c + "," + g.matrix.d + "," + g.matrix.tx + "," + g.matrix.ty + ")", spreadMethod : (g.flags & 4) != 0?"reflect":(g.flags & 2) != 0?"repeat":"pad"});
		return gradient;
	}
	,createGradient: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		var points = new Array();
		var _g1 = 0;
		var _g = colors.length;
		while(_g1 < _g) {
			var i = _g1++;
			points.push(new openfl.display.GradPoint(colors[i],alphas[i],ratios[i]));
		}
		var flags = 0;
		if(type == openfl.display.GradientType.RADIAL) flags |= 1;
		if(spreadMethod == openfl.display.SpreadMethod.REPEAT) flags |= 2; else if(spreadMethod == openfl.display.SpreadMethod.REFLECT) flags |= 4;
		if(matrix == null) {
			matrix = new openfl.geom.Matrix();
			matrix.createGradientBox(25,25);
		} else matrix = matrix.clone();
		var focal;
		if(focalPointRatio == null) focal = 0; else focal = focalPointRatio;
		return new openfl.display.Grad(points,matrix,flags,focal);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		var pid = this.mPoints.length;
		if(pid == 0) {
			this.mPoints.push(new openfl.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,0));
			pid++;
		}
		this.mPenX = inX;
		this.mPenY = inY;
		this.__expandStandardExtent(inX,inY,this.mCurrentLine.thickness);
		this.mPoints.push(new openfl.display.GfxPoint(inX,inY,inCX,inCY,2));
		if(this.mCurrentLine.grad != null || this.mCurrentLine.alpha > 0) {
			if(this.mCurrentLine.point_idx0 < 0) this.mCurrentLine.point_idx0 = pid - 1;
			this.mCurrentLine.point_idx1 = pid;
		}
		this.set___changed(true);
	}
	,drawCircle: function(x,y,rad) {
		this.closePolygon(false);
		this.__drawCircle(x,y,rad);
	}
	,drawEllipse: function(x,y,rx,ry) {
		this.closePolygon(false);
		rx /= 2;
		ry /= 2;
		this.__drawEllipse(x + rx,y + ry,rx,ry);
	}
	,drawGraphicsData: function(points) {
		var $it0 = $iterator(openfl._Vector.Vector_Impl_)(points);
		while( $it0.hasNext() ) {
			var data = $it0.next();
			if(data == null) this.mFilling = true; else switch(data.__graphicsDataType) {
			case openfl.display.GraphicsDataType.STROKE:
				var stroke = data;
				if(stroke.fill == null) this.lineStyle(stroke.thickness,0,1.,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit); else switch(stroke.fill.__graphicsFillType) {
				case openfl.display.GraphicsFillType.SOLID_FILL:
					var fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					break;
				case openfl.display.GraphicsFillType.GRADIENT_FILL:
					this.lineStyle(stroke.thickness,null,null,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					var fill1 = stroke.fill;
					this.lineGradientStyle(fill1.type,fill1.colors,fill1.alphas,fill1.ratios,fill1.matrix,fill1.spreadMethod,fill1.interpolationMethod,fill1.focalPointRatio);
					break;
				}
				break;
			case openfl.display.GraphicsDataType.PATH:
				var path = data;
				var j = 0;
				var _g1 = 0;
				var _g = openfl._Vector.Vector_Impl_.get_length(path.commands);
				while(_g1 < _g) {
					var i = _g1++;
					var command = path.commands[i];
					switch(command) {
					case 1:
						this.moveTo(path.data[j],path.data[j + 1]);
						j = j + 2;
						break;
					case 2:
						this.lineTo(path.data[j],path.data[j + 1]);
						j = j + 2;
						break;
					case 3:
						this.curveTo(path.data[j],path.data[j + 1],path.data[j + 2],path.data[j + 3]);
						j = j + 4;
						break;
					}
				}
				break;
			case openfl.display.GraphicsDataType.SOLID:
				var fill2 = data;
				this.beginFill(fill2.color,fill2.alpha);
				break;
			case openfl.display.GraphicsDataType.GRADIENT:
				var fill3 = data;
				this.beginGradientFill(fill3.type,fill3.colors == null?[]:fill3.colors,fill3.alphas == null?[]:fill3.alphas,fill3.ratios == null?[]:fill3.ratios,fill3.matrix,fill3.spreadMethod,fill3.interpolationMethod,fill3.focalPointRatio);
				break;
			case openfl.display.GraphicsDataType.BITMAP:
				var fill4 = data;
				this.beginBitmapFill(fill4.bitmapData,fill4.matrix,fill4.repeat,fill4.smooth);
				break;
			}
		}
		this.set___changed(true);
	}
	,drawRect: function(x,y,width,height) {
		this.closePolygon(false);
		this.__drawRect(x,y,width,height,0,0);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		this.closePolygon(false);
		this.__drawRect(x,y,width,height,rx,ry == -1?rx:ry);
	}
	,drawTiles: function(sheet,tileData,smooth,flags) {
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__expandStandardExtent(openfl.Lib.get_current().get_stage().get_stageWidth(),openfl.Lib.get_current().get_stage().get_stageHeight());
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var index = 0;
		var numValues = 3;
		if(useScale) numValues++;
		if(useRotation) numValues++;
		if(useTransform) numValues += 4;
		if(useRGB) numValues += 3;
		if(useAlpha) numValues++;
		while(index < tileData.length) {
			this.__expandStandardExtent(tileData[index] + sheet.__bitmap.get_width(),tileData[index + 1] + sheet.__bitmap.get_height());
			index += numValues;
		}
		this.addDrawable(new openfl.display.Drawable(null,null,null,null,null,null,new openfl.display.TileJob(sheet,tileData,flags),null));
		this.set___changed(true);
	}
	,endFill: function() {
		this.closePolygon(true);
	}
	,flush: function() {
		this.closePolygon(true);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.mCurrentLine.grad = this.createGradient(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.addLineSegment();
		if(thickness == null) {
			this.__clearLine();
			return;
		} else {
			this.mCurrentLine.grad = null;
			this.mCurrentLine.thickness = thickness;
			if(color == null) this.mCurrentLine.colour = 0; else this.mCurrentLine.colour = color;
			if(alpha == null) this.mCurrentLine.alpha = 1.0; else this.mCurrentLine.alpha = alpha;
			if(miterLimit == null) this.mCurrentLine.miter_limit = 3.0; else this.mCurrentLine.miter_limit = miterLimit;
			if(pixelHinting == null || !pixelHinting) this.mCurrentLine.pixel_hinting = 0; else this.mCurrentLine.pixel_hinting = 16384;
		}
		if(caps != null) switch(caps[1]) {
		case 1:
			this.mCurrentLine.caps = 256;
			break;
		case 2:
			this.mCurrentLine.caps = 512;
			break;
		case 0:
			this.mCurrentLine.caps = 0;
			break;
		}
		this.mCurrentLine.scale_mode = 3;
		if(scaleMode != null) switch(scaleMode[1]) {
		case 2:
			this.mCurrentLine.scale_mode = 3;
			break;
		case 3:
			this.mCurrentLine.scale_mode = 1;
			break;
		case 0:
			this.mCurrentLine.scale_mode = 2;
			break;
		case 1:
			this.mCurrentLine.scale_mode = 0;
			break;
		}
		this.mCurrentLine.joints = 0;
		if(joints != null) switch(joints[1]) {
		case 1:
			this.mCurrentLine.joints = 0;
			break;
		case 0:
			this.mCurrentLine.joints = 4096;
			break;
		case 2:
			this.mCurrentLine.joints = 8192;
			break;
		}
	}
	,lineTo: function(inX,inY) {
		var pid = this.mPoints.length;
		if(pid == 0) {
			this.mPoints.push(new openfl.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,0));
			pid++;
		}
		this.mPenX = inX;
		this.mPenY = inY;
		this.__expandStandardExtent(inX,inY,this.mCurrentLine.thickness);
		this.mPoints.push(new openfl.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,1));
		if(this.mCurrentLine.grad != null || this.mCurrentLine.alpha > 0) {
			if(this.mCurrentLine.point_idx0 < 0) this.mCurrentLine.point_idx0 = pid - 1;
			this.mCurrentLine.point_idx1 = pid;
		}
		if(!this.mFilling) this.closePolygon(false);
		this.set___changed(true);
	}
	,moveTo: function(inX,inY) {
		this.mPenX = inX;
		this.mPenY = inY;
		this.__expandStandardExtent(inX,inY);
		if(!this.mFilling) this.closePolygon(false); else {
			this.addLineSegment();
			this.mLastMoveID = this.mPoints.length;
			this.mPoints.push(new openfl.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,0));
		}
		this.set___changed(true);
	}
	,__adjustSurface: function(sx,sy) {
		if(sy == null) sy = 1.0;
		if(sx == null) sx = 1.0;
	}
	,__clearCanvas: function() {
		var node = this.__snap.node;
		while(null != node.firstChild) node.removeChild(node.firstChild);
	}
	,__clearLine: function() {
		this.mCurrentLine = new openfl.display.LineJob(null,-1,-1,0.0,0.0,0,1,0,256,3,3.0);
	}
	,__getCurrentLineJobs: function() {
		var result;
		if(this.mCurrentLine.thickness != 0) result = [new openfl.display.LineJob(this.mCurrentLine.grad,this.mCurrentLine.point_idx0,this.mCurrentLine.point_idx1,this.mCurrentLine.thickness,this.mCurrentLine.alpha,this.mCurrentLine.colour,this.mCurrentLine.pixel_hinting,this.mCurrentLine.joints,this.mCurrentLine.caps,this.mCurrentLine.scale_mode,this.mCurrentLine.miter_limit)]; else result = [];
		return result;
	}
	,__drawEllipse: function(x,y,rx,ry) {
		this.__expandStandardExtent(x + rx,y + ry,this.mCurrentLine.thickness);
		var drawable = new openfl.display.Drawable(null,this.mFillColour,this.mFillAlpha,this.mSolidGradient,this.mBitmap,this.__getCurrentLineJobs(),null,openfl.display.SnapJob.getEllipseJob(x,y,rx,ry));
		this.addDrawable(drawable);
	}
	,__drawCircle: function(x,y,rad) {
		this.__expandStandardExtent(x + rad,y + rad,this.mCurrentLine.thickness);
		var drawable = new openfl.display.Drawable(null,this.mFillColour,this.mFillAlpha,this.mSolidGradient,this.mBitmap,this.__getCurrentLineJobs(),null,openfl.display.SnapJob.getCircleJob(x,y,rad));
		this.addDrawable(drawable);
	}
	,__drawRect: function(x,y,width,height,rx,ry) {
		this.__expandStandardExtent(x + width,y + height,this.mCurrentLine.thickness);
		var drawable = new openfl.display.Drawable(null,this.mFillColour,this.mFillAlpha,this.mSolidGradient,this.mBitmap,this.__getCurrentLineJobs(),null,openfl.display.SnapJob.getRectJob(x,y,width,height,rx,ry));
		this.addDrawable(drawable);
	}
	,__drawTilesAsSingleImage: function(sheet,tileData,flags) {
		if(flags == null) flags = 0;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		var itemCount = totalCount / numValues | 0;
		var index = 0;
		var rect = null;
		var center = null;
		var previousTileID = -1;
		var surface = sheet.__bitmap.___textureBuffer;
		var canvas = window.document.createElement("canvas");
		canvas.width = this.__extent.width | 0;
		canvas.height = this.__extent.height | 0;
		var ctx = canvas.getContext("2d");
		while(index < totalCount) {
			var tileID = tileData[index + 2] | 0;
			if(tileID != previousTileID) {
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				previousTileID = tileID;
			}
			if(rect != null && center != null) {
				ctx.save();
				ctx.translate(tileData[index],tileData[index + 1]);
				if(useRotation) ctx.rotate(tileData[index + rotationIndex]);
				var scale = 1.0;
				if(useScale) scale = tileData[index + scaleIndex];
				if(useTransform) ctx.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
				if(useAlpha) ctx.globalAlpha = tileData[index + alphaIndex];
				ctx.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
				ctx.restore();
			}
			index += numValues;
		}
		this.__clearCanvas();
		this.__snap.append(openfl.Lib.get_snap().image(canvas.toDataURL("image/png"),0,0,canvas.width,canvas.height));
	}
	,__drawTiles: function(sheet,tileData,flags) {
		if(flags == null) flags = 0;
		this.__clearCanvas();
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		var itemCount = totalCount / numValues | 0;
		var index = 0;
		var rect = null;
		var center = null;
		var previousTileID = -1;
		var canvas = window.document.createElement("canvas");
		var ctx = canvas.getContext("2d");
		var surface = sheet.__bitmap.___textureBuffer;
		var imageDataUrl = "";
		while(index < totalCount) {
			var tileID = tileData[index + 2] | 0;
			if(tileID != previousTileID) {
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				previousTileID = tileID;
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				ctx.drawImage(surface,rect.x,rect.y,rect.width,rect.height,0,0,rect.width,rect.height);
				imageDataUrl = canvas.toDataURL("image/png");
			}
			if(rect != null && center != null) {
				var image = openfl.Lib.get_snap().image(imageDataUrl,0,0,rect.width,rect.height);
				var el = image.node;
				var matrix = new openfl.geom.Matrix();
				if(useRotation) matrix.rotate(tileData[index + rotationIndex]);
				if(useScale) matrix.scale(tileData[index + scaleIndex],tileData[index + scaleIndex]);
				if(useTransform) matrix = new openfl.geom.Matrix(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
				matrix.translate(tileData[index],tileData[index + 1]);
				if(useAlpha) el.setAttribute("opacity",Std.string(tileData[index + alphaIndex]));
				el.setAttribute("transform","matrix(" + matrix.a + ", " + matrix.b + ", " + matrix.c + ", " + matrix.d + ", " + matrix.tx + ", " + matrix.ty + ")");
				this.__snap.append(image);
			}
			index += numValues;
		}
	}
	,__expandFilteredExtent: function(x,y) {
		var maxX;
		var minX;
		var maxY;
		var minY;
		minX = this.__extent.x;
		minY = this.__extent.y;
		maxX = this.__extent.width + minX;
		maxY = this.__extent.height + minY;
		if(x > maxX) maxX = x; else maxX = maxX;
		if(x < minX) minX = x; else minX = minX;
		if(y > maxY) maxY = y; else maxY = maxY;
		if(y < minY) minY = y; else minY = minY;
		this.__extentWithFilters.x = minX;
		this.__extentWithFilters.y = minY;
		this.__extentWithFilters.width = maxX - minX;
		this.__extentWithFilters.height = maxY - minY;
	}
	,__expandStandardExtent: function(x,y,thickness) {
		if(thickness == null) thickness = 0;
		if(this._padding > 0) {
			this.__extent.width -= this._padding;
			this.__extent.height -= this._padding;
		}
		if(thickness != null && thickness > this._padding) this._padding = thickness;
		var maxX;
		var minX;
		var maxY;
		var minY;
		minX = this.__extent.x;
		minY = this.__extent.y;
		maxX = this.__extent.width + minX;
		maxY = this.__extent.height + minY;
		if(x > maxX) maxX = x; else maxX = maxX;
		if(x < minX) minX = x; else minX = minX;
		if(y > maxY) maxY = y; else maxY = maxY;
		if(y < minY) minY = y; else minY = minY;
		this.__extent.x = minX;
		this.__extent.y = minY;
		this.__extent.width = maxX - minX + this._padding;
		this.__extent.height = maxY - minY + this._padding;
		this.__expandFilteredExtent(x,y);
		this.boundsDirty = true;
	}
	,__invalidate: function() {
		this.set___changed(true);
		this.__clearNextCycle = true;
	}
	,__addStrokeAttribute: function(element,lineJob) {
		if(lineJob != null) {
			if(lineJob.grad == null) element.attr({ stroke : this.createCanvasColor(lineJob.colour,lineJob.alpha)}); else element.attr({ stroke : this.createCanvasGradient(lineJob.grad)});
			element.attr({ 'stroke-width' : lineJob.thickness, 'stroke-linecap' : (function($this) {
				var $r;
				var _g = lineJob.caps;
				$r = (function($this) {
					var $r;
					switch(_g) {
					case 256:
						$r = "round";
						break;
					case 512:
						$r = "square";
						break;
					case 0:
						$r = "butt";
						break;
					default:
						$r = "round";
					}
					return $r;
				}($this));
				return $r;
			}(this)), 'stroke-linejoin' : (function($this) {
				var $r;
				var _g1 = lineJob.joints;
				$r = (function($this) {
					var $r;
					switch(_g1) {
					case 0:
						$r = "round";
						break;
					case 4096:
						$r = "miter";
						break;
					case 8192:
						$r = "bevel";
						break;
					default:
						$r = "round";
					}
					return $r;
				}($this));
				return $r;
			}(this)), 'stroke-miterlimit' : lineJob.miter_limit, 'vector-effect' : (function($this) {
				var $r;
				var _g2 = lineJob.scale_mode;
				$r = (function($this) {
					var $r;
					switch(_g2) {
					case 0:
						$r = "non-scaling-stroke";
						break;
					case 2:
						$r = "none";
						break;
					case 1:
						$r = "none";
						break;
					case 3:
						$r = "none";
						break;
					default:
						$r = "none";
					}
					return $r;
				}($this));
				return $r;
			}(this))});
		} else element.attr({ stroke : "none"});
	}
	,__addFillAttribute: function(element,fillColour,fillAlpha,solidGradient,bitmap) {
		if(solidGradient != null) element.attr({ fill : this.createCanvasGradient(solidGradient)}); else if(bitmap != null && (bitmap.flags & 16) > 0) {
			var bBox = element.getBBox();
			element.attr({ fill : openfl.Lib.get_snap().image(bitmap.texture_buffer.toDataURL(),0,0,bitmap.texture_buffer.width,bitmap.texture_buffer.height).pattern(bBox.x,bBox.y,bitmap.texture_buffer.width,bitmap.texture_buffer.height).attr({ patternContentUnits : "userSpaceOnUse", patternUnits : "userSpaceOnUse", viewBox : "0 0 " + Std.string(bitmap.texture_buffer.width) + " " + Std.string(bitmap.texture_buffer.height)})});
		} else if(bitmap != null && (bitmap.flags & 16) == 0) element.attr({ fill : openfl.Lib.get_snap().image(bitmap.texture_buffer.toDataURL(),0,0,1,1).pattern(0,0,"100%","100%").attr({ patternContentUnits : "objectBoundingBox", patternUnits : "objectBoundingBox"})}); else element.attr({ fill : this.createCanvasColor(fillColour,Math.min(1.0,Math.max(0.0,fillAlpha)))});
		element.attr({ 'fill-rule' : "evenodd"});
	}
	,__render: function(maskHandle,filters,sx,sy,clip0,clip1,clip2,clip3) {
		if(sy == null) sy = 1.0;
		if(sx == null) sx = 1.0;
		var _g2 = this;
		if(!this.get___changed()) return false;
		this.closePolygon(true);
		var padding = this._padding;
		if(filters != null) {
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(filter,"blurX")) padding += Math.max(Reflect.field(filter,"blurX"),Reflect.field(filter,"blurY")) * 4;
			}
		}
		this.__expandFilteredExtent(-(padding * sx) / 2,-(padding * sy) / 2);
		if(this.__clearNextCycle) {
			this.nextDrawIndex = 0;
			this.__clearCanvas();
			this.__clearNextCycle = false;
		}
		var len = this.mDrawList.length;
		var _g1 = this.nextDrawIndex;
		while(_g1 < len) {
			var i = _g1++;
			var d = this.mDrawList[len - 1 - i];
			var fillColour = [d.fillColour];
			var fillAlpha = [d.fillAlpha];
			var g = [d.solidGradient];
			var bitmap = [d.bitmap];
			if(d.tileJob != null) this.__drawTiles(d.tileJob.sheet,d.tileJob.drawList,d.tileJob.flags); else {
				var snapElements = [];
				{
					var _g11 = d.snapJob.jobType;
					switch(_g11[1]) {
					case 0:
						break;
					case 2:
						var ry = _g11[5];
						var rx = _g11[4];
						var y = _g11[3];
						var x = _g11[2];
						var ellipse = openfl.Lib.get_snap().ellipse(x,y,rx,ry);
						this.__addStrokeAttribute(ellipse,d.lineJobs.length == 1?d.lineJobs[0]:null);
						this.__addFillAttribute(ellipse,fillColour[0],fillAlpha[0],g[0],bitmap[0]);
						this.__snap.append(ellipse);
						break;
					case 3:
						var rad = _g11[4];
						var y1 = _g11[3];
						var x1 = _g11[2];
						var circle = openfl.Lib.get_snap().circle(x1,y1,rad);
						this.__addStrokeAttribute(circle,d.lineJobs.length == 1?d.lineJobs[0]:null);
						this.__addFillAttribute(circle,fillColour[0],fillAlpha[0],g[0],bitmap[0]);
						this.__snap.append(circle);
						break;
					case 4:
						var ry1 = _g11[7];
						var rx1 = _g11[6];
						var height = _g11[5];
						var width = _g11[4];
						var y2 = _g11[3];
						var x2 = _g11[2];
						var rect = openfl.Lib.get_snap().rect(x2,y2,width,height,rx1,ry1);
						this.__addStrokeAttribute(rect,d.lineJobs.length == 1?d.lineJobs[0]:null);
						this.__addFillAttribute(rect,fillColour[0],fillAlpha[0],g[0],bitmap[0]);
						this.__snap.append(rect);
						break;
					case 1:
						var pathString = [new StringBuf()];
						if(d.lineJobs.length > 0) {
							var _g21 = 0;
							var _g3 = d.lineJobs;
							while(_g21 < _g3.length) {
								var lj = _g3[_g21];
								++_g21;
								var _g5 = lj.point_idx0;
								var _g4 = lj.point_idx1 + 1;
								while(_g5 < _g4) {
									var i1 = _g5++;
									pathString[0].add(this.getSvgPathStringFor(d.points[i1]));
								}
								pathString[0].b += "Z";
								var path = openfl.Lib.get_snap().path(pathString[0].b);
								this.__addStrokeAttribute(path,lj);
								snapElements.push(path);
							}
						} else {
							Lambda.iter(d.points,(function(pathString) {
								return function(p) {
									pathString[0].add(_g2.getSvgPathStringFor(p));
								};
							})(pathString));
							pathString[0].b += "Z";
							snapElements.push(openfl.Lib.get_snap().path(pathString[0].b).attr({ stroke : "none"}));
						}
						Lambda.iter(snapElements,(function(bitmap,g,fillAlpha,fillColour) {
							return function(path1) {
								_g2.__addFillAttribute(path1,fillColour[0],fillAlpha[0],g[0],bitmap[0]);
								_g2.__snap.append(path1);
							};
						})(bitmap,g,fillAlpha,fillColour));
						break;
					}
				}
			}
		}
		this.set___changed(false);
		if(len > 0) this.nextDrawIndex = len - 1; else this.nextDrawIndex = 0;
		this.mDrawList = [];
		return true;
	}
	,getSvgPathStringFor: function(p) {
		var _g = p.type;
		switch(_g) {
		case 0:
			return "M" + p.x + " " + p.y + " ";
		case 2:
			return "Q" + p.cx + " " + p.cy + " " + p.x + " " + p.y + " ";
		default:
			return "L" + p.x + " " + p.y + " ";
		}
	}
	,closeSvgPathString: function(pathString) {
		pathString.b += "Z";
	}
	,get___changed: function() {
		return this.__changedData;
	}
	,set___changed: function(v) {
		if(v != this.__changedData) {
			this.__changedData = v;
			if(null != this.displayObject) this.displayObject.renderNextWake();
		}
		return this.__changedData;
	}
	,__class__: openfl.display.Graphics
	,__properties__: {set___changed:"set___changed",get___changed:"get___changed"}
};
openfl.display.Drawable = function(inPoints,inFillColour,inFillAlpha,inSolidGradient,inBitmap,inLineJobs,inTileJob,inSnapJob) {
	this.points = inPoints;
	this.fillColour = inFillColour;
	this.fillAlpha = inFillAlpha;
	this.solidGradient = inSolidGradient;
	this.bitmap = inBitmap;
	this.lineJobs = inLineJobs;
	this.tileJob = inTileJob;
	this.snapJob = inSnapJob;
};
$hxClasses["openfl.display.Drawable"] = openfl.display.Drawable;
openfl.display.Drawable.__name__ = ["openfl","display","Drawable"];
openfl.display.Drawable.prototype = {
	__class__: openfl.display.Drawable
};
openfl.display.GfxPoint = function(inX,inY,inCX,inCY,inType) {
	this.x = inX;
	this.y = inY;
	this.cx = inCX;
	this.cy = inCY;
	this.type = inType;
};
$hxClasses["openfl.display.GfxPoint"] = openfl.display.GfxPoint;
openfl.display.GfxPoint.__name__ = ["openfl","display","GfxPoint"];
openfl.display.GfxPoint.prototype = {
	__class__: openfl.display.GfxPoint
};
openfl.display.Grad = function(inPoints,inMatrix,inFlags,inFocal) {
	this.points = inPoints;
	this.matrix = inMatrix;
	this.flags = inFlags;
	this.focal = inFocal;
};
$hxClasses["openfl.display.Grad"] = openfl.display.Grad;
openfl.display.Grad.__name__ = ["openfl","display","Grad"];
openfl.display.Grad.prototype = {
	__class__: openfl.display.Grad
};
openfl.display.GradPoint = function(inCol,inAlpha,inRatio) {
	this.col = inCol;
	this.alpha = inAlpha;
	this.ratio = inRatio;
};
$hxClasses["openfl.display.GradPoint"] = openfl.display.GradPoint;
openfl.display.GradPoint.__name__ = ["openfl","display","GradPoint"];
openfl.display.GradPoint.prototype = {
	__class__: openfl.display.GradPoint
};
openfl.display.LineJob = function(inGrad,inPoint_idx0,inPoint_idx1,inThickness,inAlpha,inColour,inPixel_hinting,inJoints,inCaps,inScale_mode,inMiter_limit) {
	this.grad = inGrad;
	this.point_idx0 = inPoint_idx0;
	this.point_idx1 = inPoint_idx1;
	this.thickness = inThickness;
	this.alpha = inAlpha;
	this.colour = inColour;
	this.pixel_hinting = inPixel_hinting;
	this.joints = inJoints;
	this.caps = inCaps;
	this.scale_mode = inScale_mode;
	this.miter_limit = inMiter_limit;
};
$hxClasses["openfl.display.LineJob"] = openfl.display.LineJob;
openfl.display.LineJob.__name__ = ["openfl","display","LineJob"];
openfl.display.LineJob.prototype = {
	__class__: openfl.display.LineJob
};
openfl.display.PointInPathMode = $hxClasses["openfl.display.PointInPathMode"] = { __ename__ : true, __constructs__ : ["USER_SPACE","DEVICE_SPACE"] };
openfl.display.PointInPathMode.USER_SPACE = ["USER_SPACE",0];
openfl.display.PointInPathMode.USER_SPACE.toString = $estr;
openfl.display.PointInPathMode.USER_SPACE.__enum__ = openfl.display.PointInPathMode;
openfl.display.PointInPathMode.DEVICE_SPACE = ["DEVICE_SPACE",1];
openfl.display.PointInPathMode.DEVICE_SPACE.toString = $estr;
openfl.display.PointInPathMode.DEVICE_SPACE.__enum__ = openfl.display.PointInPathMode;
openfl.display.TileJob = function(sheet,drawList,flags) {
	this.sheet = sheet;
	this.drawList = drawList;
	this.flags = flags;
};
$hxClasses["openfl.display.TileJob"] = openfl.display.TileJob;
openfl.display.TileJob.__name__ = ["openfl","display","TileJob"];
openfl.display.TileJob.prototype = {
	__class__: openfl.display.TileJob
};
openfl.display.SnapDrawable = $hxClasses["openfl.display.SnapDrawable"] = { __ename__ : true, __constructs__ : ["NONE","PATH","ELLIPSE","CIRCLE","RECT"] };
openfl.display.SnapDrawable.NONE = ["NONE",0];
openfl.display.SnapDrawable.NONE.toString = $estr;
openfl.display.SnapDrawable.NONE.__enum__ = openfl.display.SnapDrawable;
openfl.display.SnapDrawable.PATH = ["PATH",1];
openfl.display.SnapDrawable.PATH.toString = $estr;
openfl.display.SnapDrawable.PATH.__enum__ = openfl.display.SnapDrawable;
openfl.display.SnapDrawable.ELLIPSE = function(x,y,rx,ry) { var $x = ["ELLIPSE",2,x,y,rx,ry]; $x.__enum__ = openfl.display.SnapDrawable; $x.toString = $estr; return $x; };
openfl.display.SnapDrawable.CIRCLE = function(x,y,rad) { var $x = ["CIRCLE",3,x,y,rad]; $x.__enum__ = openfl.display.SnapDrawable; $x.toString = $estr; return $x; };
openfl.display.SnapDrawable.RECT = function(x,y,width,height,rx,ry) { var $x = ["RECT",4,x,y,width,height,rx,ry]; $x.__enum__ = openfl.display.SnapDrawable; $x.toString = $estr; return $x; };
openfl.display.SnapJob = function() {
	this.jobType = openfl.display.SnapDrawable.NONE;
};
$hxClasses["openfl.display.SnapJob"] = openfl.display.SnapJob;
openfl.display.SnapJob.__name__ = ["openfl","display","SnapJob"];
openfl.display.SnapJob.getPathJob = function() {
	var result = new openfl.display.SnapJob();
	result.jobType = openfl.display.SnapDrawable.PATH;
	return result;
};
openfl.display.SnapJob.getEllipseJob = function(x,y,rx,ry) {
	var result = new openfl.display.SnapJob();
	result.jobType = openfl.display.SnapDrawable.ELLIPSE(x,y,rx,ry);
	return result;
};
openfl.display.SnapJob.getCircleJob = function(x,y,rad) {
	var result = new openfl.display.SnapJob();
	result.jobType = openfl.display.SnapDrawable.CIRCLE(x,y,rad);
	return result;
};
openfl.display.SnapJob.getRectJob = function(x,y,width,height,rx,ry) {
	var result = new openfl.display.SnapJob();
	result.jobType = openfl.display.SnapDrawable.RECT(x,y,width,height,rx,ry);
	return result;
};
openfl.display.SnapJob.prototype = {
	__class__: openfl.display.SnapJob
};
openfl.display.IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl.display.IGraphicsFill;
openfl.display.IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl.display.IGraphicsFill.prototype = {
	__class__: openfl.display.IGraphicsFill
};
openfl.display.IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl.display.IGraphicsData;
openfl.display.IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl.display.IGraphicsData.prototype = {
	__class__: openfl.display.IGraphicsData
};
openfl.display.GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) smooth = false;
	if(repeat == null) repeat = true;
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl.display.GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl.display.GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl.display.GraphicsBitmapFill;
openfl.display.GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl.display.GraphicsBitmapFill.__interfaces__ = [openfl.display.IGraphicsFill,openfl.display.IGraphicsData];
openfl.display.GraphicsBitmapFill.prototype = {
	__class__: openfl.display.GraphicsBitmapFill
};
openfl.display.GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl.display.GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl.display.GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl.display.GraphicsGradientFill;
openfl.display.GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl.display.GraphicsGradientFill.__interfaces__ = [openfl.display.IGraphicsFill,openfl.display.IGraphicsData];
openfl.display.GraphicsGradientFill.prototype = {
	__class__: openfl.display.GraphicsGradientFill
};
openfl.display.IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl.display.IGraphicsPath;
openfl.display.IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
openfl.display.GraphicsPath = function(commands,data,winding) {
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl.display.GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl.display.GraphicsPath;
openfl.display.GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl.display.GraphicsPath.__interfaces__ = [openfl.display.IGraphicsPath,openfl.display.IGraphicsData];
openfl.display.GraphicsPath.prototype = {
	curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			openfl._Vector.Vector_Impl_.push(this.commands,3);
			openfl._Vector.Vector_Impl_.push(this.data,anchorX);
			openfl._Vector.Vector_Impl_.push(this.data,anchorY);
			openfl._Vector.Vector_Impl_.push(this.data,controlX);
			openfl._Vector.Vector_Impl_.push(this.data,controlY);
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			openfl._Vector.Vector_Impl_.push(this.commands,2);
			openfl._Vector.Vector_Impl_.push(this.data,x);
			openfl._Vector.Vector_Impl_.push(this.data,y);
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			openfl._Vector.Vector_Impl_.push(this.commands,1);
			openfl._Vector.Vector_Impl_.push(this.data,x);
			openfl._Vector.Vector_Impl_.push(this.data,y);
		}
	}
	,__class__: openfl.display.GraphicsPath
};
openfl.display.GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl.display.GraphicsPathCommand;
openfl.display.GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
openfl.display.GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl.display.GraphicsPathWinding.EVEN_ODD.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl.display.GraphicsPathWinding.NON_ZERO.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl.display.GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl.display.GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl.display.GraphicsSolidFill;
openfl.display.GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl.display.GraphicsSolidFill.__interfaces__ = [openfl.display.IGraphicsFill,openfl.display.IGraphicsData];
openfl.display.GraphicsSolidFill.prototype = {
	__class__: openfl.display.GraphicsSolidFill
};
openfl.display.IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl.display.IGraphicsStroke;
openfl.display.IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
openfl.display.GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.0;
	if(caps != null) this.caps = caps; else this.caps = null;
	this.fill = fill;
	if(joints != null) this.joints = joints; else this.joints = null;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	if(scaleMode != null) this.scaleMode = scaleMode; else this.scaleMode = null;
	this.thickness = thickness;
	this.__graphicsDataType = openfl.display.GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl.display.GraphicsStroke;
openfl.display.GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl.display.GraphicsStroke.__interfaces__ = [openfl.display.IGraphicsStroke,openfl.display.IGraphicsData];
openfl.display.GraphicsStroke.prototype = {
	__class__: openfl.display.GraphicsStroke
};
openfl.display.GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP"] };
openfl.display.GraphicsDataType.STROKE = ["STROKE",0];
openfl.display.GraphicsDataType.STROKE.toString = $estr;
openfl.display.GraphicsDataType.STROKE.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.SOLID = ["SOLID",1];
openfl.display.GraphicsDataType.SOLID.toString = $estr;
openfl.display.GraphicsDataType.SOLID.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl.display.GraphicsDataType.GRADIENT.toString = $estr;
openfl.display.GraphicsDataType.GRADIENT.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.PATH = ["PATH",3];
openfl.display.GraphicsDataType.PATH.toString = $estr;
openfl.display.GraphicsDataType.PATH.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.BITMAP = ["BITMAP",4];
openfl.display.GraphicsDataType.BITMAP.toString = $estr;
openfl.display.GraphicsDataType.BITMAP.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : true, __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL"] };
openfl.display.GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl.display.GraphicsFillType.SOLID_FILL.toString = $estr;
openfl.display.GraphicsFillType.SOLID_FILL.__enum__ = openfl.display.GraphicsFillType;
openfl.display.GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl.display.GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl.display.GraphicsFillType.GRADIENT_FILL.__enum__ = openfl.display.GraphicsFillType;
openfl.display.GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl.display.GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl.display.GraphicsFillType.BITMAP_FILL.__enum__ = openfl.display.GraphicsFillType;
openfl.display.InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl.display.InterpolationMethod.RGB = ["RGB",0];
openfl.display.InterpolationMethod.RGB.toString = $estr;
openfl.display.InterpolationMethod.RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl.display.InterpolationMethod.LINEAR_RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : true, __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl.display.JointStyle.MITER = ["MITER",0];
openfl.display.JointStyle.MITER.toString = $estr;
openfl.display.JointStyle.MITER.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.ROUND = ["ROUND",1];
openfl.display.JointStyle.ROUND.toString = $estr;
openfl.display.JointStyle.ROUND.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.BEVEL = ["BEVEL",2];
openfl.display.JointStyle.BEVEL.toString = $estr;
openfl.display.JointStyle.BEVEL.__enum__ = openfl.display.JointStyle;
openfl.display.LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl.display.LineScaleMode.HORIZONTAL.toString = $estr;
openfl.display.LineScaleMode.HORIZONTAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NONE = ["NONE",1];
openfl.display.LineScaleMode.NONE.toString = $estr;
openfl.display.LineScaleMode.NONE.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NORMAL = ["NORMAL",2];
openfl.display.LineScaleMode.NORMAL.toString = $estr;
openfl.display.LineScaleMode.NORMAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl.display.LineScaleMode.VERTICAL.toString = $estr;
openfl.display.LineScaleMode.VERTICAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.Loader = function() {
	openfl.display.Sprite.call(this);
	this.contentLoaderInfo = openfl.display.LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl.display.Loader;
openfl.display.Loader.__name__ = ["openfl","display","Loader"];
openfl.display.Loader.__super__ = openfl.display.Sprite;
openfl.display.Loader.prototype = $extend(openfl.display.Sprite.prototype,{
	load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		this.mImage = new openfl.display.BitmapData(0,0,transparent);
		try {
			this.contentLoaderInfo.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.handleLoad),false,2147483647);
			this.contentLoaderInfo.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.handleError),false,2147483647);
			this.mImage.__loadFromFile(request.url,this.contentLoaderInfo);
			this.content = new openfl.display.Bitmap(this.mImage);
			this.contentLoaderInfo.content = this.content;
			this.addChild(this.content);
		} catch( e ) {
			console.log("Error " + Std.string(e));
			var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
			evt.currentTarget = this;
			this.contentLoaderInfo.dispatchEvent(evt);
			return;
		}
		if(this.mShape == null) {
			this.mShape = new openfl.display.Shape();
			this.addChild(this.mShape);
		}
	}
	,unload: function() {
		if(this.__children.length > 0) {
			while(this.__children.length > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl.events.Event(openfl.events.Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,loadBytes: function(buffer) {
		var _g = this;
		try {
			this.contentLoaderInfo.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.handleLoad),false,2147483647);
			openfl.display.BitmapData.loadFromBytes(buffer,null,function(bmd) {
				_g.content = new openfl.display.Bitmap(bmd);
				_g.contentLoaderInfo.content = _g.content;
				_g.addChild(_g.content);
				var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
				evt.currentTarget = _g;
				_g.contentLoaderInfo.dispatchEvent(evt);
			});
		} catch( e ) {
			console.log("Error " + Std.string(e));
			var evt1 = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
			evt1.currentTarget = this;
			this.contentLoaderInfo.dispatchEvent(evt1);
		}
	}
	,toString: function() {
		return "[Loader name=" + this.name + " id=" + this.___id + "]";
	}
	,validateBounds: function() {
		if(this.get__boundsInvalid()) {
			openfl.display.Sprite.prototype.validateBounds.call(this);
			if(this.mImage != null) {
				var r = new openfl.geom.Rectangle(0,0,this.mImage.get_width(),this.mImage.get_height());
				if(r.width != 0 || r.height != 0) {
					if(this.__boundsRect.width == 0 && this.__boundsRect.height == 0) this.__boundsRect = r.clone(); else this.__boundsRect.extendBounds(r);
				}
			}
			if(this.scale9Grid != null) {
				this.__boundsRect.width *= this.__scaleX;
				this.__boundsRect.height *= this.__scaleY;
				this.__width = this.__boundsRect.width;
				this.__height = this.__boundsRect.height;
			} else {
				this.__width = this.__boundsRect.width * this.__scaleX;
				this.__height = this.__boundsRect.height * this.__scaleY;
			}
		}
	}
	,handleLoad: function(e) {
		e.currentTarget = this;
		if(this.content != null) {
			this.content.__invalidateBounds();
			this.content.__render(null,null);
			this.contentLoaderInfo.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.handleLoad));
		}
	}
	,handleError: function(e) {
		e.currentTarget = this;
		if(this.content != null) {
			this.content.__invalidateBounds();
			this.content.__render(null,null);
			this.contentLoaderInfo.removeEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.handleError));
		}
	}
	,__class__: openfl.display.Loader
});
openfl.display.LoaderInfo = function() {
	openfl.events.EventDispatcher.call(this);
	this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl.display.LoaderInfo;
openfl.display.LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl.display.LoaderInfo.create = function(ldr) {
	var li = new openfl.display.LoaderInfo();
	if(ldr != null) li.loader = ldr; else li.url = "";
	return li;
};
openfl.display.LoaderInfo.__super__ = openfl.events.EventDispatcher;
openfl.display.LoaderInfo.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.display.LoaderInfo
});
openfl.display.MovieClip = function() {
	openfl.display.Sprite.call(this);
	this.enabled = true;
	this.__currentFrame = 0;
	this.__totalFrames = 0;
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
};
$hxClasses["openfl.display.MovieClip"] = openfl.display.MovieClip;
openfl.display.MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl.display.MovieClip.__super__ = openfl.display.Sprite;
openfl.display.MovieClip.prototype = $extend(openfl.display.Sprite.prototype,{
	gotoAndPlay: function(frame,scene) {
		if(scene == null) scene = "";
	}
	,gotoAndStop: function(frame,scene) {
		if(scene == null) scene = "";
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,toString: function() {
		return "[MovieClip name=" + this.name + " id=" + this.___id + "]";
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl.display.MovieClip
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentFrame:"get_currentFrame"})
});
openfl.display.PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl.display.PixelSnapping.NEVER = ["NEVER",0];
openfl.display.PixelSnapping.NEVER.toString = $estr;
openfl.display.PixelSnapping.NEVER.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.AUTO = ["AUTO",1];
openfl.display.PixelSnapping.AUTO.toString = $estr;
openfl.display.PixelSnapping.AUTO.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl.display.PixelSnapping.ALWAYS.toString = $estr;
openfl.display.PixelSnapping.ALWAYS.__enum__ = openfl.display.PixelSnapping;
openfl.display.Shape = function() {
	openfl.display.DisplayObject.call(this);
	this.__graphics = new openfl.display.Graphics(this.snap);
	this.__graphics.displayObject = this;
};
$hxClasses["openfl.display.Shape"] = openfl.display.Shape;
openfl.display.Shape.__name__ = ["openfl","display","Shape"];
openfl.display.Shape.__super__ = openfl.display.DisplayObject;
openfl.display.Shape.prototype = $extend(openfl.display.DisplayObject.prototype,{
	toString: function() {
		return "[Shape name=" + this.name + " id=" + this.___id + "]";
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,__getObjectUnderPoint: function(point) {
		if(this.parent == null) return null;
		if(this.parent.mouseEnabled && openfl.display.DisplayObject.prototype.__getObjectUnderPoint.call(this,point) == this) return this.parent; else return null;
	}
	,get_graphics: function() {
		return this.__graphics;
	}
	,__class__: openfl.display.Shape
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
openfl.display.SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl.display.SpreadMethod.REPEAT = ["REPEAT",0];
openfl.display.SpreadMethod.REPEAT.toString = $estr;
openfl.display.SpreadMethod.REPEAT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.REFLECT = ["REFLECT",1];
openfl.display.SpreadMethod.REFLECT.toString = $estr;
openfl.display.SpreadMethod.REFLECT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.PAD = ["PAD",2];
openfl.display.SpreadMethod.PAD.toString = $estr;
openfl.display.SpreadMethod.PAD.__enum__ = openfl.display.SpreadMethod;
openfl.events.Event = function(inType,inBubbles,inCancelable) {
	if(inCancelable == null) inCancelable = false;
	if(inBubbles == null) inBubbles = false;
	this.type = inType;
	this.bubbles = inBubbles;
	this.cancelable = inCancelable;
	this.__isCancelled = false;
	this.__isCancelledNow = false;
	this.target = null;
	this.currentTarget = null;
	this.eventPhase = openfl.events.EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl.events.Event;
openfl.events.Event.__name__ = ["openfl","events","Event"];
openfl.events.Event.prototype = {
	clone: function() {
		return new openfl.events.Event(this.type,this.bubbles,this.cancelable);
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__createSimilar: function(type,related,targ) {
		var result = new openfl.events.Event(type,this.bubbles,this.cancelable);
		if(targ != null) result.target = targ;
		return result;
	}
	,__getIsCancelled: function() {
		return this.__isCancelled;
	}
	,__getIsCancelledNow: function() {
		return this.__isCancelledNow;
	}
	,__setPhase: function(phase) {
		this.eventPhase = phase;
	}
	,__class__: openfl.events.Event
};
openfl.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl.events.MouseEvent;
openfl.events.MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl.events.MouseEvent.__create = function(type,event,local,target) {
	var __mouseDown = false;
	var delta = 2;
	if(type == openfl.events.MouseEvent.MOUSE_WHEEL) {
		var mouseEvent = event;
		if(mouseEvent.wheelDelta) delta = mouseEvent.wheelDelta / 120 | 0; else if(mouseEvent.detail) -mouseEvent.detail | 0;
	}
	if(type == openfl.events.MouseEvent.MOUSE_DOWN) if(event.which != null) __mouseDown = event.which == 1; else if(event.button != null) __mouseDown = event.button == 0; else __mouseDown = false; else if(type == openfl.events.MouseEvent.MOUSE_UP) {
		if(event.which != null) {
			if(event.which == 1) __mouseDown = false; else if(event.button != null) {
				if(event.button == 0) __mouseDown = false; else __mouseDown = false;
			}
		}
	}
	var pseudoEvent = new openfl.events.MouseEvent(type,true,false,local.x,local.y,null,event.ctrlKey,event.altKey,event.shiftKey,__mouseDown,delta);
	pseudoEvent.stageX = openfl.Lib.get_current().get_stage().get_mouseX();
	pseudoEvent.stageY = openfl.Lib.get_current().get_stage().get_mouseY();
	pseudoEvent.target = target;
	return pseudoEvent;
};
openfl.events.MouseEvent.__super__ = openfl.events.Event;
openfl.events.MouseEvent.prototype = $extend(openfl.events.Event.prototype,{
	__createSimilar: function(type,related,targ) {
		var result = new openfl.events.MouseEvent(type,this.bubbles,this.cancelable,this.localX,this.localY,related == null?this.relatedObject:related,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		if(targ != null) result.target = targ;
		return result;
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.MouseEvent
});
openfl.display.Stage = function(width,height) {
	openfl.display.DisplayObjectContainer.call(this);
	this.__focusObject = null;
	this.__focusObjectActivated = false;
	this.__windowWidth = width;
	this.__windowHeight = height;
	this.stageFocusRect = false;
	this.scaleMode = openfl.display.StageScaleMode.SHOW_ALL;
	this.__stageMatrix = new openfl.geom.Matrix();
	this.tabEnabled = true;
	this.set_frameRate(0.0);
	this.set_backgroundColor(16777215);
	this.name = "Stage";
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
	this.loaderInfo.parameters.width = Std.string(this.__windowWidth);
	this.loaderInfo.parameters.height = Std.string(this.__windowHeight);
	this.__pointInPathMode = openfl.display.Graphics.__detectIsPointInPathMode();
	this.__mouseOverObjects = [];
	this.set_showDefaultContextMenu(true);
	this.__touchInfo = [];
	this.__uIEventsQueue = new Array(1000);
	this.__uIEventsQueueIndex = 0;
	this.snapIdToDisplayObjects = new haxe.ds.StringMap();
	this.snap.remove();
	this.snap = openfl.Lib.get_stageSnap();
	var graphicsSnap = ((function($this) {
		var $r;
		var _this = openfl.Lib.get_snap();
		var e123 = [];
		var me123 = _this;
		$r = me123.group.apply(me123, e123);
		return $r;
	}(this))).addClass("graphics");
	this.snap.append(graphicsSnap);
	this.__graphics = new openfl.display.Graphics(graphicsSnap);
	this.__graphics.displayObject = this;
};
$hxClasses["openfl.display.Stage"] = openfl.display.Stage;
openfl.display.Stage.__name__ = ["openfl","display","Stage"];
openfl.display.Stage.getOrientation = function() {
	var rotation = window.orientation;
	var orientation = openfl.display.Stage.OrientationPortrait;
	switch(rotation) {
	case -90:
		orientation = openfl.display.Stage.OrientationLandscapeLeft;
		break;
	case 180:
		orientation = openfl.display.Stage.OrientationPortraitUpsideDown;
		break;
	case 90:
		orientation = openfl.display.Stage.OrientationLandscapeRight;
		break;
	default:
		orientation = openfl.display.Stage.OrientationPortrait;
	}
	return orientation;
};
openfl.display.Stage.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Stage.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	invalidate: function() {
		this.__invalid = true;
	}
	,toString: function() {
		return "[Stage id=" + this.___id + "]";
	}
	,__checkInOuts: function(event,stack,touchInfo) {
		var prev;
		if(touchInfo == null) prev = this.__mouseOverObjects; else prev = touchInfo.touchOverObjects;
		var changeEvents;
		if(touchInfo == null) changeEvents = openfl.display.Stage.__mouseChanges; else changeEvents = openfl.display.Stage.__touchChanges;
		var new_n = stack.length;
		var new_obj;
		if(new_n > 0) new_obj = stack[new_n - 1]; else new_obj = null;
		var old_n = prev.length;
		var old_obj;
		if(old_n > 0) old_obj = prev[old_n - 1]; else old_obj = null;
		if(new_obj != old_obj) {
			if(old_obj != null) old_obj.__fireEvent(event.__createSimilar(changeEvents[0],new_obj,old_obj));
			if(new_obj != null) new_obj.__fireEvent(event.__createSimilar(changeEvents[1],old_obj,new_obj));
			var common = 0;
			while(common < new_n && common < old_n && stack[common] == prev[common]) common++;
			var rollOut = event.__createSimilar(changeEvents[2],new_obj,old_obj);
			var i = old_n - 1;
			while(i >= common) {
				prev[i].dispatchEvent(rollOut);
				i--;
			}
			var rollOver = event.__createSimilar(changeEvents[3],old_obj);
			var i1 = new_n - 1;
			while(i1 >= common) {
				stack[i1].dispatchEvent(rollOver);
				i1--;
			}
			if(touchInfo == null) this.__mouseOverObjects = stack; else touchInfo.touchOverObjects = stack;
		}
	}
	,__drag: function(point) {
		var p = this.__dragObject.parent;
		if(p != null) point = p.globalToLocal(point);
		var x = point.x + this.__dragOffsetX;
		var y = point.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__isOnStage: function() {
		return true;
	}
	,getTextFromPasteElement: function() {
		var document = window.document;
		var curFocus = document.activeElement;
		var input = document.getElementById("openfl-snapsvg-input");
		if(null == input.innerText || "" == input.innerText) return StringTools.trim(input.innerHTML); else return input.innerText;
	}
	,__processStageEvent: function(evt) {
		var document = window.document;
		var curFocus = document.activeElement;
		evt.stopPropagation();
		var _g = evt.type;
		switch(_g) {
		case "resize":
			this.__onResize(openfl.Lib.__getWidth(),openfl.Lib.__getHeight());
			break;
		case "focus":
			this.__onFocus(this);
			if(!this.__focusObjectActivated) {
				this.__focusObjectActivated = true;
				this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ACTIVATE));
			}
			break;
		case "blur":
			if(this.__focusObjectActivated) {
				this.__focusObjectActivated = false;
				this.dispatchEvent(new openfl.events.Event(openfl.events.Event.DEACTIVATE));
			}
			break;
		case "mousemove":
			this.__onMouse(evt,openfl.events.MouseEvent.MOUSE_MOVE);
			break;
		case "mousedown":
			this.__onMouse(evt,openfl.events.MouseEvent.MOUSE_DOWN);
			break;
		case "mouseup":
			this.__onMouse(evt,openfl.events.MouseEvent.MOUSE_UP);
			break;
		case "click":
			this.__onMouse(evt,openfl.events.MouseEvent.CLICK);
			break;
		case "mousewheel":
			this.__onMouse(evt,openfl.events.MouseEvent.MOUSE_WHEEL);
			break;
		case "dblclick":
			this.__onMouse(evt,openfl.events.MouseEvent.DOUBLE_CLICK);
			break;
		case "keydown":
			var evt1 = evt;
			var keyCode;
			if(evt1.keyCode != null) keyCode = evt1.keyCode; else keyCode = evt1.which;
			keyCode = openfl.ui.Keyboard.__convertMozillaCode(keyCode);
			this.__onKey(keyCode,true,evt1.charCode,evt1.ctrlKey || evt1.metaKey,evt1.altKey,evt1.shiftKey,evt1.keyLocation);
			break;
		case "keyup":
			var evt2 = evt;
			var keyCode1;
			if(evt2.keyCode != null) keyCode1 = evt2.keyCode; else keyCode1 = evt2.which;
			keyCode1 = openfl.ui.Keyboard.__convertMozillaCode(keyCode1);
			this.__onKey(keyCode1,false,evt2.charCode,evt2.ctrlKey || evt2.metaKey,evt2.altKey,evt2.shiftKey,evt2.keyLocation);
			break;
		case "keypress":
			var evt3 = evt;
			var keyCode2;
			if(evt3.keyCode != null) keyCode2 = evt3.keyCode; else keyCode2 = evt3.which;
			keyCode2 = openfl.ui.Keyboard.__convertMozillaCode(keyCode2);
			this.__onKeyPress(keyCode2,true,evt3.charCode,evt3.ctrlKey || evt3.metaKey,evt3.altKey,evt3.shiftKey,evt3.keyLocation);
			break;
		case "paste":
			var windowClipboardData = window.clipboardData;
			var eventClipboardData = evt.clipboardData;
			var clipboardData;
			if(null != windowClipboardData) clipboardData = windowClipboardData; else clipboardData = eventClipboardData;
			this.__onPaste(null != clipboardData && clipboardData.types.length > 0?clipboardData.getData("text/plain"):this.getTextFromPasteElement());
			break;
		case "touchstart":
			var evt4 = evt;
			evt4.preventDefault();
			var touchInfo = new openfl.display._Stage.TouchInfo();
			this.__touchInfo[evt4.changedTouches[0].identifier] = touchInfo;
			this.__onTouch(evt4,evt4.changedTouches[0],"touchBegin",touchInfo,false);
			break;
		case "touchmove":
			var evt5 = evt;
			evt5.preventDefault();
			var touchInfo1 = this.__touchInfo[evt5.changedTouches[0].identifier];
			this.__onTouch(evt5,evt5.changedTouches[0],"touchMove",touchInfo1,true);
			break;
		case "touchend":
			var evt6 = evt;
			evt6.preventDefault();
			var touchInfo2 = this.__touchInfo[evt6.changedTouches[0].identifier];
			this.__onTouch(evt6,evt6.changedTouches[0],"touchEnd",touchInfo2,true);
			this.__touchInfo[evt6.changedTouches[0].identifier] = null;
			break;
		case "devicemotion":
			var evt7 = evt;
			this.__handleAccelerometer(evt7);
			break;
		case "orientationchange":
			this.__handleOrientationChange();
			break;
		default:
		}
	}
	,stopPropagationOfEvent: function(e) {
		e.stopPropagation();
	}
	,__queueStageEvent: function(evt) {
		var _g = this;
		var target = evt.target;
		if(evt.type == "keydown") {
			var e = evt;
			if(e.keyCode == 86 && (e.ctrlKey || e.commandKey || e.controlKey || e.metaKey)) {
				var document = window.document;
				var curFocus = document.activeElement;
				var input = document.getElementById("openfl-snapsvg-input");
				input.innerText = "";
				e.stopImmediatePropagation();
				input.addEventListener("focusin",$bind(this,this.stopPropagationOfEvent));
				input.addEventListener("focusout",$bind(this,this.stopPropagationOfEvent));
				input.addEventListener("beforedeactivate",$bind(this,this.stopPropagationOfEvent));
				curFocus.blur();
				input.focus();
				var t = new haxe.Timer(30);
				t.run = function() {
					input.blur();
					curFocus.focus();
					input.addEventListener("focusin",$bind(_g,_g.stopPropagationOfEvent));
					input.addEventListener("focusout",$bind(_g,_g.stopPropagationOfEvent));
					input.addEventListener("beforedeactivate",$bind(_g,_g.stopPropagationOfEvent));
					t.stop();
				};
			}
		}
		if(target.id == "openfl-snapsvg-input" && evt.type != "paste") return;
		this.__uIEventsQueue[this.__uIEventsQueueIndex++] = evt;
	}
	,__renderAll: function() {
		this.__render(null,null);
	}
	,__renderToCanvas: function(canvas) {
		this.__render(canvas);
	}
	,__stageRender: function(_) {
		if(!this.__stageActive) {
			this.__onResize(this.__windowWidth,this.__windowHeight);
			var event = new openfl.events.Event(openfl.events.Event.ACTIVATE);
			event.target = this;
			this.__broadcast(event);
			this.__stageActive = true;
		}
		var _g1 = 0;
		var _g = this.__uIEventsQueueIndex;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__uIEventsQueue[i] != null) this.__processStageEvent(this.__uIEventsQueue[i]);
		}
		this.__uIEventsQueueIndex = 0;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ENTER_FRAME));
		if(this.__invalid) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.RENDER));
		this.__renderAll();
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.STAGE_RENDERED));
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			var mouse = new openfl.geom.Point(this._mouseX,this._mouseY);
			var p = this.__dragObject.parent;
			if(p != null) mouse = p.globalToLocal(mouse);
			if(lockCenter) {
				var bounds1 = sprite.getBounds(this);
				this.__dragOffsetX = this.__dragObject.get_x() - (bounds1.width / 2 + bounds1.x);
				this.__dragOffsetY = this.__dragObject.get_y() - (bounds1.height / 2 + bounds1.y);
			} else {
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__updateNextWake: function() {
		if(this.__frameRate == 0) {
			var __requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
			__requestAnimationFrame($bind(this,this.__updateNextWake));
			this.__stageRender();
		} else {
			window.clearInterval(this.__timer);
			this.__timer = window.setInterval($bind(this,this.__stageRender),this.__interval);
		}
	}
	,__handleAccelerometer: function(evt) {
		openfl.display.Stage.__acceleration.x = evt.accelerationIncludingGravity.x;
		openfl.display.Stage.__acceleration.y = evt.accelerationIncludingGravity.y;
		openfl.display.Stage.__acceleration.z = evt.accelerationIncludingGravity.z;
	}
	,__handleOrientationChange: function() {
	}
	,__onKey: function(code,pressed,inChar,ctrl,alt,shift,keyLocation) {
		var stack = new Array();
		if(this.__focusObject == null) this.__getInteractiveObjectStack(stack); else this.__focusObject.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			var obj = stack[0];
			var evt = new openfl.events.KeyboardEvent(pressed?openfl.events.KeyboardEvent.KEY_DOWN:openfl.events.KeyboardEvent.KEY_UP,true,false,inChar,code,keyLocation,ctrl,alt,shift);
			obj.__fireEvent(evt);
		}
	}
	,__onKeyPress: function(code,pressed,inChar,ctrl,alt,shift,keyLocation) {
		var stack = new Array();
		if(this.__focusObject == null) this.__getInteractiveObjectStack(stack); else this.__focusObject.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			var obj = stack[0];
			var evt = new openfl.events.KeyboardEvent(openfl.events.KeyboardEvent.KEY_PRESS,true,false,inChar,code,keyLocation,ctrl,alt,shift);
			obj.__fireEvent(evt);
		}
	}
	,__onPaste: function(text) {
		var stack = new Array();
		if(this.__focusObject == null) this.__getInteractiveObjectStack(stack); else this.__focusObject.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			var obj = stack[0];
			var evt = new openfl.events.PasteEvent(text);
			obj.__fireEvent(evt);
		}
	}
	,__onFocus: function(target) {
		if(target != this.__focusObject) {
			if(this.__focusObject != null) this.__focusObject.__fireEvent(new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_OUT,true,false,this.__focusObject,false,0));
			target.__fireEvent(new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_IN,true,false,target,false,0));
			this.__focusObject = target;
		}
	}
	,__getObjectByElement: function(element) {
		if(!this.get_visible()) return null;
		while(null != element) {
			var id = element.id;
			if(null != id && "" != id && this.get_stage().snapIdToDisplayObjects.exists(id)) {
				var obj = this.get_stage().snapIdToDisplayObjects.get(id);
				var p = obj;
				while(null != p) {
					if(p.mouseEnabled) {
						obj = p;
						break;
					}
					p = p.parent;
				}
				p = obj;
				while(null != p) {
					if(this == p) return obj;
					p = p.parent;
				}
				return null;
			}
			element = element.parentElement;
		}
		return null;
	}
	,__onMouse: function(event,type) {
		var rect = openfl.Lib.mMe.__scr.getBoundingClientRect();
		var point = new openfl.geom.Point(event.clientX - rect.left,event.clientY - rect.top);
		if(this.__dragObject != null) this.__drag(point);
		var obj = this.__getObjectByElement(event.target);
		this._mouseX = point.x;
		this._mouseY = point.y;
		var stack = new Array();
		if(obj != null) obj.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			stack.reverse();
			var local = obj.globalToLocal(point);
			var evt = openfl.events.MouseEvent.__create(type,event,local,obj);
			this.__checkInOuts(evt,stack);
			if(type == openfl.events.MouseEvent.MOUSE_DOWN) this.__onFocus(stack[stack.length - 1]);
			obj.__fireEvent(evt);
		} else {
			var evt1 = openfl.events.MouseEvent.__create(type,event,point,null);
			this.__checkInOuts(evt1,stack);
		}
	}
	,__onResize: function(inW,inH) {
		this.__windowWidth = inW;
		this.__windowHeight = inH;
		var event = new openfl.events.Event(openfl.events.Event.RESIZE);
		event.target = this;
		this.__broadcast(event);
	}
	,__onTouch: function(event,touch,type,touchInfo,isPrimaryTouchPoint) {
		var rect = openfl.Lib.mMe.__scr.getBoundingClientRect();
		var point = new openfl.geom.Point(touch.pageX - rect.left,touch.pageY - rect.top);
		var obj = this.__getObjectByElement(event.target);
		this._mouseX = point.x;
		this._mouseY = point.y;
		var stack = new Array();
		if(obj != null) obj.__getInteractiveObjectStack(stack);
		if(stack.length > 0) {
			stack.reverse();
			var local = obj.globalToLocal(point);
			var evt = openfl.events.TouchEvent.__create(type,event,touch,local,obj);
			evt.touchPointID = touch.identifier;
			evt.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__checkInOuts(evt,stack,touchInfo);
			obj.__fireEvent(evt);
			var mouseType;
			switch(type) {
			case "touchBegin":
				mouseType = openfl.events.MouseEvent.MOUSE_DOWN;
				break;
			case "touchEnd":
				mouseType = openfl.events.MouseEvent.MOUSE_UP;
				break;
			default:
				if(this.__dragObject != null) this.__drag(point);
				mouseType = openfl.events.MouseEvent.MOUSE_MOVE;
			}
			obj.__fireEvent(openfl.events.MouseEvent.__create(mouseType,evt,local,obj));
		} else {
			var evt1 = openfl.events.TouchEvent.__create(type,event,touch,point,null);
			evt1.touchPointID = touch.identifier;
			evt1.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__checkInOuts(evt1,stack,touchInfo);
		}
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,get_backgroundColor: function() {
		return this.__backgroundColour;
	}
	,set_backgroundColor: function(col) {
		return this.__backgroundColour = col;
	}
	,get_color: function() {
		return this.__backgroundColour;
	}
	,set_color: function(col) {
		return this.__backgroundColour = col;
	}
	,get_displayState: function() {
		return this.displayState;
	}
	,set_displayState: function(displayState) {
		if(displayState != this.displayState && this.displayState != null) switch(displayState[1]) {
		case 0:
			openfl.Lib.__disableFullScreen();
			break;
		case 1:case 2:
			openfl.Lib.__enableFullScreen();
			break;
		}
		this.displayState = displayState;
		return displayState;
	}
	,get_focus: function() {
		return this.__focusObject;
	}
	,set_focus: function(inObj) {
		this.__onFocus(inObj);
		return this.__focusObject;
	}
	,get_frameRate: function() {
		return this.__frameRate;
	}
	,set_frameRate: function(speed) {
		if(speed == 0) {
			var $window = window;
			var __requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
			if(__requestAnimationFrame == null) speed = 60;
		}
		if(speed != 0) this.__interval = 1000.0 / speed | 0;
		this.__frameRate = speed;
		this.__updateNextWake();
		return speed;
	}
	,get_fullScreenWidth: function() {
		return window.innerWidth;
	}
	,get_fullScreenHeight: function() {
		return window.innerHeight;
	}
	,get_mouseX: function() {
		return this._mouseX;
	}
	,get_mouseY: function() {
		return this._mouseY;
	}
	,get_quality: function() {
		if(this.quality != null) return this.quality; else return openfl.display.StageQuality.BEST;
	}
	,set_quality: function(inQuality) {
		return this.quality = inQuality;
	}
	,get_showDefaultContextMenu: function() {
		return this.__showDefaultContextMenu;
	}
	,set_showDefaultContextMenu: function(showDefaultContextMenu) {
		if(showDefaultContextMenu != this.__showDefaultContextMenu && this.__showDefaultContextMenu != null) {
			if(!showDefaultContextMenu) openfl.Lib.__disableRightClick(); else openfl.Lib.__enableRightClick();
		}
		this.__showDefaultContextMenu = showDefaultContextMenu;
		return showDefaultContextMenu;
	}
	,get_stage: function() {
		return openfl.Lib.__getStage();
	}
	,get_stageHeight: function() {
		return this.__windowHeight;
	}
	,get_stageWidth: function() {
		return this.__windowWidth;
	}
	,__class__: openfl.display.Stage
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{get_stageWidth:"get_stageWidth",get_stageHeight:"get_stageHeight",set_showDefaultContextMenu:"set_showDefaultContextMenu",get_showDefaultContextMenu:"get_showDefaultContextMenu",set_quality:"set_quality",get_quality:"get_quality",get_fullScreenWidth:"get_fullScreenWidth",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor"})
});
openfl.display._Stage = {};
openfl.display._Stage.TouchInfo = function() {
	this.touchOverObjects = [];
};
$hxClasses["openfl.display._Stage.TouchInfo"] = openfl.display._Stage.TouchInfo;
openfl.display._Stage.TouchInfo.__name__ = ["openfl","display","_Stage","TouchInfo"];
openfl.display._Stage.TouchInfo.prototype = {
	__class__: openfl.display._Stage.TouchInfo
};
openfl.display.StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl.display.StageAlign.TOP_RIGHT.toString = $estr;
openfl.display.StageAlign.TOP_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl.display.StageAlign.TOP_LEFT.toString = $estr;
openfl.display.StageAlign.TOP_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP = ["TOP",2];
openfl.display.StageAlign.TOP.toString = $estr;
openfl.display.StageAlign.TOP.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.RIGHT = ["RIGHT",3];
openfl.display.StageAlign.RIGHT.toString = $estr;
openfl.display.StageAlign.RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.LEFT = ["LEFT",4];
openfl.display.StageAlign.LEFT.toString = $estr;
openfl.display.StageAlign.LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl.display.StageAlign.BOTTOM_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl.display.StageAlign.BOTTOM_LEFT.toString = $estr;
openfl.display.StageAlign.BOTTOM_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM = ["BOTTOM",7];
openfl.display.StageAlign.BOTTOM.toString = $estr;
openfl.display.StageAlign.BOTTOM.__enum__ = openfl.display.StageAlign;
openfl.display.StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl.display.StageDisplayState.NORMAL = ["NORMAL",0];
openfl.display.StageDisplayState.NORMAL.toString = $estr;
openfl.display.StageDisplayState.NORMAL.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl.display.StageDisplayState.FULL_SCREEN.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageQuality = function() { };
$hxClasses["openfl.display.StageQuality"] = openfl.display.StageQuality;
openfl.display.StageQuality.__name__ = ["openfl","display","StageQuality"];
openfl.display.StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl.display.StageScaleMode.SHOW_ALL.toString = $estr;
openfl.display.StageScaleMode.SHOW_ALL.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl.display.StageScaleMode.NO_SCALE.toString = $estr;
openfl.display.StageScaleMode.NO_SCALE.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl.display.StageScaleMode.NO_BORDER.toString = $estr;
openfl.display.StageScaleMode.NO_BORDER.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl.display.StageScaleMode.EXACT_FIT.toString = $estr;
openfl.display.StageScaleMode.EXACT_FIT.__enum__ = openfl.display.StageScaleMode;
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = new openfl.geom.Point();
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl.geom.Rectangle(rectangle.get_left() / this.__bitmap.get_width(),rectangle.get_top() / this.__bitmap.get_height(),rectangle.get_right() / this.__bitmap.get_width(),rectangle.get_bottom() / this.__bitmap.get_height()));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags) {
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl.display.Tilesheet
};
openfl.errors = {};
openfl.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
};
$hxClasses["openfl.errors.Error"] = openfl.errors.Error;
openfl.errors.Error.__name__ = ["openfl","errors","Error"];
openfl.errors.Error.prototype = {
	getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl.errors.Error
};
openfl.errors.IOError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
};
$hxClasses["openfl.errors.IOError"] = openfl.errors.IOError;
openfl.errors.IOError.__name__ = ["openfl","errors","IOError"];
openfl.errors.IOError.__super__ = openfl.errors.Error;
openfl.errors.IOError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IOError
});
openfl.errors.RangeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.RangeError"] = openfl.errors.RangeError;
openfl.errors.RangeError.__name__ = ["openfl","errors","RangeError"];
openfl.errors.RangeError.__super__ = openfl.errors.Error;
openfl.errors.RangeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.RangeError
});
openfl.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl.events.TextEvent;
openfl.events.TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl.events.TextEvent.__super__ = openfl.events.Event;
openfl.events.TextEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.TextEvent
});
openfl.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	openfl.events.TextEvent.call(this,type,bubbles,cancelable);
	this.text = text;
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl.events.ErrorEvent;
openfl.events.ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl.events.ErrorEvent.__super__ = openfl.events.TextEvent;
openfl.events.ErrorEvent.prototype = $extend(openfl.events.TextEvent.prototype,{
	__class__: openfl.events.ErrorEvent
});
openfl.events.Listener = function(inListener,inUseCapture,inPriority) {
	this.mListner = inListener;
	this.mUseCapture = inUseCapture;
	this.mPriority = inPriority;
	this.mID = openfl.events.Listener.sIDs++;
};
$hxClasses["openfl.events.Listener"] = openfl.events.Listener;
openfl.events.Listener.__name__ = ["openfl","events","Listener"];
openfl.events.Listener.prototype = {
	dispatchEvent: function(event) {
		this.mListner(event);
	}
	,Is: function(inListener,inCapture) {
		return Reflect.compareMethods(this.mListner,inListener) && this.mUseCapture == inCapture;
	}
	,__class__: openfl.events.Listener
};
openfl.events.EventPhase = function() { };
$hxClasses["openfl.events.EventPhase"] = openfl.events.EventPhase;
openfl.events.EventPhase.__name__ = ["openfl","events","EventPhase"];
openfl.events.FocusEvent = function(type,bubbles,cancelable,inObject,inShiftKey,inKeyCode) {
	if(inKeyCode == null) inKeyCode = 0;
	if(inShiftKey == null) inShiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = inKeyCode;
	if(inShiftKey == null) this.shiftKey = false; else this.shiftKey = inShiftKey;
	this.relatedObject = inObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl.events.FocusEvent;
openfl.events.FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl.events.FocusEvent.__super__ = openfl.events.Event;
openfl.events.FocusEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.FocusEvent
});
openfl.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl.events.HTTPStatusEvent;
openfl.events.HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl.events.HTTPStatusEvent.__super__ = openfl.events.Event;
openfl.events.HTTPStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.HTTPStatusEvent
});
openfl.events.IOErrorEvent = function(type,bubbles,cancelable,inText) {
	if(inText == null) inText = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = inText;
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl.events.IOErrorEvent;
openfl.events.IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl.events.IOErrorEvent.__super__ = openfl.events.Event;
openfl.events.IOErrorEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.IOErrorEvent
});
openfl.events.KeyboardEvent = function(type,bubbles,cancelable,inCharCode,inKeyCode,inKeyLocation,inCtrlKey,inAltKey,inShiftKey,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(inShiftKey == null) inShiftKey = false;
	if(inAltKey == null) inAltKey = false;
	if(inCtrlKey == null) inCtrlKey = false;
	if(inKeyLocation == null) inKeyLocation = 0;
	if(inKeyCode == null) inKeyCode = 0;
	if(inCharCode == null) inCharCode = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	if(inAltKey == null) this.altKey = false; else this.altKey = inAltKey;
	if(inCharCode == null) this.charCode = 0; else this.charCode = inCharCode;
	if(inCtrlKey == null) this.ctrlKey = false; else this.ctrlKey = inCtrlKey;
	this.commandKey = commandKeyValue;
	this.controlKey = controlKeyValue;
	this.keyCode = inKeyCode;
	if(inKeyLocation == null) this.keyLocation = 0; else this.keyLocation = inKeyLocation;
	if(inShiftKey == null) this.shiftKey = false; else this.shiftKey = inShiftKey;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl.events.KeyboardEvent;
openfl.events.KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl.events.KeyboardEvent.__super__ = openfl.events.Event;
openfl.events.KeyboardEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.KeyboardEvent
});
openfl.events.PasteEvent = function(text) {
	openfl.events.Event.call(this,openfl.events.Event.PASTE);
	this.text = text;
};
$hxClasses["openfl.events.PasteEvent"] = openfl.events.PasteEvent;
openfl.events.PasteEvent.__name__ = ["openfl","events","PasteEvent"];
openfl.events.PasteEvent.__super__ = openfl.events.Event;
openfl.events.PasteEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.PasteEvent
});
openfl.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl.events.ProgressEvent;
openfl.events.ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl.events.ProgressEvent.__super__ = openfl.events.Event;
openfl.events.ProgressEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.ProgressEvent
});
openfl.events.SecurityErrorEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl.events.SecurityErrorEvent;
openfl.events.SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl.events.SecurityErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.SecurityErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	__class__: openfl.events.SecurityErrorEvent
});
openfl.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl.events.TouchEvent;
openfl.events.TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl.events.TouchEvent.__create = function(type,event,touch,local,target) {
	var evt = new openfl.events.TouchEvent(type,true,false,local.x,local.y,null,event.ctrlKey,event.altKey,event.shiftKey,false,0,null,0);
	evt.stageX = openfl.Lib.get_current().get_stage().get_mouseX();
	evt.stageY = openfl.Lib.get_current().get_stage().get_mouseY();
	evt.target = target;
	return evt;
};
openfl.events.TouchEvent.__super__ = openfl.events.Event;
openfl.events.TouchEvent.prototype = $extend(openfl.events.Event.prototype,{
	__createSimilar: function(type,related,targ) {
		var result = new openfl.events.TouchEvent(type,this.bubbles,this.cancelable,this.localX,this.localY,related == null?this.relatedObject:related,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey);
		result.touchPointID = this.touchPointID;
		result.isPrimaryTouchPoint = this.isPrimaryTouchPoint;
		if(targ != null) result.target = targ;
		return result;
	}
	,__class__: openfl.events.TouchEvent
});
openfl.filters = {};
openfl.filters.BitmapFilter = function(inType) {
	this._mType = inType;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl.filters.BitmapFilter;
openfl.filters.BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl.filters.BitmapFilter.prototype = {
	clone: function() {
		return new openfl.filters.BitmapFilter(this._mType);
	}
	,__preFilter: function(surface) {
	}
	,__applyFilter: function(surface,rect,refreshCache) {
		if(refreshCache == null) refreshCache = false;
	}
	,__getSvg: function() {
		return null;
	}
	,__class__: openfl.filters.BitmapFilter
};
openfl.filters.BitmapFilterType = function() { };
$hxClasses["openfl.filters.BitmapFilterType"] = openfl.filters.BitmapFilterType;
openfl.filters.BitmapFilterType.__name__ = ["openfl","filters","BitmapFilterType"];
openfl.filters.BlurFilter = function(inBlurX,inBlurY,inQuality) {
	if(inQuality == null) inQuality = 1;
	if(inBlurY == null) inBlurY = 4;
	if(inBlurX == null) inBlurX = 4;
	openfl.filters.BitmapFilter.call(this,"BlurFilter");
	if(inBlurX == null) this.blurX = 4.0; else this.blurX = inBlurX;
	if(inBlurY == null) this.blurY = 4.0; else this.blurY = inBlurY;
	this.MAX_BLUR_WIDTH = openfl.Lib.get_current().get_stage().get_stageWidth();
	this.MAX_BLUR_HEIGHT = openfl.Lib.get_current().get_stage().get_stageHeight();
	if(inQuality == null) this.quality = 1; else this.quality = inQuality;
	var bgColor = openfl.Lib.get_current().get_stage().get_color();
	this.__bG = [(bgColor & 16711680) >>> 16,(bgColor & 65280) >>> 8,bgColor & 255];
};
$hxClasses["openfl.filters.BlurFilter"] = openfl.filters.BlurFilter;
openfl.filters.BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl.filters.BlurFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.BlurFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	applyFilter: function(inBitmapData,inRect,inPoint,inBitmapFilter) {
	}
	,clone: function() {
		return new openfl.filters.BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__preFilter: function(surface) {
		var ctx = surface.getContext("2d");
		this.__kernel = openfl._Vector.Vector_Impl_._new();
		if(surface.width == 0 || surface.height == 0) return;
		var width;
		if(surface.width > this.MAX_BLUR_WIDTH) width = this.MAX_BLUR_WIDTH; else width = surface.width;
		var height;
		if(surface.height > this.MAX_BLUR_HEIGHT) height = this.MAX_BLUR_HEIGHT; else height = surface.height;
		this.__buildKernel(ctx.getImageData(0,0,width,height).data,width,height,this.__kernel);
	}
	,__buildKernel: function(src,srcW,srcH,dst) {
		var i = 0;
		var j = 0;
		var tot = [];
		var maxW = srcW * 4;
		var _g = 0;
		while(_g < srcH) {
			var y = _g++;
			var _g1 = 0;
			while(_g1 < srcW) {
				var x = _g1++;
				tot[0] = src[j];
				tot[1] = src[j + 1];
				tot[2] = src[j + 2];
				tot[3] = src[j + 3];
				if(x > 0) {
					tot[0] += dst[i - 4];
					tot[1] += dst[i - 3];
					tot[2] += dst[i - 2];
					tot[3] += dst[i - 1];
				}
				if(y > 0) {
					tot[0] += dst[i - maxW];
					tot[1] += dst[i + 1 - maxW];
					tot[2] += dst[i + 2 - maxW];
					tot[3] += dst[i + 3 - maxW];
				}
				if(x > 0 && y > 0) {
					tot[0] -= dst[i - maxW - 4];
					tot[1] -= dst[i - maxW - 3];
					tot[2] -= dst[i - maxW - 2];
					tot[3] -= dst[i - maxW - 1];
				}
				dst[i] = tot[0];
				dst[i + 1] = tot[1];
				dst[i + 2] = tot[2];
				dst[i + 3] = tot[3];
				i += 4;
				j += 4;
			}
		}
	}
	,__boxBlur: function(dst,srcW,srcH,p,boxW,boxH) {
		var mul1 = 1.0 / ((boxW * 2 + 1) * (boxH * 2 + 1));
		var i = 0;
		var tot = [];
		var h1 = 0;
		var l1 = 0;
		var h2 = 0;
		var l2 = 0;
		var mul2 = 1.7 / ((boxW * 2 + 1) * (boxH * 2 + 1));
		var _g = 0;
		while(_g < srcH) {
			var y = _g++;
			var _g1 = 0;
			while(_g1 < srcW) {
				var x = _g1++;
				if(x + boxW >= srcW) h1 = srcW - 1; else h1 = x + boxW;
				if(y + boxH >= srcH) l1 = srcH - 1; else l1 = y + boxH;
				if(x - boxW < 0) h2 = 0; else h2 = x - boxW;
				if(y - boxH < 0) l2 = 0; else l2 = y - boxH;
				tot[0] = p[(h1 + l1 * srcW) * 4] + p[(h2 + l2 * srcW) * 4] - p[(h2 + l1 * srcW) * 4] - p[(h1 + l2 * srcW) * 4];
				tot[1] = p[(h1 + l1 * srcW) * 4 + 1] + p[(h2 + l2 * srcW) * 4 + 1] - p[(h2 + l1 * srcW) * 4 + 1] - p[(h1 + l2 * srcW) * 4 + 1];
				tot[2] = p[(h1 + l1 * srcW) * 4 + 2] + p[(h2 + l2 * srcW) * 4 + 2] - p[(h2 + l1 * srcW) * 4 + 2] - p[(h1 + l2 * srcW) * 4 + 2];
				tot[3] = p[(h1 + l1 * srcW) * 4 + 3] + p[(h2 + l2 * srcW) * 4 + 3] - p[(h2 + l1 * srcW) * 4 + 3] - p[(h1 + l2 * srcW) * 4 + 3];
				dst[i] = Math.floor(Math.abs(255 - this.__bG[0] - tot[0] * mul1));
				dst[i + 1] = Math.floor(Math.abs(255 - this.__bG[1] - tot[1] * mul1));
				dst[i + 2] = Math.floor(Math.abs(255 - this.__bG[2] - tot[2] * mul1));
				dst[i + 3] = Math.floor(tot[3] * mul2);
				i += 4;
			}
		}
	}
	,__applyFilter: function(surface,rect,refreshCache) {
		if(refreshCache == null) refreshCache = false;
		if(surface.width > 0 && surface.height > 0) {
			if(this.__kernel == null) this.__preFilter(surface);
			var ctx = surface.getContext("2d");
			var width;
			if(surface.width > this.MAX_BLUR_WIDTH) width = this.MAX_BLUR_WIDTH; else width = surface.width;
			var height;
			if(surface.height > this.MAX_BLUR_HEIGHT) height = this.MAX_BLUR_HEIGHT; else height = surface.height;
			var __imageData = ctx.getImageData(0,0,width,height);
			this.__boxBlur(__imageData.data,Math.floor(__imageData.width),Math.floor(__imageData.height),this.__kernel,Math.floor(this.blurX),Math.floor(this.blurY));
			ctx.putImageData(__imageData,0,0);
		}
	}
	,__getSvg: function() {
		var x1 = this.blurX;
		var y1 = this.blurY;
		return Snap.filter.blur(x1, y1);
	}
	,__class__: openfl.filters.BlurFilter
});
openfl.filters.DropShadowFilter = function(in_distance,in_angle,in_color,in_alpha,in_blurX,in_blurY,in_strength,in_quality,in_inner,in_knockout,in_hideObject) {
	if(in_hideObject == null) in_hideObject = false;
	if(in_knockout == null) in_knockout = false;
	if(in_inner == null) in_inner = false;
	if(in_quality == null) in_quality = 1;
	if(in_strength == null) in_strength = 1.0;
	if(in_blurY == null) in_blurY = 4.0;
	if(in_blurX == null) in_blurX = 4.0;
	if(in_alpha == null) in_alpha = 1.0;
	if(in_color == null) in_color = 0;
	if(in_angle == null) in_angle = 45.0;
	if(in_distance == null) in_distance = 4.0;
	openfl.filters.BitmapFilter.call(this,"DropShadowFilter");
	this.distance = in_distance;
	this.angle = in_angle;
	this.color = in_color;
	this.alpha = in_alpha;
	this.blurX = in_blurX;
	this.blurY = in_blurX;
	this.strength = in_strength;
	this.quality = in_quality;
	this.inner = in_inner;
	this.knockout = in_knockout;
	this.hideObject = in_hideObject;
	this.___cached = false;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl.filters.DropShadowFilter;
openfl.filters.DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl.filters.DropShadowFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.DropShadowFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__applyFilter: function(surface,rect,refreshCache) {
		if(refreshCache == null) refreshCache = false;
		if(!this.___cached || refreshCache) {
			var distanceX = this.distance * Math.sin(2 * Math.PI * this.angle / 360.0);
			var distanceY = this.distance * Math.cos(2 * Math.PI * this.angle / 360.0);
			var blurRadius = Math.max(this.blurX,this.blurY);
			var context = surface.getContext("2d");
			context.shadowOffsetX = distanceX;
			context.shadowOffsetY = distanceY;
			context.shadowBlur = blurRadius;
			context.shadowColor = "rgba(" + (this.color >> 16 & 255) + "," + (this.color >> 8 & 255) + "," + (this.color & 255) + "," + this.alpha + ")";
			this.___cached = true;
		}
	}
	,__getSvg: function() {
		var dx = Math.round(this.distance * Math.sin(2 * Math.PI * this.angle / 360.0));
		var dy = Math.round(this.distance * Math.cos(2 * Math.PI * this.angle / 360.0));
		var blurRadius = Math.max(this.blurX,this.blurY);
		if(this.inner) return "\n                    <!-- Shadow Offset -->\n                    <feOffset\n                    dx='" + dx + "'\n                    dy='" + dy + "'\n                    />\n\n                    <!-- Shadow Blur -->\n                    <feGaussianBlur\n                    stdDeviation='" + Math.round(blurRadius / 2) + "'\n                    result='offset-blur'\n                    />\n\n                    <!-- Invert the drop shadow\n                    to create an inner shadow -->\n                    <feComposite\n                    operator='out'\n                    in='SourceGraphic'\n                    in2='offset-blur'\n                    result='inverse'\n                    />\n\n                    <!-- Color & Opacity -->\n                    <feFlood\n                    flood-color='" + "rgba(" + (this.color >> 16 & 255) + "," + (this.color >> 8 & 255) + "," + (this.color & 255) + "," + this.alpha + ")" + "'\n                    flood-opacity='0.75'\n                    result='color'\n                    />\n\n                    <!-- Clip color inside shadow -->\n                    <feComposite\n                    operator='in'\n                    in='color'\n                    in2='inverse'\n                    result='shadow'\n                    />\n\n                    <!-- Put shadow over original object -->\n                    <feComposite\n                    operator='over'\n                    in='shadow'\n                    in2='SourceGraphic'\n                    />"; else {
			var blur = Math.round(blurRadius / 2);
			var dx1 = dx;
			var dy1 = dy;
			var blur1 = blur;
			var color1 = "rgba(" + (this.color >> 16 & 255) + "," + (this.color >> 8 & 255) + "," + (this.color & 255) + "," + this.alpha + ")";
			return Snap.filter.shadow(dx1, dy1, blur1, color1);
		}
	}
	,__class__: openfl.filters.DropShadowFilter
});
openfl.filters.GlowFilter = function(in_color,in_alpha,in_blurX,in_blurY,in_strength,in_quality,in_inner,in_knockout) {
	if(in_knockout == null) in_knockout = false;
	if(in_inner == null) in_inner = false;
	if(in_quality == null) in_quality = 1;
	if(in_strength == null) in_strength = 1.0;
	if(in_blurY == null) in_blurY = 6.0;
	if(in_blurX == null) in_blurX = 6.0;
	if(in_alpha == null) in_alpha = 1.0;
	if(in_color == null) in_color = 0;
	openfl.filters.DropShadowFilter.call(this,0,0,in_color,in_alpha,in_blurX,in_blurY,in_strength,in_quality,in_inner,in_knockout,false);
};
$hxClasses["openfl.filters.GlowFilter"] = openfl.filters.GlowFilter;
openfl.filters.GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl.filters.GlowFilter.__super__ = openfl.filters.DropShadowFilter;
openfl.filters.GlowFilter.prototype = $extend(openfl.filters.DropShadowFilter.prototype,{
	__class__: openfl.filters.GlowFilter
});
openfl.geom = {};
openfl.geom.ColorTransform = function(inRedMultiplier,inGreenMultiplier,inBlueMultiplier,inAlphaMultiplier,inRedOffset,inGreenOffset,inBlueOffset,inAlphaOffset) {
	if(inAlphaOffset == null) inAlphaOffset = 0;
	if(inBlueOffset == null) inBlueOffset = 0;
	if(inGreenOffset == null) inGreenOffset = 0;
	if(inRedOffset == null) inRedOffset = 0;
	if(inAlphaMultiplier == null) inAlphaMultiplier = 1;
	if(inBlueMultiplier == null) inBlueMultiplier = 1;
	if(inGreenMultiplier == null) inGreenMultiplier = 1;
	if(inRedMultiplier == null) inRedMultiplier = 1;
	if(inRedMultiplier == null) this.redMultiplier = 1.0; else this.redMultiplier = inRedMultiplier;
	if(inGreenMultiplier == null) this.greenMultiplier = 1.0; else this.greenMultiplier = inGreenMultiplier;
	if(inBlueMultiplier == null) this.blueMultiplier = 1.0; else this.blueMultiplier = inBlueMultiplier;
	if(inAlphaMultiplier == null) this.alphaMultiplier = 1.0; else this.alphaMultiplier = inAlphaMultiplier;
	if(inRedOffset == null) this.redOffset = 0.0; else this.redOffset = inRedOffset;
	if(inGreenOffset == null) this.greenOffset = 0.0; else this.greenOffset = inGreenOffset;
	if(inBlueOffset == null) this.blueOffset = 0.0; else this.blueOffset = inBlueOffset;
	if(inAlphaOffset == null) this.alphaOffset = 0.0; else this.alphaOffset = inAlphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl.geom.ColorTransform;
openfl.geom.ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl.geom.ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__class__: openfl.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
openfl.geom.Matrix = function(in_a,in_b,in_c,in_d,in_tx,in_ty) {
	if(in_ty == null) in_ty = 0;
	if(in_tx == null) in_tx = 0;
	if(in_d == null) in_d = 1;
	if(in_c == null) in_c = 0;
	if(in_b == null) in_b = 0;
	if(in_a == null) in_a = 1;
	this.a = in_a;
	this.b = in_b;
	this.c = in_c;
	this.d = in_d;
	this.tx = in_tx;
	this.ty = in_ty;
	this._sx = 1.0;
	this._sy = 1.0;
};
$hxClasses["openfl.geom.Matrix"] = openfl.geom.Matrix;
openfl.geom.Matrix.__name__ = ["openfl","geom","Matrix"];
openfl.geom.Matrix.prototype = {
	cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,clone: function() {
		var m = new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
		m._sx = this._sx;
		m._sy = this._sy;
		return m;
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
		this._sx *= m._sx;
		this._sy *= m._sy;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,copy: function(m) {
		this.a = m.a;
		this.b = m.b;
		this.c = m.c;
		this.d = m.d;
		this.tx = m.tx;
		this.ty = m.ty;
		this._sx = m._sx;
		this._sy = m._sy;
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(in_width,in_height,rotation,in_tx,in_ty) {
		if(in_ty == null) in_ty = 0;
		if(in_tx == null) in_tx = 0;
		if(rotation == null) rotation = 0;
		this.a = in_width / 1638.4;
		this.d = in_height / 1638.4;
		if(rotation != null && rotation != 0.0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		if(in_tx != null) this.tx = in_tx + in_width / 2; else this.tx = in_width / 2;
		if(in_ty != null) this.ty = in_ty + in_height / 2; else this.ty = in_height / 2;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
		this._sx = 1.0;
		this._sy = 1.0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		this._sx /= this._sx;
		this._sy /= this._sy;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
		return this;
	}
	,mult: function(m) {
		var result = this.clone();
		result.concat(m);
		return result;
	}
	,rotate: function(inTheta) {
		var cos = Math.cos(inTheta);
		var sin = Math.sin(inTheta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,scale: function(inSX,inSY) {
		this._sx = inSX;
		this._sy = inSY;
		this.a *= inSX;
		this.b *= inSY;
		this.c *= inSX;
		this.d *= inSY;
		this.tx *= inSX;
		this.ty *= inSY;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,setRotation: function(inTheta,inScale) {
		if(inScale == null) inScale = 1;
		var scale = inScale;
		this.a = Math.cos(inTheta) * scale;
		this.c = Math.sin(inTheta) * scale;
		this.b = -this.c;
		this.d = this.a;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,to3DString: function() {
		return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", " + "0, 1" + ")";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(inPos) {
		return new openfl.geom.Point(inPos.x * this.a + inPos.y * this.c + this.tx,inPos.x * this.b + inPos.y * this.d + this.ty);
	}
	,translate: function(inDX,inDY) {
		var m = new openfl.geom.Matrix();
		m.tx = inDX;
		m.ty = inDY;
		this.concat(m);
	}
	,__transformX: function(inPos) {
		return inPos.x * this.a + inPos.y * this.c + this.tx;
	}
	,__transformY: function(inPos) {
		return inPos.x * this.b + inPos.y * this.d + this.ty;
	}
	,__translateTransformed: function(inPos) {
		this.tx = inPos.x * this.a + inPos.y * this.c + this.tx;
		this.ty = inPos.x * this.b + inPos.y * this.d + this.ty;
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__class__: openfl.geom.Matrix
};
openfl.geom.Point = function(inX,inY) {
	if(inY == null) inY = 0;
	if(inX == null) inX = 0;
	this.x = inX;
	this.y = inY;
};
$hxClasses["openfl.geom.Point"] = openfl.geom.Point;
openfl.geom.Point.__name__ = ["openfl","geom","Point"];
openfl.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl.geom.Point.interpolate = function(pt1,pt2,f) {
	return new openfl.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl.geom.Point.polar = function(len,angle) {
	return new openfl.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl.geom.Point.prototype = {
	add: function(v) {
		return new openfl.geom.Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl.geom.Point(this.x - v.x,this.y - v.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl.geom.Point
	,__properties__: {get_length:"get_length"}
};
openfl.geom.Rectangle = function(inX,inY,inWidth,inHeight) {
	if(inHeight == null) inHeight = 0;
	if(inWidth == null) inWidth = 0;
	if(inY == null) inY = 0;
	if(inX == null) inX = 0;
	this.x = inX;
	this.y = inY;
	this.width = inWidth;
	this.height = inHeight;
};
$hxClasses["openfl.geom.Rectangle"] = openfl.geom.Rectangle;
openfl.geom.Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl.geom.Rectangle.prototype = {
	clone: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(inX,inY) {
		return inX >= this.x && inY >= this.y && inX < this.get_right() && inY < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,equals: function(toCompare) {
		return this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,extendBounds: function(r) {
		var dx = this.x - r.x;
		if(dx > 0) {
			this.x -= dx;
			this.width += dx;
		}
		var dy = this.y - r.y;
		if(dy > 0) {
			this.y -= dy;
			this.height += dy;
		}
		if(r.get_right() > this.get_right()) this.set_right(r.get_right());
		if(r.get_bottom() > this.get_bottom()) this.set_bottom(r.get_bottom());
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl.geom.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl.geom.Rectangle();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl.geom.Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl.geom.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
openfl.geom.Transform = function(displayObject) {
	if(displayObject == null) throw "Cannot create Transform with no DisplayObject.";
	this._displayObject = displayObject;
	this._matrix = new openfl.geom.Matrix();
	this._fullMatrix = new openfl.geom.Matrix();
	this.set_colorTransform(new openfl.geom.ColorTransform());
};
$hxClasses["openfl.geom.Transform"] = openfl.geom.Transform;
openfl.geom.Transform.__name__ = ["openfl","geom","Transform"];
openfl.geom.Transform.prototype = {
	__getFullMatrix: function(localMatrix) {
		var m;
		if(localMatrix != null) m = localMatrix.mult(this._fullMatrix); else m = this._fullMatrix.clone();
		return m;
	}
	,__setFullMatrix: function(inValue) {
		this._fullMatrix.copy(inValue);
		return this._fullMatrix;
	}
	,__setMatrix: function(inValue) {
		this._matrix.copy(inValue);
	}
	,set_colorTransform: function(inValue) {
		this.colorTransform = inValue;
		return inValue;
	}
	,get_concatenatedMatrix: function() {
		return this.__getFullMatrix(this._matrix);
	}
	,get_matrix: function() {
		return this._matrix.clone();
	}
	,set_matrix: function(inValue) {
		this._matrix.copy(inValue);
		this._displayObject.__matrixOverridden();
		return this._matrix;
	}
	,get_pixelBounds: function() {
		return this._displayObject.getBounds(null);
	}
	,__class__: openfl.geom.Transform
	,__properties__: {get_pixelBounds:"get_pixelBounds",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform"}
};
openfl.media = {};
openfl.media.Sound = function(stream,context) {
	openfl.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	this.__soundChannels = new haxe.ds.IntMap();
	this.__soundIdx = 0;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl.media.Sound;
openfl.media.Sound.__name__ = ["openfl","media","Sound"];
openfl.media.Sound.__canPlayMime = function(mime) {
	var audio = window.document.createElement("audio");
	var playable = function(ok) {
		if(ok != "" && ok != "no") return true; else return false;
	};
	return playable(audio.canPlayType(mime,null));
};
openfl.media.Sound.__canPlayType = function(extension) {
	var mime = openfl.media.Sound.__mimeForExtension(extension);
	if(mime == null) return false;
	return openfl.media.Sound.__canPlayMime(mime);
};
openfl.media.Sound.__mimeForExtension = function(extension) {
	var mime = null;
	switch(extension) {
	case "mp3":
		mime = "audio/mpeg";
		break;
	case "ogg":
		mime = "audio/ogg; codecs=\"vorbis\"";
		break;
	case "wav":
		mime = "audio/wav; codecs=\"1\"";
		break;
	case "aac":
		mime = "audio/mp4; codecs=\"mp4a.40.2\"";
		break;
	default:
		mime = null;
	}
	return mime;
};
openfl.media.Sound.__super__ = openfl.events.EventDispatcher;
openfl.media.Sound.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
	}
	,load: function(stream,context) {
		this.__load(stream,context);
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(this.__streamUrl == null) return null;
		var self = this;
		var curIdx = this.__soundIdx;
		var removeRef = function() {
			self.__soundChannels.remove(curIdx);
		};
		var channel = openfl.media.SoundChannel.__create(this.__streamUrl,startTime,loops,sndTransform,removeRef);
		this.__soundChannels.set(curIdx,channel);
		this.__soundIdx++;
		var audio = channel.__audio;
		return channel;
	}
	,__addEventListeners: function() {
		this.__soundCache.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.__onSoundLoaded));
		this.__soundCache.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.__onSoundLoadError));
	}
	,__load: function(stream,context,mime) {
		if(mime == null) mime = "";
		this.__streamUrl = stream.url;
		try {
			this.__soundCache = new openfl.net.URLLoader();
			this.__addEventListeners();
			this.__soundCache.load(stream);
		} catch( e ) {
		}
	}
	,__removeEventListeners: function() {
		this.__soundCache.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.__onSoundLoaded),false);
		this.__soundCache.removeEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.__onSoundLoadError),false);
	}
	,__onSoundLoadError: function(evt) {
		this.__removeEventListeners();
		var evt1 = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		this.dispatchEvent(evt1);
	}
	,__onSoundLoaded: function(evt) {
		this.__removeEventListeners();
		var evt1 = new openfl.events.Event(openfl.events.Event.COMPLETE);
		this.dispatchEvent(evt1);
	}
	,__class__: openfl.media.Sound
});
openfl.media.SoundChannel = function() {
	openfl.events.EventDispatcher.call(this,this);
	this.ChannelId = -1;
	this.leftPeak = 0.;
	this.position = 0.;
	this.rightPeak = 0.;
	this.__audioCurrentLoop = 1;
	this.__audioTotalLoops = 1;
};
$hxClasses["openfl.media.SoundChannel"] = openfl.media.SoundChannel;
openfl.media.SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl.media.SoundChannel.__create = function(src,startTime,loops,sndTransform,removeRef) {
	if(loops == null) loops = 0;
	if(startTime == null) startTime = 0.0;
	var channel = new openfl.media.SoundChannel();
	channel.__audio = window.document.createElement("audio");
	channel.__removeRef = removeRef;
	channel.__audio.addEventListener("ended",$bind(channel,channel.__onSoundChannelFinished),false);
	channel.__audio.addEventListener("seeked",$bind(channel,channel.__onSoundSeeked),false);
	channel.__audio.addEventListener("stalled",$bind(channel,channel.__onStalled),false);
	channel.__audio.addEventListener("progress",$bind(channel,channel.__onProgress),false);
	if(loops > 0) {
		channel.__audioTotalLoops = loops;
		channel.__audio.loop = true;
	}
	channel.__startTime = startTime;
	if(startTime > 0.) {
		var onLoad = null;
		onLoad = function(_) {
			channel.__audio.currentTime = channel.__startTime;
			channel.__audio.play();
			channel.__audio.removeEventListener("canplaythrough",onLoad,false);
		};
		channel.__audio.addEventListener("canplaythrough",onLoad,false);
	} else channel.__audio.autoplay = true;
	channel.__audio.src = src;
	return channel;
};
openfl.media.SoundChannel.__super__ = openfl.events.EventDispatcher;
openfl.media.SoundChannel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	stop: function() {
		if(this.__audio != null) {
			this.__audio.pause();
			this.__audio = null;
			if(this.__removeRef != null) this.__removeRef();
		}
	}
	,__onProgress: function(evt) {
	}
	,__onSoundChannelFinished: function(evt) {
		if(this.__audioCurrentLoop >= this.__audioTotalLoops) {
			this.__audio.removeEventListener("ended",$bind(this,this.__onSoundChannelFinished),false);
			this.__audio.removeEventListener("seeked",$bind(this,this.__onSoundSeeked),false);
			this.__audio.removeEventListener("stalled",$bind(this,this.__onStalled),false);
			this.__audio.removeEventListener("progress",$bind(this,this.__onProgress),false);
			this.__audio = null;
			var evt1 = new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE);
			evt1.target = this;
			this.dispatchEvent(evt1);
			if(this.__removeRef != null) this.__removeRef();
		} else {
			this.__audio.currentTime = this.__startTime;
			this.__audio.play();
		}
	}
	,__onSoundSeeked: function(evt) {
		if(this.__audioCurrentLoop >= this.__audioTotalLoops) {
			this.__audio.loop = false;
			this.stop();
		} else this.__audioCurrentLoop++;
	}
	,__onStalled: function(evt) {
		if(this.__audio != null) this.__audio.load();
	}
	,set_soundTransform: function(v) {
		this.__audio.volume = v.volume;
		return this.soundTransform = v;
	}
	,__class__: openfl.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform"}
});
openfl.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl.media.SoundLoaderContext;
openfl.media.SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl.media.SoundLoaderContext.prototype = {
	__class__: openfl.media.SoundLoaderContext
};
openfl.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl.media.SoundTransform;
openfl.media.SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl.media.SoundTransform.prototype = {
	__class__: openfl.media.SoundTransform
};
openfl.net = {};
openfl.net.URLLoader = function(request) {
	openfl.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl.net.URLLoader;
openfl.net.URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl.net.URLLoader.__super__ = openfl.events.EventDispatcher;
openfl.net.URLLoader.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,openfl.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,openfl.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = openfl.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl.events.Event(openfl.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl.events.ProgressEvent(openfl.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl.events.SecurityErrorEvent(openfl.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl.events.HTTPStatusEvent(openfl.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
openfl.net.URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl.net.URLLoaderDataFormat.BINARY.toString = $estr;
openfl.net.URLLoaderDataFormat.BINARY.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl.net.URLLoaderDataFormat.TEXT.toString = $estr;
openfl.net.URLLoaderDataFormat.TEXT.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl.net.URLLoaderDataFormat.VARIABLES.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl.net.URLRequest;
openfl.net.URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == openfl.net.URLRequestMethod.GET || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,openfl.utils.ByteArray)) {
			res = res.slice();
			res.push(new openfl.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl.net.URLRequest
};
openfl.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl.net.URLRequestHeader;
openfl.net.URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl.net.URLRequestHeader.prototype = {
	__class__: openfl.net.URLRequestHeader
};
openfl.net.URLRequestMethod = function() { };
$hxClasses["openfl.net.URLRequestMethod"] = openfl.net.URLRequestMethod;
openfl.net.URLRequestMethod.__name__ = ["openfl","net","URLRequestMethod"];
openfl.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl.net.URLVariables;
openfl.net.URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl.net.URLVariables
};
openfl.system = {};
openfl.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl.system.ApplicationDomain;
openfl.system.ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl.system.ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl.system.ApplicationDomain
};
openfl.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	if(applicationDomain != null) this.applicationDomain = applicationDomain; else this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.LoaderContext"] = openfl.system.LoaderContext;
openfl.system.LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl.system.LoaderContext.prototype = {
	__class__: openfl.system.LoaderContext
};
openfl.system.SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl.system.SecurityDomain;
openfl.system.SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl.system.SecurityDomain.prototype = {
	__class__: openfl.system.SecurityDomain
};
openfl.text = {};
openfl.text.Font = function() {
	this.__metrics = [];
	this.__fontScale = 9.0;
	var className = Type.getClassName(Type.getClass(this));
	if(openfl.text.Font.__fontData == null) {
		openfl.text.Font.__fontData = [];
		openfl.text.Font.__fontData["Bitstream_Vera_Sans"] = haxe.Unserializer.run(openfl.text.Font.DEFAULT_FONT_DATA);
	}
	if(className == "openfl.text.Font") this.set_fontName("Bitstream_Vera_Sans"); else this.set_fontName(className.split(".").pop());
};
$hxClasses["openfl.text.Font"] = openfl.text.Font;
openfl.text.Font.__name__ = ["openfl","text","Font"];
openfl.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return openfl.text.Font.__registeredFonts.slice();
};
openfl.text.Font.__ofResource = function(resourceName,fontName) {
	if(fontName == null) fontName = "";
	var data = haxe.Unserializer.run(haxe.Resource.getString(resourceName));
	if(data == null) {
	} else {
		if(fontName == "") {
			openfl.text.Font.__fontData[resourceName] = data.hash;
			fontName = data.fontName;
		}
		openfl.text.Font.__fontData[data.fontName] = data.hash;
	}
	return fontName;
};
openfl.text.Font.registerFont = function(font) {
	var instance;
	instance = js.Boot.__cast(Type.createInstance(font,[]) , openfl.text.Font);
	if(instance != null) {
		if(Object.prototype.hasOwnProperty.call(font,"resourceName")) instance.set_fontName(openfl.text.Font.__ofResource(Reflect.field(font,"resourceName")));
		openfl.text.Font.__registeredFonts.push(instance);
	}
};
openfl.text.Font.prototype = {
	hasGlyph: function(str) {
		var key = HxOverrides.cca(str,0);
		return this.__glyphData.exists(key);
	}
	,__getAdvance: function(inGlyph,height) {
		var m = this.__metrics[inGlyph];
		if(m == null) {
			var glyph = this.__glyphData.get(inGlyph);
			if(glyph == null) return 0;
			this.__metrics[inGlyph] = m = glyph._width * this.__fontScale | 0;
		}
		if(m == null) return 0;
		return m;
	}
	,__render: function(graphics,inChar,inX,inY,inOutline) {
		var index = 0;
		var glyph = this.__glyphData.get(inChar);
		if(glyph == null) return;
		var commands = glyph.commands;
		var data = glyph.data;
		var _g = 0;
		while(_g < commands.length) {
			var c = commands[_g];
			++_g;
			switch(c) {
			case 1:
				graphics.moveTo(inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale);
				break;
			case 2:
				graphics.lineTo(inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale);
				break;
			case 3:
				graphics.curveTo(inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale,inX + data[index++] * this.__fontScale,inY + data[index++] * this.__fontScale);
				break;
			}
		}
	}
	,__setScale: function(scale) {
		this.__fontScale = scale / 1024;
	}
	,set_fontName: function(name) {
		if(name == "_sans" || name == "_serif" || name == "_typewriter") name = "Bitstream_Vera_Sans";
		this.fontName = name;
		if(openfl.text.Font.__fontData[this.fontName] == null) try {
			openfl.text.Font.__ofResource(name);
		} catch( e ) {
			this.fontName = "Bitstream_Vera_Sans";
		}
		if(openfl.text.Font.__fontData[this.fontName] != null) try {
			this.__glyphData = openfl.text.Font.__fontData[this.fontName];
		} catch( e1 ) {
			this.fontName = "Bitstream_Vera_Sans";
		}
		return name;
	}
	,__class__: openfl.text.Font
	,__properties__: {set_fontName:"set_fontName"}
};
openfl.text.FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : true, __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl.text.FontStyle.REGULAR = ["REGULAR",0];
openfl.text.FontStyle.REGULAR.toString = $estr;
openfl.text.FontStyle.REGULAR.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.ITALIC = ["ITALIC",1];
openfl.text.FontStyle.ITALIC.toString = $estr;
openfl.text.FontStyle.ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl.text.FontStyle.BOLD_ITALIC.toString = $estr;
openfl.text.FontStyle.BOLD_ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD = ["BOLD",3];
openfl.text.FontStyle.BOLD.toString = $estr;
openfl.text.FontStyle.BOLD.__enum__ = openfl.text.FontStyle;
openfl.text.FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : true, __constructs__ : ["EMBEDDED","DEVICE"] };
openfl.text.FontType.EMBEDDED = ["EMBEDDED",0];
openfl.text.FontType.EMBEDDED.toString = $estr;
openfl.text.FontType.EMBEDDED.__enum__ = openfl.text.FontType;
openfl.text.FontType.DEVICE = ["DEVICE",1];
openfl.text.FontType.DEVICE.toString = $estr;
openfl.text.FontType.DEVICE.__enum__ = openfl.text.FontType;
openfl.text.GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl.text.GridFitType.NONE = ["NONE",0];
openfl.text.GridFitType.NONE.toString = $estr;
openfl.text.GridFitType.NONE.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.PIXEL = ["PIXEL",1];
openfl.text.GridFitType.PIXEL.toString = $estr;
openfl.text.GridFitType.PIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl.text.GridFitType.SUBPIXEL.toString = $estr;
openfl.text.GridFitType.SUBPIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.TextField = function() {
	openfl.display.InteractiveObject.call(this);
	this.mWidth = 100;
	this.mHeight = 20;
	this.mHTMLMode = false;
	this.multiline = false;
	var graphicsSnap = ((function($this) {
		var $r;
		var _this = openfl.Lib.get_snap();
		var e123 = [];
		var me123 = _this;
		$r = me123.group.apply(me123, e123);
		return $r;
	}(this))).addClass("graphics");
	this.snap.append(graphicsSnap);
	this.__graphics = new openfl.display.Graphics(graphicsSnap);
	this.__graphics.displayObject = this;
	this.mTextSnap = openfl.Lib.get_snap().text(0,0,"");
	this.snap.append(this.mTextSnap);
	this.mFace = openfl.text.TextField.mDefaultFont;
	this.mAlign = openfl.text.TextFormatAlign.LEFT;
	this.mParagraphs = new Array();
	this.svgSelectionBeginIndex = this.selectionBeginIndex = -1;
	this.svgSelectionEndIndex = this.selectionEndIndex = -1;
	this.scrollH = 0;
	this.scrollV = 1;
	this.mType = openfl.text.TextFieldType.DYNAMIC;
	this.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.mTextHeight = 12;
	this.mMaxHeight = this.mTextHeight;
	this.mHTMLText = "";
	this.mText = "";
	this.mTextColour = 0;
	this.tabEnabled = false;
	this.mTryFreeType = true;
	this.selectable = true;
	this.mInsertPos = 0;
	this.__inputEnabled = false;
	this.mDownChar = 0;
	this.mSelectDrag = -1;
	this.mLineInfo = [];
	this.set_defaultTextFormat(new openfl.text.TextFormat());
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl.text.GridFitType.PIXEL;
	this.sharpness = 0;
	this.__textFormats = [];
	this.caretIndex = 0;
	this.shouldCaretShowed = true;
	this.mTextSnap.attr({ style : this.__inputEnabled?"":"-webkit-user-select:none; -moz-user-select:none; -ms-user-select:none; user-select:none;"});
	this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
	this.get_stage().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	this.addEventListener(openfl.events.Event.PASTE,$bind(this,this.onPaste));
};
$hxClasses["openfl.text.TextField"] = openfl.text.TextField;
openfl.text.TextField.__name__ = ["openfl","text","TextField"];
openfl.text.TextField.__super__ = openfl.display.InteractiveObject;
openfl.text.TextField.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	appendText: function(newText) {
		var _g = this;
		_g.set_text(_g.get_text() + newText);
	}
	,ConvertHTMLToText: function(inUnSetHTML) {
		this.mText = "";
		var _g = 0;
		var _g1 = this.mParagraphs;
		while(_g < _g1.length) {
			var paragraph = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = paragraph.spans;
			while(_g2 < _g3.length) {
				var span = _g3[_g2];
				++_g2;
				this.mText += span.text;
			}
		}
		if(inUnSetHTML) {
			this.mHTMLMode = false;
			this.RebuildText();
		}
	}
	,DecodeColour: function(col) {
		return Std.parseInt("0x" + HxOverrides.substr(col,1,null));
	}
	,getCharBoundaries: function(a) {
		return null;
	}
	,getCharIndexAtPoint: function(inX,inY) {
		var text = this.mTextSnap.node;
		var svg = this.mTextSnap.paper.node;
		var point = svg.createSVGPoint();
		point.x = inX;
		point.y = inY;
		return text.getCharNumAtPosition(point);
	}
	,getLineIndexAtPoint: function(inX,inY) {
		if(this.mLineInfo.length < 1) return -1;
		if(inY <= 0) return 0;
		var _g1 = 0;
		var _g = this.mLineInfo.length;
		while(_g1 < _g) {
			var l = _g1++;
			if(this.mLineInfo[l].mY0 > inY) if(l == 0) return 0; else return l - 1;
		}
		return this.mLineInfo.length - 1;
	}
	,getLineIndexForCharIndex: function(charIdx) {
		if(this.mLineInfo.length < 1) return -1;
		var _g1 = 0;
		var _g = this.mLineInfo.length;
		while(_g1 < _g) {
			var l = _g1++;
			if(this.mLineInfo[l].mIndex > charIdx) if(l == 0) return 0; else return l - 1;
		}
		return this.mLineInfo.length - 1;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = -1;
		var format = new openfl.text.TextFormat(this.mFace,this.mTextHeight,this.mTextColour);
		if(beginIndex > 0 && beginIndex < this.get_text().length) {
			if(null != this.__textFormats) {
				var formats = Lambda.array(Lambda.map(this.__textFormats,function(f) {
					return f;
				}));
				formats.reverse();
				var _g = 0;
				while(_g < formats.length) {
					var f1 = formats[_g];
					++_g;
					if(beginIndex >= f1.begin && beginIndex <= f1.end) {
						format = f1.format;
						break;
					}
				}
			}
		}
		return format;
	}
	,Rebuild: function() {
		if(this.mHTMLMode) return;
		this.mLineInfo = [];
		var wrap;
		wrap = this.get_wordWrap() && !this.__inputEnabled?this.mLimitRenderX = this.mUserWidth | 0:this.mLimitRenderX = 999999;
		if(null != this.__textFormats) {
			var _g = 0;
			var _g1 = this.__textFormats;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				this.applyTextFormat(f.format,f.begin,f.end);
			}
		}
		var char_idx = 0;
		var _g2 = 0;
		var _g11 = this.mParagraphs;
		while(_g2 < _g11.length) {
			var paragraph = _g11[_g2];
			++_g2;
			char_idx = this.wrapParagraph(paragraph,wrap,char_idx,this.mSelStart,this.mSelEnd);
		}
		this.mTextSnap.selectAll("tspan").forEach(function(s) {
			s.remove();
		},this);
		var svgBuf = new StringBuf();
		var firstParagraph = true;
		var _g3 = 0;
		var _g12 = this.mParagraphs;
		while(_g3 < _g12.length) {
			var paragraph1 = _g12[_g3];
			++_g3;
			var firstSpan = true;
			var _g21 = 0;
			var _g31 = paragraph1.spans;
			while(_g21 < _g31.length) {
				var span = _g31[_g21];
				++_g21;
				svgBuf.b += Std.string("<tspan xml:space=\"preserve\" height=\"" + span.rect.height + "px\" ");
				if(null != span.rect) {
					if(firstSpan) svgBuf.b += Std.string("x=\"0\" dy=\"" + paragraph1.firstLineHeight + "px\" "); else if(span.startFromNewLine) svgBuf.b += Std.string("x=\"0\" dy=\"" + span.rect.height + "px\" ");
				}
				if(null != span.format) {
					if(null != span.format.color) svgBuf.add("fill=\"#" + StringTools.hex(span.format.color,6) + "\" ");
					if(null != span.format.font) svgBuf.b += Std.string("font-family=\"" + span.format.font + "\" ");
					if(null != span.format.size) svgBuf.b += Std.string("font-size=\"" + span.format.size + "px\" ");
					if(null != span.format.bold && span.format.bold) svgBuf.b += "font-weight=\"bold\" ";
					if(null != span.format.bold && span.format.italic) svgBuf.b += "font-style=\"italic\" ";
					if(null != span.format.underline && span.format.underline) svgBuf.b += "text-decoration=\"underline\" ";
					if(null != span.format.kerning) svgBuf.add("kerning=\"" + Std.string(span.format.kerning) + "px\" ");
					if(null != span.format.letterSpacing) svgBuf.b += Std.string("letter-spacing=\"" + span.format.letterSpacing + "px\" ");
				}
				svgBuf.b += ">";
				if(span.text == null) svgBuf.b += "null"; else svgBuf.b += "" + span.text;
				svgBuf.b += "</tspan>";
				firstSpan = false;
			}
			firstParagraph = false;
		}
		var textElement = this.mTextSnap.node;
		this.mTextSnap.append(Snap.parse(svgBuf.b));
		textElement.setAttribute("font-family",Std.string(this.mFace));
		textElement.setAttribute("font-size",Std.string(this.mTextHeight) + "px");
		textElement.setAttribute("fill","#" + StringTools.hex(this.mTextColour,6));
		var rect;
		if(null != this.mText && this.mText.length > 0) {
			var r = textElement.getBoundingClientRect();
			rect = new openfl.geom.Rectangle(r.left,r.top,r.width,r.height);
		} else rect = new openfl.geom.Rectangle();
		if(this.autoSize != openfl.text.TextFieldAutoSize.NONE) {
			this.mWidth = rect.width;
			this.mHeight = rect.height + this.mTextHeight * 0.4;
		}
		if(this.mHeight < this.mTextHeight * 1.4) this.mHeight = this.mTextHeight * 1.4;
		this.mMaxWidth = rect.width;
		this.mMaxHeight = rect.height;
		this.updateClipRect(new openfl.geom.Rectangle(this.get_x(),this.get_y(),this.get_width(),this.get_height()));
		this.__graphics.clear();
		this.drawBackgoundAndBorder();
	}
	,drawBackgoundAndBorder: function() {
		if(this.background) {
			this.__graphics.lineStyle(0);
			this.__graphics.beginFill(this.backgroundColor);
			this.__graphics.drawRect(0,0,this.mWidth - .5,this.mHeight - .5);
			this.__graphics.endFill();
		} else {
			this.__graphics.lineStyle(0);
			this.__graphics.beginFill(0,0);
			this.__graphics.drawRect(0.5,0.5,this.mWidth - .5,this.mHeight - .5);
			this.__graphics.endFill();
		}
		if(this.border) {
			this.__graphics.endFill();
			this.__graphics.lineStyle(1,this.borderColor,1,true);
			this.__graphics.drawRect(.5,.5,this.mWidth - .5,this.mHeight - .5);
		}
	}
	,getCaretRect: function() {
		var textElement = this.mTextSnap.node;
		try {
			if(this.get_text().length > 0 && this.caretIndex >= 0) {
				var extent = textElement.getExtentOfChar(this.caretIndex < this.get_text().length?this.caretIndex:this.caretIndex - 1);
				var x;
				x = ((this.caretIndex < this.get_text().length?extent.x:extent.x + extent.width - 1) | 0) + 0.5;
				return new openfl.geom.Rectangle(x,extent.y,1,extent.height);
			} else return new openfl.geom.Rectangle(0,0,1,this.mTextHeight * 1.4);
		} catch( e ) {
			return new openfl.geom.Rectangle(0,0,1,this.mTextHeight * 1.4);
		}
	}
	,RebuildText: function() {
		if(null == this.mText) return;
		var paras = this.mText.split("\n");
		this.mParagraphs = [];
		if(!this.mHTMLMode) {
			var font = openfl.text.FontInstance.CreateSolid(this.mFace,this.mTextHeight,this.mTextColour,1.0);
			var paras1 = this.mText.split("\n");
			var _g = 0;
			while(_g < paras1.length) {
				var paragraph = paras1[_g];
				++_g;
				this.mParagraphs.push({ align : this.mAlign, spans : [{ font : font, text : paragraph + (this.mText.length > 0?"\n":""), format : this.get_defaultTextFormat(), startFromNewLine : false}]});
			}
		}
		this.__textChanged = true;
		this.Rebuild();
		this.__textChanged = false;
	}
	,RenderRow: function(inRow,inY,inCharIdx,inAlign,inInsert) {
		if(inInsert == null) inInsert = 0;
		var h = 0;
		var w = 0;
		var _g = 0;
		while(_g < inRow.length) {
			var chr = inRow[_g];
			++_g;
			if(chr.fh > h) h = chr.fh;
			w += chr.adv;
		}
		if(w > this.mMaxWidth) this.mMaxWidth = w;
		var full_height = h * 1.2 | 0;
		var align_x = 0;
		var insert_x = 0;
		if(inInsert != null) {
			if(this.autoSize != openfl.text.TextFieldAutoSize.NONE) {
				this.scrollH = 0;
				insert_x = inInsert;
			} else {
				insert_x = inInsert - this.scrollH;
				if(insert_x < 0) this.scrollH -= (this.mLimitRenderX * 3 >> 2) - insert_x; else if(insert_x > this.mLimitRenderX) this.scrollH += insert_x - (this.mLimitRenderX * 3 >> 2);
				if(this.scrollH < 0) this.scrollH = 0;
			}
		}
		if(this.autoSize == openfl.text.TextFieldAutoSize.NONE && w <= this.mLimitRenderX) {
			if(inAlign == openfl.text.TextFormatAlign.CENTER) align_x = Math.round(this.mWidth) - w >> 1; else if(inAlign == openfl.text.TextFormatAlign.RIGHT) align_x = Math.round(this.mWidth) - w;
		}
		var x_list = new Array();
		var width_list = new Array();
		this.mLineInfo.push({ mY0 : inY, mIndex : inCharIdx - 1, mX : x_list, mHeight : full_height, mWidth : width_list});
		var cache_sel_font = null;
		var cache_normal_font = null;
		var x = align_x - this.scrollH;
		var x0 = x;
		var _g1 = 0;
		while(_g1 < inRow.length) {
			var chr1 = inRow[_g1];
			++_g1;
			var adv = chr1.adv;
			if(x + adv > this.mLimitRenderX) break;
			x_list.push(x);
			width_list.push(adv);
			x += adv;
		}
		x += this.scrollH;
		return full_height;
	}
	,getRowDimension: function(row) {
		var h = 0;
		var w = 0;
		var str = "";
		var _g = 0;
		while(_g < row.length) {
			var chr = row[_g];
			++_g;
			if(chr.fh > h) h = chr.fh;
			w += chr.adv;
			str += String.fromCharCode(chr.chr);
		}
		if(w > this.mMaxWidth) this.mMaxWidth = w;
		var full_height = h * 1.2 | 0;
		return new openfl.geom.Rectangle(0,0,w,full_height);
	}
	,cacheRowSize: function(inRow,inY,inCharIdx,inAlign,inInsert) {
		if(inInsert == null) inInsert = 0;
		this.RenderRow(inRow,inY,inCharIdx,inAlign,inInsert);
	}
	,wrapParagraph: function(paragraph,wrap,charIdx,s0,s1) {
		var row = [];
		var row_width = 0;
		var last_word_break = 0;
		var last_word_break_width = 0;
		var last_word_char_idx = 0;
		var start_idx = charIdx;
		var tx = 0;
		var newSpans = [];
		var _g = 0;
		var _g1 = paragraph.spans;
		while(_g < _g1.length) {
			var span = _g1[_g];
			++_g;
			var text = span.text;
			var font;
			if(null != span.format) font = openfl.text.FontInstance.CreateSolid(null != span.format.font?span.format.font:span.font.GetFace(),null != span.format.size?span.format.size | 0:span.font.get_height(),null != span.format.color?span.format.color:span.font.get_color(),1.0); else font = span.font;
			var fh = font.get_height();
			last_word_break = row.length;
			last_word_break_width = row_width;
			last_word_char_idx = charIdx;
			var prevG = 0;
			var _g3 = 0;
			var _g2 = text.length;
			while(_g3 < _g2) {
				var ch = _g3++;
				var g = HxOverrides.cca(text,ch);
				var adv = font.__getAdvance(g);
				if(g == 32 && prevG != 32) {
					last_word_break = row.length;
					last_word_break_width = tx;
					last_word_char_idx = charIdx;
				}
				if(tx + adv > wrap) {
					if(last_word_break > 0) {
						var row_end = row.splice(last_word_break,row.length - last_word_break);
						var head = row.slice(0,last_word_break);
						newSpans.push({ font : font, text : Lambda.fold(head,function(o,s) {
							return s + String.fromCharCode(o.chr);
						},""), format : span.format, startFromNewLine : true, rect : this.getRowDimension(head)});
						row = row_end;
						tx -= last_word_break_width;
						start_idx = last_word_char_idx;
						last_word_break = 0;
						last_word_break_width = 0;
						last_word_char_idx = 0;
					} else {
						newSpans.push({ font : font, text : Lambda.fold(row,function(o1,s2) {
							return s2 + String.fromCharCode(o1.chr);
						},""), format : span.format, startFromNewLine : true, rect : this.getRowDimension(row)});
						row = [];
						tx = 0;
						start_idx = charIdx;
					}
				}
				row.push({ font : font, chr : g, x : tx, fh : fh, sel : charIdx >= s0 && charIdx < s1, adv : adv});
				tx += adv;
				charIdx++;
				prevG = g;
			}
			if(row.length > 0) {
				newSpans.push({ font : font, text : Lambda.fold(row,function(o2,s3) {
					return s3 + String.fromCharCode(o2.chr);
				},""), format : span.format, startFromNewLine : true, rect : this.getRowDimension(row)});
				row = [];
			}
		}
		paragraph.firstLineHeight = 0.0;
		var _g4 = 0;
		while(_g4 < newSpans.length) {
			var s4 = newSpans[_g4];
			++_g4;
			if(s4.startFromNewLine && paragraph.firstLineHeight > 0.0) break;
			if(s4.rect.height > paragraph.firstLineHeight) paragraph.firstLineHeight = s4.rect.height;
		}
		paragraph.spans = newSpans;
		return charIdx;
	}
	,moveCaretToPrevLine: function() {
		this.moveCaretToLine(this.getLineByCaretIndex(this.caretIndex) - 1);
	}
	,moveCaretToNextLine: function() {
		this.moveCaretToLine(this.getLineByCaretIndex(this.caretIndex) + 1);
	}
	,moveCaretToLine: function(lineIndex) {
		if(lineIndex < 0 || lineIndex > this.getLineByCaretIndex(999999999)) return;
		var pos = this.getPositionInLine(this.caretIndex);
		var begin = this.getCaretIndexOfFirstCharOfLine(lineIndex);
		var dstCaretIndex = begin + pos;
		var dstLineIndex = this.getLineByCaretIndex(dstCaretIndex);
		var lastCaretIndex = this.getCaretIndexOfFirstCharOfLine(999999999);
		if(dstLineIndex != lineIndex) dstCaretIndex = this.getCaretIndexOfFirstCharOfLine(lineIndex + 1);
		if(dstCaretIndex < 0) dstCaretIndex = 0; else if(dstCaretIndex > lastCaretIndex) dstCaretIndex = lastCaretIndex;
		this.caretIndex = dstCaretIndex;
	}
	,getCaretIndexOfFirstCharOfLine: function(lineIndex) {
		var lengthBefore = 0;
		var line = -1;
		var _g = 0;
		var _g1 = this.mParagraphs;
		while(_g < _g1.length) {
			var paragraph = _g1[_g];
			++_g;
			var first = true;
			var _g2 = 0;
			var _g3 = paragraph.spans;
			while(_g2 < _g3.length) {
				var s = _g3[_g2];
				++_g2;
				if(first || s.startFromNewLine) {
					line += 1;
					first = false;
				}
				if(line == lineIndex) return lengthBefore;
				lengthBefore += s.text.length;
			}
		}
		return lengthBefore;
	}
	,getPositionInLine: function(caretIndex) {
		var lengthBefore = 0;
		var lengthOfPrevLines = 0;
		var _g = 0;
		var _g1 = this.mParagraphs;
		while(_g < _g1.length) {
			var paragraph = _g1[_g];
			++_g;
			var first = true;
			var _g2 = 0;
			var _g3 = paragraph.spans;
			while(_g2 < _g3.length) {
				var s = _g3[_g2];
				++_g2;
				if(first || s.startFromNewLine) {
					lengthOfPrevLines = lengthBefore;
					first = false;
				}
				if(s.text.length + lengthBefore > caretIndex) return caretIndex - lengthOfPrevLines;
				lengthBefore += s.text.length;
			}
		}
		return caretIndex;
	}
	,getLineByCaretIndex: function(caretIndex) {
		var lengthBefore = 0;
		var line = -1;
		var _g = 0;
		var _g1 = this.mParagraphs;
		while(_g < _g1.length) {
			var paragraph = _g1[_g];
			++_g;
			var first = true;
			var _g2 = 0;
			var _g3 = paragraph.spans;
			while(_g2 < _g3.length) {
				var s = _g3[_g2];
				++_g2;
				if(first || s.startFromNewLine) {
					line += 1;
					first = false;
				}
				if(s.text.length + lengthBefore > caretIndex) return line;
				lengthBefore += s.text.length;
			}
		}
		return line;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.selectionBeginIndex = beginIndex;
		this.selectionEndIndex = endIndex;
		this.renderNextWake();
	}
	,setTextFormat: function(inFmt,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(beginIndex == 0 || endIndex == 0) {
			if(inFmt.font != null) this.mFace = inFmt.font;
			if(inFmt.size != null) this.mTextHeight = inFmt.size | 0;
			if(inFmt.align != null) this.mAlign = inFmt.align;
			if(inFmt.color != null) this.mTextColour = inFmt.color;
		} else this.__textFormats.push({ format : inFmt, begin : beginIndex, end : endIndex});
		this.RebuildText();
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.renderNextWake();
		return this.getTextFormat();
	}
	,applyTextFormat: function(format,beginIndex,endIndex) {
		var font = openfl.text.FontInstance.CreateSolid(format.font,format.size | 0,format.color,1.0);
		var spanStartCharIndex = 0;
		var _g = 0;
		var _g1 = this.mParagraphs;
		while(_g < _g1.length) {
			var paragraph = _g1[_g];
			++_g;
			var newSpans = [];
			var _g2 = 0;
			var _g3 = paragraph.spans;
			while(_g2 < _g3.length) {
				var span = _g3[_g2];
				++_g2;
				var spanEndCharIndex = spanStartCharIndex + span.text.length - 1;
				if(beginIndex <= spanEndCharIndex && beginIndex >= spanStartCharIndex) {
					var parts = this.splitStringByInerval(span.text,beginIndex - spanStartCharIndex,Std["int"](Math.min(endIndex - spanStartCharIndex,spanEndCharIndex - spanStartCharIndex)));
					if(null != parts[0] && "" != parts[0]) newSpans.push({ font : span.font, text : parts[0], format : span.format, startFromNewLine : span.startFromNewLine, rect : null});
					if(null != parts[1] && "" != parts[1]) newSpans.push({ font : font, text : parts[1], format : format, startFromNewLine : false, rect : null});
					if(null != parts[2] && "" != parts[2]) newSpans.push({ font : span.font, text : parts[2], format : span.format, startFromNewLine : false, rect : null});
					if(endIndex > spanEndCharIndex) beginIndex = spanEndCharIndex + 1;
				} else newSpans.push(span);
				spanStartCharIndex = spanEndCharIndex + 1;
			}
			paragraph.spans = newSpans;
		}
	}
	,splitStringByInerval: function(str,beginIndex,endIndex) {
		return [HxOverrides.substr(str,0,beginIndex),HxOverrides.substr(str,beginIndex,endIndex - beginIndex + 1),HxOverrides.substr(str,endIndex + 1,str.length - endIndex)];
	}
	,toString: function() {
		return "[TextField name=" + this.name + " id=" + this.___id + "]";
	}
	,__getGraphics: function() {
		return this.__graphics;
	}
	,__getObjectUnderPoint: function(point) {
		if(!this.get_visible()) return null; else if(this.mText.length > 1) {
			var local = this.globalToLocal(point);
			if(local.x < 0 || local.y < 0 || local.x > this.mMaxWidth || local.y > this.mMaxHeight) return null; else return this;
		} else return openfl.display.InteractiveObject.prototype.__getObjectUnderPoint.call(this,point);
	}
	,__render: function(inMask,clipRect) {
		if(!this.__combinedVisible) return;
		if((this.___renderFlags & 4) != 0 || (this.___renderFlags & 8) != 0) this.__validateMatrix();
		if(this.__graphics.__render(inMask,this.__filters,1,1)) {
			this.__applyFilters(this.snap);
			this.___renderFlags |= 32;
			this.___renderFlags |= 64;
			if(this.parent != null) this.parent.___renderFlags |= 64;
			this.renderNextWake();
		}
		if(!this.mHTMLMode && inMask != null) {
			var m = this.getSurfaceTransform();
		} else {
			if((this.___renderFlags & 32) != 0) {
				var m1 = this.getSurfaceTransform();
				this.__setTransform(m1);
				this.___renderFlags &= -33;
			}
			openfl.Lib.__setSurfaceOpacity(this.snap,(this.parent != null?this.parent.__combinedAlpha:1) * this.alpha);
		}
		var el = this.mTextSnap.node;
		if(el.textContent.length > 0) {
			if(this.selectionBeginIndex != this.svgSelectionBeginIndex || this.selectionEndIndex != this.svgSelectionEndIndex) {
				try {
					if(this.selectionBeginIndex >= 0) el.selectSubString(this.selectionBeginIndex,this.selectionEndIndex - this.selectionBeginIndex + 1); else el.selectSubString(0,0);
				} catch( e ) {
				}
				this.svgSelectionBeginIndex = this.selectionBeginIndex;
				this.svgSelectionEndIndex = this.selectionEndIndex;
			}
		}
	}
	,onFocus: function(e) {
		if(e.type == openfl.events.FocusEvent.FOCUS_IN) {
			this.caretTimer = new haxe.Timer(400);
			this.caretTimer.run = $bind(this,this.showCaret);
		} else if(null != this.caretTimer) {
			this.hideCaret();
			this.caretTimer.stop();
			this.caretTimer = null;
		}
	}
	,showCaret: function() {
		if(this.__inputEnabled && this.get_stage().get_focus() == this && this.shouldCaretShowed) {
			var rect = this.getCaretRect();
			this.__graphics.clear();
			this.drawBackgoundAndBorder();
			if(rect.x <= this.mWidth) {
				this.__graphics.lineStyle(0.5,0,1,true);
				this.__graphics.moveTo(rect.x,rect.y);
				this.__graphics.lineTo(rect.x,rect.get_bottom());
				this.__graphics.flush();
			}
			this.caretTimer.run = $bind(this,this.hideCaret);
			this.renderNextWake();
		}
	}
	,hideCaret: function() {
		this.__graphics.clear();
		this.drawBackgoundAndBorder();
		this.caretTimer.run = $bind(this,this.showCaret);
		this.renderNextWake();
	}
	,onKeyDown: function(e) {
		var evt = e;
		if((null == this.selectionInteractionStartIndex || this.selectionInteractionStartIndex < 0) && evt.shiftKey) this.selectionInteractionStartIndex = this.caretIndex;
		if(evt.keyCode == 37 && this.caretIndex > 0) this.caretIndex -= 1; else if(evt.keyCode == 39 && this.caretIndex < this.get_text().length) this.caretIndex += 1; else if(evt.keyCode == 40) this.moveCaretToNextLine(); else if(evt.keyCode == 38) this.moveCaretToPrevLine(); else if(evt.keyCode == 8 && this.caretIndex > 0) {
			if(this.isSelected()) this.removeSelectedText(); else this.removeText(this.caretIndex - 1,this.caretIndex - 1);
			this.clearSelection();
		} else if(evt.keyCode == 46 && this.caretIndex < this.get_text().length) {
			if(this.isSelected()) this.removeSelectedText(); else this.removeText(this.caretIndex,this.caretIndex);
			this.clearSelection();
		} else if(evt.keyCode == 13) {
			this.insertText("\n",this.caretIndex);
			this.caretIndex += 1;
		}
		if(!evt.shiftKey && !evt.ctrlKey && !evt.altKey) {
			this.clearSelection();
			this.selectionInteractionStartIndex = -1;
		} else if(evt.shiftKey) this.adjustSelectionByCaret(this.caretIndex);
		e.stopPropagation();
	}
	,adjustSelectionByCaret: function(caretIndex) {
		if(caretIndex > this.selectionInteractionStartIndex) {
			this.selectionBeginIndex = this.selectionInteractionStartIndex;
			this.selectionEndIndex = caretIndex - 1;
		} else if(caretIndex < this.selectionInteractionStartIndex) {
			this.selectionBeginIndex = caretIndex;
			this.selectionEndIndex = this.selectionInteractionStartIndex - 1;
		} else this.clearSelection();
	}
	,isSelected: function() {
		return this.selectionBeginIndex >= 0 && this.selectionEndIndex >= 0 && this.selectionEndIndex >= this.selectionBeginIndex;
	}
	,clearSelection: function() {
		this.selectionBeginIndex = -1;
		this.selectionEndIndex = -1;
	}
	,removeSelectedText: function() {
		if(this.isSelected()) this.removeText(this.selectionBeginIndex,this.selectionEndIndex);
	}
	,insertText: function(s,index) {
		this.dispatchEvent(new openfl.events.TextEvent(openfl.events.TextEvent.TEXT_INPUT,false,false,s));
		if(null != this.__textFormats) {
			var _g = 0;
			var _g1 = this.__textFormats;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(index < f.begin) {
					f.begin += s.length;
					f.end += s.length;
				} else if(index >= f.begin && index <= f.end) f.end += s.length;
			}
		}
		this.set_text(this.get_text().substring(0,index) + s + this.get_text().substring(index,this.get_text().length));
	}
	,removeText: function(beginIndex,endIndex) {
		var length = endIndex - beginIndex + 1;
		if(null != this.__textFormats) {
			var _g = 0;
			var _g1 = this.__textFormats;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(f.begin > endIndex) {
					f.begin -= length;
					f.end -= length;
				} else if(f.end < beginIndex) {
				} else if(f.begin <= beginIndex && f.end >= endIndex) f.end -= length; else if(f.begin > beginIndex && f.end >= endIndex) {
					f.begin -= f.begin - beginIndex + 1;
					f.end -= length;
				} else if(f.begin <= beginIndex && f.end < endIndex) f.end -= f.end - beginIndex + 1;
			}
		}
		if(this.get_text().length > 1) {
			this.set_text((function($this) {
				var $r;
				var _this = $this.get_text();
				$r = HxOverrides.substr(_this,0,beginIndex);
				return $r;
			}(this)) + (function($this) {
				var $r;
				var _this1 = $this.get_text();
				$r = HxOverrides.substr(_this1,endIndex + 1,$this.get_text().length - endIndex);
				return $r;
			}(this)));
			this.caretIndex = beginIndex;
		} else {
			this.set_text("");
			this.caretIndex = 0;
		}
	}
	,onKeyPress: function(e) {
		if(null != e.charCode && 31 < e.charCode && !e.ctrlKey && !e.altKey && !e.controlKey && !e.commandKey) {
			this.insertText(String.fromCharCode(e.charCode),this.caretIndex);
			if(this.caretIndex < 0) this.caretIndex += 2; else this.caretIndex += 1;
		}
		e.stopPropagation();
	}
	,onMouseDown: function(e) {
		if(this.__inputEnabled && this.get_stage().get_focus() == this) {
			this.caretIndex = this.getCharIndexAtPoint(e.localX,e.localY);
			var textElement = this.mTextSnap.node;
			if(this.get_text().length > 0 && this.get_text().length > this.caretIndex) try {
				var extent = textElement.getExtentOfChar(this.caretIndex);
				if(e.localX - extent.x > extent.width / 2) this.caretIndex += 1;
			} catch( e1 ) {
			}
			this.selectionBeginIndex = this.caretIndex;
			this.selectionEndIndex = this.caretIndex - 1;
			this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		}
		this.shouldCaretShowed = false;
	}
	,onMouseUp: function(e) {
		this.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		this.shouldCaretShowed = true;
		this.caretIndex = this.getCharIndexAtPoint(e.localX,e.localY);
	}
	,onMouseMove: function(e) {
		var index = this.getCharIndexAtPoint(e.localX,e.localY);
		if(index > this.caretIndex) {
			this.svgSelectionBeginIndex = this.selectionBeginIndex = this.caretIndex;
			this.svgSelectionEndIndex = this.selectionEndIndex = index - 1;
		} else if(index < this.selectionBeginIndex && index < this.selectionEndIndex) {
			this.svgSelectionBeginIndex = this.selectionBeginIndex = index;
			this.svgSelectionEndIndex = this.selectionEndIndex = this.caretIndex - 1;
		}
	}
	,onPaste: function(e) {
		this.insertText(e.text,this.caretIndex);
		this.caretIndex += e.text.length + (this.caretIndex < 0?1:0);
	}
	,get_autoSize: function() {
		return this.autoSize;
	}
	,set_autoSize: function(inAutoSize) {
		this.autoSize = inAutoSize;
		this.Rebuild();
		return inAutoSize;
	}
	,set_background: function(inBack) {
		this.background = inBack;
		this.Rebuild();
		return inBack;
	}
	,set_backgroundColor: function(inCol) {
		this.backgroundColor = inCol;
		this.Rebuild();
		return inCol;
	}
	,set_border: function(inBorder) {
		this.border = inBorder;
		this.Rebuild();
		return inBorder;
	}
	,set_borderColor: function(inBorderCol) {
		this.borderColor = inBorderCol;
		this.Rebuild();
		return inBorderCol;
	}
	,get_bottomScrollV: function() {
		return 0;
	}
	,get_caretPos: function() {
		return this.mInsertPos;
	}
	,get_defaultTextFormat: function() {
		return this._defaultTextFormat;
	}
	,set_defaultTextFormat: function(inFmt) {
		this.setTextFormat(inFmt);
		this._defaultTextFormat = inFmt;
		return inFmt;
	}
	,get_height: function() {
		return Math.max(this.mHeight,this.getBounds(this.get_stage()).height);
	}
	,set_height: function(inValue) {
		if(this.parent != null) this.parent.__invalidateBounds();
		if(this.get__boundsInvalid()) this.validateBounds();
		if(inValue != this.mHeight) {
			this.mHeight = inValue;
			this.Rebuild();
		}
		return this.mHeight;
	}
	,get_htmlText: function() {
		return this.mHTMLText;
	}
	,set_htmlText: function(inHTMLText) {
		this.mParagraphs = new Array();
		this.mHTMLText = inHTMLText;
		return this.mHTMLText;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 0;
	}
	,get_multiline: function() {
		return this.multiline;
	}
	,set_multiline: function(value) {
		return this.multiline = value;
	}
	,get_numLines: function() {
		return 0;
	}
	,get_scrollH: function() {
		return this.scrollH;
	}
	,set_scrollH: function(value) {
		return this.scrollH = value;
	}
	,get_scrollV: function() {
		return this.scrollV;
	}
	,set_scrollV: function(value) {
		return this.scrollV = value;
	}
	,get_text: function() {
		if(this.mHTMLMode) this.ConvertHTMLToText(false);
		return this.mText;
	}
	,set_text: function(inText) {
		if(inText == null) this.mText = "null"; else this.mText = "" + inText;
		if(!this.multiline) this.mText = StringTools.replace(this.mText,"\n","");
		this.mHTMLMode = false;
		this.RebuildText();
		this.___renderFlags |= 64;
		if(this.parent != null) this.parent.___renderFlags |= 64;
		this.renderNextWake();
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		return this.mText;
	}
	,get_textColor: function() {
		return this.mTextColour;
	}
	,set_textColor: function(inCol) {
		this.mTextColour = inCol;
		this.RebuildText();
		return inCol;
	}
	,get_textWidth: function() {
		return this.mMaxWidth;
	}
	,get_textHeight: function() {
		return this.mMaxHeight;
	}
	,updateSelectability: function() {
		this.mTextSnap.attr({ style : this.__inputEnabled?"":"-webkit-user-select:none; -moz-user-select:none; -ms-user-select:none; user-select:none;"});
	}
	,get_type: function() {
		return this.mType;
	}
	,set_type: function(inType) {
		this.mType = inType;
		this.__inputEnabled = this.mType == openfl.text.TextFieldType.INPUT;
		this.mTextSnap.attr({ style : this.__inputEnabled?"":"-webkit-user-select:none; -moz-user-select:none; -ms-user-select:none; user-select:none;"});
		this.tabEnabled = this.get_type() == openfl.text.TextFieldType.INPUT;
		if(this.__inputEnabled) {
			this.addEventListener(openfl.events.FocusEvent.FOCUS_IN,$bind(this,this.onFocus));
			this.addEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.onFocus));
			this.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyDown));
			this.addEventListener(openfl.events.KeyboardEvent.KEY_PRESS,$bind(this,this.onKeyPress));
		} else {
			this.removeEventListener(openfl.events.FocusEvent.FOCUS_IN,$bind(this,this.onFocus));
			this.removeEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.onFocus));
			this.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyDown));
			this.removeEventListener(openfl.events.KeyboardEvent.KEY_PRESS,$bind(this,this.onKeyPress));
		}
		this.Rebuild();
		return inType;
	}
	,get_width: function() {
		return Math.max(this.mWidth,this.getBounds(this.get_stage()).width);
	}
	,set_width: function(inValue) {
		if(this.parent != null) this.parent.__invalidateBounds();
		if(this.get__boundsInvalid()) this.validateBounds();
		if(inValue != this.mWidth) {
			this.mUserWidth = this.mWidth = inValue;
			this.RebuildText();
		}
		return this.mWidth;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(inWordWrap) {
		this.wordWrap = inWordWrap;
		this.RebuildText();
		return this.get_wordWrap();
	}
	,__class__: openfl.text.TextField
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
openfl.text.FontInstanceMode = $hxClasses["openfl.text.FontInstanceMode"] = { __ename__ : true, __constructs__ : ["fimSolid"] };
openfl.text.FontInstanceMode.fimSolid = ["fimSolid",0];
openfl.text.FontInstanceMode.fimSolid.toString = $estr;
openfl.text.FontInstanceMode.fimSolid.__enum__ = openfl.text.FontInstanceMode;
openfl.text.FontInstance = function(inFont,inHeight) {
	this.mFont = inFont;
	this.mHeight = inHeight;
	this.mTryFreeType = true;
	this.mGlyphs = [];
	this.mCacheAsBitmap = false;
};
$hxClasses["openfl.text.FontInstance"] = openfl.text.FontInstance;
openfl.text.FontInstance.__name__ = ["openfl","text","FontInstance"];
openfl.text.FontInstance.CreateSolid = function(inFace,inHeight,inColour,inAlpha) {
	var id = "SOLID:" + inFace + ":" + inHeight + ":" + inColour + ":" + inAlpha;
	var f = openfl.text.FontInstance.mSolidFonts.get(id);
	if(f != null) return f;
	var font = new openfl.text.Font();
	font.__setScale(inHeight);
	font.set_fontName(inFace);
	if(font == null) return null;
	f = new openfl.text.FontInstance(font,inHeight);
	f.SetSolid(inColour,inAlpha);
	openfl.text.FontInstance.mSolidFonts.set(id,f);
	return f;
};
openfl.text.FontInstance.prototype = {
	GetFace: function() {
		return this.mFont.fontName;
	}
	,SetSolid: function(inCol,inAlpha) {
		this.mColour = inCol;
		this.mAlpha = inAlpha;
		this.mMode = openfl.text.FontInstanceMode.fimSolid;
	}
	,RenderChar: function(inGraphics,inGlyph,inX,inY) {
		inGraphics.__clearLine();
		inGraphics.beginFill(this.mColour,this.mAlpha);
		this.mFont.__render(inGraphics,inGlyph,inX,inY,this.mTryFreeType);
		inGraphics.endFill();
	}
	,toString: function() {
		return "FontInstance:" + Std.string(this.mFont) + ":" + this.mColour + "(" + this.mGlyphs.length + ")";
	}
	,__getAdvance: function(inChar) {
		if(this.mFont == null) return 0;
		return this.mFont.__getAdvance(inChar,this.mHeight);
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_color: function() {
		return this.mColour;
	}
	,__class__: openfl.text.FontInstance
	,__properties__: {get_color:"get_color",get_height:"get_height"}
};
openfl.text.TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl.text.TextFieldAutoSize.CENTER = ["CENTER",0];
openfl.text.TextFieldAutoSize.CENTER.toString = $estr;
openfl.text.TextFieldAutoSize.CENTER.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.LEFT = ["LEFT",1];
openfl.text.TextFieldAutoSize.LEFT.toString = $estr;
openfl.text.TextFieldAutoSize.LEFT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.NONE = ["NONE",2];
openfl.text.TextFieldAutoSize.NONE.toString = $estr;
openfl.text.TextFieldAutoSize.NONE.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl.text.TextFieldAutoSize.RIGHT.toString = $estr;
openfl.text.TextFieldAutoSize.RIGHT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldType = function() { };
$hxClasses["openfl.text.TextFieldType"] = openfl.text.TextFieldType;
openfl.text.TextFieldType.__name__ = ["openfl","text","TextFieldType"];
openfl.text.TextFormat = function(in_font,in_size,in_color,in_bold,in_italic,in_underline,in_url,in_target,in_align,in_leftMargin,in_rightMargin,in_indent,in_leading) {
	this.font = in_font;
	this.size = in_size;
	this.color = in_color;
	this.bold = in_bold;
	this.italic = in_italic;
	this.underline = in_underline;
	this.url = in_url;
	this.target = in_target;
	this.align = in_align;
	this.leftMargin = in_leftMargin;
	this.rightMargin = in_rightMargin;
	this.indent = in_indent;
	this.leading = in_leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl.text.TextFormat;
openfl.text.TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl.text.TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.display = this.display;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__class__: openfl.text.TextFormat
};
openfl.text.TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl.text.TextFormatAlign.LEFT = ["LEFT",0];
openfl.text.TextFormatAlign.LEFT.toString = $estr;
openfl.text.TextFormatAlign.LEFT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.RIGHT = ["RIGHT",1];
openfl.text.TextFormatAlign.RIGHT.toString = $estr;
openfl.text.TextFormatAlign.RIGHT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl.text.TextFormatAlign.JUSTIFY.toString = $estr;
openfl.text.TextFormatAlign.JUSTIFY.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.CENTER = ["CENTER",3];
openfl.text.TextFormatAlign.CENTER.toString = $estr;
openfl.text.TextFormatAlign.CENTER.__enum__ = openfl.text.TextFormatAlign;
openfl.ui = {};
openfl.ui.Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl.ui.Keyboard;
openfl.ui.Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl.ui.Keyboard.isAccessible = function() {
	return false;
};
openfl.ui.Keyboard.__convertMozillaCode = function(code) {
	switch(code) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 14:
		return 13;
	case 16:
		return 16;
	case 17:
		return 17;
	case 20:
		return 18;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 33;
	case 34:
		return 34;
	case 35:
		return 35;
	case 36:
		return 36;
	case 37:
		return 37;
	case 39:
		return 39;
	case 38:
		return 38;
	case 40:
		return 40;
	case 45:
		return 45;
	case 46:
		return 46;
	case 144:
		return 144;
	default:
		return code;
	}
};
openfl.ui.Keyboard.__convertWebkitCode = function(code) {
	var _g = code.toLowerCase();
	switch(_g) {
	case "backspace":
		return 8;
	case "tab":
		return 9;
	case "enter":
		return 13;
	case "shift":
		return 16;
	case "control":
		return 17;
	case "capslock":
		return 18;
	case "escape":
		return 27;
	case "space":
		return 32;
	case "pageup":
		return 33;
	case "pagedown":
		return 34;
	case "end":
		return 35;
	case "home":
		return 36;
	case "left":
		return 37;
	case "right":
		return 39;
	case "up":
		return 38;
	case "down":
		return 40;
	case "insert":
		return 45;
	case "delete":
		return 46;
	case "numlock":
		return 144;
	case "break":
		return 19;
	}
	if(code.indexOf("U+") == 0) return Std.parseInt("0x" + HxOverrides.substr(code,3,null));
	throw "Unrecognized key code: " + code;
	return 0;
};
openfl.utils = {};
openfl.utils.ByteArray = function() {
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	this.___resizeBuffer(this.allocated);
};
$hxClasses["openfl.utils.ByteArray"] = openfl.utils.ByteArray;
openfl.utils.ByteArray.__name__ = ["openfl","utils","ByteArray"];
openfl.utils.ByteArray.fromBytes = function(inBytes) {
	var result = new openfl.utils.ByteArray();
	result.byteView = new Uint8Array(inBytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
openfl.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new openfl.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
openfl.utils.ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new openfl.errors.IOError("Read error - Out of bounds");
		if(length == 0) length = this.length;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readFullBytes: function(bytes,pos,len) {
		if(this.length < len) {
			if(this.allocated < len) this.___resizeBuffer(this.allocated = Std["int"](Math.max(len,this.allocated * 2))); else if(this.allocated > len) this.___resizeBuffer(this.allocated = len);
			this.length = len;
			len;
		}
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var data = this.data;
			data.setInt8(this.position++,bytes.b[i]);
		}
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new openfl.errors.IOError("Write error - Out of bounds");
		if(length == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position += length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this._getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(inBytes) {
		this.byteView = new Uint8Array(inBytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getUint8(pos);
	}
	,_getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: openfl.utils.ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
openfl.utils.Endian = function() { };
$hxClasses["openfl.utils.Endian"] = openfl.utils.Endian;
openfl.utils.Endian.__name__ = ["openfl","utils","Endian"];
openfl.utils.Uuid = function() { };
$hxClasses["openfl.utils.Uuid"] = openfl.utils.Uuid;
openfl.utils.Uuid.__name__ = ["openfl","utils","Uuid"];
openfl.utils.Uuid.random = function(size) {
	if(size == null) size = 32;
	var nchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".length;
	var uid = new StringBuf();
	var _g = 0;
	while(_g < size) {
		var i = _g++;
		uid.add("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Std["int"](Math.random() * nchars)));
	}
	return uid.b;
};
openfl.utils.Uuid.uuid = function() {
	return openfl.utils.Uuid.random(8) + "-" + openfl.utils.Uuid.random(4) + "-" + openfl.utils.Uuid.random(4) + "-" + openfl.utils.Uuid.random(4) + "-" + openfl.utils.Uuid.random(12);
};
org.aswing.ASFont = function(name,size,bold,italic,underline,embedFontsOrAdvancedPros) {
	if(underline == null) underline = false;
	if(italic == null) italic = false;
	if(bold == null) bold = false;
	if(size == null) size = 11;
	if(name == null) name = "Tahoma";
	this.name = name;
	this.size = size | 0;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	if(js.Boot.__instanceof(embedFontsOrAdvancedPros,org.aswing.ASFontAdvProperties)) if(js.Boot.__instanceof(embedFontsOrAdvancedPros,org.aswing.ASFontAdvProperties)) this.advancedProperties = embedFontsOrAdvancedPros; else this.advancedProperties = null; else this.advancedProperties = new org.aswing.ASFontAdvProperties(embedFontsOrAdvancedPros == true);
	this.textFormat = this.getTextFormat();
};
$hxClasses["org.aswing.ASFont"] = org.aswing.ASFont;
org.aswing.ASFont.__name__ = ["org","aswing","ASFont"];
org.aswing.ASFont.prototype = {
	getName: function() {
		return this.name;
	}
	,changeName: function(name) {
		return new org.aswing.ASFont(name,this.size,this.bold,this.italic,this.underline,this.advancedProperties);
	}
	,getSize: function() {
		return this.size;
	}
	,changeSize: function(size) {
		return new org.aswing.ASFont(this.name,size,this.bold,this.italic,this.underline,this.advancedProperties);
	}
	,isBold: function() {
		return this.bold;
	}
	,changeBold: function(bold) {
		return new org.aswing.ASFont(this.name,this.size,bold,this.italic,this.underline,this.advancedProperties);
	}
	,isItalic: function() {
		return this.italic;
	}
	,changeItalic: function(italic) {
		return new org.aswing.ASFont(this.name,this.size,this.bold,italic,this.underline,this.advancedProperties);
	}
	,isUnderline: function() {
		return this.underline;
	}
	,changeUnderline: function(underline) {
		return new org.aswing.ASFont(this.name,this.size,this.bold,this.italic,underline,this.advancedProperties);
	}
	,isEmbedFonts: function() {
		return this.advancedProperties.isEmbedFonts();
	}
	,getAdvancedProperties: function() {
		return this.advancedProperties;
	}
	,apply: function(textField,beginIndex,endIndex) {
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = -1;
		this.advancedProperties.apply(textField);
		textField.setTextFormat(this.textFormat,beginIndex,endIndex);
		textField.set_defaultTextFormat(this.textFormat);
	}
	,getTextFormat: function() {
		return new openfl.text.TextFormat(this.name,this.size,null,this.bold,this.italic,this.underline,"","",openfl.text.TextFormatAlign.LEFT,0,0,0,0);
	}
	,computeTextSize: function(text,includeGutters) {
		if(includeGutters == null) includeGutters = true;
		return org.aswing.AsWingUtils.computeStringSizeWithFont(this,text,includeGutters);
	}
	,clone: function() {
		return new org.aswing.ASFont(this.name,this.size,this.bold,this.italic,this.underline,this.advancedProperties);
	}
	,toString: function() {
		return "ASFont[" + "name : " + this.name + ", size : " + this.size + ", bold : " + Std.string(this.bold) + ", italic : " + Std.string(this.italic) + ", underline : " + Std.string(this.underline) + ", advanced : " + Std.string(this.advancedProperties) + "]";
	}
	,__class__: org.aswing.ASFont
};
org.aswing.ASFontAdvProperties = function(embedFonts,antiAliasType,gridFitType,sharpness,thickness) {
	if(thickness == null) thickness = 0;
	if(sharpness == null) sharpness = 0;
	if(gridFitType == null) gridFitType = "PIXEL";
	if(antiAliasType == null) antiAliasType = "NORMAL";
	if(embedFonts == null) embedFonts = false;
	this.embedFonts = embedFonts;
	this.antiAliasType = antiAliasType;
	this.gridFitType = gridFitType;
	this.sharpness = sharpness;
	this.thickness = thickness;
};
$hxClasses["org.aswing.ASFontAdvProperties"] = org.aswing.ASFontAdvProperties;
org.aswing.ASFontAdvProperties.__name__ = ["org","aswing","ASFontAdvProperties"];
org.aswing.ASFontAdvProperties.prototype = {
	getAntiAliasType: function() {
		if(this.antiAliasType != null) return this.antiAliasType; else return "NORMAL";
	}
	,changeAntiAliasType: function(newType) {
		return new org.aswing.ASFontAdvProperties(this.embedFonts,newType,this.gridFitType,this.sharpness,this.thickness);
	}
	,getGridFitType: function() {
		if(this.gridFitType != null) return this.gridFitType; else return "PIXEL";
	}
	,changeGridFitType: function(newType) {
		return new org.aswing.ASFontAdvProperties(this.embedFonts,this.antiAliasType,newType,this.sharpness,this.thickness);
	}
	,getSharpness: function() {
		return this.sharpness;
	}
	,changeSharpness: function(newSharpness) {
		return new org.aswing.ASFontAdvProperties(this.embedFonts,this.antiAliasType,this.gridFitType,newSharpness,this.thickness);
	}
	,getThickness: function() {
		return this.thickness;
	}
	,changeThickness: function(newThickness) {
		return new org.aswing.ASFontAdvProperties(this.embedFonts,this.antiAliasType,this.gridFitType,this.sharpness,newThickness);
	}
	,isEmbedFonts: function() {
		return this.embedFonts;
	}
	,changeEmbedFonts: function(ef) {
		return new org.aswing.ASFontAdvProperties(ef,this.antiAliasType,this.gridFitType,this.sharpness,this.thickness);
	}
	,apply: function(textField) {
	}
	,toString: function() {
		return "ASFontAdvProperties[" + "embedFonts : " + Std.string(this.embedFonts) + ", antiAliasType : " + this.antiAliasType + ", gridFitType : " + this.gridFitType + ", sharpness : " + this.sharpness + ", thickness : " + this.thickness + "]";
	}
	,__class__: org.aswing.ASFontAdvProperties
};
org.aswing.AWKeyboard = function() { };
$hxClasses["org.aswing.AWKeyboard"] = org.aswing.AWKeyboard;
org.aswing.AWKeyboard.__name__ = ["org","aswing","AWKeyboard"];
org.aswing.AbstractButton = function(text,icon) {
	if(text == null) text = "";
	this.shiftOffset = 0;
	this.shiftOffsetSet = false;
	org.aswing.Component.call(this);
	this.setName("AbstractButton");
	this.rolloverEnabled = true;
	this.verticalAlignment = 0;
	this.horizontalAlignment = 0;
	this.verticalTextPosition = 0;
	this.horizontalTextPosition = 4;
	this.textFilters = new Array();
	this.iconTextGap = 2;
	this.mnemonicEnabled = true;
	this.text = text;
	this.analyzeMnemonic();
	this.defaultIcon = icon;
	this.initSelfHandlers();
	this.updateUI();
	this.installIcon(this.defaultIcon);
};
$hxClasses["org.aswing.AbstractButton"] = org.aswing.AbstractButton;
org.aswing.AbstractButton.__name__ = ["org","aswing","AbstractButton"];
org.aswing.AbstractButton.__super__ = org.aswing.Component;
org.aswing.AbstractButton.prototype = $extend(org.aswing.Component.prototype,{
	getModel: function() {
		return this.model;
	}
	,setModel: function(newModel) {
		var oldModel = this.getModel();
		if(oldModel != null) {
			oldModel.removeActionListener($bind(this,this.__modelActionListener));
			oldModel.removeStateListener($bind(this,this.__modelStateListener));
			oldModel.removeSelectionListener($bind(this,this.__modelSelectionListener));
		}
		this.model = newModel;
		if(newModel != null) {
			newModel.addActionListener($bind(this,this.__modelActionListener));
			newModel.addStateListener($bind(this,this.__modelStateListener));
			newModel.addSelectionListener($bind(this,this.__modelSelectionListener));
		}
		if(newModel != oldModel) {
			this.revalidate();
			this.repaint();
		}
	}
	,updateUI: function() {
		throw new org.aswing.error.ImpMissError();
	}
	,doClick: function() {
		this.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.ROLL_OVER,true,false,0,0));
		this.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_DOWN,true,false,0,0));
		if(this.isOnStage()) this.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_UP,true,false,0,0)); else this.dispatchEvent(new org.aswing.event.ReleaseEvent("release",this,false,new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_UP)));
		this.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.CLICK,true,false,0,0));
		this.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.ROLL_OUT,true,false,0,0));
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,setEnabled: function(b) {
		if(!b && this.model.isRollOver()) this.model.setRollOver(false);
		org.aswing.Component.prototype.setEnabled.call(this,b);
		this.model.setEnabled(b);
	}
	,isSelected: function() {
		return this.model.isSelected();
	}
	,setSelected: function(b) {
		this.model.setSelected(b);
	}
	,setRollOverEnabled: function(b) {
		if(this.rolloverEnabled != b) {
			this.rolloverEnabled = b;
			this.repaint();
		}
	}
	,isRollOverEnabled: function() {
		return this.rolloverEnabled;
	}
	,setMargin: function(m) {
		if(js.Boot.__instanceof(m,org.aswing.plaf.UIResource)) this.defaultMargin = m;
		if(m == null && this.defaultMargin != null) m = this.defaultMargin;
		var old = this.margin;
		this.margin = m;
		if(old == null || !m.equals(old)) {
			this.revalidate();
			this.repaint();
		}
	}
	,getMargin: function() {
		var m = this.margin;
		if(this.margin == null) m = this.defaultMargin;
		if(m == null) return new org.aswing.plaf.InsetsUIResource(); else if(js.Boot.__instanceof(m,org.aswing.plaf.UIResource)) return new org.aswing.plaf.InsetsUIResource(m.top,m.left,m.bottom,m.right); else return new org.aswing.Insets(m.top,m.left,m.bottom,m.right);
	}
	,setTextFilters: function(fs) {
		this.textFilters = fs;
		this.repaint();
	}
	,getTextFilters: function() {
		return this.textFilters;
	}
	,wrapSimpleButton: function(btn) {
		this.setShiftOffset(0);
		this.setIcon(new org.aswing.SimpleButtonIconToggle(btn));
		this.setBorder(null);
		this.setMargin(new org.aswing.Insets());
		this.setBackgroundDecorator(null);
		this.setOpaque(false);
		return this;
	}
	,setText: function(text) {
		if(this.text != text) {
			this.text = text;
			this.analyzeMnemonic();
			this.repaint();
			this.invalidate();
		}
	}
	,setMnemonicEnabled: function(b) {
		if(this.mnemonicEnabled != b) {
			this.mnemonicEnabled = b;
			this.analyzeMnemonic();
		}
	}
	,isMnemonicEnabled: function() {
		return this.mnemonicEnabled;
	}
	,analyzeMnemonic: function() {
		this.displayText = this.text;
		this.mnemonic = -1;
		this.mnemonicIndex = -1;
		if(this.text == null) return;
		if(this.mnemonicEnabled != true) return;
		var mi = this.text.indexOf("&");
		var mc = "";
		var found = false;
		while(mi >= 0) {
			if(mi + 1 < this.text.length) {
				mc = this.text.charAt(mi + 1);
				if(org.aswing.util.StringUtils.isLetter(mc)) {
					found = true;
					break;
				}
			} else break;
			mi = this.text.indexOf("&",mi + 1);
		}
		if(found) {
			this.displayText = HxOverrides.substr(this.text,0,mi) + HxOverrides.substr(this.text,mi + 1,null);
			var _this = mc.toUpperCase();
			this.mnemonic = HxOverrides.cca(_this,0);
			this.mnemonicIndex = mi;
		}
	}
	,getText: function() {
		return this.text;
	}
	,getDisplayText: function() {
		return this.displayText;
	}
	,getMnemonicIndex: function() {
		return this.mnemonicIndex;
	}
	,getMnemonic: function() {
		return this.mnemonic;
	}
	,installIcon: function(icon) {
		if(icon != null && icon.getDisplay(this) != null) this.addChild(icon.getDisplay(this));
	}
	,uninstallIcon: function(icon) {
		var iconDis;
		if(icon == null) iconDis = null; else iconDis = icon.getDisplay(this);
		if(iconDis != null && this.isChild(iconDis)) this.removeChild(icon.getDisplay(this));
	}
	,setIcon: function(defaultIcon) {
		if(this.defaultIcon != defaultIcon) {
			this.uninstallIcon(this.defaultIcon);
			this.defaultIcon = defaultIcon;
			this.installIcon(defaultIcon);
			this.repaint();
			this.invalidate();
		}
	}
	,getIcon: function() {
		return this.defaultIcon;
	}
	,getPressedIcon: function() {
		return this.pressedIcon;
	}
	,setPressedIcon: function(pressedIcon) {
		var oldValue = this.pressedIcon;
		this.pressedIcon = pressedIcon;
		if(pressedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(pressedIcon);
			this.repaint();
		}
	}
	,getSelectedIcon: function() {
		return this.selectedIcon;
	}
	,setSelectedIcon: function(selectedIcon) {
		var oldValue = this.selectedIcon;
		this.selectedIcon = selectedIcon;
		if(selectedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(selectedIcon);
			this.repaint();
		}
	}
	,getRollOverIcon: function() {
		return this.rolloverIcon;
	}
	,setRollOverIcon: function(rolloverIcon) {
		var oldValue = this.rolloverIcon;
		this.rolloverIcon = rolloverIcon;
		this.setRollOverEnabled(true);
		if(rolloverIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(rolloverIcon);
			this.repaint();
		}
	}
	,getRollOverSelectedIcon: function() {
		return this.rolloverSelectedIcon;
	}
	,setRollOverSelectedIcon: function(rolloverSelectedIcon) {
		var oldValue = this.rolloverSelectedIcon;
		this.rolloverSelectedIcon = rolloverSelectedIcon;
		this.setRollOverEnabled(true);
		if(rolloverSelectedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(rolloverSelectedIcon);
			this.repaint();
		}
	}
	,getDisabledIcon: function() {
		if(this.disabledIcon == null) {
			if(this.defaultIcon != null) return this.defaultIcon;
		}
		return this.disabledIcon;
	}
	,setDisabledIcon: function(disabledIcon) {
		var oldValue = this.disabledIcon;
		this.disabledIcon = disabledIcon;
		if(disabledIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(disabledIcon);
			this.repaint();
		}
	}
	,getDisabledSelectedIcon: function() {
		if(this.disabledSelectedIcon == null) {
			if(this.selectedIcon != null) {
			} else return this.getDisabledIcon();
		}
		return this.disabledSelectedIcon;
	}
	,setDisabledSelectedIcon: function(disabledSelectedIcon) {
		var oldValue = this.disabledSelectedIcon;
		this.disabledSelectedIcon = disabledSelectedIcon;
		if(disabledSelectedIcon != oldValue) {
			this.uninstallIcon(oldValue);
			this.installIcon(disabledSelectedIcon);
			this.repaint();
			this.revalidate();
		}
	}
	,getVerticalAlignment: function() {
		return this.verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this.verticalAlignment) return; else {
			this.verticalAlignment = alignment;
			this.repaint();
		}
	}
	,getHorizontalAlignment: function() {
		return this.horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this.horizontalAlignment) return; else {
			this.horizontalAlignment = alignment;
			this.repaint();
		}
	}
	,getVerticalTextPosition: function() {
		return this.verticalTextPosition;
	}
	,setVerticalTextPosition: function(textPosition) {
		if(textPosition == this.verticalTextPosition) return; else {
			this.verticalTextPosition = textPosition;
			this.repaint();
			this.revalidate();
		}
	}
	,getHorizontalTextPosition: function() {
		return this.horizontalTextPosition;
	}
	,setHorizontalTextPosition: function(textPosition) {
		if(textPosition == this.horizontalTextPosition) return; else {
			this.horizontalTextPosition = textPosition;
			this.repaint();
			this.revalidate();
		}
	}
	,getIconTextGap: function() {
		return this.iconTextGap;
	}
	,setIconTextGap: function(iconTextGap) {
		var oldValue = this.iconTextGap;
		this.iconTextGap = iconTextGap;
		if(iconTextGap != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,getShiftOffset: function() {
		return this.shiftOffset;
	}
	,setShiftOffset: function(shiftOffset) {
		var oldValue = this.shiftOffset;
		this.shiftOffset = shiftOffset;
		this.setShiftOffsetSet(true);
		if(shiftOffset != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,isShiftOffsetSet: function() {
		return this.shiftOffsetSet;
	}
	,setShiftOffsetSet: function(b) {
		this.shiftOffsetSet = b;
	}
	,initSelfHandlers: function() {
		this.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__rollOutListener));
		this.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__rollOverListener));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__mouseDownListener));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__mouseUpListener));
		this.addEventListener("release",$bind(this,this.__mouseReleaseListener));
		this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__addedToStage));
		this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__removedFromStage));
	}
	,__addedToStage: function(e) {
		this.rootPane = this.getRootPaneAncestor();
		if(this.rootPane != null) this.rootPane.registerMnemonic(this);
	}
	,__removedFromStage: function(e) {
		if(this.rootPane != null) {
			this.rootPane.unregisterMnemonic(this);
			this.rootPane = null;
		}
	}
	,__rollOverListener: function(e) {
		var m = this.getModel();
		if(this.isRollOverEnabled()) {
			if(m.isPressed() || !e.buttonDown) m.setRollOver(true);
		}
		if(m.isPressed()) m.setArmed(true);
	}
	,__rollOutListener: function(e) {
		var m = this.getModel();
		if(this.isRollOverEnabled()) {
			if(!m.isPressed()) m.setRollOver(false);
		}
		m.setArmed(false);
	}
	,__mouseDownListener: function(e) {
		this.getModel().setArmed(true);
		this.getModel().setPressed(true);
	}
	,__mouseUpListener: function(e) {
		if(this.isRollOverEnabled()) this.getModel().setRollOver(true);
	}
	,__mouseReleaseListener: function(e) {
		this.getModel().setPressed(false);
		this.getModel().setArmed(false);
		if(this.isRollOverEnabled() && !this.hitTestMouse()) this.getModel().setRollOver(false);
	}
	,__modelActionListener: function(e) {
		this.dispatchEvent(new org.aswing.event.AWEvent("act"));
	}
	,__modelStateListener: function(e) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged"));
	}
	,__modelSelectionListener: function(e) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("selectionChanged"));
	}
	,__class__: org.aswing.AbstractButton
});
org.aswing.CellEditor = function() { };
$hxClasses["org.aswing.CellEditor"] = org.aswing.CellEditor;
org.aswing.CellEditor.__name__ = ["org","aswing","CellEditor"];
org.aswing.CellEditor.prototype = {
	__class__: org.aswing.CellEditor
};
org.aswing.tree = {};
org.aswing.tree.TreeCellEditor = function() { };
$hxClasses["org.aswing.tree.TreeCellEditor"] = org.aswing.tree.TreeCellEditor;
org.aswing.tree.TreeCellEditor.__name__ = ["org","aswing","tree","TreeCellEditor"];
org.aswing.tree.TreeCellEditor.__interfaces__ = [org.aswing.CellEditor];
org.aswing.table.TableCellEditor = function() { };
$hxClasses["org.aswing.table.TableCellEditor"] = org.aswing.table.TableCellEditor;
org.aswing.table.TableCellEditor.__name__ = ["org","aswing","table","TableCellEditor"];
org.aswing.table.TableCellEditor.__interfaces__ = [org.aswing.CellEditor];
org.aswing.AbstractCellEditor = function() {
	this.listeners = new Array();
	this.clickCountToStart = 0;
	this.popup = new org.aswing.JPopup();
	this.popup.setLayout(new org.aswing.EmptyLayout());
};
$hxClasses["org.aswing.AbstractCellEditor"] = org.aswing.AbstractCellEditor;
org.aswing.AbstractCellEditor.__name__ = ["org","aswing","AbstractCellEditor"];
org.aswing.AbstractCellEditor.__interfaces__ = [org.aswing.tree.TreeCellEditor,org.aswing.table.TableCellEditor,org.aswing.CellEditor];
org.aswing.AbstractCellEditor.prototype = {
	setClickCountToStart: function(count) {
		this.clickCountToStart = count | 0;
	}
	,getClickCountToStart: function() {
		return this.clickCountToStart;
	}
	,updateUI: function() {
		this.getEditorComponent().updateUI();
	}
	,getEditorComponent: function() {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,getCellEditorValue: function() {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,setCellEditorValue: function(value) {
		throw new org.aswing.error.ImpMissError();
	}
	,isCellEditable: function(clickCount) {
		return clickCount == this.clickCountToStart;
	}
	,startCellEditing: function(owner,value,bounds) {
		this.popup.changeOwner(org.aswing.AsWingUtils.getOwnerAncestor(owner));
		var gp = owner.getGlobalLocation().move(bounds.x,bounds.y);
		this.popup.setSizeWH(bounds.width,bounds.height);
		this.popup.show();
		this.popup.setGlobalLocation(gp);
		this.popup.validate();
		this.popup.toFront();
		var com = this.getEditorComponent();
		com.removeEventListener("act",$bind(this,this.__editorComponentAct));
		com.removeEventListener("focusLost",$bind(this,this.__editorComponentFocusLost));
		com.removeEventListener("focusKeyDown",$bind(this,this.__editorComponentKeyDown));
		com.setSizeWH(bounds.width,bounds.height);
		this.popup.append(com);
		this.setCellEditorValue(value);
		com.requestFocus();
		if(js.Boot.__instanceof(com,org.aswing.Container) && !com.isFocusOwner()) {
			var con;
			if(js.Boot.__instanceof(com,org.aswing.Container)) con = com; else con = null;
			var sub;
			sub = con.getFocusTraversalPolicy().getDefaultComponent(con);
			if(sub != null) sub.requestFocus();
			if(sub == null || !sub.isFocusOwner()) {
				var _g1 = 0;
				var _g = con.getComponentCount();
				while(_g1 < _g) {
					var i = _g1++;
					sub = con.getComponent(i);
					sub.requestFocus();
					if(sub.isFocusOwner()) break;
				}
			}
		}
		com.addEventListener("act",$bind(this,this.__editorComponentAct));
		com.addEventListener("focusLost",$bind(this,this.__editorComponentFocusLost));
		com.addEventListener("focusKeyDown",$bind(this,this.__editorComponentKeyDown));
		com.validate();
	}
	,__editorComponentFocusLost: function(e) {
		this.cancelCellEditing();
	}
	,__editorComponentAct: function(e) {
		this.stopCellEditing();
	}
	,__editorComponentKeyDown: function(e) {
		if((e.keyCode | 0) == org.aswing.AWKeyboard.ESCAPE) this.cancelCellEditing();
	}
	,stopCellEditing: function() {
		this.removeEditorComponent();
		this.fireEditingStopped();
		return true;
	}
	,cancelCellEditing: function() {
		this.removeEditorComponent();
		this.fireEditingCanceled();
	}
	,isCellEditing: function() {
		var editorCom = this.getEditorComponent();
		return editorCom != null && editorCom.isShowing();
	}
	,addCellEditorListener: function(l) {
		this.listeners.push(l);
	}
	,removeCellEditorListener: function(l) {
		org.aswing.util.ArrayUtils.removeFromArray(this.listeners,l);
	}
	,fireEditingStopped: function() {
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = org.aswing.AsWingUtils["as"](this.listeners[i],org.aswing.event.CellEditorListener);
			l.editingStopped(this);
		}
	}
	,fireEditingCanceled: function() {
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = org.aswing.AsWingUtils["as"](this.listeners[i],org.aswing.event.CellEditorListener);
			l.editingCanceled(this);
		}
	}
	,removeEditorComponent: function() {
		this.getEditorComponent().removeFromContainer();
		this.popup.dispose();
	}
	,__class__: org.aswing.AbstractCellEditor
};
org.aswing.AbstractListModel = function() {
	this.listeners = new Array();
};
$hxClasses["org.aswing.AbstractListModel"] = org.aswing.AbstractListModel;
org.aswing.AbstractListModel.__name__ = ["org","aswing","AbstractListModel"];
org.aswing.AbstractListModel.prototype = {
	addListDataListener: function(l) {
		this.listeners.push(l);
	}
	,removeListDataListener: function(l) {
		org.aswing.util.ArrayUtils.removeFromArray(this.listeners,l);
	}
	,fireContentsChanged: function(target,index0,index1,removedItems) {
		var e = new org.aswing.event.ListDataEvent(target,index0,index1,removedItems);
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](this.listeners[i],org.aswing.event.ListDataListener);
			lis.contentsChanged(e);
		}
	}
	,fireIntervalAdded: function(target,index0,index1) {
		var e = new org.aswing.event.ListDataEvent(target,index0,index1,[]);
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](this.listeners[i],org.aswing.event.ListDataListener);
			lis.intervalAdded(e);
		}
	}
	,fireIntervalRemoved: function(target,index0,index1,removedItems) {
		var e = new org.aswing.event.ListDataEvent(target,index0,index1,removedItems);
		var _g1 = 0;
		var _g = this.listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](this.listeners[i],org.aswing.event.ListDataListener);
			lis.intervalRemoved(e);
		}
	}
	,__class__: org.aswing.AbstractListModel
};
org.aswing.AbstractTabbedPane = function() {
	org.aswing.Container.call(this);
	this.setClipMasked(true);
	this.verticalAlignment = 0;
	this.horizontalAlignment = 0;
	this.verticalTextPosition = 0;
	this.horizontalTextPosition = 4;
	this.iconTextGap = 4;
	this.titles = new Array();
	this.icons = new Array();
	this.tips = new Array();
	this.enables = new Array();
	this.visibles = new Array();
	this.setModel(new org.aswing.DefaultSingleSelectionModel());
};
$hxClasses["org.aswing.AbstractTabbedPane"] = org.aswing.AbstractTabbedPane;
org.aswing.AbstractTabbedPane.__name__ = ["org","aswing","AbstractTabbedPane"];
org.aswing.AbstractTabbedPane.__super__ = org.aswing.Container;
org.aswing.AbstractTabbedPane.prototype = $extend(org.aswing.Container.prototype,{
	setModel: function(model) {
		var oldModel = this.getModel();
		if(oldModel != null) oldModel.removeStateListener($bind(this,this.__modelStateChanged));
		this.model = model;
		if(model != null) model.addStateListener($bind(this,this.__modelStateChanged));
		this.repaint();
	}
	,getModel: function() {
		return this.model;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,append: function(com,constraints) {
		this.insert(-1,com,constraints);
	}
	,insert: function(i,com,constraints) {
		this.insertImp(i,com,constraints);
	}
	,insertImp: function(i,com,constraints) {
		var title = null;
		var icon = null;
		if(constraints == null) title = com.getName(); else if(typeof(constraints) == "string") if(typeof(constraints) == "string") title = constraints; else title = null; else if(js.Boot.__instanceof(constraints,org.aswing.Icon)) if(js.Boot.__instanceof(constraints,org.aswing.Icon)) icon = constraints; else icon = null; else title = constraints.toString();
		this.insertTab(i,com,title,icon,null);
	}
	,appendTab: function(com,title,icon,tip) {
		if(title == null) title = "";
		this.insertTab(-1,com,title,icon,tip);
	}
	,insertTab: function(i,com,title,icon,tip) {
		if(title == null) title = "";
		if(i > this.getComponentCount()) throw new org.aswing.error.Error("illegal component position when insert comp to container");
		if(i < 0) i = this.getComponentCount();
		this.insertProperties(i,title,icon,tip);
		var currentSelectedIndex = this.getSelectedIndex();
		var selectedIndexAfterRemove = currentSelectedIndex;
		if(i <= currentSelectedIndex) selectedIndexAfterRemove = currentSelectedIndex + 1; else if(currentSelectedIndex < 0) selectedIndexAfterRemove = i;
		org.aswing.Container.prototype.insertImp.call(this,i,com);
		this.getModel().setSelectedIndex(selectedIndexAfterRemove);
	}
	,insertProperties: function(i,title,icon,tip) {
		if(title == null) title = "";
		this.insertToArray(this.titles,i,title);
		this.insertToArray(this.icons,i,icon);
		this.insertToArray(this.tips,i,tip);
		this.insertToArray(this.enables,i,true);
		this.insertToArray(this.visibles,i,true);
	}
	,removeAtImp: function(i) {
		return this.removeTabAt(i);
	}
	,removeTabAt: function(i) {
		if(i >= this.getComponentCount() || this.getComponentCount() < 0) return null;
		this.removeProperties(i);
		var currentSelectedIndex = this.getSelectedIndex();
		var selectedIndexAfterRemove = currentSelectedIndex;
		if(i == currentSelectedIndex) selectedIndexAfterRemove = -1; else if(i < currentSelectedIndex) selectedIndexAfterRemove = currentSelectedIndex - 1;
		var rc = org.aswing.Container.prototype.removeAtImp.call(this,i);
		rc.setVisible(true);
		if(selectedIndexAfterRemove < 0) this.getModel().clearSelection(); else this.getModel().setSelectedIndex(selectedIndexAfterRemove);
		return rc;
	}
	,removeProperties: function(i) {
		this.removeFromArray(this.titles,i);
		this.removeFromArray(this.icons,i);
		this.removeFromArray(this.tips,i);
		this.removeFromArray(this.enables,i);
		this.removeFromArray(this.visibles,i);
	}
	,setEnabledAt: function(index,enabled) {
		if(this.enables[index] != enabled) {
			this.enables[index] = enabled;
			this.revalidate();
			this.repaint();
		}
	}
	,isEnabledAt: function(index) {
		return this.enables[index] == true;
	}
	,setVisibleAt: function(index,visible) {
		if(this.visibles[index] != visible) {
			this.visibles[index] = visible;
			this.revalidate();
			this.repaint();
		}
	}
	,isVisibleAt: function(index) {
		return this.visibles[index] == true;
	}
	,remove: function(com) {
		var index = this.getIndex(com);
		if(index >= 0) return this.removeAt(index);
		return null;
	}
	,removeAt: function(index) {
		return this.removeAtImp(index);
	}
	,removeAll: function() {
		while(this.children.length > 0) this.removeAt(this.children.length - 1);
	}
	,getTabCount: function() {
		return this.getComponentCount();
	}
	,getTitleAt: function(i) {
		return this.titles[i];
	}
	,getIconAt: function(i) {
		return org.aswing.AsWingUtils["as"](this.icons[i],org.aswing.Icon);
	}
	,getTipAt: function(i) {
		return this.tips[i];
	}
	,setTitleAt: function(i,t) {
		if(i < 0 || i >= this.getComponentCount()) return;
		if(this.titles[i] != t) {
			this.titles[i] = t;
			this.revalidate();
			this.repaint();
		}
	}
	,setIconAt: function(i,icon) {
		if(i < 0 || i >= this.getComponentCount()) return;
		if(this.icons[i] != icon) {
			this.icons[i] = icon;
			this.revalidate();
			this.repaint();
		}
	}
	,setTipAt: function(i,t) {
		if(i < 0 || i >= this.getComponentCount()) return;
		if(this.tips[i] != t) {
			this.tips[i] = t;
			this.revalidate();
			this.repaint();
		}
	}
	,indexOfTitle: function(title) {
		return org.aswing.util.ArrayUtils.indexInArray(this.titles,title);
	}
	,indexOfIcon: function(icon) {
		return org.aswing.util.ArrayUtils.indexInArray(this.icons,icon);
	}
	,indexOfTip: function(tip) {
		return org.aswing.util.ArrayUtils.indexInArray(this.tips,tip);
	}
	,setSelectedIndex: function(i,programmatic) {
		if(programmatic == null) programmatic = true;
		if(i >= -1 && i < this.getComponentCount()) this.getModel().setSelectedIndex(i,programmatic);
	}
	,setSelectedComponent: function(com,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectedIndex(this.getIndex(com),programmatic);
	}
	,getSelectedIndex: function() {
		return this.getModel().getSelectedIndex();
	}
	,getSelectedComponent: function() {
		var index = this.getModel().getSelectedIndex();
		if(index >= 0) return this.getComponent(index);
		return null;
	}
	,getVerticalAlignment: function() {
		return this.verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this.verticalAlignment) return; else {
			this.verticalAlignment = alignment;
			this.revalidate();
			this.repaint();
		}
	}
	,getHorizontalAlignment: function() {
		return this.horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this.horizontalAlignment) return; else {
			this.horizontalAlignment = alignment;
			this.revalidate();
			this.repaint();
		}
	}
	,getVerticalTextPosition: function() {
		return this.verticalTextPosition;
	}
	,setVerticalTextPosition: function(textPosition) {
		if(textPosition == this.verticalTextPosition) return; else {
			this.verticalTextPosition = textPosition;
			this.revalidate();
			this.repaint();
		}
	}
	,getHorizontalTextPosition: function() {
		return this.horizontalTextPosition;
	}
	,setHorizontalTextPosition: function(textPosition) {
		if(textPosition == this.horizontalTextPosition) return; else {
			this.horizontalTextPosition = textPosition;
			this.revalidate();
			this.repaint();
		}
	}
	,getIconTextGap: function() {
		return this.iconTextGap;
	}
	,setIconTextGap: function(iconTextGap) {
		var oldValue = this.iconTextGap;
		this.iconTextGap = iconTextGap;
		if(iconTextGap != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,setMargin: function(m) {
		if(m != null && !m.equals(this.margin)) {
			this.margin = m;
			this.revalidate();
			this.repaint();
		}
	}
	,getMargin: function() {
		if(this.margin == null) return new org.aswing.plaf.InsetsUIResource(); else if(js.Boot.__instanceof(this.margin,org.aswing.plaf.UIResource)) return new org.aswing.plaf.InsetsUIResource(this.margin.top,this.margin.left,this.margin.bottom,this.margin.right); else return new org.aswing.Insets(this.margin.top,this.margin.left,this.margin.bottom,this.margin.right);
	}
	,__modelStateChanged: function(e) {
		this.fireStateChanged(e.isProgrammatic());
	}
	,fireStateChanged: function(programmatic) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,insertToArray: function(arr,i,obj) {
		if(i < 0) arr.push(obj); else {
			var x = obj;
			arr.splice(i,0,x);
		}
	}
	,removeFromArray: function(arr,i) {
		if(i < 0) arr.pop(); else arr.splice(i,1);
	}
	,__class__: org.aswing.AbstractTabbedPane
});
org.aswing.AsWingConstants = function() { };
$hxClasses["org.aswing.AsWingConstants"] = org.aswing.AsWingConstants;
org.aswing.AsWingConstants.__name__ = ["org","aswing","AsWingConstants"];
org.aswing.AsWingManager = function() { };
$hxClasses["org.aswing.AsWingManager"] = org.aswing.AsWingManager;
org.aswing.AsWingManager.__name__ = ["org","aswing","AsWingManager"];
org.aswing.AsWingManager.setRoot = function(root) {
	org.aswing.AsWingManager.ROOT = root;
	if(root != null && org.aswing.AsWingManager.stage == null && root.get_stage() != null) org.aswing.AsWingManager.initStage(root.get_stage());
};
org.aswing.AsWingManager.initAsStandard = function(root,_preventNullFocus,workWithFlex) {
	if(workWithFlex == null) workWithFlex = false;
	if(_preventNullFocus == null) _preventNullFocus = true;
	org.aswing.AsWingManager.setRoot(root);
	if(org.aswing.AsWingManager.stage != null) {
		org.aswing.AsWingManager.stage.align = openfl.display.StageAlign.TOP_LEFT;
		org.aswing.AsWingManager.stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
		org.aswing.AsWingManager.stage.stageFocusRect = false;
	}
	org.aswing.AsWingManager.preventNullFocus = _preventNullFocus;
	org.aswing.RepaintManager.getInstance().setAlwaysUseTimer(workWithFlex);
	org.aswing.AsWingUtils.initAsStandard();
};
org.aswing.AsWingManager.setPreventNullFocus = function(prevent) {
	org.aswing.AsWingManager.preventNullFocus = prevent;
};
org.aswing.AsWingManager.isPreventNullFocus = function() {
	return org.aswing.AsWingManager.preventNullFocus;
};
org.aswing.AsWingManager.setInitialStageSize = function(width,height) {
	org.aswing.AsWingManager.INITIAL_STAGE_WIDTH = width;
	org.aswing.AsWingManager.INITIAL_STAGE_HEIGHT = height;
};
org.aswing.AsWingManager.getInitialStageSize = function() {
	if(org.aswing.AsWingManager.ROOT == null) throw new org.aswing.error.AsWingManagerNotInited();
	return new org.aswing.geom.IntDimension(org.aswing.AsWingManager.INITIAL_STAGE_WIDTH,org.aswing.AsWingManager.INITIAL_STAGE_HEIGHT);
};
org.aswing.AsWingManager.getRoot = function(checkError) {
	if(checkError == null) checkError = true;
	return org.aswing.AsWingManager.ROOT;
};
org.aswing.AsWingManager.initStage = function(theStage) {
	if(org.aswing.AsWingManager.stage == null) {
		org.aswing.AsWingManager.stage = theStage;
		org.aswing.AsWingManager.INITIAL_STAGE_WIDTH = Std["int"](org.aswing.AsWingManager.stage.get_stageWidth());
		org.aswing.AsWingManager.INITIAL_STAGE_HEIGHT = Std["int"](org.aswing.AsWingManager.stage.get_stageHeight());
	}
};
org.aswing.AsWingManager.isStageInited = function() {
	return org.aswing.AsWingManager.stage != null;
};
org.aswing.AsWingManager.getStage = function(checkError) {
	if(checkError == null) checkError = true;
	if(checkError && org.aswing.AsWingManager.stage == null) throw new org.aswing.error.AsWingManagerNotInited();
	return org.aswing.AsWingManager.stage;
};
org.aswing.AsWingManager.updateAfterMilliseconds = function(delay) {
	if(delay == null) delay = 20;
	if(org.aswing.AsWingManager.timer == null) {
		org.aswing.AsWingManager.timer = new org.aswing.util.Timer(delay,0);
		org.aswing.AsWingManager.timer.addEventListener("act",org.aswing.AsWingManager.__update);
	}
	if(org.aswing.AsWingManager.timer.isRunning() != true) org.aswing.AsWingManager.timer.restart();
};
org.aswing.AsWingManager.callNextFrame = function(func) {
	if(org.aswing.AsWingManager.frameTrigger == null) {
		org.aswing.AsWingManager.frameTrigger = new openfl.display.Sprite();
		org.aswing.AsWingManager.frameTrigger.addEventListener(openfl.events.Event.ENTER_FRAME,org.aswing.AsWingManager.__enterFrame);
	}
	org.aswing.AsWingManager.nextFrameCalls.push(func);
};
org.aswing.AsWingManager.callLater = function(func,time) {
	if(time == null) time = 40;
	var timer = new org.aswing.util.Timer(time,0);
	timer.addEventListener("act",function(e) {
		func();
	});
	timer.start();
};
org.aswing.AsWingManager.__update = function(e) {
};
org.aswing.AsWingManager.__enterFrame = function(e) {
	var calls = org.aswing.AsWingManager.nextFrameCalls;
	org.aswing.AsWingManager.nextFrameCalls = new Array();
	var _g1 = 0;
	var _g = calls.length;
	while(_g1 < _g) {
		var i = _g1++;
		var func = calls[i];
		func();
	}
};
org.aswing.AsWingUtils = function() { };
$hxClasses["org.aswing.AsWingUtils"] = org.aswing.AsWingUtils;
org.aswing.AsWingUtils.__name__ = ["org","aswing","AsWingUtils"];
org.aswing.AsWingUtils["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
org.aswing.AsWingUtils.initAsStandard = function() {
	org.aswing.AsWingUtils.TEXT_FIELD.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
	org.aswing.AsWingUtils.TEXT_FIELD.set_type(openfl.text.TextFieldType.DYNAMIC);
};
org.aswing.AsWingUtils.createSprite = function(parent,name) {
	var sp = new openfl.display.Sprite();
	if(name != null) sp.name = name;
	sp.mouseEnabled = false;
	if(parent != null) parent.addChild(sp);
	return sp;
};
org.aswing.AsWingUtils.createLabel = function(parent,name) {
	var textField = new openfl.text.TextField();
	if(name != null) textField.name = name;
	textField.selectable = false;
	textField.mouseEnabled = false;
	textField.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
	if(parent != null) parent.addChild(textField);
	return textField;
};
org.aswing.AsWingUtils.createShape = function(parent,name) {
	var sp = new openfl.display.Shape();
	if(name != null) sp.name = name;
	if(parent != null) parent.addChild(sp);
	return sp;
};
org.aswing.AsWingUtils.isDisplayObjectShowing = function(dis) {
	if(dis == null || dis.get_stage() == null) return false;
	while(dis != null && dis.get_visible() == true) {
		if(dis == dis.get_stage()) return true;
		dis = dis.parent;
	}
	return false;
};
org.aswing.AsWingUtils.isAncestor = function(ancestor,child) {
	if(ancestor == null || child == null) return false;
	var pa = child.parent;
	while(pa != null) {
		if(pa == ancestor) return true;
		pa = pa.parent;
	}
	return false;
};
org.aswing.AsWingUtils.isAncestorComponent = function(ancestor,child) {
	if(ancestor == null || child == null || !js.Boot.__instanceof(ancestor,org.aswing.Container)) return false;
	var pa = child.getParent();
	while(pa != null) {
		if(pa == ancestor) return true;
		pa = pa.getParent();
	}
	return false;
};
org.aswing.AsWingUtils.isAncestorDisplayObject = function(ancestor,child) {
	if(ancestor == null || child == null) return false;
	var pa = child.parent;
	while(pa != null) {
		if(pa == ancestor) return true;
		pa = pa.parent;
	}
	return false;
};
org.aswing.AsWingUtils.getStageMousePosition = function(stage) {
	if(stage == null) stage = org.aswing.AsWingManager.getStage();
	return new org.aswing.geom.IntPoint(Std["int"](org.aswing.AsWingManager.getStage().get_mouseX()),Std["int"](org.aswing.AsWingManager.getStage().get_mouseY()));
};
org.aswing.AsWingUtils.getScreenCenterPosition = function() {
	var r = org.aswing.AsWingUtils.getVisibleMaximizedBounds();
	return new org.aswing.geom.IntPoint(r.x + r.width / 2 | 0,r.y + r.height / 2 | 0);
};
org.aswing.AsWingUtils.centerLocate = function(popup) {
	var p = org.aswing.AsWingUtils.getScreenCenterPosition();
	p.x = Math.round(p.x - popup.getWidth() / 2);
	p.y = Math.round(p.y - popup.getHeight() / 2);
	popup.setLocation(p);
};
org.aswing.AsWingUtils.getVisibleMaximizedBounds = function(dis) {
	var stage;
	if(dis == null) stage = null; else stage = dis.get_stage();
	if(stage == null) stage = org.aswing.AsWingManager.getStage();
	if(stage == null) return new org.aswing.geom.IntRectangle(200,200);
	if(org.aswing.AsWingManager.getStage().scaleMode != openfl.display.StageScaleMode.NO_SCALE) return new org.aswing.geom.IntRectangle(0,0,Std["int"](org.aswing.AsWingManager.getStage().get_stageWidth()),Std["int"](org.aswing.AsWingManager.getStage().get_stageHeight()));
	var sw = org.aswing.AsWingManager.getStage().get_stageWidth();
	var sh = org.aswing.AsWingManager.getStage().get_stageHeight();
	var b = new org.aswing.geom.IntRectangle(0,0,sw | 0,sh | 0);
	if(dis != null) {
		var p = dis.globalToLocal(new openfl.geom.Point(0,0));
		b.setLocation(new org.aswing.geom.IntPoint(p.x | 0,p.y | 0));
	}
	return b;
};
org.aswing.AsWingUtils.applyTextFontAndColor = function(text,font,color) {
	org.aswing.AsWingUtils.applyTextFont(text,font);
	org.aswing.AsWingUtils.applyTextColor(text,color);
};
org.aswing.AsWingUtils.applyTextFont = function(text,font) {
	font.apply(text);
};
org.aswing.AsWingUtils.applyTextFormat = function(text,textFormat) {
	text.setTextFormat(textFormat);
};
org.aswing.AsWingUtils.applyTextColor = function(text,color) {
	if(Std["int"](text.get_textColor()) != color.getRGB()) text.set_textColor(color.getRGB());
	if(text.alpha != color.getAlpha()) text.set_alpha(color.getAlpha());
};
org.aswing.AsWingUtils.layoutCompoundLabel = function(c,f,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewR,iconR,textR,textIconGap) {
	if(icon != null) {
		iconR.width = icon.getIconWidth(c);
		iconR.height = icon.getIconHeight(c);
	} else iconR.width = iconR.height = 0;
	var textIsEmpty = text == null || text == "";
	if(textIsEmpty) textR.width = textR.height = 0; else {
		var textS = org.aswing.AsWingUtils.inter_computeStringSize(f,text);
		textR.width = textS.width;
		textR.height = textS.height;
	}
	var gap;
	if(textIsEmpty || icon == null) gap = 0; else gap = textIconGap;
	if(textIsEmpty != true) {
		var availTextWidth;
		if(horizontalTextPosition == 0) availTextWidth = viewR.width; else availTextWidth = viewR.width - (iconR.width + gap);
		if(textR.width > availTextWidth) text = org.aswing.AsWingUtils.layoutTextWidth(text,textR,availTextWidth,f);
	}
	if(verticalTextPosition == 1) {
		if(horizontalTextPosition != 0) textR.y = 0; else textR.y = -(textR.height + gap | 0);
	} else if(verticalTextPosition == 0) textR.y = iconR.height / 2 - textR.height / 2 | 0; else if(horizontalTextPosition != 0) textR.y = iconR.height - textR.height | 0; else textR.y = iconR.height + gap | 0;
	if(horizontalTextPosition == 2) textR.x = -(textR.width + gap | 0); else if(horizontalTextPosition == 0) textR.x = iconR.width / 2 - textR.width / 2 | 0; else textR.x = iconR.width + gap | 0;
	var labelR_x = Math.min(iconR.x,textR.x);
	var labelR_width = Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;
	var labelR_y = Math.min(iconR.y,textR.y);
	var labelR_height = Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;
	var dx = 0;
	var dy = 0;
	if(verticalAlignment == 1) dy = viewR.y - labelR_y; else if(verticalAlignment == 0) dy = viewR.y + viewR.height / 2 - (labelR_y + labelR_height / 2); else dy = viewR.y + viewR.height - (labelR_y + labelR_height);
	if(horizontalAlignment == 2) dx = viewR.x - labelR_x; else if(horizontalAlignment == 4) dx = viewR.x + viewR.width - (labelR_x + labelR_width); else dx = viewR.x + viewR.width / 2 - (labelR_x + labelR_width / 2);
	textR.x += dx | 0;
	textR.y += dy | 0;
	iconR.x += dx | 0;
	iconR.y += dy | 0;
	return text;
};
org.aswing.AsWingUtils.layoutCompoundMultilineLabel = function(c,f,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewR,iconR,textR,textIconGap) {
	if(icon != null) {
		iconR.width = icon.getIconWidth(c);
		iconR.height = icon.getIconHeight(c);
	} else iconR.width = iconR.height = 0;
	var textIsEmpty = text == null || text == "";
	if(textIsEmpty) textR.width = textR.height = 0; else {
		var textS = org.aswing.AsWingUtils.inter_computeStringSize(f,text);
		textR.width = textS.width;
		textR.height = textS.height;
	}
	var gap;
	if(textIsEmpty || icon == null) gap = 0; else gap = textIconGap;
	if(textIsEmpty != true) {
		var availTextWidth;
		var availTextHeight;
		if(horizontalTextPosition == 0) {
			availTextWidth = viewR.width;
			availTextHeight = viewR.height - (iconR.height + gap);
		} else {
			availTextWidth = viewR.width - (iconR.width + gap);
			availTextHeight = viewR.height;
		}
		textR.width = Math.ceil(availTextWidth);
		textR.height = Math.ceil(availTextHeight);
		text = org.aswing.AsWingUtils.layoutTextByRectangle(text,textR,f);
	}
	if(verticalTextPosition == 1) {
		if(horizontalTextPosition != 0) textR.y = 0; else textR.y = -(textR.height + gap | 0);
	} else if(verticalTextPosition == 0) textR.y = iconR.height / 2 - textR.height / 2 | 0; else if(horizontalTextPosition != 0) textR.y = iconR.height - textR.height | 0; else textR.y = iconR.height + gap | 0;
	if(horizontalTextPosition == 2) textR.x = -(textR.width + gap | 0); else if(horizontalTextPosition == 0) textR.x = iconR.width / 2 - textR.width / 2 | 0; else textR.x = iconR.width + gap | 0;
	var labelR_x = Math.min(iconR.x,textR.x);
	var labelR_width = Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;
	var labelR_y = Math.min(iconR.y,textR.y);
	var labelR_height = Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;
	var dx = 0;
	var dy = 0;
	if(verticalAlignment == 1) dy = viewR.y - labelR_y; else if(verticalAlignment == 0) dy = viewR.y + viewR.height / 2 - (labelR_y + labelR_height / 2); else dy = viewR.y + viewR.height - (labelR_y + labelR_height);
	if(horizontalAlignment == 2) dx = viewR.x - labelR_x; else if(horizontalAlignment == 4) dx = viewR.x + viewR.width - (labelR_x + labelR_width); else dx = viewR.x + viewR.width / 2 - (labelR_x + labelR_width / 2);
	textR.x += dx | 0;
	textR.y += dy | 0;
	iconR.x += dx | 0;
	iconR.y += dy | 0;
	return text;
};
org.aswing.AsWingUtils.inter_computeStringSize = function(font,str) {
	if(null == org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL) {
		org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL = new openfl.text.TextField();
		org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
		org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL.set_type(openfl.text.TextFieldType.DYNAMIC);
	}
	org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL.set_text(str);
	font.apply(org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL);
	return new org.aswing.geom.IntDimension(Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL.get_width()),Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_INTERNAL.get_height()));
};
org.aswing.AsWingUtils.inter_computeStringWidth = function(font,str) {
	org.aswing.AsWingUtils.TEXT_FIELD.set_text(str);
	return org.aswing.AsWingUtils.TEXT_FIELD.get_textWidth();
};
org.aswing.AsWingUtils.computeStringSize = function(tf,str,includeGutters,textField) {
	if(includeGutters == null) includeGutters = true;
	if(null == org.aswing.AsWingUtils.TEXT_FIELD_EXT) {
		org.aswing.AsWingUtils.TEXT_FIELD_EXT = new openfl.text.TextField();
		org.aswing.AsWingUtils.TEXT_FIELD_EXT.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
		org.aswing.AsWingUtils.TEXT_FIELD_EXT.set_type(openfl.text.TextFieldType.DYNAMIC);
	}
	org.aswing.AsWingUtils.TEXT_FIELD_EXT.set_text(str);
	if(includeGutters) return new org.aswing.geom.IntDimension(Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_textWidth()),Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_textHeight())); else return new org.aswing.geom.IntDimension(Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_textWidth()),Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_textHeight()));
};
org.aswing.AsWingUtils.computeStringSizeWithFont = function(font,str,includeGutters) {
	if(includeGutters == null) includeGutters = true;
	if(null == org.aswing.AsWingUtils.TEXT_FIELD_EXT) {
		org.aswing.AsWingUtils.TEXT_FIELD_EXT = new openfl.text.TextField();
		org.aswing.AsWingUtils.TEXT_FIELD_EXT.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
		org.aswing.AsWingUtils.TEXT_FIELD_EXT.set_type(openfl.text.TextFieldType.DYNAMIC);
	}
	org.aswing.AsWingUtils.TEXT_FIELD_EXT.set_text(str);
	font.apply(org.aswing.AsWingUtils.TEXT_FIELD_EXT);
	if(includeGutters) return new org.aswing.geom.IntDimension(Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_width()),Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_height())); else return new org.aswing.geom.IntDimension(Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_textWidth()),Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_EXT.get_textHeight()));
};
org.aswing.AsWingUtils.computeMultilineStringHeightWithFont = function(font,str,width,includeGutters) {
	if(includeGutters == null) includeGutters = true;
	if(null == org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE) {
		org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE = new openfl.text.TextField();
		org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
		org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.set_type(openfl.text.TextFieldType.DYNAMIC);
		org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.set_wordWrap(true);
		org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.multiline = true;
	}
	org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.set_text(str);
	org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.set_width(width);
	font.apply(org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE);
	if(includeGutters) return Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.get_height()); else return Math.ceil(org.aswing.AsWingUtils.TEXT_FIELD_MULTILINE.get_textHeight());
};
org.aswing.AsWingUtils.layoutTextWidth = function(text,textR,availTextWidth,font) {
	if(textR.width <= availTextWidth) return text;
	var clipString = "...";
	var totalWidth = Math.round(org.aswing.AsWingUtils.inter_computeStringWidth(font,clipString));
	if(totalWidth > availTextWidth) {
		totalWidth = Math.round(org.aswing.AsWingUtils.inter_computeStringWidth(font,".."));
		if(totalWidth > availTextWidth) {
			text = ".";
			textR.width = Math.round(org.aswing.AsWingUtils.inter_computeStringWidth(font,"."));
			if(textR.width > availTextWidth) {
				textR.width = 0;
				text = "";
			}
		} else {
			text = "..";
			textR.width = totalWidth;
		}
		return text;
	} else {
		var lastWidth = totalWidth;
		var num = text.length;
		var li = 0;
		var ri = num;
		while(li < ri) {
			var i = li + (ri - li) / 2 | 0;
			var subText = HxOverrides.substr(text,0,i);
			var length = Std["int"](Math.ceil(lastWidth + org.aswing.AsWingUtils.inter_computeStringWidth(font,subText)));
			if(li == i - 1 && li > 0) {
				if(length > availTextWidth) {
					subText = HxOverrides.substr(text,0,li);
					textR.width = Std["int"](Math.ceil(lastWidth + org.aswing.AsWingUtils.inter_computeStringWidth(font,HxOverrides.substr(text,0,li))));
				} else textR.width = length | 0;
				return subText + clipString;
			} else if(i <= 1) {
				if(length <= availTextWidth) {
					textR.width = length;
					return subText + clipString;
				} else {
					textR.width = lastWidth | 0;
					return clipString;
				}
			}
			if(length < availTextWidth) li = i; else if(length > availTextWidth) ri = i; else {
				text = subText + clipString;
				textR.width = length;
				return text;
			}
		}
		textR.width = lastWidth | 0;
		return "";
	}
};
org.aswing.AsWingUtils.layoutTextByRectangle = function(text,textR,font) {
	var w = textR.width;
	var h = org.aswing.AsWingUtils.computeMultilineStringHeightWithFont(font,text,w);
	if(h < textR.height) textR.height = h;
	var l = 0;
	var r = w;
	while(l < r) {
		w = Math.ceil((l + r) / 2);
		if(org.aswing.AsWingUtils.computeMultilineStringHeightWithFont(font,text,w) > h) l = w + 1; else r = w - 1;
	}
	while(org.aswing.AsWingUtils.computeMultilineStringHeightWithFont(font,text,w) > h) w += 2;
	if(w < h) w = h;
	if(w < textR.width) textR.width = w;
	return text;
};
org.aswing.AsWingUtils.layoutText = function(f,text,verticalAlignment,horizontalAlignment,viewR,textR) {
	var textFieldSize = org.aswing.AsWingUtils.inter_computeStringSize(f,text);
	var textIsEmpty = text == null || text == "";
	if(textIsEmpty) textR.width = textR.height = 0; else {
		textR.width = Math.ceil(textFieldSize.width);
		textR.height = Math.ceil(textFieldSize.height);
	}
	if(textIsEmpty != true) {
		var availTextWidth = viewR.width;
		if(textR.width > availTextWidth) text = org.aswing.AsWingUtils.layoutTextWidth(text,textR,availTextWidth,f);
	}
	if(horizontalAlignment == 0) textR.x = viewR.x + (viewR.width - textR.width) / 2 | 0; else if(horizontalAlignment == 4) textR.x = viewR.x + (viewR.width - textR.width) | 0; else textR.x = viewR.x;
	if(verticalAlignment == 0) textR.y = viewR.y + (viewR.height - textR.height) / 2 | 0; else if(verticalAlignment == 3) textR.y = viewR.y + (viewR.height - textR.height) | 0; else textR.y = viewR.y;
	return text;
};
org.aswing.AsWingUtils.createPaneToHold = function(com,layout,constraints) {
	var p = new org.aswing.JPanel(layout);
	p.setOpaque(false);
	p.append(com,constraints);
	return p;
};
org.aswing.AsWingUtils.getPopupAncestor = function(c) {
	while(c != null) {
		if(js.Boot.__instanceof(c,org.aswing.JPopup)) if(js.Boot.__instanceof(c,org.aswing.JPopup)) return c; else return null;
		c = c.getParent();
	}
	return null;
};
org.aswing.AsWingUtils.getOwnerAncestor = function(c) {
	if(c == null) return null;
	var popup = org.aswing.AsWingUtils.getPopupAncestor(c);
	if(popup == null) return org.aswing.AsWingManager.getRoot();
	return popup;
};
org.aswing.AsWingUtils.getOwnerComponent = function(dis) {
	while(dis != null && !js.Boot.__instanceof(dis,org.aswing.Component)) dis = dis.parent;
	if(js.Boot.__instanceof(dis,org.aswing.Component)) return dis; else return null;
};
org.aswing.AsWingUtils.updateAllComponentUIInMemory = function() {
};
org.aswing.AsWingUtils.updateAllComponentUI = function(stage) {
	if(stage == null) stage = org.aswing.AsWingManager.getStage();
	if(org.aswing.AsWingManager.isStageInited()) org.aswing.AsWingUtils.updateChildrenUI(stage);
};
org.aswing.AsWingUtils.updateComponentTreeUI = function(c) {
	org.aswing.AsWingUtils.updateChildrenUI(org.aswing.AsWingUtils.getOwnerAncestor(c));
};
org.aswing.AsWingUtils.updateChildrenUI = function(dis) {
	if(dis == null) return;
	var c;
	if(js.Boot.__instanceof(dis,org.aswing.Component)) c = dis; else c = null;
	if(c != null) {
		if(c.isUIElement()) return;
		c.updateUI();
	}
	if(js.Boot.__instanceof(dis,openfl.display.DisplayObjectContainer)) {
		var con;
		if(js.Boot.__instanceof(dis,openfl.display.DisplayObjectContainer)) con = dis; else con = null;
		var _g1 = 0;
		var _g = con.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			org.aswing.AsWingUtils.updateChildrenUI(con.getChildAt(i));
		}
	}
};
org.aswing.GroundDecorator = function() { };
$hxClasses["org.aswing.GroundDecorator"] = org.aswing.GroundDecorator;
org.aswing.GroundDecorator.__name__ = ["org","aswing","GroundDecorator"];
org.aswing.GroundDecorator.__interfaces__ = [org.aswing.Decorator];
org.aswing.GroundDecorator.prototype = {
	__class__: org.aswing.GroundDecorator
};
org.aswing.AssetBackground = function(asset) {
	this.asset = asset;
};
$hxClasses["org.aswing.AssetBackground"] = org.aswing.AssetBackground;
org.aswing.AssetBackground.__name__ = ["org","aswing","AssetBackground"];
org.aswing.AssetBackground.__interfaces__ = [org.aswing.GroundDecorator];
org.aswing.AssetBackground.prototype = {
	updateDecorator: function(com,g,bounds) {
		this.asset.set_x(bounds.x);
		this.asset.set_y(bounds.y);
		this.asset.set_width(bounds.width);
		this.asset.set_height(bounds.height);
	}
	,getDisplay: function(c) {
		return this.asset;
	}
	,__class__: org.aswing.AssetBackground
};
org.aswing.AssetPane = function(asset,prefferSizeStrategy) {
	if(prefferSizeStrategy == null) prefferSizeStrategy = 1;
	org.aswing.Container.call(this);
	this.prefferSizeStrategy = prefferSizeStrategy;
	this.verticalAlignment = 1;
	this.horizontalAlignment = 2;
	this.scaleMode = 0;
	this.actualScale = 100;
	this.customScale = 100;
	this.hadscaled = false;
	this.maskFloor = true;
	this.floorOriginalSize = null;
	this.assetVisible = true;
	this.floorLoaded = false;
	this.offsetX = 0;
	this.offsetY = 0;
	this.floorOriginalScaleX = 1;
	this.floorOriginalScaleY = 1;
	this.setFocusable(false);
	this.assetContainer = org.aswing.AsWingUtils.createSprite(this,"assetContainer");
	this.assetMask = org.aswing.AsWingUtils.createShape(this,"assetMask");
	this.assetMask.get_graphics().beginFill(16777215);
	this.assetMask.get_graphics().drawRect(0,0,1,1);
	this.assetMask.set_visible(false);
	this.setAsset(asset);
};
$hxClasses["org.aswing.AssetPane"] = org.aswing.AssetPane;
org.aswing.AssetPane.__name__ = ["org","aswing","AssetPane"];
org.aswing.AssetPane.__super__ = org.aswing.Container;
org.aswing.AssetPane.prototype = $extend(org.aswing.Container.prototype,{
	setAsset: function(asset) {
		if(this.asset != asset) {
			if(this.asset != null) {
				if(this.asset.parent == this.assetContainer) this.assetContainer.removeChild(this.asset);
			}
			this.asset = asset;
			if(asset != null) {
				this.storeOriginalScale();
				this.assetContainer.addChild(asset);
			}
			this.setLoaded(asset != null);
			this.resetAsset();
		}
	}
	,unloadAsset: function() {
		this.setAsset(null);
	}
	,storeOriginalScale: function() {
		if(this.asset != null) {
			this.floorOriginalScaleX = this.asset.get_scaleX();
			this.floorOriginalScaleY = this.asset.get_scaleY();
		}
	}
	,resetAsset: function() {
		if(this.asset != null) {
			this.asset.set_scaleX(this.floorOriginalScaleX);
			this.asset.set_scaleY(this.floorOriginalScaleY);
			this.setAssetOriginalSize(new org.aswing.geom.IntDimension(Std["int"](this.asset.get_width()),Std["int"](this.asset.get_height())));
			this.asset.set_visible(this.assetVisible);
		}
		this.revalidate();
	}
	,getAsset: function() {
		return this.asset;
	}
	,setPrefferSizeStrategy: function(p) {
		this.prefferSizeStrategy = p | 0;
	}
	,getPrefferSizeStrategy: function() {
		return this.prefferSizeStrategy;
	}
	,getVerticalAlignment: function() {
		return this.verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == null) alignment = 0;
		if(alignment == this.verticalAlignment) return; else {
			this.verticalAlignment = alignment;
			this.revalidate();
		}
	}
	,getHorizontalAlignment: function() {
		return this.horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == null) alignment = 4;
		if(alignment == this.horizontalAlignment) return; else {
			this.horizontalAlignment = alignment;
			this.revalidate();
		}
	}
	,setScaleMode: function(mode) {
		if(this.scaleMode != mode) {
			this.scaleMode = mode;
			this.revalidate();
		}
	}
	,getScaleMode: function() {
		return this.scaleMode;
	}
	,setCustomScale: function(scale) {
		this.setScaleMode(5);
		if(this.customScale != scale) {
			this.customScale = scale;
			this.revalidate();
		}
	}
	,getActualScale: function() {
		return this.actualScale;
	}
	,getCustomScale: function() {
		return this.customScale;
	}
	,setOffsetX: function(offset) {
		if(this.offsetX != offset) {
			this.offsetX = offset;
			this.revalidate();
		}
	}
	,setOffsetY: function(offset) {
		if(this.offsetY != offset) {
			this.offsetY = offset;
			this.revalidate();
		}
	}
	,getOffsetX: function() {
		return this.offsetX;
	}
	,getOffsetY: function() {
		return this.offsetY;
	}
	,setAssetVisible: function(b) {
		this.assetVisible = b;
		if(this.asset != null) this.asset.set_visible(b);
	}
	,isAssetVisible: function() {
		return this.assetVisible;
	}
	,isLoaded: function() {
		return this.floorLoaded;
	}
	,getAssetOriginalSize: function() {
		if(this.isLoaded()) return this.floorOriginalSize; else return null;
	}
	,doLayout: function() {
		org.aswing.Container.prototype.doLayout.call(this);
		this.fitImage();
	}
	,fitImage: function() {
		if(this.isLoaded()) {
			var floor = this.getAsset();
			var b = this.getPaintBounds();
			var s = this.countFloorSize();
			this.assetMask.set_x(b.x);
			this.assetMask.set_y(b.y);
			this.assetMask.set_width(b.width);
			this.assetMask.set_height(b.height);
			if(this.scaleMode == 2) {
				floor.set_x(b.x - this.offsetX);
				floor.set_y(b.y - this.offsetY);
				floor.set_width(s.width);
				floor.set_height(s.height);
				this.hadscaled = true;
			} else if(this.scaleMode == 1 || this.scaleMode == 3 || this.scaleMode == 4 || this.scaleMode == 5) {
				floor.set_width(s.width);
				floor.set_height(s.height);
				this.alignFloor();
				this.hadscaled = true;
			} else {
				if(this.hadscaled) {
					if(floor.get_width() != this.floorOriginalSize.width) floor.set_width(this.floorOriginalSize.width);
					if(floor.get_height() != this.floorOriginalSize.height) floor.set_height(this.floorOriginalSize.height);
					this.hadscaled = false;
				}
				this.alignFloor();
			}
			if(this.scaleMode != 2) this.actualScale = Math.floor(floor.get_width() / this.floorOriginalSize.width * 100); else this.actualScale = 0;
			this.setMaskAsset(this.maskFloor);
		}
	}
	,alignFloor: function(b) {
		var floorMC = this.getAsset();
		if(b == null) b = this.getPaintBounds();
		var mx;
		var my;
		if(this.horizontalAlignment == 0) mx = b.x + (b.width - floorMC.get_width()) / 2; else if(this.horizontalAlignment == 4) mx = b.x + (b.width - floorMC.get_width()); else mx = b.x;
		if(this.verticalAlignment == 0) my = b.y + (b.height - floorMC.get_height()) / 2; else if(this.verticalAlignment == 3) my = b.y + (b.height - floorMC.get_height()); else my = b.y;
		floorMC.set_x(mx - this.offsetX);
		floorMC.set_y(my - this.offsetY);
	}
	,countPreferredSize: function() {
		var size = org.aswing.Container.prototype.countPreferredSize.call(this);
		var sizeByMC;
		if(this.isLoaded()) {
			sizeByMC = this.countFloorSize();
			sizeByMC = this.getInsets().getOutsideSize(sizeByMC);
		} else sizeByMC = size;
		if(this.prefferSizeStrategy == 1) return sizeByMC; else if(this.prefferSizeStrategy == 2) return size; else return new org.aswing.geom.IntDimension(Std["int"](Math.max(sizeByMC.width,size.width)),Std["int"](Math.max(sizeByMC.height,size.height)));
	}
	,countFloorSize: function() {
		var b = this.getPaintBounds();
		var size = new org.aswing.geom.IntDimension();
		if(this.scaleMode == 2) {
			size.width = b.width;
			size.height = b.height;
		} else if(this.scaleMode == 1 || this.scaleMode == 3 || this.scaleMode == 4) {
			var hScale = this.floorOriginalSize.width / b.width;
			var vScale = this.floorOriginalSize.height / b.height;
			var scale = 1;
			if(this.scaleMode == 3) scale = hScale; else if(this.scaleMode == 4) scale = vScale; else scale = Math.max(hScale,vScale);
			size.width = this.floorOriginalSize.width / scale | 0;
			size.height = this.floorOriginalSize.height / scale | 0;
		} else if(this.scaleMode == 5) {
			size.width = this.floorOriginalSize.width * (this.customScale / 100) | 0;
			size.height = this.floorOriginalSize.height * (this.customScale / 100) | 0;
		} else {
			size.width = this.floorOriginalSize.width - this.offsetX | 0;
			size.height = this.floorOriginalSize.height - this.offsetY | 0;
		}
		return size;
	}
	,reload: function() {
		this.resetAsset();
	}
	,isMaskAsset: function() {
		return this.maskFloor;
	}
	,setMaskAsset: function(m) {
		this.maskFloor = m;
		this.applyMaskAsset();
	}
	,applyMaskAsset: function() {
		if(this.maskFloor) {
			this.assetMask.set_visible(true);
			this.assetContainer.set_mask(this.assetMask);
		} else {
			this.assetContainer.set_mask(null);
			this.assetMask.set_visible(false);
		}
	}
	,setLoaded: function(b) {
		this.floorLoaded = b;
	}
	,setAssetOriginalSize: function(size) {
		this.floorOriginalSize = new org.aswing.geom.IntDimension(size.width,size.height);
	}
	,loadFloor: function() {
	}
	,__class__: org.aswing.AssetPane
});
org.aswing.Border = function() { };
$hxClasses["org.aswing.Border"] = org.aswing.Border;
org.aswing.Border.__name__ = ["org","aswing","Border"];
org.aswing.Border.__interfaces__ = [org.aswing.Decorator];
org.aswing.Border.prototype = {
	__class__: org.aswing.Border
};
org.aswing.LayoutManager = function() { };
$hxClasses["org.aswing.LayoutManager"] = org.aswing.LayoutManager;
org.aswing.LayoutManager.__name__ = ["org","aswing","LayoutManager"];
org.aswing.LayoutManager.prototype = {
	__class__: org.aswing.LayoutManager
};
org.aswing.EmptyLayout = function() {
};
$hxClasses["org.aswing.EmptyLayout"] = org.aswing.EmptyLayout;
org.aswing.EmptyLayout.__name__ = ["org","aswing","EmptyLayout"];
org.aswing.EmptyLayout.__interfaces__ = [org.aswing.LayoutManager];
org.aswing.EmptyLayout.prototype = {
	addLayoutComponent: function(comp,constraints) {
	}
	,removeLayoutComponent: function(comp) {
	}
	,preferredLayoutSize: function(target) {
		return target.getSize();
	}
	,minimumLayoutSize: function(target) {
		return new org.aswing.geom.IntDimension(0,0);
	}
	,maximumLayoutSize: function(target) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,invalidateLayout: function(target) {
	}
	,__class__: org.aswing.EmptyLayout
};
org.aswing.BorderLayout = function(hgap,vgap) {
	if(vgap == null) vgap = 0;
	if(hgap == null) hgap = 0;
	this.hgap = hgap;
	this.vgap = vgap;
	this.defaultConstraints = "Center";
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.BorderLayout"] = org.aswing.BorderLayout;
org.aswing.BorderLayout.__name__ = ["org","aswing","BorderLayout"];
org.aswing.BorderLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.BorderLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	setDefaultConstraints: function(constraints) {
		this.defaultConstraints = constraints.toString();
	}
	,getHgap: function() {
		return this.hgap;
	}
	,setHgap: function(hgap) {
		this.hgap = hgap;
	}
	,getVgap: function() {
		return this.vgap;
	}
	,setVgap: function(vgap) {
		this.vgap = vgap;
	}
	,addLayoutComponent: function(comp,constraints) {
		var name;
		if(constraints != null) name = constraints.toString(); else name = null;
		this.addLayoutComponentByAlign(name,comp);
	}
	,addLayoutComponentByAlign: function(name,comp) {
		if(name == null) name = this.defaultConstraints;
		if("Center" == name) this.center = comp; else if("North" == name) this.north = comp; else if("South" == name) this.south = comp; else if("East" == name) this.east = comp; else if("West" == name) this.west = comp; else if("First" == name) this.firstLine = comp; else if("Last" == name) this.lastLine = comp; else if("Before" == name) this.firstItem = comp; else if("After" == name) this.lastItem = comp; else this.center = comp;
	}
	,removeLayoutComponent: function(comp) {
		if(comp == this.center) this.center = null; else if(comp == this.north) this.north = null; else if(comp == this.south) this.south = null; else if(comp == this.east) this.east = null; else if(comp == this.west) this.west = null;
		if(comp == this.firstLine) this.firstLine = null; else if(comp == this.lastLine) this.lastLine = null; else if(comp == this.firstItem) this.firstItem = null; else if(comp == this.lastItem) this.lastItem = null;
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,preferredLayoutSize: function(target) {
		var dim = new org.aswing.geom.IntDimension(0,0);
		var ltr = true;
		var c = null;
		var d;
		if((c = this.getChild("East",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width += d.width + this.hgap;
			dim.height = Std["int"](Math.max(d.height,dim.height));
		}
		if((c = this.getChild("West",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width += d.width + this.hgap;
			dim.height = Std["int"](Math.max(d.height,dim.height));
		}
		if((c = this.getChild("Center",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width += d.width;
			dim.height = Std["int"](Math.max(d.height,dim.height));
		}
		if((c = this.getChild("North",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width = Std["int"](Math.max(d.width,dim.width));
			dim.height += d.height + this.vgap;
		}
		if((c = this.getChild("South",ltr)) != null) {
			d = c.getPreferredSize();
			dim.width = Std["int"](Math.max(d.width,dim.width));
			dim.height += d.height + this.vgap;
		}
		var insets = target.getInsets();
		dim.width += insets.left + insets.right;
		dim.height += insets.top + insets.bottom;
		return dim;
	}
	,getLayoutAlignmentX: function(target) {
		return 0.5;
	}
	,getLayoutAlignmentY: function(target) {
		return 0.5;
	}
	,layoutContainer: function(target) {
		var td = target.getSize();
		var insets = target.getInsets();
		var top = insets.top;
		var bottom = td.height - insets.bottom;
		var left = insets.left;
		var right = td.width - insets.right;
		var ltr = true;
		var c = null;
		var d;
		if((c = this.getChild("North",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org.aswing.geom.IntRectangle(left,top,right - left,d.height));
			top += d.height + this.vgap;
		}
		if((c = this.getChild("South",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org.aswing.geom.IntRectangle(left,bottom - d.height,right - left,d.height));
			bottom -= d.height + this.vgap;
		}
		if((c = this.getChild("East",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org.aswing.geom.IntRectangle(right - d.width,top,d.width,bottom - top));
			right -= d.width + this.hgap;
		}
		if((c = this.getChild("West",ltr)) != null) {
			d = c.getPreferredSize();
			c.setBounds(new org.aswing.geom.IntRectangle(left,top,d.width,bottom - top));
			left += d.width + this.hgap;
		}
		if((c = this.getChild("Center",ltr)) != null) c.setBounds(new org.aswing.geom.IntRectangle(left,top,right - left,bottom - top));
	}
	,getChild: function(key,ltr) {
		var result = null;
		if(key == "North") if(this.firstLine != null) result = this.firstLine; else result = this.north; else if(key == "South") if(this.lastLine != null) result = this.lastLine; else result = this.south; else if(key == "West") {
			if(ltr) result = this.firstItem; else result = this.lastItem;
			if(result == null) result = this.west;
		} else if(key == "East") {
			if(ltr) result = this.lastItem; else result = this.firstItem;
			if(result == null) result = this.east;
		} else if(key == "Center") result = this.center;
		if(result != null && !result.isVisible()) result = null;
		return result;
	}
	,toString: function() {
		return "BorderLayout[hgap=" + this.hgap + ",vgap=" + this.vgap + "]";
	}
	,__class__: org.aswing.BorderLayout
});
org.aswing.BoundedRangeModel = function() { };
$hxClasses["org.aswing.BoundedRangeModel"] = org.aswing.BoundedRangeModel;
org.aswing.BoundedRangeModel.__name__ = ["org","aswing","BoundedRangeModel"];
org.aswing.BoundedRangeModel.prototype = {
	__class__: org.aswing.BoundedRangeModel
};
org.aswing.Box = function(axis,gap) {
	if(gap == null) gap = 0;
	if(axis == null) axis = 0;
	org.aswing.JPanel.call(this);
	this.setName("Box");
	this.setLayout(new org.aswing.BoxLayout(axis,gap));
};
$hxClasses["org.aswing.Box"] = org.aswing.Box;
org.aswing.Box.__name__ = ["org","aswing","Box"];
org.aswing.Box.createHorizontalBox = function(gap) {
	if(gap == null) gap = 0;
	return new org.aswing.Box(0,gap);
};
org.aswing.Box.createVerticalBox = function(gap) {
	if(gap == null) gap = 0;
	return new org.aswing.Box(1,gap);
};
org.aswing.Box.createHorizontalGlue = function() {
	return org.aswing.JSpacer.createHorizontalSpacer(0);
};
org.aswing.Box.createVerticalGlue = function() {
	return org.aswing.JSpacer.createVerticalSpacer(0);
};
org.aswing.Box.__super__ = org.aswing.JPanel;
org.aswing.Box.prototype = $extend(org.aswing.JPanel.prototype,{
	setAxis: function(axis) {
		org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.BoxLayout).setAxis(axis);
	}
	,getAxis: function() {
		return org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.BoxLayout).getAxis();
	}
	,setGap: function(gap) {
		org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.BoxLayout).setGap(gap);
	}
	,getGap: function() {
		return org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.BoxLayout).getGap();
	}
	,__class__: org.aswing.Box
});
org.aswing.BoxLayout = function(axis,gap) {
	if(gap == null) gap = 0;
	if(axis == null) axis = 0;
	this.setAxis(axis);
	this.setGap(gap);
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.BoxLayout"] = org.aswing.BoxLayout;
org.aswing.BoxLayout.__name__ = ["org","aswing","BoxLayout"];
org.aswing.BoxLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.BoxLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	setAxis: function(axis) {
		if(axis == null) axis = 0;
		this.axis = axis;
	}
	,getAxis: function() {
		return this.axis;
	}
	,setGap: function(gap) {
		if(gap == null) gap = 0;
		this.gap = gap;
	}
	,getGap: function() {
		return this.gap;
	}
	,preferredLayoutSize: function(target) {
		return this.getCommonLayoutSize(target,false);
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,maximumLayoutSize: function(target) {
		return this.getCommonLayoutSize(target,true);
	}
	,getCommonLayoutSize: function(target,isMax) {
		var count = target.getComponentCount();
		var insets = target.getInsets();
		var width = 0;
		var height = 0;
		var amount = 0;
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			var c = target.getComponent(i);
			if(c.isVisible()) {
				var size;
				if(isMax) size = c.getMaximumSize(); else size = c.getPreferredSize();
				width = Std["int"](Math.max(width,size.width));
				height = Std["int"](Math.max(height,size.height));
				amount++;
			}
		}
		if(this.axis == 1) {
			height = height * amount;
			if(amount > 0) height += (amount - 1) * this.gap;
		} else {
			width = width * amount;
			if(amount > 0) width += (amount - 1) * this.gap;
		}
		var dim = new org.aswing.geom.IntDimension(width,height);
		return insets.getOutsideSize(dim);
	}
	,layoutContainer: function(target) {
		var count = target.getComponentCount();
		var amount = 0;
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			var c = target.getComponent(i);
			if(c.isVisible()) amount++;
		}
		var size = target.getSize();
		var insets = target.getInsets();
		var rd = insets.getInsideBounds(size.getBounds());
		var ch;
		var cw;
		if(this.axis == 1) {
			ch = Math.floor((rd.height - (amount - 1) * this.gap) / amount);
			cw = rd.width;
		} else {
			ch = rd.height;
			cw = Math.floor((rd.width - (amount - 1) * this.gap) / amount);
		}
		var x = rd.x;
		var y = rd.y;
		var xAdd;
		if(this.axis == 1) xAdd = 0; else xAdd = cw + this.gap;
		var yAdd;
		if(this.axis == 1) yAdd = ch + this.gap; else yAdd = 0;
		var _g1 = 0;
		while(_g1 < count) {
			var ii = _g1++;
			var comp = target.getComponent(ii);
			if(comp.isVisible()) {
				comp.setBounds(new org.aswing.geom.IntRectangle(x,y,cw,ch));
				x += xAdd;
				y += yAdd;
			}
		}
	}
	,getLayoutAlignmentX: function(target) {
		return 0.5;
	}
	,getLayoutAlignmentY: function(target) {
		return 0.5;
	}
	,__class__: org.aswing.BoxLayout
});
org.aswing.ButtonGroup = function() {
	this.selection = null;
	this.buttons = new Array();
};
$hxClasses["org.aswing.ButtonGroup"] = org.aswing.ButtonGroup;
org.aswing.ButtonGroup.__name__ = ["org","aswing","ButtonGroup"];
org.aswing.ButtonGroup.groupButtons = function(buttons) {
	var g = new org.aswing.ButtonGroup();
	var _g = 0;
	while(_g < buttons.length) {
		var i = buttons[_g];
		++_g;
		g.append(i);
	}
	return g;
};
org.aswing.ButtonGroup.prototype = {
	append: function(b) {
		if(b == null) return;
		this.buttons.push(b);
		if(b.isSelected()) {
			if(this.selection == null) this.selection = b.getModel(); else b.setSelected(false);
		}
		b.getModel().setGroup(this);
	}
	,appendAll: function(buttons) {
		var _g = 0;
		while(_g < buttons.length) {
			var i = buttons[_g];
			++_g;
			this.append(i);
		}
	}
	,remove: function(b) {
		if(b == null) return;
		org.aswing.util.ArrayUtils.removeFromArray(this.buttons,b);
		if(b.getModel() == this.selection) this.selection = null;
		b.getModel().setGroup(null);
	}
	,contains: function(b) {
		var _g1 = 0;
		var _g = this.buttons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.buttons[i] == b) return true;
		}
		return false;
	}
	,getElements: function() {
		return org.aswing.util.ArrayUtils.cloneArray(this.buttons);
	}
	,getSelection: function() {
		return this.selection;
	}
	,getSelectedIndex: function() {
		var _g1 = 0;
		var _g = this.buttons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ab = org.aswing.AsWingUtils["as"](this.buttons[i],org.aswing.AbstractButton);
			if(ab.isSelected()) return i;
		}
		return -1;
	}
	,getSelectedButton: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.isSelected()) return b;
		}
		return null;
	}
	,setSelected: function(m,b) {
		if(b && m != null && m != this.selection) {
			var oldSelection = this.selection;
			this.selection = m;
			if(oldSelection != null) oldSelection.setSelected(false);
			m.setSelected(true);
		} else if(!b && m != null && this.allowUncheck) this.selection = null;
	}
	,isSelected: function(m) {
		return m == this.selection;
	}
	,getButtonCount: function() {
		return this.buttons.length;
	}
	,setAllowUncheck: function(allowUncheck) {
		this.allowUncheck = allowUncheck;
	}
	,__class__: org.aswing.ButtonGroup
};
org.aswing.ButtonModel = function() { };
$hxClasses["org.aswing.ButtonModel"] = org.aswing.ButtonModel;
org.aswing.ButtonModel.__name__ = ["org","aswing","ButtonModel"];
org.aswing.ButtonModel.prototype = {
	__class__: org.aswing.ButtonModel
};
org.aswing.CellPane = function() {
	org.aswing.Container.call(this);
};
$hxClasses["org.aswing.CellPane"] = org.aswing.CellPane;
org.aswing.CellPane.__name__ = ["org","aswing","CellPane"];
org.aswing.CellPane.__super__ = org.aswing.Container;
org.aswing.CellPane.prototype = $extend(org.aswing.Container.prototype,{
	revalidate: function() {
		this.valid = true;
	}
	,invalidate: function() {
		this.valid = true;
	}
	,invalidateTree: function() {
		this.valid = true;
	}
	,validate: function() {
		this.valid = true;
	}
	,__class__: org.aswing.CellPane
});
org.aswing.CenterLayout = function() {
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.CenterLayout"] = org.aswing.CenterLayout;
org.aswing.CenterLayout.__name__ = ["org","aswing","CenterLayout"];
org.aswing.CenterLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.CenterLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	preferredLayoutSize: function(target) {
		if(target.getComponentCount() > 0) return target.getInsets().getOutsideSize(target.getComponent(0).getPreferredSize()); else return target.getInsets().getOutsideSize();
	}
	,layoutContainer: function(target) {
		if(target.getComponentCount() > 0) {
			var size = target.getSize();
			var insets = target.getInsets();
			var rd = insets.getInsideBounds(size.getBounds());
			var c = target.getComponent(0);
			var cd = rd.clone();
			var preferSize = c.getPreferredSize();
			cd.setSize(preferSize);
			if(rd.width > preferSize.width) cd.x += (rd.width - preferSize.width) / 2 | 0;
			if(rd.height > preferSize.height) cd.y += (rd.height - preferSize.height) / 2 | 0;
			cd.x = Math.round(cd.x);
			cd.y = Math.round(cd.y);
			c.setBounds(cd);
		}
	}
	,__class__: org.aswing.CenterLayout
});
org.aswing.ComboBoxEditor = function() { };
$hxClasses["org.aswing.ComboBoxEditor"] = org.aswing.ComboBoxEditor;
org.aswing.ComboBoxEditor.__name__ = ["org","aswing","ComboBoxEditor"];
org.aswing.ComboBoxEditor.prototype = {
	__class__: org.aswing.ComboBoxEditor
};
org.aswing.FocusTraversalPolicy = function() { };
$hxClasses["org.aswing.FocusTraversalPolicy"] = org.aswing.FocusTraversalPolicy;
org.aswing.FocusTraversalPolicy.__name__ = ["org","aswing","FocusTraversalPolicy"];
org.aswing.FocusTraversalPolicy.prototype = {
	__class__: org.aswing.FocusTraversalPolicy
};
org.aswing.ContainerOrderFocusTraversalPolicy = function() {
};
$hxClasses["org.aswing.ContainerOrderFocusTraversalPolicy"] = org.aswing.ContainerOrderFocusTraversalPolicy;
org.aswing.ContainerOrderFocusTraversalPolicy.__name__ = ["org","aswing","ContainerOrderFocusTraversalPolicy"];
org.aswing.ContainerOrderFocusTraversalPolicy.__interfaces__ = [org.aswing.FocusTraversalPolicy];
org.aswing.ContainerOrderFocusTraversalPolicy.prototype = {
	getComponentAfter: function(c) {
		return this.getComponentAfterImp(c,true);
	}
	,getComponentAfterImp: function(c,deepIn) {
		if(deepIn == null) deepIn = true;
		if(c == null) return null;
		if(js.Boot.__instanceof(c,org.aswing.Container) && deepIn) {
			var fc = this.getFirstComponent(js.Boot.__instanceof(c,org.aswing.Container)?c:null);
			if(fc != null) return fc;
		}
		var container = c.getParent();
		if(container == null) return this.getFirstComponent(js.Boot.__instanceof(c,org.aswing.Container)?c:null);
		var index = container.getIndex(c);
		var n = container.getComponentCount();
		if(index >= 0) while(++index < n) {
			var nc = this.getFocusableComponent(container.getComponent(index));
			if(nc != null) return nc;
		}
		return this.getComponentAfterImp(container,false);
	}
	,getComponentBefore: function(c) {
		return this.getComponentBeforeImp(c);
	}
	,getComponentBeforeImp: function(c) {
		if(c == null) return null;
		var container = c.getParent();
		if(container == null) return this.getLastComponent(js.Boot.__instanceof(c,org.aswing.Container)?c:null);
		var index = container.getIndex(c);
		while(--index >= 0) {
			var nc = this.getLastComponent(container.getComponent(index));
			if(nc != null) return nc;
		}
		if(this.accept(container)) return container;
		return this.getComponentBeforeImp(container);
	}
	,getDefaultComponent: function(container) {
		return this.getFirstComponent(container);
	}
	,getFirstComponent: function(container) {
		if(container == null) return null;
		var index = -1;
		var n = container.getComponentCount();
		while(++index < n) {
			var nc = this.getFocusableComponent(container.getComponent(index));
			if(nc != null) return nc;
		}
		return null;
	}
	,getLastComponent: function(c) {
		var container;
		if(js.Boot.__instanceof(c,org.aswing.Container)) container = c; else container = null;
		if(container == null) {
			if(this.accept(c)) return c; else return null;
		}
		var index = container.getComponentCount();
		while(--index >= 0) {
			var theC = container.getComponent(index);
			if(this.isLeaf(theC)) {
				if(this.accept(theC)) return theC;
			}
			var nc = this.getLastComponent(js.Boot.__instanceof(theC,org.aswing.Container)?theC:null);
			if(nc != null) return nc;
		}
		if(this.accept(container)) return container;
		return null;
	}
	,isLeaf: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.Container)) {
			var con;
			if(js.Boot.__instanceof(c,org.aswing.Container)) con = c; else con = null;
			return con.getComponentCount() == 0;
		}
		return true;
	}
	,accept: function(c) {
		return c != null && c.isShowing() && c.isFocusable() && c.isEnabled();
	}
	,getFocusableComponent: function(c) {
		if(c.isShowing() && c.isEnabled()) {
			if(c.isFocusable()) return c; else if(js.Boot.__instanceof(c,org.aswing.Container)) {
				var con;
				if(js.Boot.__instanceof(c,org.aswing.Container)) con = c; else con = null;
				var conDefault = con.getFocusTraversalPolicy().getDefaultComponent(con);
				if(conDefault != null) return conDefault;
			}
		}
		return null;
	}
	,__class__: org.aswing.ContainerOrderFocusTraversalPolicy
};
org.aswing.Cursor = function() { };
$hxClasses["org.aswing.Cursor"] = org.aswing.Cursor;
org.aswing.Cursor.__name__ = ["org","aswing","Cursor"];
org.aswing.Cursor.createCursor = function(type) {
	var cursor = org.aswing.AsWingUtils["as"](org.aswing.UIManager.getInstance(type),openfl.display.DisplayObject);
	if(cursor == null) return null; else if(js.Boot.__instanceof(cursor,openfl.display.Bitmap)) {
		var sp = org.aswing.AsWingUtils.createSprite(null,"bmCursorAdap");
		sp.addChild(cursor);
		cursor.set_x(-cursor.get_width() / 2);
		cursor.set_y(-cursor.get_height() / 2);
		return sp;
	} else return cursor;
};
org.aswing.util = {};
org.aswing.util.WeakMap = function() {
	this.hashKeys = new haxe.ds.IntMap();
	this.hashValues = new haxe.ds.IntMap();
	this.length = 0;
};
$hxClasses["org.aswing.util.WeakMap"] = org.aswing.util.WeakMap;
org.aswing.util.WeakMap.__name__ = ["org","aswing","util","WeakMap"];
org.aswing.util.WeakMap.prototype = {
	exists: function(key) {
		return this.hashValues.exists((function($this) {
			var $r;
			if(key.___id___ == null) {
				key.___id___ = org.aswing.util.WeakMap.nextObjectID++;
				if(org.aswing.util.WeakMap.nextObjectID == 2147483647) org.aswing.util.WeakMap.nextObjectID = 0;
			}
			$r = key.___id___;
			return $r;
		}(this)));
	}
	,get: function(key) {
		return this.hashValues.get((function($this) {
			var $r;
			if(key.___id___ == null) {
				key.___id___ = org.aswing.util.WeakMap.nextObjectID++;
				if(org.aswing.util.WeakMap.nextObjectID == 2147483647) org.aswing.util.WeakMap.nextObjectID = 0;
			}
			$r = key.___id___;
			return $r;
		}(this)));
	}
	,getID: function(key) {
		if(key.___id___ == null) {
			key.___id___ = org.aswing.util.WeakMap.nextObjectID++;
			if(org.aswing.util.WeakMap.nextObjectID == 2147483647) org.aswing.util.WeakMap.nextObjectID = 0;
		}
		return key.___id___;
	}
	,iterator: function() {
		return this.hashValues.iterator();
	}
	,keys: function() {
		return this.hashKeys.iterator();
	}
	,remove: function(key) {
		var id;
		if(key.___id___ == null) {
			key.___id___ = org.aswing.util.WeakMap.nextObjectID++;
			if(org.aswing.util.WeakMap.nextObjectID == 2147483647) org.aswing.util.WeakMap.nextObjectID = 0;
		}
		id = key.___id___;
		this.hashKeys.remove(id);
		this.hashValues.remove(id);
	}
	,set: function(key,value) {
		var id;
		if(key.___id___ == null) {
			key.___id___ = org.aswing.util.WeakMap.nextObjectID++;
			if(org.aswing.util.WeakMap.nextObjectID == 2147483647) org.aswing.util.WeakMap.nextObjectID = 0;
		}
		id = key.___id___;
		this.hashKeys.set(id,key);
		this.hashValues.set(id,value);
	}
	,size: function() {
		return this.length;
	}
	,isEmpty: function() {
		return this.length == 0;
	}
	,eachKey: function(func) {
		var $it0 = this.hashKeys.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			func(i);
		}
	}
	,eachValue: function(func) {
		var $it0 = this.hashValues.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			func(i);
		}
	}
	,containsValue: function(value) {
		var itr = this.hashValues.iterator();
		while( itr.hasNext() ) {
			var i = itr.next();
			if(i == value) return true;
		}
		return false;
	}
	,containsKey: function(key) {
		return this.exists(key);
	}
	,getValue: function(key) {
		return this.get(key);
	}
	,put: function(key,value) {
		if(!this.hashValues.exists((function($this) {
			var $r;
			if(key.___id___ == null) {
				key.___id___ = org.aswing.util.WeakMap.nextObjectID++;
				if(org.aswing.util.WeakMap.nextObjectID == 2147483647) org.aswing.util.WeakMap.nextObjectID = 0;
			}
			$r = key.___id___;
			return $r;
		}(this)))) this.length++;
		this.set(key,value);
		return value;
	}
	,clear: function() {
		var itr = this.hashKeys.iterator();
		while( itr.hasNext() ) {
			var i = itr.next();
			this.remove(i);
		}
	}
	,clone: function() {
		var temp = new org.aswing.util.WeakMap();
		var itr = this.hashKeys.iterator();
		while( itr.hasNext() ) {
			var i = itr.next();
			temp.put(i,this.hashValues.get((function($this) {
				var $r;
				if(i.___id___ == null) {
					i.___id___ = org.aswing.util.WeakMap.nextObjectID++;
					if(org.aswing.util.WeakMap.nextObjectID == 2147483647) org.aswing.util.WeakMap.nextObjectID = 0;
				}
				$r = i.___id___;
				return $r;
			}(this))));
		}
		return temp;
	}
	,__class__: org.aswing.util.WeakMap
};
org.aswing.CursorManager = function(cursorRoot) {
	this.root = null;
	this.cursorHolder = null;
	this.currentCursor = null;
	this.setCursorContainerRoot(cursorRoot);
	this.tiggerCursorMap = new haxe.ds.IntMap();
};
$hxClasses["org.aswing.CursorManager"] = org.aswing.CursorManager;
org.aswing.CursorManager.__name__ = ["org","aswing","CursorManager"];
org.aswing.CursorManager.getManager = function(stage) {
	if(stage == null) stage = org.aswing.AsWingManager.getStage();
	if(stage == null) return null;
	var manager = org.aswing.CursorManager.managers.getValue(stage);
	if(manager == null) {
		manager = new org.aswing.CursorManager(stage);
		org.aswing.CursorManager.managers.put(stage,manager);
	}
	return manager;
};
org.aswing.CursorManager.prototype = {
	setCursorContainerRoot: function(theRoot) {
		if(theRoot != this.root) {
			if(this.root != null) this.root.removeEventListener(openfl.events.Event.DEACTIVATE,$bind(this,this.__referenceEvent));
			this.root = theRoot;
			this.root.addEventListener(openfl.events.Event.DEACTIVATE,$bind(this,this.__referenceEvent));
			if(this.cursorHolder != null && this.cursorHolder.parent != this.root) this.root.addChild(this.cursorHolder);
		}
	}
	,__referenceEvent: function(e) {
	}
	,getCursorContainerRoot: function() {
		return this.root;
	}
	,showCustomCursor: function(cursor,hideSystemCursor) {
		if(hideSystemCursor == null) hideSystemCursor = true;
		if(cursor == this.currentCursor) return;
		var ro = this.getCursorContainerRoot();
		if(this.cursorHolder == null) {
			if(ro != null) {
				this.cursorHolder = new openfl.display.Sprite();
				this.cursorHolder.mouseEnabled = false;
				this.cursorHolder.mouseChildren = false;
				ro.addChild(this.cursorHolder);
			}
		}
		if(this.cursorHolder != null) {
			if(this.currentCursor != cursor) {
				if(this.currentCursor != null) this.cursorHolder.removeChild(this.currentCursor);
				this.currentCursor = cursor;
				this.cursorHolder.addChild(this.currentCursor);
			}
			org.aswing.util.DepthManager.bringToTop(this.cursorHolder);
			org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__mouseMove),false,0,false);
			this.__mouseMove(null);
		}
	}
	,__mouseMove: function(e) {
		this.cursorHolder.set_x(this.cursorHolder.parent.get_mouseX());
		this.cursorHolder.set_y(this.cursorHolder.parent.get_mouseY());
		org.aswing.util.DepthManager.bringToTop(this.cursorHolder);
	}
	,hideCustomCursor: function(cursor) {
		if(cursor != this.currentCursor) return;
		if(this.cursorHolder != null) {
			if(this.currentCursor != null) this.cursorHolder.removeChild(this.currentCursor);
		}
		this.currentCursor = null;
		var ro = this.getCursorContainerRoot();
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__mouseMove));
	}
	,setCursor: function(trigger,cursor) {
		var key = trigger.getAwmlIndex();
		this.tiggerCursorMap.set(key,cursor);
		if(cursor != null) {
			trigger.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__triggerOver),false,0,true);
			trigger.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__triggerOut),false,0,true);
			trigger.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__triggerUp),false,0,true);
		} else {
			trigger.removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__triggerOver),false);
			trigger.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__triggerOut),false);
			trigger.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__triggerUp),false);
			var key1 = trigger.getAwmlIndex();
			this.tiggerCursorMap.remove(key1);
		}
	}
	,__triggerOver: function(e) {
		var trigger = org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.Component);
		var cursor = org.aswing.AsWingUtils["as"]((function($this) {
			var $r;
			var key = trigger.getAwmlIndex();
			$r = $this.tiggerCursorMap.get(key);
			return $r;
		}(this)),openfl.display.DisplayObject);
		if(cursor != null && !e.buttonDown) this.showCustomCursor(cursor);
	}
	,__triggerOut: function(e) {
		var trigger = org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.Component);
		var cursor = org.aswing.AsWingUtils["as"]((function($this) {
			var $r;
			var key = trigger.getAwmlIndex();
			$r = $this.tiggerCursorMap.get(key);
			return $r;
		}(this)),openfl.display.DisplayObject);
		if(cursor != null) this.hideCustomCursor(cursor);
	}
	,__triggerUp: function(e) {
		var trigger = org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.Component);
		var cursor = org.aswing.AsWingUtils["as"]((function($this) {
			var $r;
			var key = trigger.getAwmlIndex();
			$r = $this.tiggerCursorMap.get(key);
			return $r;
		}(this)),openfl.display.DisplayObject);
		if(cursor != null && trigger.hitTestPoint(e.stageX,e.stageY,true)) this.showCustomCursor(cursor);
	}
	,__class__: org.aswing.CursorManager
};
org.aswing.DefaultBoundedRangeModel = function(value,extent,min,max) {
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(extent == null) extent = 0;
	if(value == null) value = 0;
	this.isAdjusting = false;
	openfl.events.EventDispatcher.call(this);
	if(max >= min && value >= min && value + extent >= value && value + extent <= max) {
		this.value = value;
		this.extent = extent;
		this.min = min;
		this.max = max;
	} else throw new org.aswing.error.Error("invalid range properties");
};
$hxClasses["org.aswing.DefaultBoundedRangeModel"] = org.aswing.DefaultBoundedRangeModel;
org.aswing.DefaultBoundedRangeModel.__name__ = ["org","aswing","DefaultBoundedRangeModel"];
org.aswing.DefaultBoundedRangeModel.__interfaces__ = [org.aswing.BoundedRangeModel];
org.aswing.DefaultBoundedRangeModel.__super__ = openfl.events.EventDispatcher;
org.aswing.DefaultBoundedRangeModel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	getValue: function() {
		return this.value;
	}
	,getExtent: function() {
		return this.extent;
	}
	,getMinimum: function() {
		return this.min;
	}
	,getMaximum: function() {
		return this.max;
	}
	,setValue: function(n,programmatic) {
		if(programmatic == null) programmatic = true;
		n = Std["int"](Math.min(n,this.max - this.extent));
		var newValue = Std["int"](Math.max(n,this.min));
		this.setRangeProperties(newValue,this.extent,this.min,this.max,this.isAdjusting,programmatic);
	}
	,setExtent: function(n) {
		var newExtent = Std["int"](Math.max(0,n));
		if(this.value + newExtent > this.max) newExtent = this.max - this.value;
		this.setRangeProperties(this.value,newExtent,this.min,this.max,this.isAdjusting);
	}
	,setMinimum: function(n) {
		var newMax = Std["int"](Math.max(n,this.max));
		var newValue = Std["int"](Math.max(n,this.value));
		var newExtent = Std["int"](Math.min(newMax - newValue,this.extent));
		this.setRangeProperties(newValue,newExtent,n,newMax,this.isAdjusting);
	}
	,setMaximum: function(n) {
		var newMin = Std["int"](Math.min(n,this.min));
		var newExtent = Std["int"](Math.min(n - newMin,this.extent));
		var newValue = Std["int"](Math.min(n - newExtent,this.value));
		this.setRangeProperties(newValue,newExtent,newMin,n,this.isAdjusting);
	}
	,setValueIsAdjusting: function(b) {
		this.setRangeProperties(this.value,this.extent,this.min,this.max,b,false);
	}
	,getValueIsAdjusting: function() {
		return this.isAdjusting;
	}
	,setRangeProperties: function(newValue,newExtent,newMin,newMax,adjusting,programmatic) {
		if(programmatic == null) programmatic = true;
		if(newMin > newMax) newMin = newMax;
		if(newValue > newMax) newMax = newValue;
		if(newValue < newMin) newMin = newValue;
		if(newExtent + newValue > newMax) newExtent = newMax - newValue;
		if(newExtent < 0) newExtent = 0;
		var isChange = newValue != this.value || newExtent != this.extent || newMin != this.min || newMax != this.max || adjusting != this.isAdjusting;
		if(isChange) {
			this.value = newValue;
			this.extent = newExtent;
			this.min = newMin;
			this.max = newMax;
			this.isAdjusting = adjusting;
			this.fireStateChanged(programmatic);
		}
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireStateChanged: function(programmatic) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,toString: function() {
		var modelString = "value=" + this.getValue() + ", " + "extent=" + this.getExtent() + ", " + "min=" + this.getMinimum() + ", " + "max=" + this.getMaximum() + ", " + "adj=" + Std.string(this.getValueIsAdjusting());
		return "DefaultBoundedRangeModel" + "[" + modelString + "]";
	}
	,__class__: org.aswing.DefaultBoundedRangeModel
});
org.aswing.DefaultButtonModel = function() {
	openfl.events.EventDispatcher.call(this);
	this.enabled = true;
	this.rollOver = false;
	this.armed = false;
	this.pressed = false;
	this.selected = false;
};
$hxClasses["org.aswing.DefaultButtonModel"] = org.aswing.DefaultButtonModel;
org.aswing.DefaultButtonModel.__name__ = ["org","aswing","DefaultButtonModel"];
org.aswing.DefaultButtonModel.__interfaces__ = [org.aswing.ButtonModel];
org.aswing.DefaultButtonModel.__super__ = openfl.events.EventDispatcher;
org.aswing.DefaultButtonModel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	isArmed: function() {
		return this.armed;
	}
	,isRollOver: function() {
		return this.rollOver;
	}
	,isSelected: function() {
		return this.selected;
	}
	,isEnabled: function() {
		return this.enabled;
	}
	,isPressed: function() {
		return this.pressed;
	}
	,setEnabled: function(b) {
		if(this.isEnabled() == b) return;
		this.enabled = b;
		if(b != true) {
			this.pressed = false;
			this.armed = false;
		}
		this.fireStateChanged();
	}
	,setPressed: function(b) {
		if(this.isPressed() == b || !this.isEnabled()) return;
		this.pressed = b;
		if(!this.isPressed() && this.isArmed()) this.fireActionEvent();
		this.fireStateChanged();
	}
	,setRollOver: function(b) {
		if(this.isRollOver() == b || !this.isEnabled()) return;
		this.rollOver = b;
		this.fireStateChanged();
	}
	,setArmed: function(b) {
		if(this.isArmed() == b || !this.isEnabled()) return;
		this.armed = b;
		this.fireStateChanged();
	}
	,setSelected: function(b) {
		if(this.isSelected() == b) return;
		this.selected = b;
		this.fireStateChanged();
		this.fireSelectionChanged();
	}
	,setGroup: function(group) {
		this.group = group;
	}
	,getGroup: function() {
		return this.group;
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireActionEvent: function() {
		this.dispatchEvent(new org.aswing.event.AWEvent("act"));
	}
	,fireStateChanged: function() {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged"));
	}
	,fireSelectionChanged: function() {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("selectionChanged"));
	}
	,__class__: org.aswing.DefaultButtonModel
});
org.aswing.DefaultCheckBoxCellEditor = function() {
	org.aswing.AbstractCellEditor.call(this);
	this.setClickCountToStart(1);
};
$hxClasses["org.aswing.DefaultCheckBoxCellEditor"] = org.aswing.DefaultCheckBoxCellEditor;
org.aswing.DefaultCheckBoxCellEditor.__name__ = ["org","aswing","DefaultCheckBoxCellEditor"];
org.aswing.DefaultCheckBoxCellEditor.__super__ = org.aswing.AbstractCellEditor;
org.aswing.DefaultCheckBoxCellEditor.prototype = $extend(org.aswing.AbstractCellEditor.prototype,{
	getCheckBox: function() {
		if(this.checkBox == null) this.checkBox = new org.aswing.JCheckBox();
		return this.checkBox;
	}
	,getEditorComponent: function() {
		return this.getCheckBox();
	}
	,getCellEditorValue: function() {
		return this.getCheckBox().isSelected();
	}
	,setCellEditorValue: function(value) {
		var selected = false;
		if(value == true) selected = true;
		if(typeof(value) == "string") {
			var va;
			if(typeof(value) == "string") va = value; else va = null;
			if(va.toLowerCase() == "true") selected = true;
		}
		this.getCheckBox().setSelected(selected);
	}
	,toString: function() {
		return "DefaultCheckBoxCellEditor[]";
	}
	,__class__: org.aswing.DefaultCheckBoxCellEditor
});
org.aswing.DefaultComboBoxCellEditor = function() {
	org.aswing.AbstractCellEditor.call(this);
	this.setClickCountToStart(1);
};
$hxClasses["org.aswing.DefaultComboBoxCellEditor"] = org.aswing.DefaultComboBoxCellEditor;
org.aswing.DefaultComboBoxCellEditor.__name__ = ["org","aswing","DefaultComboBoxCellEditor"];
org.aswing.DefaultComboBoxCellEditor.__super__ = org.aswing.AbstractCellEditor;
org.aswing.DefaultComboBoxCellEditor.prototype = $extend(org.aswing.AbstractCellEditor.prototype,{
	getComboBox: function() {
		if(this.comboBox == null) this.comboBox = new org.aswing.JComboBox();
		return this.comboBox;
	}
	,getEditorComponent: function() {
		return this.getComboBox();
	}
	,getCellEditorValue: function() {
		return this.getComboBox().getSelectedItem();
	}
	,setCellEditorValue: function(value) {
		this.getComboBox().setSelectedItem(value);
	}
	,toString: function() {
		return "DefaultComboBoxCellEditor[]";
	}
	,__class__: org.aswing.DefaultComboBoxCellEditor
});
org.aswing.DefaultComboBoxEditor = function() {
	this.lostingFocus = false;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.DefaultComboBoxEditor"] = org.aswing.DefaultComboBoxEditor;
org.aswing.DefaultComboBoxEditor.__name__ = ["org","aswing","DefaultComboBoxEditor"];
org.aswing.DefaultComboBoxEditor.__interfaces__ = [org.aswing.ComboBoxEditor];
org.aswing.DefaultComboBoxEditor.__super__ = openfl.events.EventDispatcher;
org.aswing.DefaultComboBoxEditor.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	selectAll: function() {
		if(this.getTextField().isEditable() && !this.lostingFocus) {
		}
	}
	,setValue: function(value) {
		this.value = value;
		if(value == null) this.getTextField().setText(""); else this.getTextField().setText(Std.string(value) + "");
		this.valueText = this.getTextField().getText();
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,getValue: function() {
		return this.value;
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener,false);
	}
	,setEditable: function(b) {
		this.getTextField().setEditable(b);
		this.getTextField().setEnabled(b);
	}
	,getEditorComponent: function() {
		return this.getTextField();
	}
	,isEditable: function() {
		return this.getTextField().isEditable();
	}
	,toString: function() {
		return "DefaultComboBoxEditor[]";
	}
	,createTextField: function() {
		var tf = new org.aswing.JTextField("",1);
		tf.setBorder(null);
		tf.setOpaque(false);
		tf.setFocusable(false);
		tf.setBackgroundDecorator(null);
		return tf;
	}
	,getTextField: function() {
		if(this.textField == null) {
			this.textField = this.createTextField();
			this.initHandler();
		}
		return this.textField;
	}
	,initHandler: function() {
		this.getTextField().getTextField().addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__textKeyDown));
		this.getTextField().getTextField().addEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.__grapValueFormText));
	}
	,__grapValueFormText: function(e) {
		if(this.grapValueFormText()) {
			this.lostingFocus = true;
			this.dispatchEvent(new org.aswing.event.AWEvent("act"));
			this.lostingFocus = false;
		}
	}
	,grapValueFormText: function() {
		if(this.getTextField().isEditable() && this.valueText != this.getTextField().getText()) {
			this.value = this.getTextField().getText();
			return true;
		}
		return false;
	}
	,__textKeyDown: function(e) {
		if(this.getTextField().isEditable() && (e.keyCode | 0) == org.aswing.AWKeyboard.ENTER) {
			this.grapValueFormText();
			this.dispatchEvent(new org.aswing.event.AWEvent("act"));
		}
	}
	,__class__: org.aswing.DefaultComboBoxEditor
});
org.aswing.DefaultComboBoxListCell = function() {
	org.aswing.DefaultListCell.call(this);
};
$hxClasses["org.aswing.DefaultComboBoxListCell"] = org.aswing.DefaultComboBoxListCell;
org.aswing.DefaultComboBoxListCell.__name__ = ["org","aswing","DefaultComboBoxListCell"];
org.aswing.DefaultComboBoxListCell.__super__ = org.aswing.DefaultListCell;
org.aswing.DefaultComboBoxListCell.prototype = $extend(org.aswing.DefaultListCell.prototype,{
	initJLabel: function(jlabel) {
		org.aswing.DefaultListCell.prototype.initJLabel.call(this,jlabel);
		jlabel.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__labelRollover),false,0,false);
		jlabel.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__labelRollout),false,0,false);
	}
	,setListCellStatus: function(list,isSelected,index) {
		var com = this.getCellComponent();
		if(isSelected) {
			com.setBackground(this.realBackground = list.getSelectionBackground());
			com.setForeground(this.realForeground = list.getSelectionForeground());
		} else {
			com.setBackground(this.realBackground = list.getBackground());
			com.setForeground(this.realForeground = list.getForeground());
		}
		com.setFont(list.getFont());
		this.rolloverBackground = list.getSelectionBackground().changeAlpha(0.8);
		this.rolloverForeground = list.getSelectionForeground();
	}
	,__labelRollover: function(e) {
		if(this.rolloverBackground != null) {
			this.getJLabel().setBackground(this.rolloverBackground);
			this.getJLabel().setForeground(this.rolloverForeground);
		}
	}
	,__labelRollout: function(e) {
		if(this.realBackground != null) {
			this.getJLabel().setBackground(this.realBackground);
			this.getJLabel().setForeground(this.realForeground);
		}
	}
	,__class__: org.aswing.DefaultComboBoxListCell
});
org.aswing.ListCellFactory = function() { };
$hxClasses["org.aswing.ListCellFactory"] = org.aswing.ListCellFactory;
org.aswing.ListCellFactory.__name__ = ["org","aswing","ListCellFactory"];
org.aswing.ListCellFactory.prototype = {
	__class__: org.aswing.ListCellFactory
};
org.aswing.DefaultListTextCellFactory = function(listCellClass,shareCelles,sameHeight,height) {
	if(height == null) height = -1;
	if(sameHeight == null) sameHeight = true;
	if(shareCelles == null) shareCelles = true;
	this.listCellClass = listCellClass;
	this.shareCelles = shareCelles;
	this.sameHeight = sameHeight;
	this.cellHeight = height;
};
$hxClasses["org.aswing.DefaultListTextCellFactory"] = org.aswing.DefaultListTextCellFactory;
org.aswing.DefaultListTextCellFactory.__name__ = ["org","aswing","DefaultListTextCellFactory"];
org.aswing.DefaultListTextCellFactory.__interfaces__ = [org.aswing.ListCellFactory];
org.aswing.DefaultListTextCellFactory.prototype = {
	createNewCell: function() {
		return org.aswing.AsWingUtils["as"](Type.createInstance(this.listCellClass,[]),org.aswing.ListCell);
	}
	,isAllCellHasSameHeight: function() {
		return this.sameHeight;
	}
	,isShareCells: function() {
		return this.shareCelles;
	}
	,setCellHeight: function(h) {
		this.cellHeight = h;
	}
	,getCellHeight: function() {
		if(this.cellHeight < 0) {
			var cell = this.createNewCell();
			cell.setCellValue("JjHhWpqQ1@|");
			this.cellHeight = cell.getCellComponent().getPreferredSize().height;
		}
		return this.cellHeight;
	}
	,__class__: org.aswing.DefaultListTextCellFactory
};
org.aswing.DefaultComboBoxListCellFactory = function(shareCelles,sameHeight) {
	if(sameHeight == null) sameHeight = true;
	if(shareCelles == null) shareCelles = true;
	org.aswing.DefaultListTextCellFactory.call(this,org.aswing.DefaultComboBoxListCell,shareCelles,sameHeight);
};
$hxClasses["org.aswing.DefaultComboBoxListCellFactory"] = org.aswing.DefaultComboBoxListCellFactory;
org.aswing.DefaultComboBoxListCellFactory.__name__ = ["org","aswing","DefaultComboBoxListCellFactory"];
org.aswing.DefaultComboBoxListCellFactory.__super__ = org.aswing.DefaultListTextCellFactory;
org.aswing.DefaultComboBoxListCellFactory.prototype = $extend(org.aswing.DefaultListTextCellFactory.prototype,{
	__class__: org.aswing.DefaultComboBoxListCellFactory
});
org.aswing.DefaultListCellFactory = function(shareCelles,sameHeight) {
	if(sameHeight == null) sameHeight = true;
	if(shareCelles == null) shareCelles = true;
	org.aswing.DefaultListTextCellFactory.call(this,org.aswing.DefaultListCell,shareCelles,sameHeight);
};
$hxClasses["org.aswing.DefaultListCellFactory"] = org.aswing.DefaultListCellFactory;
org.aswing.DefaultListCellFactory.__name__ = ["org","aswing","DefaultListCellFactory"];
org.aswing.DefaultListCellFactory.__super__ = org.aswing.DefaultListTextCellFactory;
org.aswing.DefaultListCellFactory.prototype = $extend(org.aswing.DefaultListTextCellFactory.prototype,{
	__class__: org.aswing.DefaultListCellFactory
});
org.aswing.ListSelectionModel = function() { };
$hxClasses["org.aswing.ListSelectionModel"] = org.aswing.ListSelectionModel;
org.aswing.ListSelectionModel.__name__ = ["org","aswing","ListSelectionModel"];
org.aswing.ListSelectionModel.prototype = {
	__class__: org.aswing.ListSelectionModel
};
org.aswing.DefaultListSelectionModel = function() {
	this.value = [];
	this.minIndex = org.aswing.DefaultListSelectionModel.MAX;
	this.maxIndex = org.aswing.DefaultListSelectionModel.MIN;
	this.anchorIndex = -1;
	this.leadIndex = -1;
	this.selectionMode = 1;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.DefaultListSelectionModel"] = org.aswing.DefaultListSelectionModel;
org.aswing.DefaultListSelectionModel.__name__ = ["org","aswing","DefaultListSelectionModel"];
org.aswing.DefaultListSelectionModel.__interfaces__ = [org.aswing.ListSelectionModel];
org.aswing.DefaultListSelectionModel.__super__ = openfl.events.EventDispatcher;
org.aswing.DefaultListSelectionModel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	setSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index0 < 0 || index1 < 0) {
			this.clearSelection(programmatic);
			return;
		}
		if(this.getSelectionMode() == 0) index0 = index1;
		var i;
		this.updateLeadAnchorIndices(index0,index1);
		var min = Std["int"](Math.min(index0,index1));
		var max = Std["int"](Math.max(index0,index1));
		var changed = false;
		if(min == this.minIndex && max == this.maxIndex) {
			var _g1 = min;
			var _g = max + 1;
			while(_g1 < _g) {
				var i1 = _g1++;
				if(this.value[i1] != true) {
					changed = true;
					break;
				}
			}
		} else changed = true;
		if(changed) {
			this.minIndex = min;
			this.maxIndex = max;
			this.clearSelectionImp();
			var _g11 = this.minIndex;
			var _g2 = this.maxIndex + 1;
			while(_g11 < _g2) {
				var i2 = _g11++;
				this.value[i2] = true;
			}
			this.fireListSelectionEvent(min,max,programmatic);
		}
	}
	,addSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index0 < 0 || index1 < 0) return;
		if(this.getSelectionMode() == 0) {
			this.setSelectionInterval(index0,index1);
			return;
		}
		this.updateLeadAnchorIndices(index0,index1);
		var min = Std["int"](Math.min(index0,index1));
		var max = Std["int"](Math.max(index0,index1));
		var changed = false;
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.value[i] != true) {
				this.value[i] = true;
				changed = true;
			}
		}
		this.minIndex = Std["int"](Math.min(min,this.minIndex));
		this.maxIndex = Std["int"](Math.max(max,this.maxIndex));
		if(changed) this.fireListSelectionEvent(min,max,programmatic);
	}
	,removeSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index0 < 0 || index1 < 0) return;
		var min = Std["int"](Math.min(index0,index1));
		var max = Std["int"](Math.max(index0,index1));
		min = Std["int"](Math.max(min,this.minIndex));
		max = Std["int"](Math.min(max,this.maxIndex));
		if(min > max) return;
		this.updateLeadAnchorIndices(index0,index1);
		if(min == this.minIndex && max == this.maxIndex) {
			this.clearSelection();
			return;
		} else if(min > this.minIndex && max < this.maxIndex) {
		} else if(min > this.minIndex && max == this.maxIndex) this.maxIndex = min - 1; else this.minIndex = max + 1;
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			this.value[i] = null;
		}
		this.fireListSelectionEvent(min,max,programmatic);
	}
	,getMinSelectionIndex: function() {
		if(this.isSelectionEmpty()) return -1; else return this.minIndex;
	}
	,getMaxSelectionIndex: function() {
		return this.maxIndex;
	}
	,isSelectedIndex: function(index) {
		return this.value[index] == true;
	}
	,updateLeadAnchorIndices: function(anchor,lead) {
		this.anchorIndex = anchor;
		this.leadIndex = lead;
	}
	,getAnchorSelectionIndex: function() {
		return this.anchorIndex;
	}
	,setAnchorSelectionIndex: function(index) {
		this.anchorIndex = index;
	}
	,getLeadSelectionIndex: function() {
		return this.leadIndex;
	}
	,setLeadSelectionIndex: function(index) {
		this.leadIndex = index;
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		if(!this.isSelectionEmpty()) {
			var max = this.maxIndex;
			this.minIndex = org.aswing.DefaultListSelectionModel.MAX;
			this.maxIndex = org.aswing.DefaultListSelectionModel.MIN;
			this.clearSelectionImp();
			this.fireListSelectionEvent(0,max,programmatic);
		}
	}
	,clearSelectionImp: function() {
		this.value = [];
	}
	,isSelectionEmpty: function() {
		return this.minIndex > this.maxIndex;
	}
	,insertIndexInterval: function(index,length,before,programmatic) {
		if(programmatic == null) programmatic = true;
		var insMinIndex;
		if(before) insMinIndex = index; else insMinIndex = index + 1;
		var insMaxIndex = insMinIndex + length - 1;
		var needInstertArray = false;
		if(this.isSelectionEmpty()) {
		} else if(this.minIndex >= insMinIndex) {
			this.minIndex += length;
			this.maxIndex += length;
			needInstertArray = true;
		} else if(this.maxIndex < insMinIndex) {
		} else if(insMinIndex > this.minIndex && insMinIndex <= this.maxIndex) {
			this.maxIndex += length;
			needInstertArray = true;
		}
		if(needInstertArray) {
			if(insMinIndex == 0) this.value = new Array().concat(this.value); else {
				var right = this.value.splice(insMinIndex,this.value.length - insMinIndex);
				this.value = this.value.concat(new Array()).concat(right);
			}
		}
		var leadIn = this.leadIndex;
		if(leadIn > index || before && leadIn == index) leadIn = this.leadIndex + length;
		var anchorIn = this.anchorIndex;
		if(anchorIn > index || before && anchorIn == index) anchorIn = this.anchorIndex + length;
		if(leadIn != this.leadIndex || anchorIn != this.anchorIndex) this.updateLeadAnchorIndices(anchorIn,leadIn);
		if(needInstertArray) this.fireListSelectionEvent(insMinIndex,insMaxIndex + length,programmatic);
	}
	,removeIndexInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var rmMinIndex = Std["int"](Math.min(index0,index1));
		var rmMaxIndex = Std["int"](Math.max(index0,index1));
		var gapLength = rmMaxIndex - rmMinIndex + 1;
		var needFireEvent = true;
		var i;
		if(this.isSelectionEmpty()) needFireEvent = false; else if(this.minIndex >= rmMinIndex && this.maxIndex <= rmMaxIndex) {
			this.minIndex = org.aswing.DefaultListSelectionModel.MAX;
			this.maxIndex = org.aswing.DefaultListSelectionModel.MIN;
			this.clearSelectionImp();
		} else if(this.maxIndex < rmMinIndex) this.value.splice(rmMinIndex,gapLength); else if(this.minIndex > rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			this.minIndex -= gapLength;
			this.maxIndex -= gapLength;
		} else if(this.minIndex < rmMinIndex && this.maxIndex >= rmMinIndex && this.maxIndex <= rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			var _g = this.minIndex;
			while(_g < rmMinIndex) {
				var i1 = _g++;
				this.maxIndex = i1;
				if(this.value[i1] == true) break;
			}
		} else if(this.minIndex >= rmMinIndex && this.maxIndex > rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			this.maxIndex -= gapLength;
			var _g1 = rmMinIndex - 1;
			var _g2 = this.maxIndex + 1;
			while(_g1 < _g2) {
				var i2 = _g1++;
				this.minIndex = i2;
				if(this.value[i2] == true) break;
			}
		} else if(this.minIndex < rmMinIndex && this.maxIndex > rmMaxIndex) {
			this.value.splice(rmMinIndex,gapLength);
			this.maxIndex -= gapLength;
		} else needFireEvent = false;
		var leadIn = this.leadIndex;
		if(leadIn == 0 && rmMinIndex == 0) {
		} else if(leadIn > rmMaxIndex) leadIn = this.leadIndex - gapLength; else if(leadIn >= rmMinIndex) leadIn = rmMinIndex - 1;
		var anchorIn = this.anchorIndex;
		if(anchorIn == 0 && rmMinIndex == 0) {
		} else if(anchorIn > rmMaxIndex) anchorIn = this.anchorIndex - gapLength; else if(anchorIn >= rmMinIndex) anchorIn = rmMinIndex - 1;
		if(leadIn != this.leadIndex || anchorIn != this.anchorIndex) this.updateLeadAnchorIndices(anchorIn,leadIn);
		if(needFireEvent) this.fireListSelectionEvent(rmMinIndex,rmMaxIndex + gapLength,programmatic);
	}
	,setSelectionMode: function(selectionMode) {
		this.selectionMode = selectionMode;
	}
	,getSelectionMode: function() {
		return this.selectionMode;
	}
	,addListSelectionListener: function(listener) {
		this.addEventListener("listSelectionChanged",listener);
	}
	,removeListSelectionListener: function(listener) {
		this.removeEventListener("listSelectionChanged",listener);
	}
	,fireListSelectionEvent: function(firstIndex,lastIndex,programmatic) {
		this.dispatchEvent(new org.aswing.event.SelectionEvent("listSelectionChanged",firstIndex,lastIndex,programmatic));
	}
	,toString: function() {
		return "DefaultListSelectionModel[]";
	}
	,__class__: org.aswing.DefaultListSelectionModel
});
org.aswing.DefaultTextFieldCellEditor = function() {
	org.aswing.AbstractCellEditor.call(this);
	this.setClickCountToStart(2);
};
$hxClasses["org.aswing.DefaultTextFieldCellEditor"] = org.aswing.DefaultTextFieldCellEditor;
org.aswing.DefaultTextFieldCellEditor.__name__ = ["org","aswing","DefaultTextFieldCellEditor"];
org.aswing.DefaultTextFieldCellEditor.__super__ = org.aswing.AbstractCellEditor;
org.aswing.DefaultTextFieldCellEditor.prototype = $extend(org.aswing.AbstractCellEditor.prototype,{
	getTextField: function() {
		if(this.textField == null) this.textField = new org.aswing.JTextField();
		return this.textField;
	}
	,getRestrict: function() {
		return null;
	}
	,transforValueFromText: function(text) {
		return text;
	}
	,getEditorComponent: function() {
		return this.getTextField();
	}
	,getCellEditorValue: function() {
		return this.transforValueFromText(this.getTextField().getText());
	}
	,setCellEditorValue: function(value) {
		this.getTextField().setText(Std.string(value) + "");
	}
	,toString: function() {
		return "DefaultTextFieldCellEditor[]";
	}
	,__class__: org.aswing.DefaultTextFieldCellEditor
});
org.aswing.DefaultNumberTextFieldCellEditor = function() {
	org.aswing.DefaultTextFieldCellEditor.call(this);
};
$hxClasses["org.aswing.DefaultNumberTextFieldCellEditor"] = org.aswing.DefaultNumberTextFieldCellEditor;
org.aswing.DefaultNumberTextFieldCellEditor.__name__ = ["org","aswing","DefaultNumberTextFieldCellEditor"];
org.aswing.DefaultNumberTextFieldCellEditor.__super__ = org.aswing.DefaultTextFieldCellEditor;
org.aswing.DefaultNumberTextFieldCellEditor.prototype = $extend(org.aswing.DefaultTextFieldCellEditor.prototype,{
	getRestrict: function() {
		return "-0123456789.E";
	}
	,transforValueFromText: function(text) {
		return Std.parseFloat(text);
	}
	,__class__: org.aswing.DefaultNumberTextFieldCellEditor
});
org.aswing.SingleSelectionModel = function() { };
$hxClasses["org.aswing.SingleSelectionModel"] = org.aswing.SingleSelectionModel;
org.aswing.SingleSelectionModel.__name__ = ["org","aswing","SingleSelectionModel"];
org.aswing.SingleSelectionModel.prototype = {
	__class__: org.aswing.SingleSelectionModel
};
org.aswing.DefaultSingleSelectionModel = function() {
	this.index = -1;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.DefaultSingleSelectionModel"] = org.aswing.DefaultSingleSelectionModel;
org.aswing.DefaultSingleSelectionModel.__name__ = ["org","aswing","DefaultSingleSelectionModel"];
org.aswing.DefaultSingleSelectionModel.__interfaces__ = [org.aswing.SingleSelectionModel];
org.aswing.DefaultSingleSelectionModel.__super__ = openfl.events.EventDispatcher;
org.aswing.DefaultSingleSelectionModel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	getSelectedIndex: function() {
		return this.index;
	}
	,setSelectedIndex: function(index,programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.index != index) {
			this.index = index;
			this.fireChangeEvent(programmatic);
		}
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectedIndex(-1,programmatic);
	}
	,isSelected: function() {
		return this.getSelectedIndex() != -1;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority,useWeakReference);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireChangeEvent: function(programmatic) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,__class__: org.aswing.DefaultSingleSelectionModel
});
org.aswing.EditableComponent = function() { };
$hxClasses["org.aswing.EditableComponent"] = org.aswing.EditableComponent;
org.aswing.EditableComponent.__name__ = ["org","aswing","EditableComponent"];
org.aswing.EditableComponent.prototype = {
	__class__: org.aswing.EditableComponent
};
org.aswing.FlowLayout = function(align,hgap,vgap,margin) {
	if(margin == null) margin = true;
	if(vgap == null) vgap = 5;
	if(hgap == null) hgap = 5;
	if(align == null) align = 2;
	this.margin = margin;
	this.hgap = hgap;
	this.vgap = vgap;
	this.setAlignment(align);
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.FlowLayout"] = org.aswing.FlowLayout;
org.aswing.FlowLayout.__name__ = ["org","aswing","FlowLayout"];
org.aswing.FlowLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.FlowLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	setMargin: function(b) {
		this.margin = b;
	}
	,isMargin: function() {
		return this.margin;
	}
	,getAlignment: function() {
		return this.align;
	}
	,setAlignment: function(align) {
		this.align = align;
	}
	,getHgap: function() {
		return this.hgap;
	}
	,setHgap: function(hgap) {
		this.hgap = hgap;
	}
	,getVgap: function() {
		return this.vgap;
	}
	,setVgap: function(vgap) {
		this.vgap = vgap;
	}
	,preferredLayoutSize: function(target) {
		var dim = new org.aswing.geom.IntDimension(0,0);
		var nmembers = target.getComponentCount();
		var counted = 0;
		var _g = 0;
		while(_g < nmembers) {
			var i = _g++;
			var m = target.getComponent(i);
			if(m.isVisible()) {
				var d = m.getPreferredSize();
				dim.height = Std["int"](Math.max(dim.height,d.height));
				if(counted > 0) dim.width += this.hgap;
				dim.width += d.width;
				counted++;
			}
		}
		var insets = target.getInsets();
		dim.width += insets.left + insets.right;
		dim.height += insets.top + insets.bottom;
		if(this.margin) {
			dim.width += this.hgap * 2;
			dim.height += this.vgap * 2;
		}
		return dim;
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,moveComponents: function(target,x,y,width,height,rowStart,rowEnd) {
		var _g = this.align;
		switch(_g) {
		case 2:
			x += 0;
			break;
		case 0:
			x += width / 2 | 0;
			break;
		case 4:
			x += width;
			break;
		}
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var i = _g1++;
			var m = target.getComponent(i);
			var d = m.getSize();
			if(m.isVisible()) {
				m.setLocation(new org.aswing.geom.IntPoint(x,y + (height - d.height) / 2 | 0));
				x += d.width + this.hgap;
			}
		}
	}
	,layoutContainer: function(target) {
		var insets = target.getInsets();
		var td = target.getSize();
		var marginW;
		marginW = (this.margin?this.hgap * 2:0) | 0;
		var maxwidth = td.width - (insets.left + insets.right + marginW);
		var nmembers = target.getComponentCount();
		var x = 0;
		var y;
		y = insets.top + (this.margin?this.vgap:0);
		var rowh = 0;
		var start = 0;
		var _g = 0;
		while(_g < nmembers) {
			var i = _g++;
			var m = target.getComponent(i);
			if(m.isVisible()) {
				var d = m.getPreferredSize();
				m.setSize(d);
				if(x == 0 || x + d.width <= maxwidth) {
					if(x > 0) x += this.hgap;
					x += d.width;
					rowh = Std["int"](Math.max(rowh,d.height));
				} else {
					this.moveComponents(target,insets.left + (this.margin?this.hgap:0),y,maxwidth - x,rowh,start,i);
					x = d.width;
					y += this.vgap + rowh;
					rowh = d.height;
					start = i;
				}
			}
		}
		this.moveComponents(target,insets.left + (this.margin?this.hgap:0),y,maxwidth - x,rowh,start,nmembers);
	}
	,toString: function() {
		var str = "";
		var _g = this.align;
		switch(_g) {
		case 2:
			str = ",align=left";
			break;
		case 0:
			str = ",align=center";
			break;
		case 4:
			str = ",align=right";
			break;
		}
		return "FlowLayout[hgap=" + this.hgap + ",vgap=" + this.vgap + str + "]";
	}
	,__class__: org.aswing.FlowLayout
});
org.aswing.FocusManager = function(theStage) {
	this.traversalEnabled = true;
	this.traversalDefault = true;
	this.traversing = false;
	this.inited = false;
	this.defaultPolicy = new org.aswing.ContainerOrderFocusTraversalPolicy();
	this.popups = new org.aswing.util.ArrayList();
	this.init(theStage);
};
$hxClasses["org.aswing.FocusManager"] = org.aswing.FocusManager;
org.aswing.FocusManager.__name__ = ["org","aswing","FocusManager"];
org.aswing.FocusManager.getManager = function(theStage) {
	if(theStage == null) return null;
	var manager = org.aswing.FocusManager.managers.getValue(theStage);
	if(manager == null) {
		manager = new org.aswing.FocusManager(theStage);
		org.aswing.FocusManager.managers.put(theStage,manager);
	}
	return manager;
};
org.aswing.FocusManager.setManager = function(theStage,newManager) {
	if(theStage == null) throw new org.aswing.error.Error("theStage can't be null!");
	if(newManager == null) newManager = new org.aswing.FocusManager(theStage);
	var oldManager = org.aswing.FocusManager.managers.getValue(theStage);
	if(oldManager != newManager) {
		if(oldManager != null) oldManager.uninit();
		org.aswing.FocusManager.managers.put(theStage,newManager);
	}
};
org.aswing.FocusManager.setDefaultTraversalEnabled = function(b) {
	org.aswing.FocusManager.defaultTraversalEnabled = b;
};
org.aswing.FocusManager.isDefaultTraversalEnabled = function() {
	return org.aswing.FocusManager.defaultTraversalEnabled;
};
org.aswing.FocusManager.prototype = {
	__referenceEvent: function(e) {
	}
	,init: function(theStage) {
		if(this.inited != true) {
			this.stage = theStage;
			this.inited = true;
			this.stage.addEventListener(openfl.events.FocusEvent.KEY_FOCUS_CHANGE,$bind(this,this.__onKeyFocusChange),false,0,false);
			this.stage.addEventListener(openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE,$bind(this,this.__onMouseFocusChange),false,0,false);
			this.stage.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__onKeyDown),false,0,false);
			this.stage.addEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.__onKeyUp),false,0,false);
			this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDown),false,0,false);
			this.focusRect = new openfl.display.Sprite();
			this.focusRect.mouseEnabled = false;
			this.focusRect.set_visible(false);
			this.stage.addChild(this.focusRect);
			this.stage.addEventListener(openfl.events.Event.DEACTIVATE,$bind(this,this.__referenceEvent));
		}
	}
	,getPopupsVector: function() {
		return this.popups;
	}
	,moveFocusRectUpperTo: function(c) {
		if(this.focusPaintedComponent != c) {
			if(this.focusPaintedComponent != null) this.removeistenerToFocusPaintedComponent();
			this.focusPaintedComponent = c;
			this.addListenerToFocusPaintedComponent();
		}
		org.aswing.util.DepthManager.bringToTop(this.focusRect);
		var p = c.localToGlobal(new openfl.geom.Point(0,0));
		this.focusRect.set_x(p.x);
		this.focusRect.set_y(p.y);
		return this.focusRect;
	}
	,addListenerToFocusPaintedComponent: function() {
		this.focusPaintedComponent.addEventListener("moved",$bind(this,this.__focusPaintedComMoved));
		this.focusPaintedComponent.addEventListener("resized",$bind(this,this.__focusPaintedComResized));
		this.focusPaintedComponent.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__focusPaintedComRemoved));
	}
	,removeistenerToFocusPaintedComponent: function() {
		if(this.focusPaintedComponent != null) {
			this.focusPaintedComponent.removeEventListener("moved",$bind(this,this.__focusPaintedComMoved));
			this.focusPaintedComponent.removeEventListener("resized",$bind(this,this.__focusPaintedComResized));
			this.focusPaintedComponent.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__focusPaintedComRemoved));
			this.focusPaintedComponent = null;
		}
	}
	,__focusPaintedComRemoved: function(e) {
		this.focusRect.get_graphics().clear();
		this.removeistenerToFocusPaintedComponent();
	}
	,__focusPaintedComMoved: function(e) {
		if(this.focusRect.get_visible()) {
			var dx = e.getNewLocation().x - e.getOldLocation().x;
			var dy = e.getNewLocation().y - e.getOldLocation().y;
			var _g = this.focusRect;
			_g.set_x(_g.get_x() + dx);
			var _g1 = this.focusRect;
			_g1.set_y(_g1.get_y() + dy);
		}
	}
	,__focusPaintedComResized: function(e) {
		if(this.focusRect.get_visible()) this.focusPaintedComponent.paintFocusRect(true);
	}
	,uninit: function() {
		if(this.stage != null) {
			this.stage.removeEventListener(openfl.events.FocusEvent.KEY_FOCUS_CHANGE,$bind(this,this.__onKeyFocusChange),false);
			this.stage.removeEventListener(openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE,$bind(this,this.__onMouseFocusChange),false);
			this.stage.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__onKeyDown),false);
			this.stage.removeEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.__onKeyUp),false);
			this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDown),false);
			this.stage = null;
			this.focusOwner = null;
			this.activeWindow = null;
			this.defaultPolicy = null;
			this.focusPaintedComponent = null;
			if(this.focusRect.parent != null) this.focusRect.parent.removeChild(this.focusRect);
			this.focusRect = null;
			this.inited = false;
			this.oldFocusOwner = null;
			this.traversing = false;
		}
	}
	,__onMouseDown: function(e) {
		this.setTraversing(false);
	}
	,__onMouseFocusChange: function(e) {
		if(this.focusOwner != null) {
			var tar = org.aswing.AsWingUtils["as"](e.relatedObject,openfl.display.InteractiveObject);
			var is_tar = false;
			if(js.Boot.__instanceof(tar,org.aswing.Component)) {
				var tc;
				if(js.Boot.__instanceof(tar,org.aswing.Component)) tc = tar; else tc = null;
				is_tar = !tc.isFocusable();
			}
		}
	}
	,__onKeyFocusChange: function(e) {
		if(!this.isTraversalEnabled()) return;
		if(this.focusOwner != null) {
		}
		if((e.keyCode | 0) != org.aswing.AWKeyboard.TAB) return;
		this.setTraversing(true);
		if(e.shiftKey) this.focusPrevious(); else this.focusNext();
	}
	,__onKeyDown: function(e) {
		if(this.focusOwner != null) this.focusOwner.fireFocusKeyDownEvent(e);
	}
	,__onKeyUp: function(e) {
		if(this.focusOwner != null) this.focusOwner.fireFocusKeyUpEvent(e);
	}
	,isTraversing: function() {
		return this.traversing;
	}
	,setTraversing: function(b) {
		this.traversing = b;
		this.focusRect.set_visible(b);
		if(b != true) {
			this.focusRect.get_graphics().clear();
			this.removeistenerToFocusPaintedComponent();
		}
	}
	,setTraversalEnabled: function(b) {
		this.traversalEnabled = b;
		this.setTraversalAsDefault(false);
	}
	,isTraversalEnabled: function() {
		return this.traversalEnabled;
	}
	,setTraversalAsDefault: function(b) {
		this.traversalDefault = b;
	}
	,isTraversalAsDefault: function() {
		return this.traversalDefault;
	}
	,getPreviousFocusedComponent: function() {
		return this.oldFocusOwner;
	}
	,getFocusOwner: function() {
		return this.focusOwner;
	}
	,setFocusOwner: function(newFocusOwner) {
		if(this.focusOwner != newFocusOwner) {
			this.oldFocusOwner = this.focusOwner;
			this.focusOwner = newFocusOwner;
		}
	}
	,getActiveWindow: function() {
		return this.activeWindow;
	}
	,setActiveWindow: function(newActiveWindow) {
		this.activeWindow = newActiveWindow;
	}
	,focusNextOfComponent: function(aComponent) {
		if(aComponent != null) aComponent.transferFocus();
	}
	,focusPreviousOfComponent: function(aComponent) {
		if(aComponent != null) aComponent.transferFocusBackward();
	}
	,focusNext: function() {
		this.focusNextOfComponent(this.getFocusOwner());
	}
	,focusPrevious: function() {
		this.focusPreviousOfComponent(this.getFocusOwner());
	}
	,getDefaultFocusTraversalPolicy: function() {
		return this.defaultPolicy;
	}
	,setDefaultFocusTraversalPolicy: function(newDefaultPolicy) {
		if(newDefaultPolicy != null) this.defaultPolicy = newDefaultPolicy;
	}
	,__class__: org.aswing.FocusManager
};
org.aswing.FrameTitleBar = function() { };
$hxClasses["org.aswing.FrameTitleBar"] = org.aswing.FrameTitleBar;
org.aswing.FrameTitleBar.__name__ = ["org","aswing","FrameTitleBar"];
org.aswing.FrameTitleBar.prototype = {
	__class__: org.aswing.FrameTitleBar
};
org.aswing.FrameTitleBarLayout = function(minWidth,height) {
	if(height == null) height = 20;
	if(minWidth == null) minWidth = 50;
	org.aswing.BorderLayout.call(this);
	this.minSize = new org.aswing.geom.IntDimension(minWidth,height);
};
$hxClasses["org.aswing.FrameTitleBarLayout"] = org.aswing.FrameTitleBarLayout;
org.aswing.FrameTitleBarLayout.__name__ = ["org","aswing","FrameTitleBarLayout"];
org.aswing.FrameTitleBarLayout.__super__ = org.aswing.BorderLayout;
org.aswing.FrameTitleBarLayout.prototype = $extend(org.aswing.BorderLayout.prototype,{
	countMinSize: function(target) {
		var bar;
		if(js.Boot.__instanceof(target,org.aswing.FrameTitleBar)) bar = target; else bar = null;
		this.minSize.height = bar.getMinimizeHeight();
	}
	,minimumLayoutSize: function(target) {
		this.countMinSize(target);
		return this.preferredLayoutSize(target);
	}
	,preferredLayoutSize: function(target) {
		this.countMinSize(target);
		var size = org.aswing.BorderLayout.prototype.preferredLayoutSize.call(this,target);
		var bar;
		if(js.Boot.__instanceof(target,org.aswing.FrameTitleBar)) bar = target; else bar = null;
		var label = bar.getLabel();
		if(label != null && label.isVisible()) size.width -= Std["int"](Math.max(0,label.getPreferredWidth() - 60));
		size.width = Std["int"](Math.max(this.minSize.width,size.width));
		size.height = Std["int"](Math.max(this.minSize.height,size.height));
		return size;
	}
	,__class__: org.aswing.FrameTitleBarLayout
});
org.aswing.GeneralListCellFactory = function(listCellClass,shareCelles,sameHeight,height) {
	if(height == null) height = 22;
	if(sameHeight == null) sameHeight = true;
	if(shareCelles == null) shareCelles = true;
	this.listCellClass = listCellClass;
	this.shareCelles = shareCelles;
	this.sameHeight = sameHeight;
	this.cellHeight = height;
};
$hxClasses["org.aswing.GeneralListCellFactory"] = org.aswing.GeneralListCellFactory;
org.aswing.GeneralListCellFactory.__name__ = ["org","aswing","GeneralListCellFactory"];
org.aswing.GeneralListCellFactory.__interfaces__ = [org.aswing.ListCellFactory];
org.aswing.GeneralListCellFactory.prototype = {
	createNewCell: function() {
		return org.aswing.AsWingUtils["as"](Type.createInstance(this.listCellClass,[]),org.aswing.ListCell);
	}
	,isAllCellHasSameHeight: function() {
		return this.sameHeight;
	}
	,isShareCells: function() {
		return this.shareCelles;
	}
	,setCellHeight: function(h) {
		this.cellHeight = h;
	}
	,getCellHeight: function() {
		return this.cellHeight;
	}
	,__class__: org.aswing.GeneralListCellFactory
};
org.aswing.GradientBackground = function(fillType,colors,alphas,ratios,direction,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	if(direction == null) direction = 0;
	this.brush = new org.aswing.graphics.GradientBrush(fillType,colors,alphas,ratios,new openfl.geom.Matrix(),spreadMethod,interpolationMethod,focalPointRatio);
	this.direction = direction;
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.GradientBackground"] = org.aswing.GradientBackground;
org.aswing.GradientBackground.__name__ = ["org","aswing","GradientBackground"];
org.aswing.GradientBackground.__interfaces__ = [org.aswing.GroundDecorator];
org.aswing.GradientBackground.prototype = {
	updateDecorator: function(com,g,bounds) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var matrix = new openfl.geom.Matrix();
		matrix.createGradientBox(bounds.width,bounds.height,this.direction,bounds.x,bounds.y);
		this.brush.setMatrix(matrix);
		g.fillRectangle(this.brush,bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.GradientBackground
};
org.aswing.Insets = function(top,left,bottom,right) {
	if(right == null) right = 0;
	if(bottom == null) bottom = 0;
	if(left == null) left = 0;
	if(top == null) top = 0;
	this.bottom = 0;
	this.top = 0;
	this.left = 0;
	this.right = 0;
	this.top = top;
	this.left = left;
	this.bottom = bottom;
	this.right = right;
};
$hxClasses["org.aswing.Insets"] = org.aswing.Insets;
org.aswing.Insets.__name__ = ["org","aswing","Insets"];
org.aswing.Insets.createIdentic = function(edge) {
	return new org.aswing.Insets(edge,edge,edge,edge);
};
org.aswing.Insets.prototype = {
	addInsets: function(insets) {
		this.top += insets.top;
		this.left += insets.left;
		this.bottom += insets.bottom;
		this.right += insets.right;
		return this;
	}
	,getMarginWidth: function() {
		return this.left + this.right;
	}
	,getMarginHeight: function() {
		return this.top + this.bottom;
	}
	,getInsideBounds: function(bounds) {
		var r = bounds.clone();
		r.x += this.left;
		r.y += this.top;
		r.width -= this.left + this.right;
		r.height -= this.top + this.bottom;
		return r;
	}
	,getOutsideBounds: function(bounds) {
		var r = bounds.clone();
		r.x -= this.left;
		r.y -= this.top;
		r.width += this.left + this.right;
		r.height += this.top + this.bottom;
		return r;
	}
	,getOutsideSize: function(size) {
		if(size == null) size = new org.aswing.geom.IntDimension();
		var s = size.clone();
		s.width += this.left + this.right;
		s.height += this.top + this.bottom;
		return s;
	}
	,getInsideSize: function(size) {
		if(size == null) size = new org.aswing.geom.IntDimension();
		var s = size.clone();
		s.width -= this.left + this.right;
		s.height -= this.top + this.bottom;
		return s;
	}
	,equals: function(o) {
		var i;
		if(js.Boot.__instanceof(o,org.aswing.Insets)) i = o; else i = null;
		if(i == null) return false; else return i.bottom == this.bottom && i.left == this.left && i.right == this.right && i.top == this.top;
	}
	,clone: function() {
		return new org.aswing.Insets(this.top,this.left,this.bottom,this.right);
	}
	,toString: function() {
		return "Insets(top:" + this.top + ", left:" + this.left + ", bottom:" + this.bottom + ", right:" + this.right + ")";
	}
	,__class__: org.aswing.Insets
};
org.aswing.JAccordion = function() {
	org.aswing.AbstractTabbedPane.call(this);
	this.setName("JAccordion");
	this.updateUI();
};
$hxClasses["org.aswing.JAccordion"] = org.aswing.JAccordion;
org.aswing.JAccordion.__name__ = ["org","aswing","JAccordion"];
org.aswing.JAccordion.__super__ = org.aswing.AbstractTabbedPane;
org.aswing.JAccordion.prototype = $extend(org.aswing.AbstractTabbedPane.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicAccordionUI;
	}
	,getUIClassID: function() {
		return "AccordionUI";
	}
	,setLayout: function(layout) {
		if(js.Boot.__instanceof(layout,org.aswing.plaf.ComponentUI)) org.aswing.AbstractTabbedPane.prototype.setLayout.call(this,layout); else throw new org.aswing.error.Error("Cannot set non-AccordionUI layout to JAccordion!");
	}
	,__class__: org.aswing.JAccordion
});
org.aswing.Orientable = function() { };
$hxClasses["org.aswing.Orientable"] = org.aswing.Orientable;
org.aswing.Orientable.__name__ = ["org","aswing","Orientable"];
org.aswing.Orientable.prototype = {
	__class__: org.aswing.Orientable
};
org.aswing.JAdjuster = function(columns,orientation) {
	if(orientation == null) orientation = 1;
	if(columns == null) columns = 3;
	org.aswing.Component.call(this);
	this.setColumns(columns);
	this.setOrientation(orientation);
	this.editable = true;
	this.valueTranslator = org.aswing.JAdjuster.DEFAULT_VALUE_TRANSLATOR;
	this.valueParser = org.aswing.JAdjuster.DEFAULT_VALUE_PARSER;
	this.setModel(new org.aswing.DefaultBoundedRangeModel(50,0,0,100));
	this.updateUI();
};
$hxClasses["org.aswing.JAdjuster"] = org.aswing.JAdjuster;
org.aswing.JAdjuster.__name__ = ["org","aswing","JAdjuster"];
org.aswing.JAdjuster.__interfaces__ = [org.aswing.EditableComponent,org.aswing.Orientable];
org.aswing.JAdjuster.DEFAULT_VALUE_TRANSLATOR = function(value) {
	return value + "";
};
org.aswing.JAdjuster.DEFAULT_VALUE_PARSER = function(text) {
	var value = Std.parseInt(text);
	if(value == 0) value = 0;
	return value;
};
org.aswing.JAdjuster.__super__ = org.aswing.Component;
org.aswing.JAdjuster.prototype = $extend(org.aswing.Component.prototype,{
	setUI: function(newUI) {
		if(js.Boot.__instanceof(newUI,org.aswing.plaf.AdjusterUI)) org.aswing.Component.prototype.setUI.call(this,newUI); else throw new openfl.errors.Error("JComboBox ui should implemented ComboBoxUI interface!");
	}
	,getAdjusterUI: function() {
		return org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.AdjusterUI);
	}
	,updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicAdjusterUI;
	}
	,getUIClassID: function() {
		return "AdjusterUI";
	}
	,setColumns: function(columns) {
		if(columns < 0) columns = 0;
		if(this.columns != columns) {
			this.columns = columns;
			if(this.getInputText() != null) this.getInputText().setColumns(columns);
			this.revalidate();
		}
	}
	,getColumns: function() {
		return this.columns;
	}
	,getOrientation: function() {
		return this.orientation;
	}
	,setOrientation: function(orientation) {
		this.orientation = orientation;
		if(this.getPopupSlider() != null) this.getPopupSlider().setOrientation(orientation);
	}
	,getModel: function() {
		return this.model;
	}
	,setModel: function(newModel) {
		if(this.model != null) this.model.removeStateListener($bind(this,this.__onModelStateChanged));
		this.model = newModel;
		if(this.model != null) {
			this.model.addStateListener($bind(this,this.__onModelStateChanged));
			if(this.ui != null) this.getPopupSlider().setModel(this.model);
		}
	}
	,__onModelStateChanged: function(event) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",event.isProgrammatic()));
	}
	,getPopupSlider: function() {
		if(this.getAdjusterUI() == null) return null;
		return this.getAdjusterUI().getPopupSlider();
	}
	,getInputText: function() {
		if(this.getAdjusterUI() == null) return null;
		return this.getAdjusterUI().getInputText();
	}
	,setValueTranslator: function(translator) {
		if(this.valueTranslator != translator) {
			this.valueTranslator = translator;
			this.repaint();
		}
	}
	,getValueTranslator: function() {
		return this.valueTranslator;
	}
	,setValueParser: function(parser) {
		if(this.valueParser != parser) {
			this.valueParser = parser;
			this.repaint();
		}
	}
	,getValueParser: function() {
		return this.valueParser;
	}
	,setEditable: function(b) {
		if(this.editable != b) {
			this.editable = b;
			this.repaint();
			this.revalidate();
		}
	}
	,isEditable: function() {
		return this.editable;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,setValue: function(value) {
		var m = this.getModel();
		m.setValue(value);
	}
	,getExtent: function() {
		return this.getModel().getExtent();
	}
	,setExtent: function(extent) {
		this.getModel().setExtent(extent);
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,setMinimum: function(minimum) {
		this.getModel().setMinimum(minimum);
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setMaximum: function(maximum) {
		this.getModel().setMaximum(maximum);
	}
	,getValueIsAdjusting: function() {
		return this.getModel().getValueIsAdjusting();
	}
	,setValueIsAdjusting: function(b) {
		var m = this.getModel();
		m.setValueIsAdjusting(b);
	}
	,setValues: function(newValue,newExtent,newMin,newMax) {
		var m = this.getModel();
		m.setRangeProperties(newValue,newExtent,newMin,newMax,m.getValueIsAdjusting());
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,__class__: org.aswing.JAdjuster
});
org.aswing.JButton = function(text,icon) {
	if(text == null) text = "";
	org.aswing.AbstractButton.call(this,text,icon);
	this.setClipMasked(true);
	this.setName("JButton" + text);
	this.setModel(new org.aswing.DefaultButtonModel());
};
$hxClasses["org.aswing.JButton"] = org.aswing.JButton;
org.aswing.JButton.__name__ = ["org","aswing","JButton"];
org.aswing.JButton.__super__ = org.aswing.AbstractButton;
org.aswing.JButton.prototype = $extend(org.aswing.AbstractButton.prototype,{
	isDefaultButton: function() {
		var rootPane = this.getRootPaneAncestor();
		if(rootPane != null) return rootPane.getDefaultButton() == this;
		return false;
	}
	,wrapSimpleButton: function(btn) {
		this.mouseChildren = true;
		this.drawTransparentTrigger = false;
		this.setShiftOffset(0);
		this.setIcon(new org.aswing.SimpleButtonIcon(btn));
		this.setBorder(null);
		this.setMargin(new org.aswing.Insets());
		this.setBackgroundDecorator(null);
		this.setOpaque(false);
		this.setHorizontalTextPosition(0);
		this.setVerticalTextPosition(0);
		return this;
	}
	,updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicButtonUI;
	}
	,getUIClassID: function() {
		return "ButtonUI";
	}
	,__class__: org.aswing.JButton
});
org.aswing.JToggleButton = function(text,icon) {
	if(text == null) text = "";
	org.aswing.AbstractButton.call(this,text,icon);
	this.setClipMasked(true);
	this.setName("JToggleButton");
	this.setModel(new org.aswing.ToggleButtonModel());
};
$hxClasses["org.aswing.JToggleButton"] = org.aswing.JToggleButton;
org.aswing.JToggleButton.__name__ = ["org","aswing","JToggleButton"];
org.aswing.JToggleButton.__super__ = org.aswing.AbstractButton;
org.aswing.JToggleButton.prototype = $extend(org.aswing.AbstractButton.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicToggleButtonUI;
	}
	,getUIClassID: function() {
		return "ToggleButtonUI";
	}
	,__class__: org.aswing.JToggleButton
});
org.aswing.JCheckBox = function(text,icon) {
	if(text == null) text = "";
	org.aswing.JToggleButton.call(this,text,icon);
	this.setName("JCheckBox");
	this.setIconTextGap(1);
};
$hxClasses["org.aswing.JCheckBox"] = org.aswing.JCheckBox;
org.aswing.JCheckBox.__name__ = ["org","aswing","JCheckBox"];
org.aswing.JCheckBox.__super__ = org.aswing.JToggleButton;
org.aswing.JCheckBox.prototype = $extend(org.aswing.JToggleButton.prototype,{
	getUIClassID: function() {
		return "CheckBoxUI";
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicCheckBoxUI;
	}
	,__class__: org.aswing.JCheckBox
});
org.aswing.MenuElement = function() { };
$hxClasses["org.aswing.MenuElement"] = org.aswing.MenuElement;
org.aswing.MenuElement.__name__ = ["org","aswing","MenuElement"];
org.aswing.MenuElement.prototype = {
	__class__: org.aswing.MenuElement
};
org.aswing.JMenuItem = function(text,icon) {
	if(text == null) text = "";
	org.aswing.AbstractButton.call(this,text,icon);
	this.setClipMasked(true);
	this.setName("JMenuItem");
	this.setModel(new org.aswing.DefaultButtonModel());
	this.initFocusability();
	this.menuInUse = false;
	this.accelerator = null;
};
$hxClasses["org.aswing.JMenuItem"] = org.aswing.JMenuItem;
org.aswing.JMenuItem.__name__ = ["org","aswing","JMenuItem"];
org.aswing.JMenuItem.__interfaces__ = [org.aswing.MenuElement];
org.aswing.JMenuItem.__super__ = org.aswing.AbstractButton;
org.aswing.JMenuItem.prototype = $extend(org.aswing.AbstractButton.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicMenuItemUI;
	}
	,setUI: function(newUI) {
		if(js.Boot.__instanceof(newUI,org.aswing.plaf.MenuElementUI)) org.aswing.AbstractButton.prototype.setUI.call(this,newUI); else throw new org.aswing.error.Error("JMenuItem just accept MenuElementUI instance!!!");
	}
	,getMenuElementUI: function() {
		return org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.MenuElementUI);
	}
	,getUIClassID: function() {
		return "MenuItemUI";
	}
	,setAccelerator: function(acc) {
		if(this.accelerator != acc) {
			this.accelerator = acc;
			this.revalidate();
			this.repaint();
		}
	}
	,getAccelerator: function() {
		return this.accelerator;
	}
	,initFocusability: function() {
		this.setFocusable(false);
	}
	,getRootPaneOwner: function() {
		var pp = this;
		do {
			pp = pp.getParent();
			if(js.Boot.__instanceof(pp,org.aswing.JPopupMenu)) pp = (js.Boot.__instanceof(pp,org.aswing.JPopupMenu)?pp:null).getInvoker();
			if(js.Boot.__instanceof(pp,org.aswing.JRootPane)) if(js.Boot.__instanceof(pp,org.aswing.JRootPane)) return pp; else return null;
		} while(pp != null);
		return null;
	}
	,inUseChanged: function() {
		var acc = this.getAccelerator();
		if(acc != null) {
			var rOwner = this.getRootPaneOwner();
			if(rOwner == null) {
				throw new org.aswing.error.Error("The menu item has accelerator, " + "it or it's popupMenu must be in a JRootPane(or it's subclass).");
				return;
			}
			var keyMap = rOwner.getKeyMap();
			if(keyMap != null) {
				if(this.isInUse()) keyMap.registerKeyAction(acc,$bind(this,this.__acceleratorAction)); else keyMap.unregisterKeyAction(acc);
			}
		}
	}
	,__acceleratorAction: function() {
		this.doClick();
	}
	,setInUse: function(b) {
		if(this.menuInUse != b) {
			this.menuInUse = b;
			this.inUseChanged();
		}
	}
	,isInUse: function() {
		return this.menuInUse;
	}
	,menuSelectionChanged: function(isIncluded) {
		this.getModel().setRollOver(isIncluded);
	}
	,getSubElements: function() {
		return [];
	}
	,getMenuComponent: function() {
		return this;
	}
	,processKeyEvent: function(code) {
		this.getMenuElementUI().processKeyEvent(code);
	}
	,__class__: org.aswing.JMenuItem
});
org.aswing.JCheckBoxMenuItem = function(text,icon) {
	if(text == null) text = "";
	org.aswing.JMenuItem.call(this,text,icon);
	this.setName("JCheckBoxMenuItem");
	this.setModel(new org.aswing.ToggleButtonModel());
};
$hxClasses["org.aswing.JCheckBoxMenuItem"] = org.aswing.JCheckBoxMenuItem;
org.aswing.JCheckBoxMenuItem.__name__ = ["org","aswing","JCheckBoxMenuItem"];
org.aswing.JCheckBoxMenuItem.__super__ = org.aswing.JMenuItem;
org.aswing.JCheckBoxMenuItem.prototype = $extend(org.aswing.JMenuItem.prototype,{
	getUIClassID: function() {
		return "CheckBoxMenuItemUI";
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicCheckBoxMenuItemUI;
	}
	,__class__: org.aswing.JCheckBoxMenuItem
});
org.aswing.JComboBox = function(listData) {
	org.aswing.Component.call(this);
	this.setName("JComboBox");
	this.maximumRowCount = 7;
	this.editable = false;
	this.setEditor(new org.aswing.DefaultComboBoxEditor());
	if(listData != null) {
		if((listData instanceof Array) && listData.__enum__ == null) this.setListData((listData instanceof Array) && listData.__enum__ == null?listData:null); else if(js.Boot.__instanceof(listData,org.aswing.ListModel)) this.setModel(js.Boot.__instanceof(listData,org.aswing.ListModel)?listData:null); else this.setListData([]);
	}
	this.updateUI();
};
$hxClasses["org.aswing.JComboBox"] = org.aswing.JComboBox;
org.aswing.JComboBox.__name__ = ["org","aswing","JComboBox"];
org.aswing.JComboBox.__interfaces__ = [org.aswing.EditableComponent];
org.aswing.JComboBox.__super__ = org.aswing.Component;
org.aswing.JComboBox.prototype = $extend(org.aswing.Component.prototype,{
	setUI: function(newUI) {
		if(js.Boot.__instanceof(newUI,org.aswing.plaf.ComboBoxUI)) {
			org.aswing.Component.prototype.setUI.call(this,newUI);
			this.getEditor().getEditorComponent().setFont(this.getFont());
			this.getEditor().getEditorComponent().setForeground(this.getForeground());
		} else throw new org.aswing.error.Error("JComboBox ui should implemented ComboBoxUI interface!");
	}
	,updateUI: function() {
		this.getPopupList().updateUI();
		this.editor.getEditorComponent().updateUI();
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicComboBoxUI;
	}
	,getUIClassID: function() {
		return "ComboBoxUI";
	}
	,getComboBoxUI: function() {
		return org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.ComboBoxUI);
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener,false);
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,getPopupList: function() {
		if(this.popupList == null) {
			this.popupList = new org.aswing.JList(null,new org.aswing.DefaultComboBoxListCellFactory());
			this.popupList.setSelectionMode(0);
		}
		return this.popupList;
	}
	,setMaximumRowCount: function(count) {
		this.maximumRowCount = count;
	}
	,getMaximumRowCount: function() {
		return this.maximumRowCount;
	}
	,getListCellFactory: function() {
		return this.getPopupList().getCellFactory();
	}
	,setListCellFactory: function(newFactory) {
		this.getPopupList().setCellFactory(newFactory);
	}
	,setEditor: function(anEditor) {
		if(anEditor == null) return;
		var oldEditor = this.editor;
		if(oldEditor != null) {
			oldEditor.removeActionListener($bind(this,this.__editorActed));
			oldEditor.getEditorComponent().removeFromContainer();
		}
		this.editor = anEditor;
		this.editor.setEditable(this.isEditable());
		this.addChild(this.editor.getEditorComponent());
		if(this.ui != null) {
			this.editor.getEditorComponent().setFont(this.getFont());
			this.editor.getEditorComponent().setForeground(this.getForeground());
			this.editor.getEditorComponent().setBackground(this.getBackground());
		}
		this.editor.addActionListener($bind(this,this.__editorActed));
		this.revalidate();
	}
	,getEditor: function() {
		return this.editor;
	}
	,getInternalFocusObject: function() {
		if(this.isEditable()) return this.getEditor().getEditorComponent().getInternalFocusObject(); else return this;
	}
	,setFont: function(newFont) {
		org.aswing.Component.prototype.setFont.call(this,newFont);
		this.getPopupList().setFont(newFont);
		this.getEditor().getEditorComponent().setFont(newFont);
	}
	,setForeground: function(c) {
		org.aswing.Component.prototype.setForeground.call(this,c);
		this.getEditor().getEditorComponent().setForeground(c);
	}
	,setBackground: function(c) {
		org.aswing.Component.prototype.setBackground.call(this,c);
		this.getEditor().getEditorComponent().setBackground(c);
	}
	,setEditable: function(b) {
		if(this.editable != b) {
			this.editable = b;
			this.getEditor().setEditable(b);
			if(this.isFocusable() && this.isFocusOwner() && this.get_stage() != null) {
			}
		}
	}
	,isEditable: function() {
		return this.editable;
	}
	,setEnabled: function(b) {
		org.aswing.Component.prototype.setEnabled.call(this,b);
		if(!b && this.isPopupVisible()) this.setPopupVisible(false);
		this.getEditor().setEditable(b && this.isEditable());
	}
	,setListData: function(ld) {
		this.getPopupList().setListData(ld);
	}
	,setModel: function(m) {
		if(m != null) this.getPopupList().setModel(m);
	}
	,getModel: function() {
		return this.getPopupList().getModel();
	}
	,showPopup: function() {
		this.setPopupVisible(true);
	}
	,hidePopup: function() {
		this.setPopupVisible(false);
	}
	,setPopupVisible: function(v) {
		this.getComboBoxUI().setPopupVisible(this,v);
	}
	,isPopupVisible: function() {
		return this.getComboBoxUI().isPopupVisible(this);
	}
	,setSelectedItem: function(item,programmatic) {
		if(programmatic == null) programmatic = true;
		var fireChanged = false;
		if(item != this.getSelectedItem()) fireChanged = true;
		this.getEditor().setValue(item);
		var index = this.indexInModel(item);
		if(index >= 0) {
			if(this.getPopupList().getSelectedIndex() != index) {
				this.getPopupList().setSelectedIndex(index,programmatic);
				fireChanged = false;
			}
			this.getPopupList().ensureIndexIsVisible(index);
		}
		if(this.isFocusOwner()) this.getEditor().selectAll();
		this.dispatchEvent(new org.aswing.event.AWEvent("act"));
		if(fireChanged) this.dispatchEvent(new org.aswing.event.InteractiveEvent("selectionChanged",programmatic));
	}
	,getSelectedItem: function() {
		return this.getEditor().getValue();
	}
	,setSelectedIndex: function(anIndex,programmatic) {
		if(programmatic == null) programmatic = true;
		var size = this.getModel().getSize();
		if(anIndex < 0 || anIndex >= size) {
			if(this.getSelectedItem() != null) {
				this.getEditor().setValue(null);
				this.getPopupList().clearSelection();
			}
		} else {
			this.getEditor().setValue(this.getModel().getElementAt(anIndex));
			this.getPopupList().setSelectedIndex(anIndex,programmatic);
			this.getPopupList().ensureIndexIsVisible(anIndex);
		}
		this.dispatchEvent(new org.aswing.event.AWEvent("act"));
	}
	,getSelectedIndex: function() {
		return this.indexInModel(this.getEditor().getValue());
	}
	,getItemCount: function() {
		return this.getModel().getSize();
	}
	,getItemAt: function(index) {
		return this.getModel().getElementAt(index);
	}
	,__editorActed: function(e) {
		if(!this.isPopupVisible()) this.setSelectedItem(this.getEditor().getValue());
	}
	,indexInModel: function(value) {
		var model = this.getModel();
		var n = model.getSize();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			if(model.getElementAt(i) == value) return i;
		}
		return -1;
	}
	,__class__: org.aswing.JComboBox
});
org.aswing.JRootPane = function() {
	org.aswing.Container.call(this);
	this.setName("JRootPane");
	this.mnemonicJustActed = false;
	this.layout = new org.aswing.BorderLayout();
	this.mnemonics = new haxe.ds.IntMap();
	this.keyManager = new org.aswing.KeyboardManager();
	this.keyManager.init(this);
	this.triggerProxy = this;
	this.setMnemonicTriggerProxy(null);
};
$hxClasses["org.aswing.JRootPane"] = org.aswing.JRootPane;
org.aswing.JRootPane.__name__ = ["org","aswing","JRootPane"];
org.aswing.JRootPane.__super__ = org.aswing.Container;
org.aswing.JRootPane.prototype = $extend(org.aswing.Container.prototype,{
	setDefaultButton: function(button) {
		if(this.defaultButton != button) {
			if(this.defaultButton != null) this.defaultButton.repaint();
			this.defaultButton = button;
			this.defaultButton.repaint();
		}
	}
	,getDefaultButton: function() {
		return this.defaultButton;
	}
	,setMenuBar: function(menuBar) {
		throw new org.aswing.error.ImpMissError();
	}
	,getKeyMap: function() {
		return this.keyManager.getKeyMap();
	}
	,getKeyboardManager: function() {
		return this.keyManager;
	}
	,setKeyMapActived: function(b) {
		this.keyManager.setEnabled(b);
	}
	,setMnemonicTriggerProxy: function(trigger) {
		if(trigger != this.triggerProxy) {
			if(this.triggerProxy != null) {
			}
			this.triggerProxy = trigger;
			if(trigger == null) trigger = this;
		}
	}
	,registerMnemonic: function(button) {
		if(button.getMnemonic() >= 0) this.mnemonics.set(button.getMnemonic(),button);
	}
	,unregisterMnemonic: function(button) {
		if(this.mnemonics.get(button.getMnemonic()) == button) this.mnemonics.remove(button.getMnemonic());
	}
	,__keyDown: function(e) {
		this.mnemonicJustActed = false;
		var code = e.keyCode | 0;
		if(code == org.aswing.AWKeyboard.ENTER) {
			var dfBtn = this.getDefaultButton();
			if(dfBtn != null) {
				if(dfBtn.isShowing() && dfBtn.isEnabled()) {
					dfBtn.doClick();
					this.mnemonicJustActed = true;
					return;
				}
			}
		}
		if(this.get_stage() == null) return;
		var mnBtn = this.mnemonics.get(code | 0);
		if(mnBtn != null) {
			if(mnBtn.isShowing() && mnBtn.isEnabled()) {
				mnBtn.doClick();
				var fm = org.aswing.FocusManager.getManager(org.aswing.AsWingManager.getStage());
				if(fm != null) {
					fm.setTraversing(true);
					mnBtn.paintFocusRect();
				}
				this.mnemonicJustActed = true;
			}
		}
	}
	,__removedFromStage: function(e) {
		this.mnemonics = null;
	}
	,__class__: org.aswing.JRootPane
});
org.aswing.JPopup = function(owner,modal) {
	if(modal == null) modal = false;
	org.aswing.JRootPane.call(this);
	if(owner == null) owner = org.aswing.AsWingManager.getRoot(false);
	if(js.Boot.__instanceof(owner,org.aswing.JPopup) || js.Boot.__instanceof(owner,openfl.display.DisplayObjectContainer)) this.owner = owner; else if(owner != null) throw new org.aswing.error.Error(Std.string(this) + " JPopup's owner is not a DisplayObjectContainer or JPopup, owner is : " + Std.string(owner));
	this.modal = modal;
	this.setName("JPopup");
	this.ground_mc = new openfl.display.Sprite();
	this.ground_mc.name = "ground_mc";
	this.ground_mc.set_visible(false);
	this.lastLAF = org.aswing.UIManager.getLookAndFeel();
	this.modalMC = new openfl.display.Sprite();
	this.initModalMC();
	this.set_d_visible(false);
	this.ground_mc.addChild(this.modalMC);
	this.ground_mc.addChild(this);
	this.ownedEquipedPopups = new Array();
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__popupOpennedAddToList));
	this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__popupOfffromDisplayList));
};
$hxClasses["org.aswing.JPopup"] = org.aswing.JPopup;
org.aswing.JPopup.__name__ = ["org","aswing","JPopup"];
org.aswing.JPopup.getPopups = function(st) {
	if(st == null) st = org.aswing.AsWingManager.getStage();
	var fm = org.aswing.FocusManager.getManager(st);
	return fm.getPopupsVector().toArray();
};
org.aswing.JPopup.getOwnedPopupsWithOwner = function(owner) {
	var fm = org.aswing.FocusManager.getManager(org.aswing.AsWingManager.getStage());
	if(fm != null) {
		var ws = new Array();
		var pv = fm.getPopupsVector();
		var n = pv.size();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var w = org.aswing.AsWingUtils["as"](pv.get(i),org.aswing.JPopup);
			if(w.getOwner() == owner) ws.push(w);
		}
		return ws;
	} else return [];
};
org.aswing.JPopup.__super__ = org.aswing.JRootPane;
org.aswing.JPopup.prototype = $extend(org.aswing.JRootPane.prototype,{
	__popupOpennedAddToList: function(e) {
		var fm = org.aswing.FocusManager.getManager(org.aswing.AsWingManager.getStage());
		if(!fm.getPopupsVector().contains(this)) fm.getPopupsVector().append(this);
		org.aswing.AsWingManager.getStage().addEventListener(openfl.events.Event.RESIZE,$bind(this,this.__resetModelMCWhenStageResized),false,0,false);
	}
	,__popupOfffromDisplayList: function(e) {
		var fm = org.aswing.FocusManager.getManager(org.aswing.AsWingManager.getStage());
		if(fm != null) {
			fm.getPopupsVector().remove(this);
			fm.uninit();
		}
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.Event.RESIZE,$bind(this,this.__resetModelMCWhenStageResized));
	}
	,isValidateRoot: function() {
		return true;
	}
	,setEnabled: function(b) {
		org.aswing.JRootPane.prototype.setEnabled.call(this,b);
		this.ground_mc.mouseEnabled = this.isEnabled();
	}
	,getOwner: function() {
		return this.owner;
	}
	,getPopupOwner: function() {
		return org.aswing.AsWingUtils["as"](this.owner,org.aswing.JPopup);
	}
	,getDisplayOwner: function() {
		return org.aswing.AsWingUtils["as"](this.owner,openfl.display.DisplayObjectContainer);
	}
	,changeOwner: function(owner) {
		if(owner == null) owner = org.aswing.AsWingManager.getRoot(false);
		if(this.owner != owner) {
			this.owner = owner;
			if(this.isAddedToList()) {
				if(owner == null) throw new org.aswing.error.Error("This popup is alreay on display list, can't be owned to null, please dispose it first."); else this.equipPopupContents();
			}
		}
	}
	,setModal: function(m) {
		if(this.modal != m) {
			this.modal = m;
			this.modalMC.set_visible(this.modal);
			this.resetModalMC();
		}
	}
	,isModal: function() {
		return this.modal;
	}
	,show: function() {
		this.setVisible(true);
	}
	,getGroundContainer: function() {
		return this.ground_mc;
	}
	,setVisible: function(v) {
		if(v != this.get_visible() || v && !this.isAddedToList()) {
			org.aswing.JRootPane.prototype.setVisible.call(this,v);
			if(v) {
				if(!this.isAddedToList()) this.equipPopupContents();
				this.resetModalMC();
				this.dispatchEvent(new org.aswing.event.PopupEvent("popupOpened"));
			} else this.dispatchEvent(new org.aswing.event.PopupEvent("popupClosed"));
		}
		this.ground_mc.set_visible(this.shouldGroundVisible());
		if(v) this.toFront();
	}
	,pack: function() {
		org.aswing.JRootPane.prototype.pack.call(this);
		this.revalidateIfNecessary();
	}
	,isAddedToList: function() {
		return this.ground_mc.parent != null;
	}
	,hide: function() {
		this.setVisible(false);
	}
	,dispose: function() {
		if(this.isAddedToList()) {
			var st = org.aswing.AsWingManager.getStage();
			this.set_d_visible(false);
			this.disposeProcess(st);
			if(this.ground_mc.parent != null) this.ground_mc.parent.removeChild(this.ground_mc);
			if(this.getPopupOwner() != null) this.getPopupOwner().removeOwnedEquipedPopup(this);
			this.dispatchEvent(new org.aswing.event.PopupEvent("popupClosed"));
		}
	}
	,disposeProcess: function(st) {
		this.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__popupOfffromDisplayList));
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__popupOpennedAddToList));
	}
	,shouldGroundVisible: function() {
		var pOwner = this.getPopupOwner();
		if(pOwner != null) return pOwner.shouldOwnedPopupGroundVisible(this);
		return this.isVisible();
	}
	,shouldOwnedPopupGroundVisible: function(popup) {
		return popup.isVisible();
	}
	,toBack: function() {
		if(this.isAddedToList() && this.isVisible()) {
			var po = this.getPopupOwner();
			if(po == null) {
				if(!org.aswing.util.DepthManager.isBottom(this.ground_mc)) org.aswing.util.DepthManager.bringToBottom(this.ground_mc);
			} else if(po.parent != null) {
				var destIndex = po.parent.getChildIndex(po) + 1;
				if(this.ground_mc != null && this.ground_mc.parent != null && this.ground_mc.parent.getChildIndex(this.ground_mc) != destIndex) this.ground_mc.parent.setChildIndex(this.ground_mc,destIndex);
			}
		}
	}
	,toFront: function() {
		if(this.isAddedToList() && this.isVisible()) {
			if(!org.aswing.util.DepthManager.isTop(this.ground_mc)) org.aswing.util.DepthManager.bringToTop(this.ground_mc);
		}
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(org.aswing.AsWingManager.getStage() != null) {
			org.aswing.JRootPane.prototype.startDrag.call(this,lockCenter,bounds);
			org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__dragMoving));
			org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__dragMoving),false,0,false);
			this.lastDragPos = this.getLocation();
		}
	}
	,stopDrag: function() {
		org.aswing.JRootPane.prototype.stopDrag.call(this);
		if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__dragMoving));
	}
	,__dragMoving: function(e) {
		this.bounds.x = Std["int"](this.get_d_x());
		this.bounds.y = Std["int"](this.get_d_y());
		var newPos = this.getLocation();
		if(!newPos.equals(this.lastDragPos)) this.dispatchEvent(new org.aswing.event.MovedEvent(this.lastDragPos,newPos));
		this.lastDragPos = newPos;
	}
	,getOwnedPopups: function() {
		return org.aswing.JPopup.getOwnedPopupsWithOwner(this);
	}
	,getOwnedEquipedPopups: function() {
		return this.ownedEquipedPopups;
	}
	,getPopupAncestorMC: function() {
		var ow = this;
		while(ow.getPopupOwner() != null) ow = ow.getPopupOwner();
		return ow.getDisplayOwner();
	}
	,getModalMC: function() {
		return this.modalMC;
	}
	,resetModalMC: function() {
		if(!this.isModal()) {
			this.modalMC.set_width(0);
			this.modalMC.set_height(0);
			this.modalMC.set_visible(false);
			return;
		}
		this.modalMC.set_visible(true);
		var globalBounds = org.aswing.AsWingUtils.getVisibleMaximizedBounds(this.ground_mc);
		this.modalMC.set_width(globalBounds.width + 200);
		this.modalMC.set_height(globalBounds.height + 200);
		this.modalMC.set_x(globalBounds.x - 100);
		this.modalMC.set_y(globalBounds.y - 100);
	}
	,initModalMC: function() {
		this.modalMC.set_visible(this.modal);
		this.modalMC.get_graphics().clear();
		var modalColor = new org.aswing.ASColor(0,0);
		var g = new org.aswing.graphics.Graphics2D(this.modalMC.get_graphics());
		g.fillRectangle(new org.aswing.graphics.SolidBrush(modalColor),0,0,1,1);
	}
	,addOwnedEquipedPopup: function(pop) {
		this.ownedEquipedPopups.push(pop);
	}
	,removeOwnedEquipedPopup: function(pop) {
		HxOverrides.remove(this.ownedEquipedPopups,pop);
	}
	,__resetModelMCWhenStageResized: function(e) {
		if(this.isVisible()) this.resetModalMC();
	}
	,equipPopupContents: function() {
		if(js.Boot.__instanceof(this.owner,org.aswing.JPopup)) {
			var jwo = org.aswing.AsWingUtils["as"](this.owner,org.aswing.JPopup);
			jwo.ground_mc.addChild(this.ground_mc);
			jwo.addOwnedEquipedPopup(this);
		} else if(js.Boot.__instanceof(this.owner,openfl.display.DisplayObjectContainer)) {
			var ownerMC = org.aswing.AsWingUtils["as"](this.owner,openfl.display.DisplayObjectContainer);
			ownerMC.addChild(this.ground_mc);
		} else throw new org.aswing.error.Error(Std.string(this) + " JPopup's owner is not a mc or JPopup, owner is : " + Std.string(this.owner));
		if(this.lastLAF != org.aswing.UIManager.getLookAndFeel()) {
			org.aswing.AsWingUtils.updateChildrenUI(this);
			this.lastLAF = org.aswing.UIManager.getLookAndFeel();
		}
	}
	,__class__: org.aswing.JPopup
});
org.aswing.JWindow = function(owner,modal) {
	if(modal == null) modal = false;
	org.aswing.JPopup.call(this,owner,modal);
	this.setName("JWindow");
	this.actived = false;
	this.focusObject = new openfl.display.Sprite();
	this.focusObject.name = "hidden_focus_obj";
	this.focusObject.set_visible(false);
	this.activable = true;
	this.addChild(this.focusObject);
	this.layout = new org.aswing.WindowLayout();
	this.setFocusTraversalPolicy(new org.aswing.WindowOrderFocusTraversalPolicy());
	this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__activeWhenPress),true);
	this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__activeWhenPressWindowSelf));
};
$hxClasses["org.aswing.JWindow"] = org.aswing.JWindow;
org.aswing.JWindow.__name__ = ["org","aswing","JWindow"];
org.aswing.JWindow.getWindows = function(st) {
	if(st == null) st = org.aswing.AsWingManager.getStage();
	var fm = org.aswing.FocusManager.getManager(st);
	var vec = fm.getPopupsVector();
	var arr = new Array();
	var _g1 = 0;
	var _g = vec.size();
	while(_g1 < _g) {
		var i = _g1++;
		var win = vec.get(i);
		if(js.Boot.__instanceof(win,org.aswing.JWindow)) arr.push(win);
	}
	return arr;
};
org.aswing.JWindow.getOwnedWindowsWithOwner = function(owner) {
	var fm = org.aswing.FocusManager.getManager(owner.get_stage());
	if(fm != null) {
		var ws = new Array();
		var vec = fm.getPopupsVector();
		var n = vec.size();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var w = vec.get(i);
			if(js.Boot.__instanceof(w,org.aswing.JWindow) && w.getOwner() == owner) ws.push(w);
		}
		return ws;
	} else return [];
};
org.aswing.JWindow.__super__ = org.aswing.JPopup;
org.aswing.JWindow.prototype = $extend(org.aswing.JPopup.prototype,{
	setLayout: function(layout) {
		if(js.Boot.__instanceof(layout,org.aswing.WindowLayout)) {
			var oldLayout = org.aswing.AsWingUtils["as"](this.layout,org.aswing.WindowLayout);
			org.aswing.JPopup.prototype.setLayout.call(this,layout);
			if(oldLayout != null) {
				if(oldLayout.getTitleBar() != null) layout.addLayoutComponent(oldLayout.getTitleBar(),"Title");
				if(oldLayout.getContentPane() != null) layout.addLayoutComponent(oldLayout.getContentPane(),"Content");
			}
		} else throw new org.aswing.error.Error("Can not set a non-WindowLayout Layout to JWindow");
	}
	,paintImmediately: function() {
		if(this.isVisible()) {
			var minimizSize = this.getMinimumSize();
			var needSize = new org.aswing.geom.IntDimension(Std["int"](Math.max(this.getWidth(),minimizSize.width)),Std["int"](Math.max(this.getHeight(),minimizSize.height)));
			this.setSize(needSize);
			org.aswing.JPopup.prototype.paintImmediately.call(this);
			this.revalidateIfNecessary();
		} else org.aswing.JPopup.prototype.paintImmediately.call(this);
	}
	,getContentPane: function() {
		if(this.contentPane == null) {
			var p = new org.aswing.Container();
			p.setLayout(new org.aswing.BorderLayout());
			this.setContentPaneImp(p);
		}
		return this.contentPane;
	}
	,setContentPane: function(cp) {
		if(cp != this.contentPane) {
			if(cp == null) throw new org.aswing.error.Error(Std.string(this) + " Can not set null to be JWindow's contentPane!"); else this.setContentPaneImp(cp);
		}
	}
	,setContentPaneImp: function(cp) {
		if(this.contentPane != null) this.contentPane.removeFromContainer();
		this.contentPane = cp;
		this.append(this.contentPane,"Content");
	}
	,getWindowOwner: function() {
		return org.aswing.AsWingUtils["as"](this.owner,org.aswing.JWindow);
	}
	,getOwnedWindows: function() {
		return org.aswing.JWindow.getOwnedWindowsWithOwner(this);
	}
	,setVisible: function(v) {
		org.aswing.JPopup.prototype.setVisible.call(this,v);
		if(v && this.isActivable()) this.setActive(true); else this.lostActiveAction(this.get_stage());
	}
	,setActivable: function(b) {
		this.activable = b;
	}
	,isActivable: function() {
		return this.activable;
	}
	,disposeProcess: function(st) {
		this.lostActiveAction(st);
	}
	,isActive: function() {
		return this.actived;
	}
	,setActive: function(b) {
		if(this.actived != b) {
			if(b) this.active(); else this.deactive(this.get_stage());
		}
	}
	,focusAtThisWindow: function() {
		var defaultFocus = this.focusWhenDeactive;
		if(defaultFocus == null || !(org.aswing.AsWingUtils.isAncestor(this,defaultFocus) && defaultFocus.isShowing() && defaultFocus.isFocusable() && defaultFocus.isEnabled())) defaultFocus = this.getFocusTraversalPolicy().getDefaultComponent(this);
		if(defaultFocus == null) defaultFocus = this;
		this.focusWhenDeactive = null;
		defaultFocus.requestFocus();
	}
	,lostActiveAction: function(st) {
		if(this.isActive()) {
			this.deactive(st);
			if(this.getLootActiveFrom() != null && this.getLootActiveFrom().isShowing()) this.getLootActiveFrom().active();
		}
		this.setLootActiveFrom(null);
	}
	,getLootActiveFrom: function() {
		return this.lootActiveFrom;
	}
	,setLootActiveFrom: function(activeOwner) {
		if(this.lootActiveFrom != null) this.lootActiveFrom.removeEventListener("popupClosed",$bind(this,this.__lootActiveFromHide));
		var oldLookActiveFrom = this.lootActiveFrom;
		this.lootActiveFrom = activeOwner;
		if(this.lootActiveFrom != null) this.lootActiveFrom.addEventListener("popupClosed",$bind(this,this.__lootActiveFromHide),false,0,false);
		if(activeOwner != null && activeOwner.getLootActiveFrom() == this) activeOwner.setLootActiveFrom(oldLookActiveFrom);
	}
	,__lootActiveFromHide: function(e) {
		if(this.lootActiveFrom != null) this.setLootActiveFrom(this.lootActiveFrom.lootActiveFrom);
	}
	,active: function(programmatic) {
		if(programmatic == null) programmatic = true;
		var fm = org.aswing.FocusManager.getManager(this.get_stage());
		if(fm == null) return;
		this.actived = true;
		var vec = fm.getPopupsVector();
		var _g1 = 0;
		var _g = vec.size();
		while(_g1 < _g) {
			var i = _g1++;
			var w = org.aswing.AsWingUtils["as"](vec.get(i),org.aswing.JWindow);
			if(w != null && w != this) {
				if(w.isActive()) {
					w.deactive(w.get_stage(),programmatic);
					if(w.isShowing()) this.setLootActiveFrom(w);
				}
			}
		}
		fm.setActiveWindow(this);
		this.focusAtThisWindow();
		this.dispatchEvent(new org.aswing.event.WindowEvent("windowActived",programmatic));
	}
	,deactive: function(st,programmatic) {
		if(programmatic == null) programmatic = true;
		this.actived = false;
		var fm = org.aswing.FocusManager.getManager(st);
		if(fm == null) return;
		this.focusWhenDeactive = fm.getFocusOwner();
		if(!org.aswing.AsWingUtils.isAncestor(this,this.focusWhenDeactive)) this.focusWhenDeactive = null;
		fm.setActiveWindow(null);
		this.dispatchEvent(new org.aswing.event.WindowEvent("windowDeactived",programmatic));
	}
	,getInternalFocusObject: function() {
		return this.focusObject;
	}
	,__activeWhenPress: function(e) {
		if(this.getWindowOwner() != null) this.getWindowOwner().toFront();
		this.toFront();
		if(this.isActivable() && !this.isActive()) this.active(false);
	}
	,__activeWhenPressWindowSelf: function(e) {
		if(e.target == this) this.__activeWhenPress(e);
	}
	,__class__: org.aswing.JWindow
});
org.aswing.JFrame = function(owner,title,modal) {
	if(modal == null) modal = false;
	if(title == null) title = "";
	org.aswing.JWindow.call(this,owner,modal);
	this.setClipMasked(true);
	this.title = title;
	this.state = 0;
	this.defaultCloseOperation = 2;
	this.dragable = true;
	this.resizable = true;
	this.closable = true;
	this.icon = org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE;
	this.lastNormalStateBounds = new org.aswing.geom.IntRectangle(0,0,200,100);
	this.setName("JFrame");
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__frameAddedToStage));
	this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__frameRemovedFromStage));
	this.addEventListener("moved",$bind(this,this.__frameMoved),false,0,false);
	this.updateUI();
	this.setTitleBar(new org.aswing.JFrameTitleBar());
};
$hxClasses["org.aswing.JFrame"] = org.aswing.JFrame;
org.aswing.JFrame.__name__ = ["org","aswing","JFrame"];
org.aswing.JFrame.__super__ = org.aswing.JWindow;
org.aswing.JFrame.prototype = $extend(org.aswing.JWindow.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicFrameUI;
	}
	,setUI: function(newUI) {
		if(js.Boot.__instanceof(newUI,org.aswing.plaf.FrameUI)) org.aswing.JWindow.prototype.setUI.call(this,newUI); else throw new org.aswing.error.Error("JFrame just accept FrameUI instance!!!");
	}
	,getTitleBar: function() {
		return this.titleBar;
	}
	,setTitleBar: function(t) {
		if(this.titleBar != t) {
			var old = this.titleBar;
			if(this.titleBar != null) {
				this.titleBar.setFrame(null);
				this.remove(this.titleBar.getSelf());
			}
			this.titleBar = t;
			if(this.titleBar != null) {
				this.titleBar.setText(this.getTitle());
				this.titleBar.setIcon(this.getIcon());
				this.insert(0,this.titleBar.getSelf(),"Title");
				this.titleBar.setFrame(this);
			}
			this.dispatchEvent(new org.aswing.event.PropertyChangeEvent("titleBar",old,t));
		}
	}
	,getFrameUI: function() {
		return org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.FrameUI);
	}
	,getUIClassID: function() {
		return "FrameUI";
	}
	,setTitle: function(t) {
		if(this.title != t) {
			this.title = t;
			if(this.getTitleBar() != null) this.getTitleBar().setText(t);
			this.repaint();
			this.revalidate();
		}
	}
	,getTitle: function() {
		return this.title;
	}
	,setIcon: function(ico) {
		if(this.icon != ico) {
			this.icon = ico;
			if(this.getTitleBar() != null) this.getTitleBar().setIcon(ico);
			this.repaint();
			this.revalidate();
		}
	}
	,getIcon: function() {
		return this.icon;
	}
	,setResizable: function(b) {
		if(this.resizable != b) {
			this.resizable = b;
			this.getResizer().setEnabled(b);
			this.repaint();
			this.dispatchEvent(new org.aswing.event.FrameEvent("frameAbilityChanged",true));
		}
	}
	,isResizable: function() {
		return this.resizable;
	}
	,setDragable: function(b) {
		if(this.dragable != b) {
			this.dragable = b;
			this.repaint();
			this.revalidate();
			this.dispatchEvent(new org.aswing.event.FrameEvent("frameAbilityChanged",true));
		}
	}
	,isDragable: function() {
		return this.dragable;
	}
	,setClosable: function(b) {
		if(this.closable != b) {
			this.closable = b;
			this.repaint();
			this.dispatchEvent(new org.aswing.event.FrameEvent("frameAbilityChanged",true));
		}
	}
	,isClosable: function() {
		return this.closable;
	}
	,pack: function() {
		if(this.getState() == 0) org.aswing.JWindow.prototype.pack.call(this);
	}
	,getMaximizedBounds: function() {
		if(this.maximizedBounds == null) {
			var b = org.aswing.AsWingUtils.getVisibleMaximizedBounds(this.parent);
			return this.getInsets().getOutsideBounds(b);
		} else return this.maximizedBounds.clone();
	}
	,setMaximizedBounds: function(b) {
		if(b != null) {
			this.maximizedBounds = b.clone();
			this.revalidate();
		} else this.maximizedBounds = null;
	}
	,setDefaultCloseOperation: function(operation) {
		if(operation != 0 && operation != 1 && operation != 2) operation = 2;
		this.defaultCloseOperation = operation;
	}
	,getDefaultCloseOperation: function() {
		return this.defaultCloseOperation;
	}
	,setState: function(s,programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.state != s) {
			if(this.state == 0) this.lastNormalStateBounds.setRect(this.getComBounds());
			this.state = s;
			this.fireStateChanged();
			if(this.state == 2) this.precessIconified(programmatic); else if((this.state & 4) == 4 || (this.state & 8) == 8) this.precessMaximized(programmatic); else this.precessRestored(programmatic);
			this.doStateChange();
		}
	}
	,isMaximized: function() {
		return (this.state & 4) == 4 || (this.state & 8) == 8;
	}
	,doStateChange: function() {
		if(this.state == 2) {
			var iconifiedSize = new org.aswing.geom.IntDimension(60,20);
			if(this.titleBar != null) iconifiedSize = this.titleBar.getSelf().getMinimumSize();
			this.setSize(this.getInsets().getOutsideSize(iconifiedSize));
			var frameMaxBounds = this.getMaximizedBounds();
			if(this.get_x() < frameMaxBounds.x) this.set_x(frameMaxBounds.x);
		} else if(this.state == 0) this.setBounds(this.lastNormalStateBounds); else this.setSizeToFixMaxmimized();
		if(this.getResizer() != null) this.getResizer().setEnabled(this.isResizable() && this.state == 0);
		this.revalidateIfNecessary();
	}
	,__frameMoved: function(e) {
		if(this.state == 2) this.lastNormalStateBounds.setLocation(e.getNewLocation());
	}
	,__frameAddedToStage: function(e) {
		org.aswing.AsWingManager.getStage().addEventListener(openfl.events.Event.RESIZE,$bind(this,this.__frameStageResized),false,0,false);
	}
	,__frameRemovedFromStage: function(e) {
		if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.Event.RESIZE,$bind(this,this.__frameStageResized));
	}
	,__frameStageResized: function(e) {
		if(this.get_stage() == null || org.aswing.AsWingManager.getStage().scaleMode != openfl.display.StageScaleMode.NO_SCALE) return;
		if(this.isMaximized()) {
			this.setSizeToFixMaxmimized();
			this.revalidateIfNecessary();
		}
	}
	,setSizeToFixMaxmimized: function() {
		var maxBounds = this.getMaximizedBounds();
		var b = this.getComBounds();
		if((this.state & 4) == 4) {
			b.x = maxBounds.x;
			b.width = maxBounds.width;
		}
		if((this.state & 8) == 8) {
			b.y = maxBounds.y;
			b.height = maxBounds.height;
		}
		this.setBounds(b);
	}
	,precessIconified: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.doSubPopusVisible();
		this.dispatchEvent(new org.aswing.event.FrameEvent("frameIconified",programmatic));
	}
	,precessRestored: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.doSubPopusVisible();
		this.dispatchEvent(new org.aswing.event.FrameEvent("frameRestored",programmatic));
	}
	,precessMaximized: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.doSubPopusVisible();
		this.dispatchEvent(new org.aswing.event.FrameEvent("frameMaximized",programmatic));
	}
	,doSubPopusVisible: function() {
		var owneds = this.getOwnedEquipedPopups();
		var _g1 = 0;
		var _g = owneds.length;
		while(_g1 < _g) {
			var i = _g1++;
			var pop = owneds[i];
			pop.getGroundContainer().set_visible(pop.shouldGroundVisible());
		}
	}
	,shouldOwnedPopupGroundVisible: function(popup) {
		if(this.getState() == 2) return false;
		return org.aswing.JWindow.prototype.shouldOwnedPopupGroundVisible.call(this,popup);
	}
	,getState: function() {
		return this.state;
	}
	,setResizer: function(r) {
		if(r != this.resizer) {
			this.resizer = r;
			if(this.resizerController == null) this.resizerController = org.aswing.resizer.ResizerController.create(this,r); else this.resizerController.setResizer(this.resizer);
			this.resizerController.setResizable(this.isResizable());
		}
	}
	,getResizer: function() {
		return this.resizer;
	}
	,setResizeDirectly: function(b) {
		if(this.resizerController != null) this.resizerController.setResizeDirectly(b);
	}
	,isResizeDirectly: function() {
		if(this.resizerController != null) return this.resizer.isResizeDirectly(); else return false;
	}
	,setDragDirectly: function(b) {
		this.dragDirectly = b;
		this.setDragDirectlySet(true);
	}
	,isDragDirectly: function() {
		return this.dragDirectly;
	}
	,setDragDirectlySet: function(b) {
		this.dragDirectlySet = b;
	}
	,isDragDirectlySet: function() {
		return this.dragDirectlySet;
	}
	,closeReleased: function() {
		this.dispatchEvent(new org.aswing.event.FrameEvent("frameClosing",false));
		this.tryToClose();
	}
	,tryToClose: function() {
		if(this.defaultCloseOperation == 1) this.hide(); else if(this.defaultCloseOperation == 2) this.dispose();
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,initModalMC: function() {
		org.aswing.JWindow.prototype.initModalMC.call(this);
		this.getModalMC().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__flashModelFrame));
	}
	,__flashModelFrame: function(e) {
		if(this.getFrameUI() != null) this.getFrameUI().flashModalFrame();
	}
	,__class__: org.aswing.JFrame
});
org.aswing.plaf = {};
org.aswing.plaf.UIResource = function() { };
$hxClasses["org.aswing.plaf.UIResource"] = org.aswing.plaf.UIResource;
org.aswing.plaf.UIResource.__name__ = ["org","aswing","plaf","UIResource"];
org.aswing.JFrameTitleBar = function() {
	org.aswing.Container.call(this);
	this.setClipMasked(true);
	this.titleEnabled = true;
	this.minimizeHeight = 22;
	this.setLayout(new org.aswing.FrameTitleBarLayout());
	this.buttonPane = new org.aswing.Container();
	this.buttonPane.setCachePreferSizes(false);
	this.buttonPaneLayout = new org.aswing.SoftBoxLayout(0,0);
	this.buttonPane.setLayout(this.buttonPaneLayout);
	var labelPane = new org.aswing.Container();
	labelPane.setBorder(new org.aswing.border.EmptyBorder(null,new org.aswing.Insets(-3)));
	labelPane.setLayout(new org.aswing.BorderLayout());
	this.titleLabel = new org.aswing.JLabel();
	this.titleLabel.setHorizontalAlignment(2);
	this.titleLabel.setVerticalAlignment(0);
	this.titleLabel.setUIElement(true);
	labelPane.setUIElement(true);
	labelPane.append(this.titleLabel,"Center");
	labelPane.mouseEnabled = false;
	labelPane.mouseChildren = false;
	this.append(labelPane,"Center");
	var btnpP = new org.aswing.Container();
	btnpP.setLayout(new org.aswing.BorderLayout());
	btnpP.append(this.buttonPane,"North");
	this.append(btnpP,"East");
	this.setIconifiedButton(this.createIconifiedButton());
	this.setMaximizeButton(this.createMaximizeButton());
	this.setRestoreButton(this.createRestoreButton());
	this.setCloseButton(this.createCloseButton());
	this.setMaximizeButtonVisible(false);
	this.buttonPane.appendAll([this.iconifiedButton,this.restoreButton,this.maximizeButton,this.closeButton]);
	this.buttonPane.setUIElement(true);
	this.updateUI();
};
$hxClasses["org.aswing.JFrameTitleBar"] = org.aswing.JFrameTitleBar;
org.aswing.JFrameTitleBar.__name__ = ["org","aswing","JFrameTitleBar"];
org.aswing.JFrameTitleBar.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.FrameTitleBar];
org.aswing.JFrameTitleBar.__super__ = org.aswing.Container;
org.aswing.JFrameTitleBar.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicFrameTitleBarUI;
	}
	,createPureButton: function() {
		var b = new org.aswing.JButton();
		b.setBackgroundDecorator(null);
		b.setMargin(new org.aswing.Insets());
		b.setStyleTune(null);
		b.setBackground(null);
		b.setForeground(null);
		b.setMideground(null);
		b.setStyleProxy(this);
		return b;
	}
	,createIconifiedButton: function() {
		return this.createPureButton();
	}
	,createMaximizeButton: function() {
		return this.createPureButton();
	}
	,createRestoreButton: function() {
		return this.createPureButton();
	}
	,createCloseButton: function() {
		return this.createPureButton();
	}
	,setButtonIconGap: function(gap) {
		this.buttonPaneLayout.setGap(gap);
	}
	,getSelf: function() {
		return this;
	}
	,setFrame: function(f) {
		if(this.owner != null) {
			this.owner.removeEventListener("frameAbilityChanged",$bind(this,this.__frameAbilityChanged));
			this.owner.removeEventListener("stateChanged",$bind(this,this.__stateChanged));
			this.owner.removeEventListener("windowActived",$bind(this,this.__activeChange));
			this.owner.removeEventListener("windowDeactived",$bind(this,this.__activeChange));
		}
		this.owner = f;
		if(js.Boot.__instanceof(f,org.aswing.JFrame)) this.frame = f; else this.frame = null;
		if(this.owner != null) {
			this.owner.addEventListener("frameAbilityChanged",$bind(this,this.__frameAbilityChanged),false,0,false);
			this.owner.addEventListener("stateChanged",$bind(this,this.__stateChanged),false,0,false);
			this.owner.addEventListener("windowActived",$bind(this,this.__activeChange),false,0,false);
			this.owner.addEventListener("windowDeactived",$bind(this,this.__activeChange),false,0,false);
		}
		this.__stateChanged(null);
		this.repaint();
	}
	,getFrame: function() {
		return this.owner;
	}
	,setTitleEnabled: function(b) {
		this.titleEnabled = b;
	}
	,isTitleEnabled: function() {
		return this.titleEnabled;
	}
	,setMinimizeHeight: function(h) {
		this.minimizeHeight = h;
	}
	,getMinimizeHeight: function() {
		return this.minimizeHeight;
	}
	,addExtraControl: function(c,position) {
		if(position == 2) this.buttonPane.insert(0,c); else this.buttonPane.append(c);
	}
	,removeExtraControl: function(c) {
		return this.buttonPane.remove(c);
	}
	,getLabel: function() {
		return this.titleLabel;
	}
	,setIcon: function(i) {
		this.icon = i;
		if(this.titleLabel != null) this.titleLabel.setIcon(i);
	}
	,getIcon: function() {
		return this.icon;
	}
	,setText: function(t) {
		this.text = t;
		if(this.titleLabel != null) this.titleLabel.setText(t);
	}
	,getText: function() {
		return this.text;
	}
	,isActive: function() {
		if(this.owner != null) return this.owner.isActive();
		return true;
	}
	,setIconifiedButton: function(b) {
		if(this.iconifiedButton != b) {
			var index = -1;
			if(this.iconifiedButton != null) {
				index = this.buttonPane.getIndex(this.iconifiedButton);
				this.buttonPane.removeAt(index);
				this.iconifiedButton.removeActionListener($bind(this,this.__iconifiedPressed));
			}
			this.iconifiedButton = b;
			if(this.iconifiedButton != null) {
				this.buttonPane.insert(index,this.iconifiedButton);
				this.iconifiedButton.addActionListener($bind(this,this.__iconifiedPressed));
			}
		}
	}
	,setMaximizeButton: function(b) {
		if(this.maximizeButton != b) {
			var index = -1;
			if(this.maximizeButton != null) {
				index = this.buttonPane.getIndex(this.maximizeButton);
				this.buttonPane.removeAt(index);
				this.maximizeButton.removeActionListener($bind(this,this.__maximizePressed));
			}
			this.maximizeButton = b;
			if(this.maximizeButton != null) {
				this.buttonPane.insert(index,this.maximizeButton);
				this.maximizeButton.addActionListener($bind(this,this.__maximizePressed));
			}
		}
	}
	,setRestoreButton: function(b) {
		if(this.restoreButton != b) {
			var index = -1;
			if(this.restoreButton != null) {
				index = this.buttonPane.getIndex(this.restoreButton);
				this.buttonPane.removeAt(index);
				this.restoreButton.removeActionListener($bind(this,this.__restorePressed));
			}
			this.restoreButton = b;
			if(this.restoreButton != null) {
				this.buttonPane.insert(index,this.restoreButton);
				this.restoreButton.addActionListener($bind(this,this.__restorePressed));
			}
		}
	}
	,setCloseButton: function(b) {
		if(this.closeButton != b) {
			var index = -1;
			if(this.closeButton != null) {
				index = this.buttonPane.getIndex(this.closeButton);
				this.buttonPane.removeAt(index);
				this.closeButton.removeActionListener($bind(this,this.__closePressed));
			}
			this.closeButton = b;
			if(this.closeButton != null) {
				this.buttonPane.insert(index,this.closeButton);
				this.closeButton.addActionListener($bind(this,this.__closePressed));
			}
		}
	}
	,getIconifiedButton: function() {
		return this.iconifiedButton;
	}
	,getMaximizeButton: function() {
		return this.maximizeButton;
	}
	,getRestoreButton: function() {
		return this.restoreButton;
	}
	,getCloseButton: function() {
		return this.closeButton;
	}
	,setIconifiedButtonVisible: function(b) {
		if(this.getIconifiedButton() != null) this.getIconifiedButton().setVisible(b);
	}
	,setMaximizeButtonVisible: function(b) {
		if(this.getMaximizeButton() != null) this.getMaximizeButton().setVisible(b);
	}
	,setRestoreButtonVisible: function(b) {
		if(this.getRestoreButton() != null) this.getRestoreButton().setVisible(b);
	}
	,setCloseButtonVisible: function(b) {
		if(this.getCloseButton() != null) this.getCloseButton().setVisible(b);
	}
	,__iconifiedPressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.setState(2,false);
	}
	,__maximizePressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.setState(12,false);
	}
	,__restorePressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.setState(0,false);
	}
	,__closePressed: function(e) {
		if(this.frame != null && this.isTitleEnabled()) this.frame.closeReleased();
	}
	,__activeChange: function(e) {
		this.repaint();
	}
	,__frameAbilityChanged: function(e) {
		this.__stateChanged(null);
	}
	,__stateChanged: function(e) {
		if(this.frame == null) return;
		var state = this.frame.getState();
		if(state != 2 && state != 0 && state != 4 && state != 8 && state != 12) state = 0;
		if(state == 2) {
			this.setIconifiedButtonVisible(false);
			this.setMaximizeButtonVisible(false);
			this.setRestoreButtonVisible(true);
			this.setCloseButtonVisible(this.frame.isClosable());
		} else if(state == 0) {
			this.setIconifiedButtonVisible(this.frame.isResizable());
			this.setRestoreButtonVisible(false);
			this.setMaximizeButtonVisible(this.frame.isResizable());
			this.setCloseButtonVisible(this.frame.isClosable());
		} else {
			this.setIconifiedButtonVisible(this.frame.isResizable());
			this.setRestoreButtonVisible(this.frame.isResizable());
			this.setMaximizeButtonVisible(false);
			this.setCloseButtonVisible(this.frame.isClosable());
		}
		this.revalidateIfNecessary();
	}
	,__class__: org.aswing.JFrameTitleBar
});
org.aswing.event = {};
org.aswing.event.ListDataListener = function() { };
$hxClasses["org.aswing.event.ListDataListener"] = org.aswing.event.ListDataListener;
org.aswing.event.ListDataListener.__name__ = ["org","aswing","event","ListDataListener"];
org.aswing.event.ListDataListener.prototype = {
	__class__: org.aswing.event.ListDataListener
};
org.aswing.Viewportable = function() { };
$hxClasses["org.aswing.Viewportable"] = org.aswing.Viewportable;
org.aswing.Viewportable.__name__ = ["org","aswing","Viewportable"];
org.aswing.Viewportable.prototype = {
	__class__: org.aswing.Viewportable
};
org.aswing.JList = function(listData,cellFactory) {
	this.firstVisibleIndexOffset = 0;
	this.lastVisibleIndexOffset = 0;
	org.aswing.Container.call(this);
	this.setName("JList");
	this.layout = this;
	this.cellPane = new org.aswing.CellPane();
	this.append(this.cellPane);
	this.viewPosition = new org.aswing.geom.IntPoint(0,0);
	this.setSelectionModel(new org.aswing.DefaultListSelectionModel());
	this.firstVisibleIndex = 0;
	this.lastVisibleIndex = -1;
	this.firstVisibleIndexOffset = 0;
	this.lastVisibleIndexOffset = 0;
	this.visibleRowCount = -1;
	this.visibleCellWidth = -1;
	this.preferredWidthWhenNoCount = 20;
	this.verticalUnitIncrement = -2147483648;
	this.verticalBlockIncrement = -2147483648;
	this.horizontalUnitIncrement = -2147483648;
	this.horizontalBlockIncrement = -2147483648;
	this.tracksWidth = false;
	this.viewWidth = 0;
	this.viewHeight = 0;
	this.maxWidthCell = null;
	this.cellPrefferSizes = new haxe.ds.IntMap();
	this.comToCellMap = new haxe.ds.IntMap();
	this.cells = new org.aswing.util.ArrayList();
	this.model = null;
	this.autoDragAndDropType = 0;
	if(cellFactory == null) this.cellFactory = new org.aswing.DefaultListCellFactory(true); else this.cellFactory = cellFactory;
	if(listData == null) this.setModel(new org.aswing.VectorListModel()); else if((listData instanceof Array) && listData.__enum__ == null) this.setListData((listData instanceof Array) && listData.__enum__ == null?listData:null); else if(js.Boot.__instanceof(listData,org.aswing.ListModel)) this.setModel(js.Boot.__instanceof(listData,org.aswing.ListModel)?listData:null);
	this.updateUI();
};
$hxClasses["org.aswing.JList"] = org.aswing.JList;
org.aswing.JList.__name__ = ["org","aswing","JList"];
org.aswing.JList.__interfaces__ = [org.aswing.event.ListDataListener,org.aswing.Viewportable,org.aswing.LayoutManager];
org.aswing.JList.__super__ = org.aswing.Container;
org.aswing.JList.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		var _g1 = 0;
		var _g = this.cells.size();
		while(_g1 < _g) {
			var i = _g1++;
			var cell = org.aswing.AsWingUtils["as"](this.cells.get(i),org.aswing.ListCell);
			cell.getCellComponent().updateUI();
		}
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicListUI;
	}
	,getUIClassID: function() {
		return "ListUI";
	}
	,setLayout: function(layout) {
		throw new org.aswing.error.Error("Can not set layout to JList, its layout is itself!");
	}
	,setListData: function(ld) {
		var m = new org.aswing.VectorListModel(ld);
		this.setModel(m);
	}
	,setModel: function(m) {
		if(m != this.model) {
			if(this.model != null) this.model.removeListDataListener(this);
			this.model = m;
			this.model.addListDataListener(this);
			this.updateListView();
		}
	}
	,getModel: function() {
		return this.model;
	}
	,setSelectionModel: function(m) {
		if(m != this.selectionModel) {
			if(this.selectionModel != null) this.selectionModel.removeListSelectionListener($bind(this,this.__selectionListener));
			this.selectionModel = m;
			this.selectionModel.addListSelectionListener($bind(this,this.__selectionListener));
		}
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,getCellFactory: function() {
		return this.cellFactory;
	}
	,setCellFactory: function(newFactory) {
		this.cellFactory = newFactory;
		this.removeAllCells();
		this.updateListView();
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("listSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("listSelectionChanged",listener);
	}
	,getPreferredCellWidthWhenNoCount: function() {
		return this.preferredWidthWhenNoCount;
	}
	,setPreferredCellWidthWhenNoCount: function(preferredWidthWhenNoCount) {
		this.preferredWidthWhenNoCount = preferredWidthWhenNoCount;
	}
	,updateListView: function() {
		this.createCells();
		this.validateCells();
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().clearSelection(programmatic);
	}
	,setSelectionMode: function(sm) {
		this.getSelectionModel().setSelectionMode(sm);
	}
	,getSelectionMode: function() {
		return this.getSelectionModel().getSelectionMode();
	}
	,getSelectionForeground: function() {
		return this.selectionForeground;
	}
	,setSelectionForeground: function(selectionForeground) {
		var old = this.selectionForeground;
		this.selectionForeground = selectionForeground;
		if(!selectionForeground.equals(old)) {
			this.repaint();
			this.validateCells();
		}
	}
	,getSelectionBackground: function() {
		return this.selectionBackground;
	}
	,setSelectionBackground: function(selectionBackground) {
		var old = this.selectionBackground;
		this.selectionBackground = selectionBackground;
		if(!selectionBackground.equals(old)) {
			this.repaint();
			this.validateCells();
		}
	}
	,getAnchorSelectionIndex: function() {
		return this.getSelectionModel().getAnchorSelectionIndex();
	}
	,getLeadSelectionIndex: function() {
		return this.getSelectionModel().getLeadSelectionIndex();
	}
	,setSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().setSelectionInterval(index0,index1,programmatic);
	}
	,addSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().addSelectionInterval(index0,index1,programmatic);
	}
	,removeSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().removeSelectionInterval(index0,index1,programmatic);
	}
	,selectAll: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectionInterval(0,this.getModel().getSize() - 1,programmatic);
	}
	,getSelectedIndex: function() {
		return this.getSelectionModel().getMinSelectionIndex();
	}
	,isSelectionEmpty: function() {
		return this.getSelectionModel().isSelectionEmpty();
	}
	,getSelectedIndices: function() {
		var indices = new Array();
		var sm = this.getSelectionModel();
		var min = sm.getMinSelectionIndex();
		var max = sm.getMaxSelectionIndex();
		if(min < 0 || max < 0 || this.isSelectionEmpty()) return indices;
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(sm.isSelectedIndex(i)) indices.push(i);
		}
		return indices;
	}
	,isSelectedIndex: function(index) {
		return this.getSelectionModel().isSelectedIndex(index);
	}
	,getSelectedValue: function() {
		var i = this.getSelectedIndex();
		if(i < 0) return null; else return this.model.getElementAt(i);
	}
	,getSelectedValues: function() {
		var values = new Array();
		var sm = this.getSelectionModel();
		var min = sm.getMinSelectionIndex();
		var max = sm.getMaxSelectionIndex();
		if(min < 0 || max < 0 || this.isSelectionEmpty()) return values;
		var vm = this.getModel();
		var _g1 = min;
		var _g = max + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(sm.isSelectedIndex(i)) values.push(vm.getElementAt(i));
		}
		return values;
	}
	,setSelectedIndex: function(index,programmatic) {
		if(programmatic == null) programmatic = true;
		if(index >= this.getModel().getSize()) return;
		this.getSelectionModel().setSelectionInterval(index,index,programmatic);
	}
	,setSelectedIndices: function(indices,programmatic) {
		if(programmatic == null) programmatic = true;
		var sm = this.getSelectionModel();
		sm.clearSelection();
		var size = this.getModel().getSize();
		var _g1 = 0;
		var _g = indices.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(indices[i] < size) sm.addSelectionInterval(indices[i],indices[i],programmatic);
		}
	}
	,setSelectedValue: function(value,programmatic) {
		if(programmatic == null) programmatic = true;
		var n = this.model.getSize();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			if(this.model.getElementAt(i) == value) {
				this.setSelectedIndex(i,programmatic);
				return;
			}
		}
		this.setSelectedIndex(-1,programmatic);
	}
	,setSelectedValues: function(values,programmatic) {
		if(programmatic == null) programmatic = true;
		var sm = this.getSelectionModel();
		sm.clearSelection();
		var size = this.getModel().getSize();
		var _g1 = 0;
		var _g = values.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = 0;
			while(_g2 < size) {
				var j = _g2++;
				if(values[i] == this.getModel().getElementAt(j)) {
					sm.addSelectionInterval(j,j,programmatic);
					break;
				}
			}
		}
	}
	,ensureIndexIsVisible: function(index) {
		if(index <= this.getFirstVisibleIndex()) this.setFirstVisibleIndex(index); else if(index >= this.getLastVisibleIndex()) this.setLastVisibleIndex(index);
	}
	,getFirstVisibleIndex: function() {
		return this.firstVisibleIndex;
	}
	,setFirstVisibleIndex: function(index) {
		var factory = this.getCellFactory();
		var p = this.getViewPosition();
		if(factory.isAllCellHasSameHeight() || factory.isShareCells()) p.y = index * factory.getCellHeight(); else {
			var num = Std["int"](Math.min(this.cells.getSize() - 1,index));
			var y = 0;
			var _g = 0;
			while(_g < num) {
				var i = _g++;
				var cell = org.aswing.AsWingUtils["as"](this.cells.get(i),org.aswing.ListCell);
				var s = this.getCachedCellPreferSize(cell);
				if(s == null) {
					s = cell.getCellComponent().getPreferredSize();
					console.log("Warnning : cell size not cached index = " + i + ", value = " + Std.string(cell.getCellValue()));
				}
				y += s.height;
			}
			p.y = y;
		}
		p.y = Std["int"](Math.max(0,Math.min(this.getViewMaxPos().y,p.y)));
		this.setViewPosition(p);
	}
	,getLastVisibleIndex: function() {
		return this.lastVisibleIndex;
	}
	,setLastVisibleIndex: function(index) {
		var factory = this.getCellFactory();
		var p = this.getViewPosition();
		if(factory.isAllCellHasSameHeight() || factory.isShareCells()) p.y = (index + 1) * factory.getCellHeight() - this.getExtentSize().height; else {
			var num = Std["int"](Math.min(this.cells.getSize(),index + 2));
			var y = 0;
			var _g = 0;
			while(_g < num) {
				var i = _g++;
				var cell = org.aswing.AsWingUtils["as"](this.cells.get(i),org.aswing.ListCell);
				var s = this.getCachedCellPreferSize(cell);
				if(s == null) {
					s = cell.getCellComponent().getPreferredSize();
					console.log("Warnning : cell size not cached index = " + i + ", value = " + Std.string(cell.getCellValue()));
				}
				y += s.height;
			}
			p.y = y - this.getExtentSize().height;
		}
		p.y = Std["int"](Math.max(0,Math.min(this.getViewMaxPos().y,p.y)));
		this.setViewPosition(p);
	}
	,getVisibleRowCount: function() {
		return this.visibleRowCount;
	}
	,setVisibleRowCount: function(c) {
		if(c != this.visibleRowCount) {
			this.visibleRowCount = c;
			this.revalidate();
		}
	}
	,getVisibleCellWidth: function() {
		return this.visibleCellWidth;
	}
	,setVisibleCellWidth: function(w) {
		if(w != this.visibleCellWidth) {
			this.visibleCellWidth = w;
			this.revalidate();
		}
	}
	,setTracksWidth: function(b) {
		if(b != this.tracksWidth) this.tracksWidth = b;
	}
	,isTracksWidth: function() {
		return this.tracksWidth;
	}
	,scrollToBottomLeft: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(0,2147483647));
	}
	,scrollToBottomRight: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(2147483647,2147483647));
	}
	,scrollToTopLeft: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(0,0));
	}
	,scrollToTopRight: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(2147483647,0));
	}
	,setEnabled: function(b) {
		org.aswing.Container.prototype.setEnabled.call(this,b);
		this.mouseChildren = b;
	}
	,getAutoDragAndDropType: function() {
		return this.autoDragAndDropType;
	}
	,isAutoDragAndDropAllown: function() {
		return this.autoDragAndDropType == 1 || this.autoDragAndDropType == 2;
	}
	,isAutoDnDInitiatorAllown: function() {
		if(!this.isAutoDragAndDropAllown()) return false;
		if(!this.isMutableModel()) return this.autoDragAndDropType == 2; else return true;
	}
	,isAutoDnDDropTargetAllown: function() {
		return this.isAutoDragAndDropAllown() && this.isMutableModel();
	}
	,addCellToContainer: function(cell) {
		cell.getCellComponent().setFocusable(false);
		this.cellPane.append(cell.getCellComponent());
		this.comToCellMap.set(cell.getCellComponent().getAwmlIndex(),cell);
		this.addHandlersToCell(cell.getCellComponent());
	}
	,removeCellFromeContainer: function(cell) {
		cell.getCellComponent().removeFromContainer();
		this.comToCellMap.remove(cell.getCellComponent().getAwmlIndex());
		this.removeHandlersFromCell(cell.getCellComponent());
	}
	,checkCreateCellsWhenShareCells: function() {
		this.createCellsWhenShareCells();
	}
	,createCellsWhenShareCells: function() {
		var ih = this.getCellFactory().getCellHeight();
		var needNum = Math.floor(this.getExtentSize().height / ih) + 2;
		this.viewWidth = this.getPreferredCellWidthWhenNoCount();
		this.viewHeight = this.getModel().getSize() * ih;
		if(this.cells.getSize() == needNum) return;
		var i;
		var cell;
		if(this.cells.getSize() < needNum) {
			var addNum = needNum - this.cells.getSize();
			var _g = 0;
			while(_g < addNum) {
				var i1 = _g++;
				cell = this.createNewCell();
				this.addCellToContainer(cell);
				this.cells.append(cell);
			}
		} else if(this.cells.getSize() > needNum) {
			var removeIndex = needNum;
			var removed = this.cells.removeRange(removeIndex,this.cells.getSize() - 1);
			var _g1 = 0;
			var _g2 = removed.length;
			while(_g1 < _g2) {
				var i2 = _g1++;
				cell = org.aswing.AsWingUtils["as"](removed[i2],org.aswing.ListCell);
				this.removeCellFromeContainer(cell);
			}
		}
	}
	,createCellsWhenNotShareCells: function() {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = 0;
		var h = 0;
		var sameHeight = factory.isAllCellHasSameHeight();
		var mSize = m.getSize();
		var cSize = this.cells.getSize();
		this.cellPrefferSizes = new haxe.ds.IntMap();
		var n = Std["int"](Math.min(mSize,cSize));
		var i;
		var cell;
		var s;
		var _g = 0;
		while(_g < n) {
			var i1 = _g++;
			cell = org.aswing.AsWingUtils["as"](this.cells.get(i1),org.aswing.ListCell);
			cell.setCellValue(m.getElementAt(i1));
			s = cell.getCellComponent().getPreferredSize();
			this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),s);
			if(s.width > w) {
				w = s.width;
				this.maxWidthCell = cell;
			}
			if(sameHeight != true) h += s.height;
		}
		if(mSize > cSize) {
			var _g1 = cSize;
			while(_g1 < mSize) {
				var i2 = _g1++;
				cell = this.createNewCell();
				this.cells.append(cell);
				cell.setCellValue(m.getElementAt(i2));
				this.addCellToContainer(cell);
				s = cell.getCellComponent().getPreferredSize();
				this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),s);
				if(s.width > w) {
					w = s.width;
					this.maxWidthCell = cell;
				}
				if(sameHeight != true) h += s.height;
			}
		} else if(mSize < cSize) {
			var removed = this.cells.removeRange(mSize,cSize - 1);
			var _g11 = 0;
			var _g2 = removed.length;
			while(_g11 < _g2) {
				var i3 = _g11++;
				cell = org.aswing.AsWingUtils["as"](removed[i3],org.aswing.ListCell);
				this.removeCellFromeContainer(cell);
				this.cellPrefferSizes.remove(cell.getCellComponent().getAwmlIndex());
			}
		}
		if(sameHeight) h = m.getSize() * factory.getCellHeight();
		this.viewWidth = w;
		this.viewHeight = h;
	}
	,createNewCell: function() {
		return this.getCellFactory().createNewCell();
	}
	,createCells: function() {
		if(this.getCellFactory().isShareCells()) this.createCellsWhenShareCells(); else this.createCellsWhenNotShareCells();
	}
	,removeAllCells: function() {
		var _g1 = 0;
		var _g = this.cells.getSize();
		while(_g1 < _g) {
			var i = _g1++;
			var cell = this.cells.get(i);
			cell.getCellComponent().removeFromContainer();
		}
		this.cells.clear();
	}
	,validateCells: function() {
		this.revalidate();
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,getVerticalUnitIncrement: function() {
		if(this.verticalUnitIncrement != -2147483648) return this.verticalUnitIncrement; else if(this.getCellFactory().isAllCellHasSameHeight()) return this.getCellFactory().getCellHeight(); else return 18;
	}
	,getVerticalBlockIncrement: function() {
		if(this.verticalBlockIncrement != -2147483648) return this.verticalBlockIncrement; else if(this.getCellFactory().isAllCellHasSameHeight()) return this.getExtentSize().height - this.getCellFactory().getCellHeight(); else return this.getExtentSize().height - 10;
	}
	,getHorizontalUnitIncrement: function() {
		if(this.horizontalUnitIncrement == -2147483648) return 1; else return this.horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this.horizontalBlockIncrement == -2147483648) return this.getExtentSize().width - 1; else return this.horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this.verticalUnitIncrement != increment) {
			this.verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this.verticalBlockIncrement != increment) {
			this.verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this.horizontalUnitIncrement != increment) {
			this.horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this.horizontalBlockIncrement != increment) {
			this.horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setViewportTestSize: function(s) {
		this.setSize(s);
	}
	,getExtentSize: function() {
		return this.getInsets().getInsideSize(this.getSize());
	}
	,getViewSize: function() {
		var w;
		if(this.isTracksWidth()) w = this.getExtentSize().width; else w = this.viewWidth;
		return new org.aswing.geom.IntDimension(w,this.viewHeight);
	}
	,getViewPosition: function() {
		return new org.aswing.geom.IntPoint(this.viewPosition.x,this.viewPosition.y);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		this.restrictionViewPos(p);
		if(!this.viewPosition.equals(p)) {
			this.viewPosition.setLocation(p);
			this.fireStateChanged(programmatic);
			this.valid = false;
			org.aswing.RepaintManager.getInstance().addInvalidRootComponent(this);
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org.aswing.geom.IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org.aswing.geom.IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,getViewportPane: function() {
		return this;
	}
	,addLayoutComponent: function(comp,constraints) {
	}
	,removeLayoutComponent: function(comp) {
	}
	,preferredLayoutSize: function(target) {
		var viewSize = this.getViewSize();
		var rowCount = this.getVisibleRowCount();
		if(rowCount > 0) {
			var rowHeight = 20;
			if(this.getCellFactory().isAllCellHasSameHeight()) rowHeight = this.getCellFactory().getCellHeight();
			viewSize.height = rowCount * rowHeight;
		}
		var cellWidth = this.getVisibleCellWidth();
		if(cellWidth > 0) viewSize.width = cellWidth;
		return this.getInsets().getOutsideSize(viewSize);
	}
	,minimumLayoutSize: function(target) {
		return this.getInsets().getOutsideSize();
	}
	,maximumLayoutSize: function(target) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
		var factory = this.getCellFactory();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		this.cellPane.setComBounds(ir);
		if(factory.isShareCells()) this.layoutWhenShareCells(); else if(factory.isAllCellHasSameHeight()) this.layoutWhenNotShareCellsAndSameHeight(); else this.layoutWhenNotShareCellsAndNotSameHeight();
	}
	,layoutWhenShareCells: function() {
		this.checkCreateCellsWhenShareCells();
		var factory = this.getCellFactory();
		var m = this.getModel();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		var cellWidth = ir.width;
		ir.x = ir.y = 0;
		this.restrictionViewPos(this.viewPosition);
		var x = this.viewPosition.x;
		var y = this.viewPosition.y;
		var ih = factory.getCellHeight();
		var startIndex = Math.floor(y / ih);
		var startY = startIndex * ih - y;
		var listSize = m.getSize();
		var cx = ir.x - x;
		var cy = ir.y + startY;
		var maxY = ir.y + ir.height;
		var cellsSize = this.cells.getSize();
		if(listSize < 0) this.lastVisibleIndex = -1;
		var _g = 0;
		while(_g < cellsSize) {
			var i = _g++;
			var cell = this.cells.get(i);
			var ldIndex = startIndex + i;
			var cellCom = cell.getCellComponent();
			if(ldIndex < listSize) {
				cell.setCellValue(m.getElementAt(ldIndex));
				cellCom.setVisible(true);
				cellCom.setComBoundsXYWH(cx,cy,cellWidth,ih);
				if(cy < maxY) this.lastVisibleIndex = ldIndex;
				cy += ih;
				cell.setListCellStatus(this,this.isSelectedIndex(ldIndex),ldIndex);
			} else cellCom.setVisible(false);
			cellCom.validate();
		}
		this.firstVisibleIndex = startIndex;
	}
	,layoutWhenNotShareCellsAndSameHeight: function() {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		var cellWidth = Std["int"](Math.max(ir.width,this.viewWidth));
		ir.x = ir.y = 0;
		this.restrictionViewPos(this.viewPosition);
		var x = this.viewPosition.x;
		var y = this.viewPosition.y;
		var ih = factory.getCellHeight();
		var startIndex = Math.floor(y / ih);
		var listSize = m.getSize();
		var startY = startIndex * ih - y;
		var endIndex = startIndex + Math.ceil((ir.height - (ih + startY)) / ih);
		if(endIndex >= listSize) endIndex = listSize - 1;
		var cx = ir.x - x;
		var cy = ir.y + startY;
		var maxY = ir.y + ir.height;
		var i;
		var cellCom;
		var _g = Std["int"](Math.max(0,this.firstVisibleIndex + this.firstVisibleIndexOffset));
		while(_g < startIndex) {
			var i1 = _g++;
			cellCom = org.aswing.AsWingUtils["as"](this.cells.get(i1),org.aswing.ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		var rlvi = Std["int"](Math.min(this.lastVisibleIndex + this.lastVisibleIndexOffset,listSize - 1));
		var _g1 = endIndex + 1;
		var _g2 = rlvi + 1;
		while(_g1 < _g2) {
			var i2 = _g1++;
			cellCom = org.aswing.AsWingUtils["as"](this.cells.get(i2),org.aswing.ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		if(endIndex < 0 || startIndex > endIndex) this.lastVisibleIndex = -1;
		var _g11 = startIndex;
		var _g3 = endIndex + 1;
		while(_g11 < _g3) {
			var i3 = _g11++;
			var cell = org.aswing.AsWingUtils["as"](this.cells.get(i3),org.aswing.ListCell);
			cellCom = cell.getCellComponent();
			cellCom.setVisible(true);
			var s = this.getCachedCellPreferSize(cell);
			if(s == null) {
				s = cell.getCellComponent().getPreferredSize();
				console.log("Warnning : cell size not cached index = " + i3 + ", value = " + Std.string(cell.getCellValue()));
			}
			var finalWidth = Std["int"](this.isTracksWidth()?ir.width:Math.max(cellWidth,s.width));
			cellCom.setComBoundsXYWH(cx,cy,finalWidth,ih);
			if(cy < maxY) this.lastVisibleIndex = i3;
			cy += ih;
			cell.setListCellStatus(this,this.isSelectedIndex(i3),i3);
			cellCom.validate();
		}
		this.firstVisibleIndex = startIndex;
		this.firstVisibleIndexOffset = this.lastVisibleIndexOffset = 0;
	}
	,getCachedCellPreferSize: function(cell) {
		return org.aswing.AsWingUtils["as"](this.cellPrefferSizes.get(cell.getCellComponent().getAwmlIndex()),org.aswing.geom.IntDimension);
	}
	,layoutWhenNotShareCellsAndNotSameHeight: function() {
		var m = this.getModel();
		var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
		var cellWidth = Std["int"](Math.max(ir.width,this.viewWidth));
		ir.x = ir.y = 0;
		this.restrictionViewPos(this.viewPosition);
		var x = this.viewPosition.x;
		var y = this.viewPosition.y;
		var startIndex = 0;
		var cellsCount = this.cells.getSize();
		var tryY = 0;
		var startY = 0;
		var i;
		var s;
		var cell;
		var _g = 0;
		while(_g < cellsCount) {
			var i1 = _g++;
			cell = org.aswing.AsWingUtils["as"](this.cells.get(i1),org.aswing.ListCell);
			s = this.getCachedCellPreferSize(cell);
			if(s == null) {
				s = cell.getCellComponent().getPreferredSize();
				console.log("Warnning : cell size not cached index = " + i1 + ", value = " + Std.string(cell.getCellValue()));
			}
			tryY += s.height;
			if(tryY > y) {
				startIndex = i1;
				startY = -(s.height - (tryY - y));
				break;
			}
		}
		var listSize = m.getSize();
		var cx = ir.x - x;
		var cy = ir.y + startY;
		var maxY = ir.y + ir.height;
		var tempLastVisibleIndex = -1;
		var cellCom;
		var endIndex = startIndex;
		var _g1 = startIndex;
		while(_g1 < cellsCount) {
			var i2 = _g1++;
			cell = org.aswing.AsWingUtils["as"](this.cells.get(i2),org.aswing.ListCell);
			cellCom = cell.getCellComponent();
			s = this.getCachedCellPreferSize(cell);
			if(s == null) {
				s = cell.getCellComponent().getPreferredSize();
				console.log("Warnning : cell size not cached index = " + i2 + ", value = " + Std.string(cell.getCellValue()));
			}
			cell.setListCellStatus(this,this.isSelectedIndex(i2),i2);
			cellCom.setVisible(true);
			var finalWidth = Std["int"](this.isTracksWidth()?ir.width:Math.max(cellWidth,s.width));
			cellCom.setComBoundsXYWH(cx,cy,finalWidth,s.height);
			cellCom.validate();
			if(cy < maxY) tempLastVisibleIndex = i2;
			cy += s.height;
			endIndex = i2;
			if(cy >= maxY) break;
		}
		var _g2 = Std["int"](Math.max(0,this.firstVisibleIndex + this.firstVisibleIndexOffset));
		while(_g2 < startIndex) {
			var i3 = _g2++;
			cellCom = org.aswing.AsWingUtils["as"](this.cells.get(i3),org.aswing.ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		var rlvi = Std["int"](Math.min(this.lastVisibleIndex + this.lastVisibleIndexOffset,listSize - 1));
		var _g11 = endIndex + 1;
		var _g3 = rlvi + 1;
		while(_g11 < _g3) {
			var i4 = _g11++;
			cellCom = org.aswing.AsWingUtils["as"](this.cells.get(i4),org.aswing.ListCell).getCellComponent();
			cellCom.setVisible(false);
			cellCom.validate();
		}
		this.lastVisibleIndex = tempLastVisibleIndex;
		this.firstVisibleIndex = startIndex;
		this.firstVisibleIndexOffset = this.lastVisibleIndexOffset = 0;
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,invalidateLayout: function(target) {
	}
	,intervalAdded: function(e) {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = this.viewWidth;
		var h = this.viewHeight;
		var sameHeight = factory.isAllCellHasSameHeight();
		var i0 = Std["int"](Math.min(e.getIndex0(),e.getIndex1()));
		var i1 = Std["int"](Math.max(e.getIndex0(),e.getIndex1()));
		if(factory.isShareCells()) {
			w = this.getPreferredCellWidthWhenNoCount();
			h = m.getSize() * factory.getCellHeight();
		} else {
			var _g1 = i0;
			var _g = i1 + 1;
			while(_g1 < _g) {
				var i = _g1++;
				var cell = this.createNewCell();
				this.cells.append(cell,i);
				cell.setCellValue(m.getElementAt(i));
				this.addCellToContainer(cell);
				var s = cell.getCellComponent().getPreferredSize();
				cell.getCellComponent().setVisible(false);
				this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),s);
				if(s.width > w) {
					w = s.width;
					this.maxWidthCell = cell;
				}
				w = Std["int"](Math.max(w,s.width));
				if(sameHeight != true) h += s.height;
			}
			if(sameHeight) h = m.getSize() * factory.getCellHeight();
			if(i0 > this.lastVisibleIndex + this.lastVisibleIndexOffset) {
			} else if(i0 >= this.firstVisibleIndex + this.firstVisibleIndexOffset) this.lastVisibleIndexOffset += i1 - i0 + 1; else if(i0 < this.firstVisibleIndex + this.firstVisibleIndexOffset) {
				this.firstVisibleIndexOffset += i1 - i0 + 1;
				this.lastVisibleIndexOffset += i1 - i0 + 1;
			}
		}
		this.viewWidth = w;
		this.viewHeight = h;
		this.getSelectionModel().insertIndexInterval(i0,i1 - i0 + 1,true);
		this.revalidate();
	}
	,intervalRemoved: function(e) {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = this.viewWidth;
		var h = this.viewHeight;
		var sameHeight = factory.isAllCellHasSameHeight();
		var i0 = Std["int"](Math.min(e.getIndex0(),e.getIndex1()));
		var i1 = Std["int"](Math.max(e.getIndex0(),e.getIndex1()));
		var i;
		var s;
		var cell;
		if(factory.isShareCells()) {
			w = this.getPreferredCellWidthWhenNoCount();
			h = m.getSize() * factory.getCellHeight();
		} else {
			var needRecountWidth = false;
			var _g1 = i0;
			var _g = i1 + 1;
			while(_g1 < _g) {
				var i2 = _g1++;
				cell = org.aswing.AsWingUtils["as"](this.cells.get(i2),org.aswing.ListCell);
				if(cell == this.maxWidthCell) needRecountWidth = true;
				if(sameHeight != true) {
					s = this.getCachedCellPreferSize(cell);
					if(s == null) {
						s = cell.getCellComponent().getPreferredSize();
						console.log("Warnning : cell size not cached index = " + i2 + ", value = " + Std.string(cell.getCellValue()));
					}
					h -= s.height;
				}
				this.removeCellFromeContainer(cell);
				this.cellPrefferSizes.remove(cell.getCellComponent().getAwmlIndex());
			}
			this.cells.removeRange(i0,i1);
			if(sameHeight) h = m.getSize() * factory.getCellHeight();
			if(needRecountWidth) {
				w = 0;
				var _g11 = 0;
				var _g2 = this.cells.getSize();
				while(_g11 < _g2) {
					var i3 = _g11++;
					cell = org.aswing.AsWingUtils["as"](this.cells.get(i3),org.aswing.ListCell);
					s = this.getCachedCellPreferSize(cell);
					if(s == null) {
						s = cell.getCellComponent().getPreferredSize();
						console.log("Warnning : cell size not cached index = " + i3 + ", value = " + Std.string(cell.getCellValue()));
					}
					if(s.width > w) {
						w = s.width;
						this.maxWidthCell = cell;
					}
				}
			}
			if(i0 > this.lastVisibleIndex + this.lastVisibleIndexOffset) {
			} else if(i0 >= this.firstVisibleIndex + this.firstVisibleIndexOffset) this.lastVisibleIndexOffset -= i1 - i0 + 1; else if(i0 < this.firstVisibleIndex + this.firstVisibleIndexOffset) {
				this.firstVisibleIndexOffset -= i1 - i0 + 1;
				this.lastVisibleIndexOffset -= i1 - i0 + 1;
			}
		}
		this.viewWidth = w;
		this.viewHeight = h;
		this.getSelectionModel().removeIndexInterval(i0,i1);
		this.revalidate();
	}
	,contentsChanged: function(e) {
		var factory = this.getCellFactory();
		var m = this.getModel();
		var w = this.viewWidth;
		var h = this.viewHeight;
		var sameHeight = factory.isAllCellHasSameHeight();
		var i0 = Std["int"](Math.min(e.getIndex0(),e.getIndex1()));
		var i1 = Std["int"](Math.max(e.getIndex0(),e.getIndex1()));
		var i;
		var s;
		var cell;
		var ns;
		if(factory.isShareCells()) {
			w = this.getPreferredCellWidthWhenNoCount();
			h = m.getSize() * factory.getCellHeight();
		} else {
			var needRecountWidth = false;
			var _g1 = i0;
			var _g = i1 + 1;
			while(_g1 < _g) {
				var i2 = _g1++;
				var newValue = m.getElementAt(i2);
				cell = org.aswing.AsWingUtils["as"](this.cells.get(i2),org.aswing.ListCell);
				s = this.getCachedCellPreferSize(cell);
				if(s == null) {
					s = cell.getCellComponent().getPreferredSize();
					console.log("Warnning : cell size not cached index = " + i2 + ", value = " + Std.string(cell.getCellValue()));
				}
				if(cell == this.maxWidthCell) {
					h -= s.height;
					cell.setCellValue(newValue);
					ns = cell.getCellComponent().getPreferredSize();
					this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),ns);
					if(ns.width < s.width) needRecountWidth = true; else w = ns.width;
					h += ns.height;
				} else {
					h -= s.height;
					cell.setCellValue(newValue);
					ns = cell.getCellComponent().getPreferredSize();
					this.cellPrefferSizes.set(cell.getCellComponent().getAwmlIndex(),ns);
					h += ns.height;
					if(needRecountWidth != true) {
						if(ns.width > w) {
							this.maxWidthCell = cell;
							w = ns.width;
						}
					}
				}
			}
			if(sameHeight) h = m.getSize() * factory.getCellHeight();
			if(needRecountWidth || this.maxWidthCell == null) {
				w = 0;
				var _g11 = 0;
				var _g2 = this.cells.getSize();
				while(_g11 < _g2) {
					var i3 = _g11++;
					cell = this.cells.get(i3);
					s = this.getCachedCellPreferSize(cell);
					if(s == null) {
						s = cell.getCellComponent().getPreferredSize();
						console.log("Warnning : cell size not cached index = " + i3 + ", value = " + Std.string(cell.getCellValue()));
					}
					if(s.width > w) {
						w = s.width;
						this.maxWidthCell = cell;
					}
				}
			}
		}
		this.viewWidth = w;
		this.viewHeight = h;
		this.revalidate();
	}
	,__selectionListener: function(e) {
		this.dispatchEvent(new org.aswing.event.SelectionEvent("listSelectionChanged",e.getFirstIndex(),e.getLastIndex(),e.isProgrammatic()));
		this.revalidate();
	}
	,addHandlersToCell: function(cellCom) {
		cellCom.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__onItemClick),false,0,false);
		cellCom.addEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.__onItemDoubleClick),false,0,false);
		cellCom.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onItemMouseDown),false,0,false);
		cellCom.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__onItemRollOver),false,0,false);
		cellCom.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__onItemRollOut),false,0,false);
		cellCom.addEventListener("releaseOutSide",$bind(this,this.__onItemReleaseOutSide),false,0,false);
	}
	,removeHandlersFromCell: function(cellCom) {
		cellCom.removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__onItemClick));
		cellCom.removeEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.__onItemDoubleClick));
		cellCom.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onItemMouseDown));
		cellCom.removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__onItemRollOver));
		cellCom.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__onItemRollOut));
		cellCom.removeEventListener("releaseOutSide",$bind(this,this.__onItemReleaseOutSide));
	}
	,createItemEventObj: function(cellCom,type,e) {
		var cell = this.getCellByCellComponent(js.Boot.__instanceof(cellCom,org.aswing.Component)?cellCom:null);
		var cellValue = null;
		if(cell != null) cellValue = cell.getCellValue();
		var event = new org.aswing.event.ListItemEvent(type,cellValue,cell,e);
		return event;
	}
	,getItemIndexByCellComponent: function(item) {
		var cell = this.comToCellMap.get(item.getAwmlIndex());
		console.log(cell);
		return this.getItemIndexByCell(cell);
	}
	,cellsIndexOf: function(cell) {
		var _g1 = 0;
		var _g = this.cells.size();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.cells.get(i).getAwmlIndex() == cell.getAwmlIndex()) return i;
		}
		return -1;
	}
	,getItemIndexByCell: function(cell) {
		var itemIndex;
		if(this.getCellFactory().isShareCells()) itemIndex = this.firstVisibleIndex + this.cellsIndexOf(cell); else itemIndex = this.cellsIndexOf(cell);
		return itemIndex;
	}
	,getCellByCellComponent: function(item) {
		return this.comToCellMap.get(item.getAwmlIndex());
	}
	,getCellByIndex: function(index) {
		if(this.getCellFactory().isShareCells()) return org.aswing.AsWingUtils["as"](this.cells.get(index - this.firstVisibleIndex),org.aswing.ListCell); else return org.aswing.AsWingUtils["as"](this.cells.get(index),org.aswing.ListCell);
	}
	,__onItemMouseDown: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemMouseDown",e));
	}
	,__onItemClick: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemClick",e));
	}
	,__onItemReleaseOutSide: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemReleaseOutSide",e));
	}
	,__onItemRollOver: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemRollOver",e));
	}
	,__onItemRollOut: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemRollOut",e));
	}
	,__onItemDoubleClick: function(e) {
		this.dispatchEvent(this.createItemEventObj(e.currentTarget,"itemDoubleClick",e));
	}
	,isMutableModel: function() {
		return Std["is"](this.getModel(),org.aswing.MutableListModel);
	}
	,__class__: org.aswing.JList
});
org.aswing.JMenu = function(text,icon) {
	if(text == null) text = "";
	org.aswing.JMenuItem.call(this,text,icon);
	this.setName("JMenu");
	this.delay = 200;
	this.menuInUse = false;
	this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__menuDestroied));
};
$hxClasses["org.aswing.JMenu"] = org.aswing.JMenu;
org.aswing.JMenu.__name__ = ["org","aswing","JMenu"];
org.aswing.JMenu.__interfaces__ = [org.aswing.MenuElement];
org.aswing.JMenu.__super__ = org.aswing.JMenuItem;
org.aswing.JMenu.prototype = $extend(org.aswing.JMenuItem.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
		if(this.popupMenu != null) this.popupMenu.updateUI();
	}
	,getUIClassID: function() {
		return "MenuUI";
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicMenuUI;
	}
	,isTopLevelMenu: function() {
		if(!Std["is"](this.getParent(),org.aswing.JPopupMenu)) return true;
		return false;
	}
	,isMenuComponent: function(c) {
		if(c == null) return false;
		if(c == this) return true;
		if(c == this.popupMenu) return true;
		var ncomponents = this.getComponentCount();
		var _g = 0;
		while(_g < ncomponents) {
			var i = _g++;
			var comp = this.getComponent(i);
			if(comp == c) return true;
			if(js.Boot.__instanceof(comp,org.aswing.JMenu)) {
				var subMenu;
				if(js.Boot.__instanceof(comp,org.aswing.JMenu)) subMenu = comp; else subMenu = null;
				if(subMenu.isMenuComponent(c)) return true;
			}
		}
		return false;
	}
	,getPopupMenu: function() {
		this.ensurePopupMenuCreated();
		return this.popupMenu;
	}
	,addMenuItem: function(s) {
		var mi = new org.aswing.JMenuItem(s);
		this.append(mi);
		return mi;
	}
	,append: function(c) {
		this.getPopupMenu().append(c);
	}
	,insert: function(i,c) {
		this.getPopupMenu().insert(i,c);
	}
	,getComponentCount: function() {
		if(this.popupMenu != null) return this.popupMenu.getComponentCount(); else return 0;
	}
	,getComponent: function(index) {
		if(this.popupMenu != null) return this.popupMenu.getComponent(index); else return null;
	}
	,remove: function(c) {
		if(this.popupMenu != null) return this.popupMenu.remove(c);
		return null;
	}
	,removeAt: function(i) {
		if(this.popupMenu != null) return this.popupMenu.removeAt(i);
		return null;
	}
	,removeAll: function() {
		if(this.popupMenu != null) this.popupMenu.removeAll();
	}
	,getDelay: function() {
		return this.delay;
	}
	,setDelay: function(d) {
		if(d < 0) {
			console.log("/e/Delay must be a positive integer, ignored.");
			return;
		}
		this.delay = d;
	}
	,isPopupMenuVisible: function() {
		return this.popupMenu != null && this.popupMenu.isVisible();
	}
	,setPopupMenuVisible: function(b) {
		var isVisible = this.isPopupMenuVisible();
		if(b != isVisible && (this.isEnabled() || !b)) {
			this.ensurePopupMenuCreated();
			if(b == true && this.isShowing()) {
				var p = this.getPopupMenuOrigin();
				this.getPopupMenu().show(this,p.x,p.y);
			} else this.getPopupMenu().setVisible(false);
		}
	}
	,ensurePopupMenuCreated: function() {
		if(this.popupMenu == null) {
			this.popupMenu = new org.aswing.JPopupMenu();
			this.popupMenu.setInvoker(this);
		}
	}
	,getPopupMenuOrigin: function() {
		var p;
		if(Std["is"](this.getParent(),org.aswing.JPopupMenu)) {
			p = new org.aswing.geom.IntPoint(this.getWidth(),0);
			var ofx = this.getUIPropertyNumber("Menu.submenuPopupOffsetX");
			var ofy = this.getUIPropertyNumber("Menu.submenuPopupOffsetY");
			p.x += ofx;
			p.y += ofy;
			if(this.get_stage() != null) {
				var rect = org.aswing.AsWingUtils.getVisibleMaximizedBounds(this);
				var popupSize = this.getPopupMenu().getPreferredSize();
				if(p.x + popupSize.width > rect.x + rect.width) p.x = -ofx - popupSize.width;
				if(p.y + popupSize.height > rect.y + rect.height) p.y = -ofy - popupSize.height + this.getHeight();
			}
		} else {
			p = new org.aswing.geom.IntPoint(0,this.getHeight());
			p.x += this.getUIPropertyNumber("Menu.menuPopupOffsetX");
			p.y += this.getUIPropertyNumber("Menu.menuPopupOffsetY");
		}
		return p;
	}
	,getUIPropertyNumber: function(name) {
		var n = this.getUI().getInt(name);
		return n;
	}
	,__menuDestroied: function(e) {
		if(this.popupMenu != null && this.popupMenu.isVisible()) this.popupMenu.dispose();
	}
	,setInUse: function(b) {
		if(this.menuInUse != b) {
			this.menuInUse = b;
			if(b) this.ensurePopupMenuCreated();
			var subs = this.getSubElements();
			var _g1 = 0;
			var _g = subs.length;
			while(_g1 < _g) {
				var i = _g1++;
				var ele = org.aswing.AsWingUtils["as"](subs[i],org.aswing.MenuElement);
				ele.setInUse(b);
			}
			this.inUseChanged();
		}
	}
	,menuSelectionChanged: function(isIncluded) {
		this.setSelected(isIncluded);
	}
	,getSubElements: function() {
		if(this.popupMenu == null) return []; else return [this.popupMenu];
	}
	,getMenuComponent: function() {
		return this;
	}
	,__class__: org.aswing.JMenu
});
org.aswing.JMenuBar = function() {
	org.aswing.Container.call(this);
	this.setSelectionModel(new org.aswing.DefaultSingleSelectionModel());
	this.layout = new org.aswing.plaf.EmptyLayoutUIResourse();
	this.menuInUse = false;
	this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__menuBarDestroied));
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__menuBarCreated));
	this.addEventListener("comAdded",$bind(this,this.__menuBarChildAdd));
	this.addEventListener("comRemoved",$bind(this,this.__menuBarChildRemove));
	this.updateUI();
};
$hxClasses["org.aswing.JMenuBar"] = org.aswing.JMenuBar;
org.aswing.JMenuBar.__name__ = ["org","aswing","JMenuBar"];
org.aswing.JMenuBar.__interfaces__ = [org.aswing.MenuElement];
org.aswing.JMenuBar.__super__ = org.aswing.Container;
org.aswing.JMenuBar.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,setUI: function(newUI) {
		if(js.Boot.__instanceof(newUI,org.aswing.plaf.MenuElementUI)) org.aswing.Container.prototype.setUI.call(this,newUI); else throw new org.aswing.error.Error("JMenuBar just accept MenuElementUI instance!!!");
	}
	,getMenuElementUI: function() {
		return org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.MenuElementUI);
	}
	,getUIClassID: function() {
		return "MenuBarUI";
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicMenuBarUI;
	}
	,addMenu: function(menu) {
		this.append(menu);
		return menu;
	}
	,getMenu: function(index) {
		var com = this.getComponent(index);
		if(js.Boot.__instanceof(com,org.aswing.JMenu)) if(js.Boot.__instanceof(com,org.aswing.JMenu)) return com; else return null; else return null;
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,setSelectionModel: function(model) {
		this.selectionModel = model;
	}
	,setSelected: function(sel) {
		var model = this.getSelectionModel();
		var index = this.getIndex(sel);
		model.setSelectedIndex(index);
	}
	,isSelected: function() {
		return this.selectionModel.isSelected();
	}
	,menuSelectionChanged: function(isIncluded) {
	}
	,__menuBarDestroied: function(e) {
		this.setInUse(false);
	}
	,__menuBarCreated: function(e) {
		this.setInUse(true);
	}
	,__menuBarChildAdd: function(e) {
		if(Std["is"](e.getChild(),org.aswing.MenuElement)) org.aswing.AsWingUtils["as"](e.getChild(),org.aswing.MenuElement).setInUse(this.isInUse());
	}
	,__menuBarChildRemove: function(e) {
		if(Std["is"](e.getChild(),org.aswing.MenuElement)) org.aswing.AsWingUtils["as"](e.getChild(),org.aswing.MenuElement).setInUse(false);
	}
	,getSubElements: function() {
		var arr = new Array();
		var _g1 = 0;
		var _g = this.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var com = this.getComponent(i);
			if(js.Boot.__instanceof(com,org.aswing.MenuElement)) arr.push(com);
		}
		return arr;
	}
	,getMenuComponent: function() {
		return this;
	}
	,processKeyEvent: function(code) {
		this.getMenuElementUI().processKeyEvent(code);
	}
	,setInUse: function(b) {
		if(this.menuInUse != b) {
			this.menuInUse = b;
			var subs = this.getSubElements();
			var _g1 = 0;
			var _g = subs.length;
			while(_g1 < _g) {
				var i = _g1++;
				var ele = org.aswing.AsWingUtils["as"](subs[i],org.aswing.MenuElement);
				ele.setInUse(b);
			}
		}
	}
	,isInUse: function() {
		return this.menuInUse;
	}
	,__class__: org.aswing.JMenuBar
});
org.aswing.JOptionPane = function() {
	org.aswing.JPanel.call(this,new org.aswing.BorderLayout());
	this.centerPane = org.aswing.SoftBox.createVerticalBox(6);
	this.msgLabel = new org.aswing.JLabel();
	this.centerPane.append(org.aswing.AsWingUtils.createPaneToHold(this.msgLabel,new org.aswing.FlowLayout(0,5,5)));
	this.inputText = new org.aswing.JTextField();
	var inputContainer = new org.aswing.JPanel(new org.aswing.BorderLayout());
	inputContainer.setBorder(new org.aswing.border.EmptyBorder(null,new org.aswing.Insets(0,8,0,8)));
	inputContainer.append(this.inputText,"Center");
	this.centerPane.append(inputContainer);
	this.buttonPane = new org.aswing.JPanel(new org.aswing.FlowLayout(0));
	this.append(this.centerPane,"Center");
	this.append(this.buttonPane,"South");
};
$hxClasses["org.aswing.JOptionPane"] = org.aswing.JOptionPane;
org.aswing.JOptionPane.__name__ = ["org","aswing","JOptionPane"];
org.aswing.JOptionPane.showMessageDialog = function(title,msg,finishHandler,parentComponent,modal,icon,buttons) {
	if(buttons == null) buttons = 1;
	if(modal == null) modal = true;
	var frame = new org.aswing.JFrame(org.aswing.AsWingUtils.getOwnerAncestor(parentComponent),title,modal);
	var pane = new org.aswing.JOptionPane();
	pane.getInputText().setVisible(false);
	pane.setMessage(msg);
	pane.setIcon(icon);
	pane.frame = frame;
	var handler = finishHandler;
	if((buttons & 1) == 1) {
		pane.addButton(pane.getOkButton());
		pane.addCloseListener(pane.getOkButton());
		pane.getOkButton().addActionListener(function(e) {
			if(handler != null) handler(1);
		});
	}
	if((buttons & 4) == 4) {
		pane.addButton(pane.getYesButton());
		pane.addCloseListener(pane.getYesButton());
		pane.getYesButton().addActionListener(function(e1) {
			if(handler != null) handler(4);
		});
	}
	if((buttons & 8) == 8) {
		pane.addButton(pane.getNoButton());
		pane.addCloseListener(pane.getNoButton());
		pane.getNoButton().addActionListener(function(e2) {
			if(handler != null) handler(8);
		});
	}
	if((buttons & 2) == 2) {
		pane.addButton(pane.getCancelButton());
		pane.addCloseListener(pane.getCancelButton());
		pane.getCancelButton().addActionListener(function(e3) {
			if(handler != null) handler(2);
		});
	}
	if((buttons & 16) == 16) {
		pane.addButton(pane.getCloseButton());
		pane.addCloseListener(pane.getCloseButton());
		pane.getCloseButton().addActionListener(function(e4) {
			if(handler != null) handler(16);
		});
	}
	frame.addEventListener("frameClosing",function(e5) {
		if(handler != null) handler(16);
	});
	frame.setDefaultCloseOperation(2);
	frame.setResizable(false);
	frame.getContentPane().append(pane,"Center");
	frame.pack();
	var location = org.aswing.AsWingUtils.getScreenCenterPosition();
	location.x = Math.round(location.x - frame.getWidth() / 2);
	location.y = Math.round(location.y - frame.getHeight() / 2);
	frame.setLocation(location);
	frame.show();
	return pane;
};
org.aswing.JOptionPane.showInputDialog = function(title,msg,finishHandler,defaultValue,parentComponent,modal,icon) {
	if(modal == null) modal = true;
	if(defaultValue == null) defaultValue = "";
	var frame = new org.aswing.JFrame(org.aswing.AsWingUtils.getOwnerAncestor(parentComponent),title,modal);
	var pane = new org.aswing.JOptionPane();
	if(defaultValue != "") pane.inputText.setText(defaultValue);
	pane.setMessage(msg);
	pane.setIcon(icon);
	pane.frame = frame;
	pane.addButton(pane.getOkButton());
	pane.addCloseListener(pane.getOkButton());
	pane.addButton(pane.getCancelButton());
	pane.addCloseListener(pane.getCancelButton());
	var handler = finishHandler;
	pane.getOkButton().addActionListener(function(e) {
		if(handler != null) handler(pane.getInputText().getText());
	});
	var cancelHandler = function(e1) {
		if(handler != null) handler(null);
	};
	pane.getCancelButton().addActionListener(cancelHandler);
	frame.addEventListener("frameClosing",cancelHandler);
	frame.setDefaultCloseOperation(2);
	frame.setResizable(false);
	frame.getContentPane().append(pane,"Center");
	frame.pack();
	var location = org.aswing.AsWingUtils.getScreenCenterPosition();
	location.x = Math.round(location.x - frame.getWidth() / 2);
	location.y = Math.round(location.y - frame.getHeight() / 2);
	frame.setLocation(location);
	frame.show();
	return pane;
};
org.aswing.JOptionPane.__super__ = org.aswing.JPanel;
org.aswing.JOptionPane.prototype = $extend(org.aswing.JPanel.prototype,{
	getFrame: function() {
		return this.frame;
	}
	,getInputText: function() {
		return this.inputText;
	}
	,getMsgLabel: function() {
		return this.msgLabel;
	}
	,getOkButton: function() {
		if(this.okButton == null) this.okButton = new org.aswing.JButton("OK");
		return this.okButton;
	}
	,getCancelButton: function() {
		if(this.cancelButton == null) this.cancelButton = new org.aswing.JButton("Cancel");
		return this.cancelButton;
	}
	,getYesButton: function() {
		if(this.yesButton == null) this.yesButton = new org.aswing.JButton("Yes");
		return this.yesButton;
	}
	,getNoButton: function() {
		if(this.noButton == null) this.noButton = new org.aswing.JButton("No");
		return this.noButton;
	}
	,getCloseButton: function() {
		if(this.closeButton == null) this.closeButton = new org.aswing.JButton("Close");
		return this.closeButton;
	}
	,addButton: function(button) {
		this.buttonPane.append(button);
	}
	,setMessage: function(msg) {
		this.msgLabel.setText(msg);
	}
	,setIcon: function(icon) {
		this.msgLabel.setIcon(icon);
	}
	,addCloseListener: function(button) {
		var f = this.getFrame();
		button.addActionListener(function(e) {
			f.tryToClose();
		});
	}
	,__class__: org.aswing.JOptionPane
});
org.aswing.JPopupMenu = function() {
	org.aswing.Container.call(this);
	this.setName("JPopupMenu");
	this.menuInUse = false;
	this.layout = new org.aswing.plaf.EmptyLayoutUIResourse();
	this.setSelectionModel(new org.aswing.DefaultSingleSelectionModel());
	this.popup = new org.aswing.JPopup();
	this.popup.setLayout(new org.aswing.WindowLayout());
	this.popup.append(this,"Content");
	this.popup.addEventListener("popupOpened",$bind(this,this.__popupShown));
	this.popup.addEventListener("popupClosed",$bind(this,this.__popupClosed));
	this.popup.addEventListener("comAdded",$bind(this,this.__popMenuChildAdd));
	this.popup.addEventListener("comRemoved",$bind(this,this.__popMenuChildRemove));
	this.updateUI();
};
$hxClasses["org.aswing.JPopupMenu"] = org.aswing.JPopupMenu;
org.aswing.JPopupMenu.__name__ = ["org","aswing","JPopupMenu"];
org.aswing.JPopupMenu.__interfaces__ = [org.aswing.MenuElement];
org.aswing.JPopupMenu.__popupMenuMouseDown = function(e) {
	var hittedPopupMenu = false;
	var ps = org.aswing.JPopupMenu.showingMenuPopups;
	var hasPopupWindowShown = ps.length > 0;
	var _g1 = 0;
	var _g = ps.length;
	while(_g1 < _g) {
		var i = _g1++;
		var pp = org.aswing.AsWingUtils["as"](ps[i],org.aswing.JPopup);
		if(pp.hitTestMouse()) {
			hittedPopupMenu = true;
			break;
		}
	}
	if(hasPopupWindowShown && !hittedPopupMenu) org.aswing.MenuSelectionManager.defaultManager().clearSelectedPath(false);
};
org.aswing.JPopupMenu.__super__ = org.aswing.Container;
org.aswing.JPopupMenu.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicPopupMenuUI;
	}
	,setUI: function(newUI) {
		if(js.Boot.__instanceof(newUI,org.aswing.plaf.MenuElementUI)) org.aswing.Container.prototype.setUI.call(this,newUI); else throw new org.aswing.error.Error("JPopupMenu just accept MenuElementUI instance!!!");
	}
	,getMenuElementUI: function() {
		return org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.MenuElementUI);
	}
	,getUIClassID: function() {
		return "PopupMenuUI";
	}
	,addMenuItem: function(s) {
		var mi = new org.aswing.JMenuItem(s);
		this.append(mi);
		return mi;
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,setSelectionModel: function(model) {
		this.selectionModel = model;
	}
	,setSelected: function(sel) {
		var model = this.getSelectionModel();
		var index = this.getIndex(sel);
		model.setSelectedIndex(index);
	}
	,isSelected: function() {
		return this.selectionModel.isSelected();
	}
	,setVisible: function(b) {
		if(b == this.isVisible()) return;
		var owner = org.aswing.AsWingUtils.getOwnerAncestor(this.invoker);
		this.popup.changeOwner(owner);
		if(b) {
			this.popup.setVisible(true);
			if(this.isPopupMenu()) this.setInUse(true);
		} else {
			this.popup.dispose();
			if(this.isPopupMenu()) this.setInUse(false);
		}
		if(b == false) this.getSelectionModel().clearSelection(); else if(this.isPopupMenu()) org.aswing.MenuSelectionManager.defaultManager().setSelectedPath(this.get_stage(),[this],true);
		if(b) {
			this.popup.setMnemonicTriggerProxy(this.get_stage());
			this.revalidate();
		} else this.popup.setMnemonicTriggerProxy(null);
	}
	,isVisible: function() {
		return this.popup.isVisible();
	}
	,getInvoker: function() {
		return this.invoker;
	}
	,setInvoker: function(invoker) {
		this.invoker = invoker;
		this.popup.changeOwner(org.aswing.AsWingUtils.getOwnerAncestor(invoker));
	}
	,show: function(invoker,x,y) {
		this.setInvoker(invoker);
		var gp;
		if(invoker != null) {
			gp = invoker.getGlobalLocation();
			if(gp == null) gp = new org.aswing.geom.IntPoint(x,y); else gp.move(x,y);
		} else gp = new org.aswing.geom.IntPoint(x,y);
		this.pack();
		this.setVisible(true);
		this.adjustPopupLocationToFitScreen(gp);
		this.popup.setGlobalLocation(gp);
	}
	,pack: function() {
		this.popup.pack();
	}
	,dispose: function() {
		this.popup.dispose();
		if(this.isPopupMenu()) this.setInUse(false);
	}
	,getRootPopupMenu: function() {
		var mp = this;
		while(mp != null && mp.isPopupMenu() != true && mp.getInvoker() != null && mp.getInvoker().getParent() != null && Std["is"](mp.getInvoker().getParent(),org.aswing.JPopupMenu)) mp = org.aswing.AsWingUtils["as"](mp.getInvoker().getParent(),org.aswing.JPopupMenu);
		return mp;
	}
	,isSubPopupMenu: function(popupMenu) {
		var ncomponents = this.getComponentCount();
		var _g = 0;
		while(_g < ncomponents) {
			var i = _g++;
			var comp = this.getComponent(i);
			if(js.Boot.__instanceof(comp,org.aswing.JMenu)) {
				var menu;
				if(js.Boot.__instanceof(comp,org.aswing.JMenu)) menu = comp; else menu = null;
				var subPopup = menu.getPopupMenu();
				if(subPopup == popupMenu) return true;
				if(subPopup.isSubPopupMenu(popupMenu)) return true;
			}
		}
		return false;
	}
	,isPopupMenu: function() {
		return !js.Boot.__instanceof(this.invoker,org.aswing.JMenu);
	}
	,adjustPopupLocationToFitScreen: function(gp) {
		var globalBounds = org.aswing.AsWingUtils.getVisibleMaximizedBounds(this.popup.parent);
		if(gp.x + this.popup.getWidth() > globalBounds.x + globalBounds.width) gp.x = gp.x - this.popup.getWidth();
		if(gp.x < globalBounds.x) gp.x = globalBounds.x;
		if(gp.y + this.popup.getHeight() > globalBounds.y + globalBounds.height) gp.y = gp.y - this.popup.getHeight();
		if(gp.y < globalBounds.y) gp.y = globalBounds.y;
		return gp;
	}
	,__popMenuChildAdd: function(e) {
		var child = e.getChild();
		if(js.Boot.__instanceof(child,org.aswing.MenuElement)) (js.Boot.__instanceof(child,org.aswing.MenuElement)?child:null).setInUse(this.isInUse());
	}
	,__popMenuChildRemove: function(e) {
		var child = e.getChild();
		if(js.Boot.__instanceof(child,org.aswing.MenuElement)) (js.Boot.__instanceof(child,org.aswing.MenuElement)?child:null).setInUse(false);
	}
	,menuSelectionChanged: function(isIncluded) {
		if(js.Boot.__instanceof(this.invoker,org.aswing.JMenu)) {
			var m = org.aswing.AsWingUtils["as"](this.invoker,org.aswing.JMenu);
			if(isIncluded) m.setPopupMenuVisible(true); else m.setPopupMenuVisible(false);
		}
		if(this.isPopupMenu() && !isIncluded) this.setVisible(false);
	}
	,getSubElements: function() {
		var arr = new Array();
		var _g1 = 0;
		var _g = this.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var com = this.getComponent(i);
			if(js.Boot.__instanceof(com,org.aswing.MenuElement)) arr.push(com);
		}
		return arr;
	}
	,getMenuComponent: function() {
		return this;
	}
	,processKeyEvent: function(code) {
		this.getMenuElementUI().processKeyEvent(code);
	}
	,setInUse: function(b) {
		if(this.menuInUse != b) {
			this.menuInUse = b;
			var subs = this.getSubElements();
			var _g1 = 0;
			var _g = subs.length;
			while(_g1 < _g) {
				var i = _g1++;
				var ele = org.aswing.AsWingUtils["as"](subs[i],org.aswing.MenuElement);
				if(ele != null) ele.setInUse(b);
			}
		}
	}
	,isInUse: function() {
		return this.menuInUse;
	}
	,__popupShown: function(e) {
		var source = org.aswing.AsWingUtils["as"](e.target,org.aswing.JPopup);
		org.aswing.JPopupMenu.showingMenuPopups.push(source);
		org.aswing.AsWingManager.callNextFrame($bind(this,this.__addMouseDownListenerToStage));
	}
	,__addMouseDownListenerToStage: function(e) {
		if(org.aswing.JPopupMenu.showingMenuPopups.length > 0 && !org.aswing.JPopupMenu.popupMenuMouseDownListening && this.get_stage() != null) {
			org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,org.aswing.JPopupMenu.__popupMenuMouseDown,false,0,true);
			org.aswing.JPopupMenu.popupMenuMouseDownListening = true;
		}
	}
	,__popupClosed: function(e) {
		var source = e.target;
		var x = source;
		HxOverrides.remove(org.aswing.JPopupMenu.showingMenuPopups,x);
		if(org.aswing.JPopupMenu.showingMenuPopups.length == 0 && org.aswing.JPopupMenu.popupMenuMouseDownListening && this.get_stage() != null) {
			org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,org.aswing.JPopupMenu.__popupMenuMouseDown);
			org.aswing.JPopupMenu.popupMenuMouseDownListening = false;
		}
	}
	,__class__: org.aswing.JPopupMenu
});
org.aswing.JProgressBar = function(orient,min,max) {
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(orient == null) orient = 0;
	org.aswing.Component.call(this);
	this.setName("ProgressBar");
	this.orientation = orient;
	this.model = new org.aswing.DefaultBoundedRangeModel(min,0,min,max);
	this.addListenerToModel();
	this.indeterminate = false;
	this.string = null;
	this.indeterminateDelaySet = false;
	this.indeterminatePaintTimer = new org.aswing.util.Timer(40);
	this.indeterminatePaintTimer.addActionListener($bind(this,this.__indeterminateInterval));
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.__progressAddedToStage));
	this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__progressRemovedFromStage));
	this.updateUI();
};
$hxClasses["org.aswing.JProgressBar"] = org.aswing.JProgressBar;
org.aswing.JProgressBar.__name__ = ["org","aswing","JProgressBar"];
org.aswing.JProgressBar.__interfaces__ = [org.aswing.Orientable];
org.aswing.JProgressBar.__super__ = org.aswing.Component;
org.aswing.JProgressBar.prototype = $extend(org.aswing.Component.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicProgressBarUI;
	}
	,getUIClassID: function() {
		return "ProgressBarUI";
	}
	,setIndeterminateDelay: function(delay) {
		this.indeterminatePaintTimer.setDelay(delay);
		this.setIndeterminateDelaySet(true);
	}
	,getIndeterminateDelay: function() {
		return this.indeterminatePaintTimer.getDelay();
	}
	,setIndeterminateDelaySet: function(b) {
		this.indeterminateDelaySet = b;
	}
	,isIndeterminateDelaySet: function() {
		return this.indeterminateDelaySet;
	}
	,getModel: function() {
		return this.model;
	}
	,setModel: function(newModel) {
		if(this.model != null) this.model.removeStateListener($bind(this,this.__onModelStateChanged));
		this.model = newModel;
		if(this.model != null) this.addListenerToModel();
	}
	,getString: function() {
		return this.string;
	}
	,setString: function(s) {
		if(this.string != s) {
			this.string = s;
			this.repaint();
		}
	}
	,getOrientation: function() {
		return this.orientation;
	}
	,setOrientation: function(newOrientation) {
		if(newOrientation != 0 && newOrientation != 1) newOrientation = 0;
		if(this.orientation != newOrientation) {
			this.orientation = newOrientation;
			this.revalidate();
			this.repaint();
		}
	}
	,getPercentComplete: function() {
		var span = this.model.getMaximum() - this.model.getMinimum();
		var currentValue = this.model.getValue();
		var pc = (currentValue - this.model.getMinimum()) / span;
		return pc;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setValue: function(n) {
		this.getModel().setValue(n);
	}
	,setMinimum: function(n) {
		this.getModel().setMinimum(n);
	}
	,setMaximum: function(n) {
		this.getModel().setMaximum(n);
	}
	,setIndeterminate: function(newValue) {
		this.indeterminate = newValue;
		this.__validateIndeterminateIntervalIfNecessary();
	}
	,isIndeterminate: function() {
		return this.indeterminate;
	}
	,addListenerToModel: function() {
		this.model.addStateListener($bind(this,this.__onModelStateChanged));
	}
	,__progressAddedToStage: function(e) {
		this.__validateIndeterminateIntervalIfNecessary();
	}
	,__progressRemovedFromStage: function(e) {
		this.__validateIndeterminateIntervalIfNecessary();
	}
	,__onModelStateChanged: function(event) {
		this.repaint();
	}
	,__indeterminateInterval: function(e) {
		this.repaint();
	}
	,__validateIndeterminateIntervalIfNecessary: function() {
		if(this.isIndeterminate() && this.isOnStage()) {
			if(!this.indeterminatePaintTimer.isRunning()) this.indeterminatePaintTimer.start();
		} else if(this.indeterminatePaintTimer.isRunning()) this.indeterminatePaintTimer.stop();
	}
	,__class__: org.aswing.JProgressBar
});
org.aswing.JRadioButton = function(text,icon) {
	if(text == null) text = "";
	org.aswing.JToggleButton.call(this,text,icon);
	this.setName("JRadioButton");
};
$hxClasses["org.aswing.JRadioButton"] = org.aswing.JRadioButton;
org.aswing.JRadioButton.__name__ = ["org","aswing","JRadioButton"];
org.aswing.JRadioButton.__super__ = org.aswing.JToggleButton;
org.aswing.JRadioButton.prototype = $extend(org.aswing.JToggleButton.prototype,{
	getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicRadioButtonUI;
	}
	,getUIClassID: function() {
		return "RadioButtonUI";
	}
	,__class__: org.aswing.JRadioButton
});
org.aswing.JRadioButtonMenuItem = function(text,icon) {
	if(text == null) text = "";
	org.aswing.JMenuItem.call(this,text,icon);
	this.setName("JRadioButtonMenuItem");
	this.setModel(new org.aswing.ToggleButtonModel());
};
$hxClasses["org.aswing.JRadioButtonMenuItem"] = org.aswing.JRadioButtonMenuItem;
org.aswing.JRadioButtonMenuItem.__name__ = ["org","aswing","JRadioButtonMenuItem"];
org.aswing.JRadioButtonMenuItem.__super__ = org.aswing.JMenuItem;
org.aswing.JRadioButtonMenuItem.prototype = $extend(org.aswing.JMenuItem.prototype,{
	getUIClassID: function() {
		return "RadioButtonMenuItemUI";
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicRadioButtonMenuItemUI;
	}
	,__class__: org.aswing.JRadioButtonMenuItem
});
org.aswing.JScrollBar = function(orientation,value,extent,min,max) {
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(extent == null) extent = 10;
	if(value == null) value = 0;
	if(orientation == null) orientation = 1;
	org.aswing.Component.call(this);
	this.setName("JScrollBar");
	this.unitIncrement = 1;
	if(extent == 0) this.blockIncrement = 10; else this.blockIncrement = extent;
	this.setOrientation(orientation);
	this.setModel(new org.aswing.DefaultBoundedRangeModel(value,extent,min,max));
	this.updateUI();
};
$hxClasses["org.aswing.JScrollBar"] = org.aswing.JScrollBar;
org.aswing.JScrollBar.__name__ = ["org","aswing","JScrollBar"];
org.aswing.JScrollBar.__interfaces__ = [org.aswing.Orientable];
org.aswing.JScrollBar.__super__ = org.aswing.Component;
org.aswing.JScrollBar.prototype = $extend(org.aswing.Component.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicScrollBarUI;
	}
	,getUIClassID: function() {
		return "ScrollBarUI";
	}
	,getOrientation: function() {
		return this.orientation | 0;
	}
	,setOrientation: function(orientation) {
		var oldValue = this.orientation | 0;
		this.orientation = orientation;
		if(orientation != oldValue) {
			this.revalidate();
			this.repaint();
		}
	}
	,getModel: function() {
		return this.model;
	}
	,setModel: function(newModel) {
		if(this.model != null) this.model.removeStateListener($bind(this,this.__modelStateListener));
		this.model = newModel;
		if(this.model != null) this.model.addStateListener($bind(this,this.__modelStateListener));
	}
	,setUnitIncrement: function(unitIncrement) {
		this.unitIncrement = unitIncrement;
	}
	,getUnitIncrement: function() {
		return this.unitIncrement | 0;
	}
	,setBlockIncrement: function(blockIncrement) {
		this.blockIncrement = blockIncrement;
	}
	,getBlockIncrement: function() {
		return this.blockIncrement | 0;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,setValue: function(value,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setValue(value,programmatic);
	}
	,getVisibleAmount: function() {
		return this.getModel().getExtent();
	}
	,setVisibleAmount: function(extent) {
		this.getModel().setExtent(extent);
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,setMinimum: function(minimum) {
		this.getModel().setMinimum(minimum);
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setMaximum: function(maximum) {
		this.getModel().setMaximum(maximum);
	}
	,getValueIsAdjusting: function() {
		return this.getModel().getValueIsAdjusting();
	}
	,setValueIsAdjusting: function(b) {
		var m = this.getModel();
		m.setValueIsAdjusting(b);
	}
	,setValues: function(newValue,newExtent,newMin,newMax,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setRangeProperties(newValue,newExtent,newMin,newMax,m.getValueIsAdjusting(),programmatic);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,__modelStateListener: function(event) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",event.isProgrammatic()));
	}
	,setEnabled: function(b) {
		org.aswing.Component.prototype.setEnabled.call(this,b);
		this.mouseChildren = b;
	}
	,__class__: org.aswing.JScrollBar
});
org.aswing.JScrollPane = function(viewOrViewport,vsbPolicy,hsbPolicy) {
	if(hsbPolicy == null) hsbPolicy = 0;
	if(vsbPolicy == null) vsbPolicy = 0;
	org.aswing.Container.call(this);
	this.setName("JScrollPane");
	this.vsbPolicy = vsbPolicy;
	this.hsbPolicy = hsbPolicy;
	this.setVerticalScrollBar(new org.aswing.JScrollBar(1));
	this.setHorizontalScrollBar(new org.aswing.JScrollBar(0));
	if(viewOrViewport != null) this.setView(viewOrViewport); else this.setViewport(new org.aswing.JViewport());
	this.setLayout(new org.aswing.ScrollPaneLayout());
	this.updateUI();
};
$hxClasses["org.aswing.JScrollPane"] = org.aswing.JScrollPane;
org.aswing.JScrollPane.__name__ = ["org","aswing","JScrollPane"];
org.aswing.JScrollPane.__super__ = org.aswing.Container;
org.aswing.JScrollPane.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicScrollPaneUI;
	}
	,getUIClassID: function() {
		return "ScrollPaneUI";
	}
	,setLayout: function(layout) {
		if(js.Boot.__instanceof(layout,org.aswing.ScrollPaneLayout)) org.aswing.Container.prototype.setLayout.call(this,layout); else throw new org.aswing.error.Error("Only can set ScrollPaneLayout to JScrollPane");
	}
	,isValidateRoot: function() {
		return true;
	}
	,setView: function(viewOrViewport) {
		if(js.Boot.__instanceof(viewOrViewport,org.aswing.JList) || js.Boot.__instanceof(viewOrViewport,org.aswing.JTree) || js.Boot.__instanceof(viewOrViewport,org.aswing.JTextArea) || js.Boot.__instanceof(viewOrViewport,org.aswing.JTable)) this.setViewport(js.Boot.__instanceof(viewOrViewport,org.aswing.Viewportable)?viewOrViewport:null); else if(js.Boot.__instanceof(viewOrViewport,org.aswing.Component)) this.setViewportView(js.Boot.__instanceof(viewOrViewport,org.aswing.Component)?viewOrViewport:null); else throw new org.aswing.error.Error("Only accept Component or Viewportable instance here!");
	}
	,setViewportView: function(view) {
		var jviewport = org.aswing.AsWingUtils["as"](this.getViewport(),org.aswing.JViewport);
		if(jviewport != null) jviewport.setView(view); else this.setViewport(new org.aswing.JViewport(view));
	}
	,getViewportView: function() {
		var jviewport = org.aswing.AsWingUtils["as"](this.getViewport(),org.aswing.JViewport);
		if(jviewport != null) return jviewport.getView(); else return null;
	}
	,setViewport: function(vp) {
		if(this.viewport != vp) {
			if(this.viewport != null) this.remove(this.viewport.getViewportPane());
			this.viewport = vp;
			if(this.viewport != null) this.insertImp(-1,this.viewport.getViewportPane());
			this.revalidate();
			this.dispatchEvent(new org.aswing.event.ScrollPaneEvent("viewportChanged",true,null,true));
		}
	}
	,getViewport: function() {
		return this.viewport;
	}
	,getVisibleRect: function() {
		return new org.aswing.geom.IntRectangle(this.getHorizontalScrollBar().getValue(),this.getVerticalScrollBar().getValue(),this.getHorizontalScrollBar().getVisibleAmount(),this.getVerticalScrollBar().getVisibleAmount());
	}
	,addAdjustmentListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("scrollbarStateChanged",listener,false,priority);
	}
	,removeAdjustmentListener: function(listener) {
		this.removeEventListener("scrollbarStateChanged",listener);
	}
	,__onBarScroll: function(e) {
		this.dispatchEvent(new org.aswing.event.ScrollPaneEvent("scrollbarStateChanged",e.isProgrammatic(),org.aswing.AsWingUtils["as"](e.target,org.aswing.JScrollBar),false));
	}
	,setHorizontalScrollBar: function(horizontalScrollBar) {
		if(this.hScrollBar != horizontalScrollBar) {
			if(this.hScrollBar != null) {
				this.hScrollBar.removeStateListener($bind(this,this.__onBarScroll));
				this.remove(this.hScrollBar);
			}
			this.hScrollBar = horizontalScrollBar;
			if(this.hScrollBar != null) {
				this.hScrollBar.setName("HorizontalScrollBar");
				this.insertImp(-1,this.hScrollBar);
				this.hScrollBar.addStateListener($bind(this,this.__onBarScroll));
			}
			this.revalidate();
		}
	}
	,getHorizontalScrollBar: function() {
		return this.hScrollBar;
	}
	,setHorizontalScrollBarPolicy: function(policy) {
		this.hsbPolicy = policy | 0;
	}
	,getHorizontalScrollBarPolicy: function() {
		return this.hsbPolicy;
	}
	,setVerticalScrollBar: function(verticalScrollBar) {
		if(this.vScrollBar != verticalScrollBar) {
			if(this.vScrollBar != null) {
				this.vScrollBar.removeStateListener($bind(this,this.__onBarScroll));
				this.remove(this.vScrollBar);
			}
			this.vScrollBar = verticalScrollBar;
			if(this.vScrollBar != null) {
				this.vScrollBar.setName("verticalScrollBar");
				this.insertImp(-1,this.vScrollBar);
				this.vScrollBar.addStateListener($bind(this,this.__onBarScroll));
			}
			this.revalidate();
		}
	}
	,getVerticalScrollBar: function() {
		return this.vScrollBar;
	}
	,setVerticalScrollBarPolicy: function(policy) {
		this.vsbPolicy = policy | 0;
	}
	,getVerticalScrollBarPolicy: function() {
		return this.vsbPolicy;
	}
	,append: function(com,constraints) {
		this.setView(com);
	}
	,insert: function(i,com,constraints) {
		this.setView(com);
	}
	,getFocusTransmit: function() {
		return this.getViewport().getViewportPane();
	}
	,__class__: org.aswing.JScrollPane
});
org.aswing.JSeparator = function(orientation) {
	if(orientation == null) orientation = 0;
	org.aswing.Component.call(this);
	this.setName("JSeparator");
	this.orientation = orientation;
	this.setFocusable(false);
	this.updateUI();
};
$hxClasses["org.aswing.JSeparator"] = org.aswing.JSeparator;
org.aswing.JSeparator.__name__ = ["org","aswing","JSeparator"];
org.aswing.JSeparator.__interfaces__ = [org.aswing.Orientable];
org.aswing.JSeparator.__super__ = org.aswing.Component;
org.aswing.JSeparator.prototype = $extend(org.aswing.Component.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getUIClassID: function() {
		return "SeparatorUI";
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicSeparatorUI;
	}
	,getOrientation: function() {
		return this.orientation;
	}
	,setOrientation: function(orientation) {
		if(this.orientation != orientation) {
			this.orientation = orientation;
			this.revalidate();
			this.repaint();
		}
	}
	,__class__: org.aswing.JSeparator
});
org.aswing.JToolTip = function() {
	org.aswing.Container.call(this);
	this.setName("JToolTip");
	this.offsets = new org.aswing.geom.IntPoint(4,20);
	this.offsetsRelatedToMouse = true;
	this.waitThenPopupEnabled = true;
	this.timer = new org.aswing.util.Timer(org.aswing.JToolTip.WAIT_TIME,0);
	this.timer.setInitialDelay(org.aswing.JToolTip.WAIT_TIME);
	this.timer.addActionListener($bind(this,this.__timeOnAction));
	this.mouseEnabled = false;
	this.mouseChildren = false;
	this.updateUI();
};
$hxClasses["org.aswing.JToolTip"] = org.aswing.JToolTip;
org.aswing.JToolTip.__name__ = ["org","aswing","JToolTip"];
org.aswing.JToolTip.setDefaultToolTipContainerRoot = function(theRoot) {
	if(theRoot != org.aswing.JToolTip.defaultRoot) org.aswing.JToolTip.defaultRoot = theRoot;
};
org.aswing.JToolTip.getDefaultToolTipContainerRoot = function() {
	if(org.aswing.JToolTip.defaultRoot == null) return org.aswing.AsWingManager.getRoot();
	return org.aswing.JToolTip.defaultRoot;
};
org.aswing.JToolTip.__super__ = org.aswing.Container;
org.aswing.JToolTip.prototype = $extend(org.aswing.Container.prototype,{
	setToolTipContainerRoot: function(theRoot) {
		if(theRoot != this.containerRoot) this.containerRoot = theRoot;
	}
	,getToolTipContainerRoot: function() {
		if(this.containerRoot == null) {
			var cr = null;
			if(this.getTargetComponent() != null) cr = org.aswing.AsWingUtils["as"](org.aswing.AsWingManager.getStage(),openfl.display.DisplayObjectContainer);
			if(cr == null) cr = org.aswing.JToolTip.getDefaultToolTipContainerRoot();
			return cr;
		}
		return this.containerRoot;
	}
	,updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicToolTipUI;
	}
	,getUIClassID: function() {
		return "ToolTipUI";
	}
	,startWaitToPopup: function() {
		if(openfl.Lib.getTimer() - org.aswing.JToolTip.last_tip_dropped_time < org.aswing.JToolTip.FAST_OCCUR_TIME) this.timer.setInitialDelay(org.aswing.JToolTip.FAST_OCCUR_TIME); else this.timer.setInitialDelay(org.aswing.JToolTip.WAIT_TIME);
		this.timer.restart();
		if(this.getTargetComponent() != null) this.getTargetComponent().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoved),false,0,false);
	}
	,stopWaitToPopup: function() {
		this.timer.stop();
		if(this.getTargetComponent() != null) this.getTargetComponent().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoved));
		org.aswing.JToolTip.last_tip_dropped_time = openfl.Lib.getTimer();
	}
	,setWaitThenPopupEnabled: function(b) {
		this.waitThenPopupEnabled = b;
	}
	,isWaitThenPopupEnabled: function() {
		return this.waitThenPopupEnabled;
	}
	,__compRollOver: function(source) {
		if(source == this.comp && this.isWaitThenPopupEnabled()) this.startWaitToPopup();
	}
	,__compRollOut: function(source) {
		if(source == this.comp && this.isWaitThenPopupEnabled()) this.disposeToolTip();
	}
	,__onMouseMoved: function(e) {
		if(this.timer.isRunning()) this.timer.restart();
	}
	,__timeOnAction: function(e) {
		this.timer.stop();
		this.dispatchEvent(new org.aswing.event.ToolTipEvent("tipShowing"));
		this.disposeToolTip();
		this.viewToolTip();
	}
	,viewToolTip: function() {
		if(this.tipText == null) return;
		var containerPane = this.getToolTipContainerRoot();
		if(containerPane == null) {
			console.log("getToolTipContainerRoot null");
			return;
		}
		containerPane.addChild(this);
		var relatePoint = new org.aswing.geom.IntPoint();
		if(this.offsetsRelatedToMouse) {
			var gp = containerPane.localToGlobal(new openfl.geom.Point(containerPane.get_mouseX(),containerPane.get_mouseY()));
			relatePoint.setWithPoint(gp);
		} else if(this.getTargetComponent() != null) relatePoint.setWithPoint(this.getTargetComponent().localToGlobal(new openfl.geom.Point(0,0)));
		this.moveLocationRelatedTo(relatePoint);
	}
	,moveLocationRelatedTo: function(globalPos) {
		if(!this.isShowing()) return;
		globalPos = globalPos.clone();
		globalPos.move(this.offsets.x,this.offsets.y);
		var viewSize = this.getPreferredSize();
		var visibleBounds = org.aswing.AsWingUtils.getVisibleMaximizedBounds(this.parent);
		if(globalPos.x + viewSize.width > visibleBounds.x + visibleBounds.width) globalPos.x = visibleBounds.x + visibleBounds.width - viewSize.width;
		if(globalPos.y + viewSize.height > visibleBounds.y + visibleBounds.height) globalPos.y = visibleBounds.y + visibleBounds.height - viewSize.height;
		if(globalPos.x < visibleBounds.x) globalPos.x = visibleBounds.x;
		if(globalPos.y < visibleBounds.y) globalPos.y = visibleBounds.y;
		this.setGlobalLocation(globalPos);
		this.setSize(viewSize);
		this.revalidate();
	}
	,showToolTip: function() {
		this.viewToolTip();
	}
	,disposeToolTip: function() {
		this.stopWaitToPopup();
		this.removeFromContainer();
	}
	,setTipText: function(t) {
		if(t != this.tipText) {
			this.tipText = t;
			this.dispatchEvent(new org.aswing.event.ToolTipEvent("tipTextChanged"));
			if(t == null) this.disposeToolTip(); else if(this.isShowing()) {
				this.setSize(this.getPreferredSize());
				this.repaint();
				this.revalidate();
			}
		}
	}
	,getTipText: function() {
		return this.tipText;
	}
	,setTargetComponent: function(c) {
		if(c != this.comp) {
			if(this.comp != null) this.unlistenOwner(this.comp);
			this.comp = c;
			if(this.comp != null) this.listenOwner(this.comp);
		}
	}
	,getTargetComponent: function() {
		return this.comp;
	}
	,setOffsets: function(o) {
		this.offsets.setLocation(o);
	}
	,getOffsets: function() {
		return this.offsets.clone();
	}
	,setOffsetsRelatedToMouse: function(b) {
		this.offsetsRelatedToMouse = b;
	}
	,isOffsetsRelatedToMouse: function() {
		return this.offsetsRelatedToMouse;
	}
	,listenOwner: function(comp,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		comp.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.____compRollOver),false,0,useWeakReference);
		comp.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.____compRollOut),false,0,useWeakReference);
		comp.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.____compRollOut),false,0,useWeakReference);
	}
	,unlistenOwner: function(comp) {
		comp.removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.____compRollOver));
		comp.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.____compRollOut));
		comp.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.____compRollOut));
		comp.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoved));
	}
	,____compRollOver: function(e) {
		var source = org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.Component);
		this.__compRollOver(source);
	}
	,____compRollOut: function(e) {
		var source = org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.Component);
		this.__compRollOut(source);
	}
	,__class__: org.aswing.JToolTip
});
org.aswing.JSharedToolTip = function() {
	org.aswing.JToolTip.call(this);
	this.setName("JSharedToolTip");
	this.textMap = new haxe.ds.IntMap();
};
$hxClasses["org.aswing.JSharedToolTip"] = org.aswing.JSharedToolTip;
org.aswing.JSharedToolTip.__name__ = ["org","aswing","JSharedToolTip"];
org.aswing.JSharedToolTip.getSharedInstance = function() {
	if(org.aswing.JSharedToolTip.sharedInstance == null) org.aswing.JSharedToolTip.sharedInstance = new org.aswing.JSharedToolTip();
	return org.aswing.JSharedToolTip.sharedInstance;
};
org.aswing.JSharedToolTip.setSharedInstance = function(ins) {
	if(org.aswing.JSharedToolTip.sharedInstance != null) throw new openfl.errors.Error("sharedInstance is already set!"); else org.aswing.JSharedToolTip.sharedInstance = ins;
};
org.aswing.JSharedToolTip.__super__ = org.aswing.JToolTip;
org.aswing.JSharedToolTip.prototype = $extend(org.aswing.JToolTip.prototype,{
	registerComponent: function(c,tipText) {
		this.listenOwner(c,true);
		this.textMap.set(c.getAwmlIndex(),tipText);
		if(this.getTargetComponent() == c) this.setTipText(this.getTargetToolTipText(c));
	}
	,unregisterComponent: function(c) {
		if(!this.textMap.exists(c.getAwmlIndex())) return;
		this.unlistenOwner(c);
		this.textMap.remove(c.getAwmlIndex());
		if(this.getTargetComponent() == c) {
			this.disposeToolTip();
			this.targetedComponent = null;
		}
	}
	,setTargetComponent: function(c) {
		this.registerComponent(c);
	}
	,getTargetComponent: function() {
		return this.targetedComponent;
	}
	,getTargetToolTipText: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.Component)) {
			var co;
			if(js.Boot.__instanceof(c,org.aswing.Component)) co = c; else co = null;
			return co.getToolTipText();
		} else return this.textMap.get(c.getAwmlIndex());
	}
	,__compRollOver: function(source) {
		var tipText = this.getTargetToolTipText(source);
		if(tipText != null && this.isWaitThenPopupEnabled()) {
			this.targetedComponent = source;
			this.setTipText(tipText);
			this.startWaitToPopup();
		}
	}
	,__compRollOut: function(source) {
		if(source == this.targetedComponent && this.isWaitThenPopupEnabled()) {
			this.disposeToolTip();
			this.targetedComponent = null;
		}
	}
	,__class__: org.aswing.JSharedToolTip
});
org.aswing.JSlider = function(orientation,min,max,value) {
	if(value == null) value = 50;
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(orientation == null) orientation = 0;
	org.aswing.Component.call(this);
	this.setName("JSlider");
	this.isInverted = false;
	this.majorTickSpacing = 0;
	this.minorTickSpacing = 0;
	this.snapToTicks = false;
	this.paintTrack = true;
	this.paintTicks = false;
	this.showValueTip = false;
	this.setOrientation(orientation);
	this.setModel(new org.aswing.DefaultBoundedRangeModel(value,0,min,max));
	this.updateUI();
};
$hxClasses["org.aswing.JSlider"] = org.aswing.JSlider;
org.aswing.JSlider.__name__ = ["org","aswing","JSlider"];
org.aswing.JSlider.__interfaces__ = [org.aswing.Orientable];
org.aswing.JSlider.__super__ = org.aswing.Component;
org.aswing.JSlider.prototype = $extend(org.aswing.Component.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicSliderUI;
	}
	,getUIClassID: function() {
		return "SliderUI";
	}
	,getOrientation: function() {
		return this.orientation;
	}
	,setOrientation: function(orientation) {
		var oldValue = this.orientation;
		this.orientation = orientation;
		if(orientation != oldValue) {
			this.repaint();
			this.revalidate();
		}
	}
	,getModel: function() {
		return this.model;
	}
	,setModel: function(newModel) {
		var oldModel = this.model;
		if(oldModel != null) oldModel.removeStateListener($bind(this,this.__onModelStateChanged));
		this.model = newModel;
		if(this.model != null) this.model.addStateListener($bind(this,this.__onModelStateChanged));
	}
	,__onModelStateChanged: function(event) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",event.isProgrammatic()));
	}
	,setEnabled: function(b) {
		org.aswing.Component.prototype.setEnabled.call(this,b);
		this.mouseChildren = b;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,setValue: function(value,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setValue(value,programmatic);
	}
	,getExtent: function() {
		return this.getModel().getExtent();
	}
	,setExtent: function(extent) {
		this.getModel().setExtent(extent);
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,setMinimum: function(minimum) {
		this.getModel().setMinimum(minimum);
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setMaximum: function(maximum) {
		this.getModel().setMaximum(maximum);
	}
	,getValueIsAdjusting: function() {
		return this.getModel().getValueIsAdjusting();
	}
	,setValueIsAdjusting: function(b) {
		var m = this.getModel();
		m.setValueIsAdjusting(b);
	}
	,setValues: function(newValue,newExtent,newMin,newMax,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setRangeProperties(newValue,newExtent,newMin,newMax,m.getValueIsAdjusting(),programmatic);
	}
	,getInverted: function() {
		return this.isInverted;
	}
	,setInverted: function(b) {
		if(b != this.isInverted) {
			this.isInverted = b;
			this.repaint();
		}
	}
	,getMajorTickSpacing: function() {
		return this.majorTickSpacing;
	}
	,setMajorTickSpacing: function(n) {
		if(n != this.majorTickSpacing) {
			this.majorTickSpacing = n;
			if(this.getPaintTicks()) this.repaint();
		}
	}
	,getMinorTickSpacing: function() {
		return this.minorTickSpacing;
	}
	,setMinorTickSpacing: function(n) {
		if(this.minorTickSpacing != n) {
			this.minorTickSpacing = n;
			if(this.getPaintTicks()) this.repaint();
		}
	}
	,setSnapToTicks: function(b) {
		if(b != this.snapToTicks) {
			this.snapToTicks = b;
			this.repaint();
		}
	}
	,getSnapToTicks: function() {
		return this.snapToTicks;
	}
	,getPaintTicks: function() {
		return this.paintTicks;
	}
	,setPaintTicks: function(b) {
		if(this.paintTicks != b) {
			this.paintTicks = b;
			this.revalidate();
			this.repaint();
		}
	}
	,getPaintTrack: function() {
		return this.paintTrack;
	}
	,setPaintTrack: function(b) {
		if(this.paintTrack != b) {
			this.paintTrack = b;
			this.repaint();
		}
	}
	,setShowValueTip: function(b) {
		if(this.showValueTip != b) {
			this.showValueTip = b;
			if(this.showValueTip) {
				if(this.valueTip == null) this.createDefaultValueTip();
			} else if(this.valueTip != null && this.valueTip.isShowing()) this.valueTip.disposeToolTip();
		}
	}
	,getShowValueTip: function() {
		if(this.showValueTip && this.valueTip == null) this.createDefaultValueTip();
		return this.showValueTip;
	}
	,getValueTip: function() {
		return this.valueTip;
	}
	,setValueTip: function(valueTip) {
		if(valueTip != null) valueTip.setTargetComponent(this);
		this.valueTip = valueTip;
		if(valueTip == null && this.getShowValueTip()) this.createDefaultValueTip();
	}
	,createDefaultValueTip: function() {
		this.valueTip = new org.aswing.JToolTip();
		this.valueTip.setTargetComponent(this);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,__class__: org.aswing.JSlider
});
org.aswing.JSpacer = function(prefSize) {
	org.aswing.Component.call(this);
	this.setPreferredSize(prefSize);
	this.updateUI();
};
$hxClasses["org.aswing.JSpacer"] = org.aswing.JSpacer;
org.aswing.JSpacer.__name__ = ["org","aswing","JSpacer"];
org.aswing.JSpacer.createHorizontalSpacer = function(width) {
	if(width == null) width = 4;
	var glue = new org.aswing.JSpacer();
	glue.setPreferredSize(new org.aswing.geom.IntDimension(width,0));
	glue.setMaximumSize(new org.aswing.geom.IntDimension(width,10000));
	return glue;
};
org.aswing.JSpacer.createVerticalSpacer = function(height) {
	if(height == null) height = 4;
	var glue = new org.aswing.JSpacer();
	glue.setPreferredSize(new org.aswing.geom.IntDimension(0,height));
	glue.setMaximumSize(new org.aswing.geom.IntDimension(10000,height));
	return glue;
};
org.aswing.JSpacer.createSolidSpacer = function(width,height) {
	if(height == null) height = 4;
	if(width == null) width = 4;
	var glue = new org.aswing.JSpacer();
	glue.setPreferredSize(new org.aswing.geom.IntDimension(width,height));
	return glue;
};
org.aswing.JSpacer.__super__ = org.aswing.Component;
org.aswing.JSpacer.prototype = $extend(org.aswing.Component.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicSpacerUI;
	}
	,getUIClassID: function() {
		return "SpacerUI";
	}
	,__class__: org.aswing.JSpacer
});
org.aswing.JSplitPane = function(orientation,continuousLayout,leftComponent,rightComponent) {
	if(continuousLayout == null) continuousLayout = false;
	if(orientation == null) orientation = 0;
	org.aswing.Container.call(this);
	this.orientation = orientation;
	this.continuousLayout = continuousLayout;
	this.setLeftComponent(leftComponent);
	this.setRightComponent(rightComponent);
	this.resizeWeight = 0.5;
	this.lastDividerLocation = this.dividerLocation = 1;
	this.dividerSize = -1;
	this.oneTouchExpandable = false;
	this.updateUI();
};
$hxClasses["org.aswing.JSplitPane"] = org.aswing.JSplitPane;
org.aswing.JSplitPane.__name__ = ["org","aswing","JSplitPane"];
org.aswing.JSplitPane.__interfaces__ = [org.aswing.Orientable];
org.aswing.JSplitPane.__super__ = org.aswing.Container;
org.aswing.JSplitPane.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicSplitPaneUI;
	}
	,getUIClassID: function() {
		return "SplitPaneUI";
	}
	,setLeftComponent: function(comp) {
		if(comp == null) {
			if(this.leftComponent != null) {
				this.remove(this.leftComponent);
				this.leftComponent = null;
			}
		} else this.append(comp,"left");
	}
	,getLeftComponent: function() {
		return this.leftComponent;
	}
	,setTopComponent: function(comp) {
		this.setLeftComponent(comp);
	}
	,getTopComponent: function() {
		return this.leftComponent;
	}
	,setRightComponent: function(comp) {
		if(comp == null) {
			if(this.rightComponent != null) {
				this.remove(this.rightComponent);
				this.rightComponent = null;
			}
		} else this.append(comp,"right");
	}
	,getRightComponent: function() {
		return this.rightComponent;
	}
	,setBottomComponent: function(comp) {
		this.setRightComponent(comp);
	}
	,getBottomComponent: function() {
		return this.rightComponent;
	}
	,setOneTouchExpandable: function(newValue) {
		if(this.oneTouchExpandable != newValue) {
			this.oneTouchExpandable = newValue;
			this.repaint();
		}
	}
	,isOneTouchExpandable: function() {
		return this.oneTouchExpandable;
	}
	,setLastDividerLocation: function(newLastLocation) {
		this.lastDividerLocation = newLastLocation;
	}
	,getLastDividerLocation: function() {
		return this.lastDividerLocation;
	}
	,setOrientation: function(ori) {
		if(ori != this.orientation) {
			this.orientation = ori;
			this.revalidate();
			this.repaint();
		}
	}
	,getOrientation: function() {
		return this.orientation;
	}
	,setContinuousLayout: function(newContinuousLayout) {
		if(this.continuousLayout != newContinuousLayout) {
			this.continuousLayout = newContinuousLayout;
			this.revalidate();
			this.repaint();
		}
	}
	,isContinuousLayout: function() {
		return this.continuousLayout;
	}
	,setResizeWeight: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(this.resizeWeight != value) this.resizeWeight = value;
	}
	,getResizeWeight: function() {
		return this.resizeWeight;
	}
	,resetToPreferredSizes: function() {
		var ui = org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.SplitPaneUI);
		if(ui != null) ui.resetToPreferredSizes(this);
	}
	,setDividerLocation: function(location,programmatic) {
		if(programmatic == null) programmatic = false;
		var oldValue = this.dividerLocation;
		if(oldValue != location) {
			this.dividerLocation = location;
			if(oldValue >= 0 && oldValue != 2147483647) this.setLastDividerLocation(oldValue);
			this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
		}
	}
	,getDividerLocation: function() {
		return this.dividerLocation;
	}
	,setDividerSize: function(newSize) {
		if(this.dividerSize != newSize) {
			this.dividerSize = newSize;
			this.repaint();
			this.revalidate();
		}
	}
	,getDividerSize: function() {
		return this.dividerSize;
	}
	,setEnabled: function(b) {
		org.aswing.Container.prototype.setEnabled.call(this,b);
		if(this.dividerComponent != null) this.dividerComponent.setEnabled(b);
	}
	,insertImp: function(i,com,constraints) {
		var toRemove = null;
		if(constraints == "left") {
			toRemove = this.leftComponent;
			this.leftComponent = com;
		} else if(constraints == "right") {
			toRemove = this.rightComponent;
			this.rightComponent = com;
		} else if(constraints == "divider") {
			toRemove = this.dividerComponent;
			this.dividerComponent = com;
		} else if(this.leftComponent == null) this.leftComponent = com; else if(this.rightComponent == null) this.rightComponent = com; else {
			toRemove = this.leftComponent;
			this.leftComponent = com;
		}
		if(toRemove != null) this.remove(toRemove);
		org.aswing.Container.prototype.insertImp.call(this,i,com,constraints);
	}
	,remove: function(component) {
		if(component == this.leftComponent) this.leftComponent = null; else if(component == this.rightComponent) this.rightComponent = null;
		var removed = org.aswing.Container.prototype.remove.call(this,component);
		this.revalidate();
		this.repaint();
		return removed;
	}
	,removeAt: function(index) {
		var comp = this.getComponent(index);
		if(comp == this.leftComponent) this.leftComponent = null; else if(comp == this.rightComponent) this.rightComponent = null;
		var removed = org.aswing.Container.prototype.removeAt.call(this,index);
		this.revalidate();
		this.repaint();
		return removed;
	}
	,removeAll: function() {
		this.setLeftComponent(null);
		this.setRightComponent(null);
		this.revalidate();
		this.repaint();
	}
	,isValidateRoot: function() {
		return true;
	}
	,__class__: org.aswing.JSplitPane
});
org.aswing.JStepper = function(columns) {
	if(columns == null) columns = 3;
	org.aswing.Component.call(this);
	this.setColumns(columns);
	this.editable = true;
	this.valueTranslator = org.aswing.JStepper.DEFAULT_VALUE_TRANSLATOR;
	this.valueParser = org.aswing.JStepper.DEFAULT_VALUE_PARSER;
	this.unit = 1;
	this.maxChars = 0;
	this.restrict = "0123456789";
	this.setModel(new org.aswing.DefaultBoundedRangeModel(50,0,0,100));
	this.updateUI();
};
$hxClasses["org.aswing.JStepper"] = org.aswing.JStepper;
org.aswing.JStepper.__name__ = ["org","aswing","JStepper"];
org.aswing.JStepper.__interfaces__ = [org.aswing.EditableComponent];
org.aswing.JStepper.DEFAULT_VALUE_TRANSLATOR = function(value) {
	return value + "";
};
org.aswing.JStepper.DEFAULT_VALUE_PARSER = function(text) {
	var value = Std.parseInt(text);
	if(value == 0) value = 0;
	return value;
};
org.aswing.JStepper.__super__ = org.aswing.Component;
org.aswing.JStepper.prototype = $extend(org.aswing.Component.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicStepperUI;
	}
	,getUIClassID: function() {
		return "StepperUI";
	}
	,setColumns: function(columns) {
		if(columns < 0) columns = 0;
		if(this.columns != columns) {
			this.columns = columns;
			this.repaint();
			this.revalidate();
		}
	}
	,getColumns: function() {
		return this.columns;
	}
	,setMaxChars: function(n) {
		if(this.maxChars != n) {
			this.maxChars = n;
			this.repaint();
		}
	}
	,getMaxChars: function() {
		return this.maxChars;
	}
	,setRestrict: function(r) {
		if(this.restrict != r) {
			this.restrict = r;
			this.repaint();
		}
	}
	,getRestrict: function() {
		return this.restrict;
	}
	,getModel: function() {
		return this.model;
	}
	,setModel: function(newModel) {
		if(this.model != null) this.model.removeStateListener($bind(this,this.__onModelStateChanged));
		this.model = newModel;
		if(this.model != null) this.model.addStateListener($bind(this,this.__onModelStateChanged));
	}
	,__onModelStateChanged: function(event) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",event.isProgrammatic()));
	}
	,setValueTranslator: function(translator) {
		if(this.valueTranslator != translator) {
			this.valueTranslator = translator;
			this.repaint();
		}
	}
	,getValueTranslator: function() {
		return this.valueTranslator;
	}
	,setValueParser: function(parser) {
		if(this.valueParser != parser) {
			this.valueParser = parser;
			this.repaint();
		}
	}
	,getValueParser: function() {
		return this.valueParser;
	}
	,getUnitIncrement: function() {
		return this.unit;
	}
	,setUnitIncrement: function(u) {
		this.unit = u;
	}
	,setEditable: function(b) {
		if(this.editable != b) {
			this.editable = b;
			this.repaint();
			this.revalidate();
		}
	}
	,isEditable: function() {
		return this.editable;
	}
	,getValue: function() {
		return this.getModel().getValue();
	}
	,setValue: function(value,programmatic) {
		if(programmatic == null) programmatic = true;
		var m = this.getModel();
		m.setValue(value,programmatic);
	}
	,getExtent: function() {
		return this.getModel().getExtent();
	}
	,setExtent: function(extent) {
		this.getModel().setExtent(extent);
	}
	,getMinimum: function() {
		return this.getModel().getMinimum();
	}
	,setMinimum: function(minimum) {
		this.getModel().setMinimum(minimum);
	}
	,getMaximum: function() {
		return this.getModel().getMaximum();
	}
	,setMaximum: function(maximum) {
		this.getModel().setMaximum(maximum);
	}
	,getValueIsAdjusting: function() {
		return this.getModel().getValueIsAdjusting();
	}
	,setValueIsAdjusting: function(b) {
		var m = this.getModel();
		m.setValueIsAdjusting(b);
	}
	,setValues: function(newValue,newExtent,newMin,newMax) {
		var m = this.getModel();
		m.setRangeProperties(newValue,newExtent,newMin,newMax,m.getValueIsAdjusting());
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,__class__: org.aswing.JStepper
});
org.aswing.JTabbedPane = function() {
	org.aswing.AbstractTabbedPane.call(this);
	this.setName("JTabbedPane");
	this.tabPlacement = 1;
	this.leadingOffset = 0;
	this.updateUI();
};
$hxClasses["org.aswing.JTabbedPane"] = org.aswing.JTabbedPane;
org.aswing.JTabbedPane.__name__ = ["org","aswing","JTabbedPane"];
org.aswing.JTabbedPane.__super__ = org.aswing.AbstractTabbedPane;
org.aswing.JTabbedPane.prototype = $extend(org.aswing.AbstractTabbedPane.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicTabbedPaneUI;
	}
	,getUIClassID: function() {
		return "TabbedPaneUI";
	}
	,setTabPlacement: function(tabPlacement) {
		if(this.tabPlacement != tabPlacement) {
			this.tabPlacement = tabPlacement;
			this.revalidate();
			this.repaint();
		}
	}
	,getTabPlacement: function() {
		return this.tabPlacement;
	}
	,setLeadingOffset: function(offset) {
		if(this.leadingOffset != offset) {
			this.leadingOffset = offset;
			this.revalidate();
			this.repaint();
		}
	}
	,getLeadingOffset: function() {
		return this.leadingOffset;
	}
	,setLayout: function(layout) {
		if(js.Boot.__instanceof(layout,org.aswing.plaf.ComponentUI)) org.aswing.AbstractTabbedPane.prototype.setLayout.call(this,layout); else throw new org.aswing.error.Error("Cannot set non-AccordionUI layout to JAccordion!");
	}
	,setVisibleAt: function(index,visible) {
		throw new org.aswing.error.Error("Not supported setVisibleAt!");
	}
	,__class__: org.aswing.JTabbedPane
});
org.aswing.event.CellEditorListener = function() { };
$hxClasses["org.aswing.event.CellEditorListener"] = org.aswing.event.CellEditorListener;
org.aswing.event.CellEditorListener.__name__ = ["org","aswing","event","CellEditorListener"];
org.aswing.event.CellEditorListener.prototype = {
	__class__: org.aswing.event.CellEditorListener
};
org.aswing.table.TableColumnModelListener = function() { };
$hxClasses["org.aswing.table.TableColumnModelListener"] = org.aswing.table.TableColumnModelListener;
org.aswing.table.TableColumnModelListener.__name__ = ["org","aswing","table","TableColumnModelListener"];
org.aswing.table.TableColumnModelListener.prototype = {
	__class__: org.aswing.table.TableColumnModelListener
};
org.aswing.event.TableModelListener = function() { };
$hxClasses["org.aswing.event.TableModelListener"] = org.aswing.event.TableModelListener;
org.aswing.event.TableModelListener.__name__ = ["org","aswing","event","TableModelListener"];
org.aswing.event.TableModelListener.prototype = {
	__class__: org.aswing.event.TableModelListener
};
org.aswing.JTable = function(dm) {
	org.aswing.Container.call(this);
	this.setName("JTable");
	this.verticalUnitIncrement = -2147483647;
	this.verticalBlockIncrement = -2147483647;
	this.horizontalUnitIncrement = -2147483647;
	this.horizontalBlockIncrement = -2147483647;
	this.initWithModels(dm);
	this.lastTotalColumnWidth = -1;
};
$hxClasses["org.aswing.JTable"] = org.aswing.JTable;
org.aswing.JTable.__name__ = ["org","aswing","JTable"];
org.aswing.JTable.__interfaces__ = [org.aswing.LayoutManager,org.aswing.event.CellEditorListener,org.aswing.table.TableColumnModelListener,org.aswing.event.TableModelListener,org.aswing.Viewportable];
org.aswing.JTable.setCellComponentProperties = function(com) {
	com.setFocusable(false);
	if(js.Boot.__instanceof(com,org.aswing.Container)) {
		var con;
		if(js.Boot.__instanceof(com,org.aswing.Container)) con = com; else con = null;
		var _g1 = 0;
		var _g = con.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			org.aswing.JTable.setCellComponentProperties(con.getComponent(i));
		}
	}
};
org.aswing.JTable.__super__ = org.aswing.Container;
org.aswing.JTable.prototype = $extend(org.aswing.Container.prototype,{
	initWithModels: function(dm,cm,sm) {
		this.setLayout(this);
		this.cellPane = new org.aswing.CellPane();
		this.cellPane.setEnabled(false);
		this.append(this.cellPane);
		this.headerPane = new org.aswing.CellPane();
		this.headerPane.setEnabled(false);
		this.append(this.headerPane);
		this.rowCells = new Array();
		this.viewPosition = new org.aswing.geom.IntPoint();
		if(cm == null) {
			cm = this.createDefaultColumnModel();
			this.autoCreateColumnsFromModel = true;
		}
		this.setColumnModel(cm);
		if(sm == null) sm = this.createDefaultSelectionModel();
		this.setSelectionModel(sm);
		if(dm == null) dm = this.createDefaultDataModel();
		this.setModel(dm);
		this.initializeLocalVars();
		this.updateUI();
	}
	,setUI: function(newUI) {
		if(js.Boot.__instanceof(newUI,org.aswing.plaf.TableUI)) {
			org.aswing.Container.prototype.setUI.call(this,newUI);
			this.repaint();
		} else throw new org.aswing.error.Error("JTable ui should implemented TableUI interface!");
	}
	,getTableUI: function() {
		return org.aswing.AsWingUtils["as"](this.getUI(),org.aswing.plaf.TableUI);
	}
	,updateSubComponentUI: function(componentShell) {
		if(componentShell == null) return;
		var component = null;
		if(js.Boot.__instanceof(componentShell,org.aswing.Component)) {
			if(js.Boot.__instanceof(componentShell,org.aswing.Component)) component = componentShell; else component = null;
			component.updateUI();
		} else if(js.Boot.__instanceof(componentShell,org.aswing.CellEditor)) {
			var ed;
			if(js.Boot.__instanceof(componentShell,org.aswing.CellEditor)) ed = componentShell; else ed = null;
			ed.updateUI();
		}
	}
	,updateUI: function() {
		var cm = this.getColumnModel();
		var _g1 = 0;
		var _g = cm.getColumnCount();
		while(_g1 < _g) {
			var column = _g1++;
			var aColumn = cm.getColumn(column);
			this.updateSubComponentUI(aColumn.getCellEditor());
		}
		var i;
		var _g11 = 0;
		var _g2 = this.rowCells.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var _g3 = 0;
			var _g21 = this.rowCells[i1].length;
			while(_g3 < _g21) {
				var j = _g3++;
				var cell = this.rowCells[i1][j];
				cell.getCellComponent().updateUI();
			}
		}
		var $it0 = this.defaultEditorsByColumnClass.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this.updateSubComponentUI(this.defaultEditorsByColumnClass.get(key));
		}
		if(this.tableHeader != null && this.tableHeader.getParent() == null) this.tableHeader.updateUI();
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicTableUI;
	}
	,getUIClassID: function() {
		return "TableUI";
	}
	,setTableHeader: function(tableHeader) {
		if(this.tableHeader != tableHeader) {
			var old = this.tableHeader;
			if(old != null) {
				old.setTable(null);
				old.removeFromContainer();
			}
			this.tableHeader = tableHeader;
			if(tableHeader != null) {
				tableHeader.setTable(this);
				this.headerPane.append(tableHeader);
			}
		}
	}
	,getTableHeader: function() {
		return this.tableHeader;
	}
	,getFooter: function() {
		return this.footer;
	}
	,setFooter: function(c) {
		if(this.footer != c) {
			if(this.footer != null) this.remove(this.footer);
			this.footer = c;
			if(this.footer != null) this.append(this.footer);
			this.revalidate();
		}
	}
	,getCellPane: function() {
		return this.cellPane;
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight < 1) throw new org.aswing.error.Error("New row height less than 1");
		this.rowHeight = rowHeight;
		this.resizeAndRepaint();
	}
	,getRowHeight: function() {
		return this.rowHeight;
	}
	,setRowMargin: function(rowMargin) {
		this.rowMargin = rowMargin;
		this.resizeAndRepaint();
	}
	,getRowMargin: function() {
		return this.rowMargin;
	}
	,setIntercellSpacing: function(intercellSpacing) {
		this.setRowMargin(intercellSpacing.height);
		this.getColumnModel().setColumnMargin(intercellSpacing.width);
		this.resizeAndRepaint();
	}
	,getIntercellSpacing: function() {
		return new org.aswing.geom.IntDimension(this.getColumnModel().getColumnMargin(),this.rowMargin);
	}
	,setGridColor: function(gridColor) {
		if(gridColor == null) {
			console.log("New color is null, Ignored");
			return;
		}
		this.gridColor = gridColor;
		this.repaint();
	}
	,getGridColor: function() {
		return this.gridColor;
	}
	,setShowGrid: function(showGrid,affectCellSpacing) {
		if(affectCellSpacing == null) affectCellSpacing = true;
		this.setShowHorizontalLines(showGrid);
		this.setShowVerticalLines(showGrid);
		if(affectCellSpacing) {
			if(showGrid) this.setIntercellSpacing(new org.aswing.geom.IntDimension(1,1)); else this.setIntercellSpacing(new org.aswing.geom.IntDimension(0,0));
		}
		this.repaint();
	}
	,setShowHorizontalLines: function(showHorizontalLines,affectCellSpacing) {
		if(affectCellSpacing == null) affectCellSpacing = true;
		var old = this.showHorizontalLines;
		this.showHorizontalLines = showHorizontalLines;
		if(affectCellSpacing) this.setIntercellSpacing(new org.aswing.geom.IntDimension(this.getIntercellSpacing().width,showHorizontalLines?1:0));
		if(old != showHorizontalLines) this.repaint();
	}
	,setShowVerticalLines: function(showVerticalLines,affectCellSpacing) {
		if(affectCellSpacing == null) affectCellSpacing = true;
		var old = this.showVerticalLines;
		this.showVerticalLines = showVerticalLines;
		if(affectCellSpacing) this.setIntercellSpacing(new org.aswing.geom.IntDimension(showVerticalLines?1:0,this.getIntercellSpacing().height));
		if(old != showVerticalLines) this.repaint();
	}
	,getShowHorizontalLines: function() {
		return this.showHorizontalLines;
	}
	,getShowVerticalLines: function() {
		return this.showVerticalLines;
	}
	,setAutoResizeMode: function(mode) {
		if(mode == 0 || mode == 1 || mode == 2 || mode == 3 || mode == 4) {
			if(mode != this.autoResizeMode) {
				this.autoResizeMode = mode;
				this.resizeAndRepaint();
				if(this.tableHeader != null) this.tableHeader.resizeAndRepaint();
			}
		}
	}
	,getAutoResizeMode: function() {
		return this.autoResizeMode;
	}
	,setAutoCreateColumnsFromModel: function(autoCreateColumnsFromModel) {
		if(this.autoCreateColumnsFromModel != autoCreateColumnsFromModel) {
			this.autoCreateColumnsFromModel = autoCreateColumnsFromModel;
			if(autoCreateColumnsFromModel) this.createDefaultColumnsFromModel();
		}
	}
	,getAutoCreateColumnsFromModel: function() {
		return this.autoCreateColumnsFromModel;
	}
	,createDefaultColumnsFromModel: function() {
		var m = this.getModel();
		if(m != null) {
			var cm = this.getColumnModel();
			while(cm.getColumnCount() > 0) cm.removeColumn(cm.getColumn(0));
			var _g1 = 0;
			var _g = m.getColumnCount();
			while(_g1 < _g) {
				var i = _g1++;
				var newColumn = new org.aswing.table.TableColumn(i);
				this.addColumn(newColumn);
			}
		}
	}
	,setDefaultCellFactory: function(columnClass,renderer) {
		if(renderer != null) this.defaultRenderersByColumnClass.set(columnClass,renderer); else this.defaultRenderersByColumnClass.remove(columnClass);
	}
	,getDefaultCellFactory: function(columnClass) {
		if(columnClass == null) return null; else {
			var renderer = this.defaultRenderersByColumnClass.get(columnClass);
			if(renderer != null) if(js.Boot.__instanceof(renderer,org.aswing.table.TableCellFactory)) return renderer; else return null; else return this.getDefaultCellFactory("Object");
		}
	}
	,setDefaultEditor: function(columnClass,editor) {
		if(editor != null) this.defaultEditorsByColumnClass.set(columnClass,editor); else this.defaultEditorsByColumnClass.remove(columnClass);
	}
	,getDefaultEditor: function(columnClass) {
		if(columnClass == null) return null; else {
			var editor = this.defaultEditorsByColumnClass.get(columnClass);
			if(editor != null) if(js.Boot.__instanceof(editor,org.aswing.table.TableCellEditor)) return editor; else return null; else return this.getDefaultEditor("Object");
		}
	}
	,setSelectionMode: function(selectionMode) {
		this.clearSelection();
		this.getSelectionModel().setSelectionMode(selectionMode);
		this.getColumnModel().getSelectionModel().setSelectionMode(selectionMode);
	}
	,setRowSelectionAllowed: function(rowSelectionAllowed) {
		var old = this.rowSelectionAllowed;
		this.rowSelectionAllowed = rowSelectionAllowed;
		if(old != rowSelectionAllowed) this.repaint();
	}
	,getRowSelectionAllowed: function() {
		return this.rowSelectionAllowed;
	}
	,setColumnSelectionAllowed: function(columnSelectionAllowed) {
		var old = this.columnModel.getColumnSelectionAllowed();
		this.columnModel.setColumnSelectionAllowed(columnSelectionAllowed);
		if(old != columnSelectionAllowed) this.repaint();
	}
	,getColumnSelectionAllowed: function() {
		return this.columnModel.getColumnSelectionAllowed();
	}
	,setCellSelectionEnabled: function(cellSelectionEnabled) {
		this.setRowSelectionAllowed(cellSelectionEnabled);
		this.setColumnSelectionAllowed(cellSelectionEnabled);
		this.cellSelectionEnabled = cellSelectionEnabled;
	}
	,getCellSelectionEnabled: function() {
		return this.getRowSelectionAllowed() && this.getColumnSelectionAllowed();
	}
	,selectAll: function(programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.isEditing()) this.removeEditor();
		if(this.getRowCount() > 0 && this.getColumnCount() > 0) {
			var oldLead;
			var oldAnchor;
			var selModel;
			selModel = this.selectionModel;
			oldLead = selModel.getLeadSelectionIndex();
			oldAnchor = selModel.getAnchorSelectionIndex();
			this.setRowSelectionInterval(0,this.getRowCount() - 1,programmatic);
			selModel.addSelectionInterval(oldAnchor,oldLead,programmatic);
			selModel = this.columnModel.getSelectionModel();
			oldLead = selModel.getLeadSelectionIndex();
			oldAnchor = selModel.getAnchorSelectionIndex();
			this.setColumnSelectionInterval(0,this.getColumnCount() - 1,programmatic);
			selModel.addSelectionInterval(oldAnchor,oldLead,programmatic);
		}
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.selectionModel.clearSelection(programmatic);
		this.columnModel.getSelectionModel().clearSelection(programmatic);
	}
	,boundRow: function(row) {
		if(row < 0 || row >= this.getRowCount()) throw new org.aswing.error.Error("Row index out of range");
		return row;
	}
	,boundColumn: function(col) {
		if(col < 0 || col >= this.getColumnCount()) throw new org.aswing.error.Error("Column index out of range");
		return col;
	}
	,setRowSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.selectionModel.setSelectionInterval(this.boundRow(index0),this.boundRow(index1),programmatic);
	}
	,setColumnSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.columnModel.getSelectionModel().setSelectionInterval(this.boundColumn(index0),this.boundColumn(index1),programmatic);
	}
	,addRowSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.selectionModel.addSelectionInterval(this.boundRow(index0),this.boundRow(index1),programmatic);
	}
	,addColumnSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.columnModel.getSelectionModel().addSelectionInterval(this.boundColumn(index0),this.boundColumn(index1),programmatic);
	}
	,removeRowSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.selectionModel.removeSelectionInterval(this.boundRow(index0),this.boundRow(index1),programmatic);
	}
	,removeColumnSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		this.columnModel.getSelectionModel().removeSelectionInterval(this.boundColumn(index0),this.boundColumn(index1),programmatic);
	}
	,getSelectedRow: function() {
		return this.selectionModel.getMinSelectionIndex();
	}
	,getSelectedColumn: function() {
		return this.columnModel.getSelectionModel().getMinSelectionIndex();
	}
	,getSelectedRows: function() {
		var iMin = this.selectionModel.getMinSelectionIndex();
		var iMax = this.selectionModel.getMaxSelectionIndex();
		if(iMin == -1 || iMax == -1) return new Array();
		var rvTmp = new Array();
		var _g1 = iMin;
		var _g = iMax + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.selectionModel.isSelectedIndex(i)) rvTmp.push(i);
		}
		return rvTmp;
	}
	,getSelectedColumns: function() {
		return this.columnModel.getSelectedColumns();
	}
	,getSelectedRowCount: function() {
		var iMin = this.selectionModel.getMinSelectionIndex();
		var iMax = this.selectionModel.getMaxSelectionIndex();
		var count = 0;
		var _g1 = iMin;
		var _g = iMax + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.selectionModel.isSelectedIndex(i)) count++;
		}
		return count;
	}
	,getSelectedColumnCount: function() {
		return this.columnModel.getSelectedColumnCount();
	}
	,isRowSelected: function(row) {
		return this.selectionModel.isSelectedIndex(row);
	}
	,isColumnSelected: function(column) {
		return this.columnModel.getSelectionModel().isSelectedIndex(column);
	}
	,isCellSelected: function(row,column) {
		if(!this.getRowSelectionAllowed() && !this.getColumnSelectionAllowed()) return false;
		return (!this.getRowSelectionAllowed() || this.isRowSelected(row)) && (!this.getColumnSelectionAllowed() || this.isColumnSelected(column));
	}
	,ensureCellIsVisible: function(row,column) {
		var rect = this.getCellRect(row,column,false);
		rect.setLocation(this.getPixelLocationFromLogicLocation(rect.getLocation()));
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var startX = insetsX;
		var startY = insetsY + this.getHeaderHeight();
		var endX = this.getWidth() - insets.right;
		var endY = this.getHeight() - insets.bottom;
		var moveX = 0;
		var moveY = 0;
		if(rect.x < startX) moveX = rect.x - startX; else if(rect.x + rect.width > endX) moveX = rect.x + rect.width - endX;
		if(rect.y < startY) moveY = rect.y - startY; else if(rect.y + rect.height > endY) moveY = rect.y + rect.height - endY;
		this.setViewPosition(this.getViewPosition().move(moveX,moveY));
	}
	,changeSelectionModel: function(sm,index,toggle,extend,selected,programmatic) {
		if(programmatic == null) programmatic = true;
		if(extend) {
			if(toggle) sm.setAnchorSelectionIndex(index); else sm.setSelectionInterval(sm.getAnchorSelectionIndex(),index,programmatic);
		} else if(toggle) {
			if(selected) sm.removeSelectionInterval(index,index,programmatic); else sm.addSelectionInterval(index,index,programmatic);
		} else sm.setSelectionInterval(index,index,programmatic);
	}
	,changeSelection: function(rowIndex,columnIndex,toggle,extend,programmatic) {
		if(programmatic == null) programmatic = true;
		var rsm = this.getSelectionModel();
		var csm = this.getColumnModel().getSelectionModel();
		var selected = this.isCellSelected(rowIndex,columnIndex);
		this.changeSelectionModel(csm,columnIndex,toggle,extend,selected,programmatic);
		this.changeSelectionModel(rsm,rowIndex,toggle,extend,selected,programmatic);
	}
	,getSelectionForeground: function() {
		return this.selectionForeground;
	}
	,setSelectionForeground: function(selectionForeground) {
		var old = this.selectionForeground;
		this.selectionForeground = selectionForeground;
		if(!selectionForeground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,getSelectionBackground: function() {
		return this.selectionBackground;
	}
	,setSelectionBackground: function(selectionBackground) {
		var old = this.selectionBackground;
		this.selectionBackground = selectionBackground;
		if(!selectionBackground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,getColumn: function(identifier) {
		var cm = this.getColumnModel();
		var columnIndex = cm.getColumnIndex(identifier);
		return cm.getColumn(columnIndex);
	}
	,getColumnAt: function(columnIndex) {
		return this.getColumnModel().getColumn(columnIndex);
	}
	,convertColumnIndexToModel: function(viewColumnIndex) {
		if(viewColumnIndex < 0) return viewColumnIndex;
		return this.getColumnModel().getColumn(viewColumnIndex).getModelIndex();
	}
	,convertColumnIndexToView: function(modelColumnIndex) {
		if(modelColumnIndex < 0) return modelColumnIndex;
		var cm = this.getColumnModel();
		var _g1 = 0;
		var _g = this.getColumnCount();
		while(_g1 < _g) {
			var column = _g1++;
			if(cm.getColumn(column).getModelIndex() == modelColumnIndex) return column;
		}
		return -1;
	}
	,getRowCount: function() {
		return this.getModel().getRowCount();
	}
	,getColumnCount: function() {
		return this.getColumnModel().getColumnCount();
	}
	,getColumnName: function(column) {
		return this.getModel().getColumnName(this.convertColumnIndexToModel(column));
	}
	,getColumnClass: function(column) {
		return this.getModel().getColumnClass(this.convertColumnIndexToModel(column));
	}
	,getValueAt: function(row,column) {
		return this.getModel().getValueAt(row,this.convertColumnIndexToModel(column));
	}
	,setValueAt: function(aValue,row,column) {
		this.getModel().setValueAt(aValue,row,this.convertColumnIndexToModel(column));
	}
	,isCellEditable: function(row,column) {
		return this.getModel().isCellEditable(row,this.convertColumnIndexToModel(column));
	}
	,addColumn: function(aColumn) {
		if(aColumn.getHeaderValue() == null) {
			var modelColumn = aColumn.getModelIndex();
			var columnName = this.getModel().getColumnName(modelColumn);
			aColumn.setHeaderValue(columnName);
		}
		this.getColumnModel().addColumn(aColumn);
	}
	,removeColumn: function(aColumn) {
		this.getColumnModel().removeColumn(aColumn);
	}
	,moveColumn: function(column,targetColumn) {
		this.getColumnModel().moveColumn(column,targetColumn);
	}
	,columnAtPoint: function(point) {
		var x = point.x;
		return this.getColumnModel().getColumnIndexAtX(x);
	}
	,rowAtPoint: function(point) {
		var y = point.y;
		var result = Math.floor(y / this.getRowHeight());
		if(result < 0) return -1; else if(result >= this.getRowCount()) return -1; else return result;
	}
	,getCellRect: function(row,column,includeSpacing) {
		var r = new org.aswing.geom.IntRectangle();
		var insets = this.getInsets();
		var valid = true;
		if(row < 0) valid = false; else if(row >= this.getRowCount()) {
			r.y = this.getViewSize().height - insets.getMarginHeight();
			valid = false;
		} else {
			r.height = this.getRowHeight();
			r.y = row * r.height;
		}
		if(column < 0) valid = false; else if(column >= this.getColumnCount()) {
			r.x = this.getLastTotalColumnWidth() - insets.getMarginWidth();
			valid = false;
		} else {
			var cm = this.getColumnModel();
			var _g = 0;
			while(_g < column) {
				var i = _g++;
				r.x += cm.getColumn(i).getWidth();
			}
			r.width = cm.getColumn(column).getWidth();
		}
		if(valid && !includeSpacing) {
			var rmi = this.getRowMargin();
			var cmi = this.getColumnModel().getColumnMargin();
			r.setRectXYWH(r.x + cmi,r.y + rmi,r.width - cmi,r.height - rmi);
		}
		return r;
	}
	,getPixelLocationFromLogicLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(startP.x,startP.y);
		return pp;
	}
	,getLogicLocationFromPixelLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(-startP.x,-startP.y);
		return pp;
	}
	,getViewStartPoint: function() {
		var viewPos = this.getViewPosition();
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var startX = insetsX - viewPos.x;
		var startY = insetsY + this.getHeaderHeight() - viewPos.y;
		return new org.aswing.geom.IntPoint(startX,startY);
	}
	,getHeaderHeight: function() {
		if(this.getTableHeader() == null) return 0; else return this.getTableHeader().getHeight();
	}
	,viewIndexForColumn: function(aColumn) {
		var cm = this.getColumnModel();
		var _g1 = 0;
		var _g = cm.getColumnCount();
		while(_g1 < _g) {
			var column = _g1++;
			if(cm.getColumn(column) == aColumn) return column;
		}
		return -1;
	}
	,getResizingColumn: function() {
		if(this.tableHeader == null) return null; else return this.tableHeader.getResizingColumn();
	}
	,setWidthsFromPreferredWidths: function(inverse) {
		var insets = this.getInsets();
		var totalWidth;
		if(this.autoResizeMode == 0) totalWidth = this.getLastTotalColumnWidth(); else totalWidth = this.getWidth() - insets.getMarginWidth();
		var totalPreferred = this.getPreferredSize().width - insets.getMarginWidth();
		var target;
		if(!inverse) target = totalWidth; else target = totalPreferred;
		var cm = this.columnModel;
		var r = new org.aswing.table.Resizable3Imp1(cm,inverse);
		this.adjustSizes3(target,r,inverse);
	}
	,accommodateDelta: function(resizingColumnIndex,delta) {
		var columnCount = this.getColumnCount();
		var from = resizingColumnIndex;
		var _to = columnCount;
		var _g = this.autoResizeMode;
		switch(_g) {
		case 1:
			from = from + 1;
			_to = Std["int"](Math.min(from + 1,columnCount));
			break;
		case 2:
			from = from + 1;
			_to = columnCount;
			break;
		case 3:
			from = columnCount - 1;
			_to = from + 1;
			break;
		case 4:
			from = 0;
			_to = columnCount;
			break;
		default:
		}
		var start = from;
		var end = _to;
		var cm = this.columnModel;
		var r = new org.aswing.table.Resizable3Imp2(cm,start,end);
		var totalWidth = 0;
		var _g1 = from;
		while(_g1 < _to) {
			var i = _g1++;
			var aColumn = this.columnModel.getColumn(i);
			var input = aColumn.getWidth();
			totalWidth = totalWidth + input;
		}
		this.adjustSizes3(totalWidth + delta,r,false);
		return;
	}
	,adjustSizes3: function(target,r,inverse) {
		var N = r.getElementCount();
		var totalPreferred = 0;
		var _g = 0;
		while(_g < N) {
			var i = _g++;
			totalPreferred += r.getMidPointAt(i);
		}
		var s = new org.aswing.table.Resizable2Imp1(r,target < totalPreferred == !inverse);
		this.adjustSizes2(target,s,!inverse);
	}
	,adjustSizes2: function(target,r,limitToRange) {
		var totalLowerBound = 0;
		var totalUpperBound = 0;
		var N = r.getElementCount();
		var i;
		var _g = 0;
		while(_g < N) {
			var i1 = _g++;
			totalLowerBound += r.getLowerBoundAt(i1);
			totalUpperBound += r.getUpperBoundAt(i1);
		}
		if(limitToRange) target = Std["int"](Math.min(Math.max(totalLowerBound,target),totalUpperBound));
		var _g1 = 0;
		while(_g1 < N) {
			var i2 = _g1++;
			var lowerBound = r.getLowerBoundAt(i2);
			var upperBound = r.getUpperBoundAt(i2);
			var newSize;
			if(totalLowerBound == totalUpperBound) newSize = lowerBound; else {
				var f = (target - totalLowerBound) / (totalUpperBound - totalLowerBound);
				newSize = Math.round(lowerBound + f * (upperBound - lowerBound));
			}
			r.setSizeAt(newSize,i2);
			target -= newSize;
			totalLowerBound -= lowerBound;
			totalUpperBound -= upperBound;
		}
	}
	,editCellAt: function(row,column,clickCount) {
		if(clickCount == null) clickCount = -1;
		if(this.cellEditor != null && !this.cellEditor.stopCellEditing()) return false;
		if(row < 0 || row >= this.getRowCount() || column < 0 || column >= this.getColumnCount()) return false;
		if(!this.isCellEditable(row,column)) return false;
		if(this.cellEditor != null) this.removeEditor();
		var editor = this.getCellEditorOfRowColumn(row,column);
		if(editor != null && (clickCount == -1 || editor.isCellEditable(clickCount))) {
			var cb = this.getCellRect(row,column,true);
			cb.setLocation(this.getPixelLocationFromLogicLocation(cb.getLocation()));
			editor.startCellEditing(this,this.getValueAt(row,column),cb);
			this.setCellEditor(editor);
			this.setEditingRow(row);
			this.setEditingColumn(column);
			editor.removeCellEditorListener(this);
			editor.addCellEditorListener(this);
			this._storedValue = this.getValueAt(row,column);
			this.dispatchEvent(new org.aswing.event.TableCellEditEvent("tableCellEditingStarted",row,column,this._storedValue));
			return true;
		}
		return false;
	}
	,isEditing: function() {
		if(this.cellEditor == null) return false; else return true;
	}
	,getEditingColumn: function() {
		return this.editingColumn;
	}
	,getEditingRow: function() {
		return this.editingRow;
	}
	,setModel: function(dataModel) {
		if(dataModel == null) {
			console.log("Can't set null TableModel to JTable, Ignored");
			return;
		}
		if(this.dataModel != dataModel) {
			var old = this.dataModel;
			if(old != null) old.removeTableModelListener(this);
			this.dataModel = dataModel;
			dataModel.addTableModelListener(this);
			this.tableChanged(new org.aswing.event.TableModelEvent(dataModel,-1));
		}
	}
	,getModel: function() {
		return this.dataModel;
	}
	,setColumnModel: function(columnModel) {
		if(columnModel == null) {
			console.log("Cannot set a null ColumnModel to JTable, Ignored");
			return;
		}
		var old = this.columnModel;
		if(columnModel != old) {
			if(old != null) old.removeColumnModelListener(this);
			this.columnModel = columnModel;
			columnModel.addColumnModelListener(this);
			if(this.tableHeader != null) this.tableHeader.setColumnModel(columnModel);
			this.resizeAndRepaint();
		}
	}
	,getColumnModel: function() {
		return this.columnModel;
	}
	,setSelectionModel: function(newModel) {
		if(newModel == null) {
			console.log("Cannot set a null SelectionModel to JTable, Ignored");
			return;
		}
		var oldModel = this.selectionModel;
		if(newModel != oldModel) {
			if(oldModel != null) oldModel.removeListSelectionListener($bind(this,this.__listSelectionChanged));
			this.selectionModel = newModel;
			newModel.addListSelectionListener($bind(this,this.__listSelectionChanged));
			this.repaint();
			this.checkLeadAnchor();
		}
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,checkLeadAnchor: function() {
		var model = this.getModel();
		if(model == null) return;
		var lead = this.selectionModel.getLeadSelectionIndex();
		var count = model.getRowCount();
		if(count == 0) {
			if(lead != -1) {
				this.selectionModel.setAnchorSelectionIndex(-1);
				this.selectionModel.setLeadSelectionIndex(-1);
			}
		} else if(lead == -1) {
			if(this.selectionModel.isSelectedIndex(0)) this.selectionModel.addSelectionInterval(0,0,true); else this.selectionModel.removeSelectionInterval(0,0,true);
		}
	}
	,tableChanged: function(e) {
		if(e == null || e.getFirstRow() == -1) {
			this.clearSelection();
			this.checkLeadAnchor();
			if(this.getAutoCreateColumnsFromModel()) {
				this.createDefaultColumnsFromModel();
				return;
			}
			this.resizeAndRepaint();
			return;
		}
		if(e.getType() == "insert") {
			this.tableRowsInserted(e);
			return;
		}
		if(e.getType() == "delete") {
			this.tableRowsDeleted(e);
			return;
		}
		var end = e.getLastRow();
		if(end != 2147483647) this.revalidate(); else {
			this.clearSelection();
			this.resizeAndRepaint();
		}
	}
	,tableRowsInserted: function(e) {
		var start = e.getFirstRow();
		var end = e.getLastRow();
		if(start < 0) start = 0;
		if(end < 0) end = this.getRowCount() - 1;
		var length = end - start + 1;
		this.selectionModel.insertIndexInterval(start,length,true);
		this.checkLeadAnchor();
		this.resizeAndRepaint();
	}
	,tableRowsDeleted: function(e) {
		var start = e.getFirstRow();
		var end = e.getLastRow();
		if(start < 0) start = 0;
		if(end < 0) end = this.getRowCount() - 1;
		this.selectionModel.removeIndexInterval(start,end);
		this.checkLeadAnchor();
		this.resizeAndRepaint();
	}
	,columnAdded: function(e) {
		if(this.isEditing()) this.removeEditor();
		this.resizeAndRepaint();
	}
	,columnRemoved: function(e) {
		if(this.isEditing()) this.removeEditor();
		this.resizeAndRepaint();
	}
	,columnMoved: function(e) {
		if(this.isEditing()) this.removeEditor();
		this.resizeAndRepaint();
	}
	,columnMarginChanged: function(source) {
		if(this.isEditing()) this.removeEditor();
		var resizingColumn = this.getResizingColumn();
		if(resizingColumn != null && this.autoResizeMode == 0) resizingColumn.setPreferredWidth(resizingColumn.getWidth());
		this.resizeAndRepaint();
	}
	,columnSelectionChanged: function(source,firstIndex,lastIndex,programmatic) {
		this.dispatchEvent(new org.aswing.event.SelectionEvent("columnSelectionChanged",firstIndex,lastIndex,programmatic));
		var isAdjusting = false;
		if(this.columnSelectionAdjusting && !isAdjusting) {
			this.columnSelectionAdjusting = false;
			return;
		}
		this.columnSelectionAdjusting = isAdjusting;
		if(this.getRowCount() <= 0 || this.getColumnCount() <= 0) return;
		this.resizeAndRepaint();
	}
	,__listSelectionChanged: function(e) {
		var isAdjusting = false;
		if(this.rowSelectionAdjusting && !isAdjusting) {
			this.rowSelectionAdjusting = false;
			return;
		}
		this.rowSelectionAdjusting = isAdjusting;
		this.dispatchEvent(new org.aswing.event.SelectionEvent("rowSelectionChanged",e.getFirstIndex(),e.getLastIndex(),e.isProgrammatic()));
		this.resizeAndRepaint();
	}
	,editingStopped: function(source) {
		var editor = this.getCellEditor();
		if(editor != null) {
			var value = editor.getCellEditorValue();
			this.setValueAt(value,this.editingRow,this.editingColumn);
			this.dispatchEvent(new org.aswing.event.TableCellEditEvent("tableCellEditingStopped",this.editingRow,this.editingColumn,this._storedValue,value));
			this.removeEditor();
		}
	}
	,editingCanceled: function(source) {
		this.dispatchEvent(new org.aswing.event.TableCellEditEvent("tableCellEditingCanceled",this.editingRow,this.editingColumn));
		this.removeEditor();
	}
	,setPreferredScrollableViewportSize: function(size) {
		this.preferredViewportSize = size.clone();
	}
	,getPreferredScrollableViewportSize: function() {
		return this.preferredViewportSize;
	}
	,initializeLocalVars: function() {
		this.createDefaultCellFactories();
		this.createDefaultEditors();
		this.setTableHeader(this.createDefaultTableHeader());
		this.setShowGrid(true);
		this.setAutoResizeMode(2);
		this.setRowHeight(20);
		this.setRowMargin(1);
		this.setRowSelectionAllowed(true);
		this.setColumnSelectionAllowed(false);
		this.setCellEditor(null);
		this.setEditingColumn(-1);
		this.setEditingRow(-1);
		this.setPreferredScrollableViewportSize(new org.aswing.geom.IntDimension(450,400));
	}
	,createDefaultDataModel: function() {
		return new org.aswing.table.DefaultTableModel().initWithRowcountColumncount(0,0);
	}
	,createDefaultColumnModel: function() {
		return new org.aswing.table.DefaultTableColumnModel();
	}
	,createDefaultSelectionModel: function() {
		return new org.aswing.DefaultListSelectionModel();
	}
	,createDefaultTableHeader: function() {
		return new org.aswing.table.JTableHeader(this.columnModel);
	}
	,createDefaultCellFactories: function() {
		this.defaultRenderersByColumnClass = new haxe.ds.StringMap();
		this.defaultRenderersByColumnClass.set("Object",new org.aswing.table.GeneralTableCellFactoryUIResource(org.aswing.table.PoorTextCell));
	}
	,createDefaultEditors: function() {
		this.defaultEditorsByColumnClass = new haxe.ds.StringMap();
		this.defaultEditorsByColumnClass.set("Number",new org.aswing.DefaultNumberTextFieldCellEditor());
		this.defaultEditorsByColumnClass.set("Boolean",new org.aswing.DefaultCheckBoxCellEditor());
		this.defaultEditorsByColumnClass.set("Object",new org.aswing.DefaultTextFieldCellEditor());
	}
	,resizeAndRepaint: function() {
		this.revalidate();
		this.repaint();
	}
	,getCellEditor: function() {
		return this.cellEditor;
	}
	,setCellEditor: function(anEditor) {
		this.cellEditor = anEditor;
	}
	,setEditingColumn: function(aColumn) {
		this.editingColumn = aColumn;
	}
	,setEditingRow: function(aRow) {
		this.editingRow = aRow;
	}
	,getCellFactory: function(row,column) {
		var tableColumn = this.getColumnModel().getColumn(column);
		var renderer = tableColumn.getCellFactory();
		if(renderer == null) renderer = this.getDefaultCellFactory(this.getColumnClass(column));
		return renderer;
	}
	,getCellEditorOfRowColumn: function(row,column) {
		var tableColumn = this.getColumnModel().getColumn(column);
		var editor = tableColumn.getCellEditor();
		if(editor == null) editor = this.getDefaultEditor(this.getColumnClass(column));
		return editor;
	}
	,removeEditor: function() {
		var editor = this.getCellEditor();
		if(editor != null) {
			editor.removeCellEditorListener(this);
			this.setCellEditor(null);
			this.setEditingColumn(-1);
			this.setEditingRow(-1);
			this.requestFocus();
		}
	}
	,doLayout: function() {
		var resizingColumn = this.getResizingColumn();
		if(resizingColumn == null) this.setWidthsFromPreferredWidths(false); else {
			var w = this.getLastTotalColumnWidth();
			var columnIndex = this.viewIndexForColumn(resizingColumn);
			var delta = w - this.getColumnModel().getTotalColumnWidth();
			this.accommodateDelta(columnIndex,delta);
			delta = w - this.getColumnModel().getTotalColumnWidth();
			if(delta != 0 && this.autoResizeMode != 0) resizingColumn.setWidth(resizingColumn.getWidth() + delta);
			this.setWidthsFromPreferredWidths(true);
		}
		this.lastTotalColumnWidth = this.getColumnModel().getTotalColumnWidth();
		org.aswing.Container.prototype.doLayout.call(this);
	}
	,getLastTotalColumnWidth: function() {
		if(-1 == this.lastTotalColumnWidth) {
			if(this.autoResizeMode == 0) this.lastTotalColumnWidth = this.getPreferredSize().width - this.getInsets().getMarginWidth(); else this.lastTotalColumnWidth = this.getWidth() - this.getInsets().getMarginWidth();
		}
		return this.lastTotalColumnWidth;
	}
	,layoutCells: function() {
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var cWidth = this.getWidth() - insets.getMarginWidth();
		var cHeight = this.getHeight() - insets.getMarginHeight();
		var headerHeight = this.getTableHeader().getPreferredHeight();
		var footerHeight = 0;
		var fotr = this.getFooter();
		this.headerPane.setComBoundsXYWH(insetsX,insetsY,cWidth,headerHeight);
		this.getTableHeader().setLocationXY(-this.viewPosition.x,0);
		this.getTableHeader().setSizeWH(this.getLastTotalColumnWidth(),headerHeight);
		this.getTableHeader().validate();
		this.getTableHeader().paintImmediately();
		if(fotr != null) {
			fotr.setComBoundsXYWH(insetsX,this.getHeight() - insets.bottom - fotr.getPreferredHeight(),cWidth,fotr.getPreferredHeight());
			fotr.validate();
			fotr.paintImmediately();
		}
		var b = new org.aswing.geom.IntRectangle();
		b.setSize(this.getExtentSize());
		b.setLocation(this.viewPosition);
		var cellPaneBounds = new org.aswing.geom.IntRectangle();
		cellPaneBounds.setSize(b.getSize());
		cellPaneBounds.setLocation(new org.aswing.geom.IntPoint(insetsX,insetsY + this.getTableHeader().getHeight()));
		this.cellPane.setComBounds(cellPaneBounds);
		if(this.getRowCount() <= 0 || this.getColumnCount() <= 0) {
			var arr_i = 0;
			var arr = [];
			while(arr_i < this.rowCells.length) {
				var _g = 0;
				while(_g < arr.length) {
					var ccc = arr[_g];
					++_g;
					ccc.getCellComponent().setVisible(false);
				}
				arr_i++;
			}
			return;
		}
		var upperLeft = b.getLocation();
		var lowerRight = b.rightBottom();
		var rMin = this.rowAtPoint(upperLeft);
		var rMax = this.rowAtPoint(lowerRight);
		var columnCount = this.getColumnCount();
		if(rMin == -1) rMin = 0;
		if(rMax == -1) rMax = this.getRowCount() - 1;
		var cMin = this.columnAtPoint(upperLeft);
		var cMax = this.columnAtPoint(lowerRight);
		if(cMin == -1) cMin = 0;
		if(cMax == -1) cMax = columnCount - 1;
		var cm = this.getColumnModel();
		var columnMargin = cm.getColumnMargin();
		var rowMargin = this.getRowMargin();
		var cellRect;
		var tempRect = new org.aswing.geom.IntRectangle();
		var aColumn;
		var columnWidth;
		var cr = 0;
		var cc = 0;
		var startX = -this.viewPosition.x;
		var startY = -this.viewPosition.y;
		var row = rMin - 1;
		var showHL = this.getShowHorizontalLines();
		var showVL = this.getShowVerticalLines();
		while(++row <= rMax) {
			if(cr >= this.rowCells.length) break;
			cellRect = this.getCellRect(row,cMin,false);
			if(showHL && row == this.getRowCount() - 1) cellRect.height -= rowMargin;
			var column = cMin - 1;
			while(++column <= cMax) {
				cc = column;
				if(cc >= this.rowCells[cr].length) break;
				aColumn = cm.getColumn(column);
				columnWidth = aColumn.getWidth();
				cellRect.width = columnWidth - columnMargin;
				tempRect.setRectXYWH(cellRect.x + startX,cellRect.y + startY,cellRect.width,cellRect.height);
				if(showVL && column == columnCount - 1) tempRect.width -= columnMargin;
				this.layoutCell(row,column,tempRect,cr,cc);
				cellRect.x += columnWidth;
			}
			var cell;
			var cellColumnCount = this.rowCells[0].length;
			var _g1 = 0;
			while(_g1 < cMin) {
				var cc1 = _g1++;
				cell = this.rowCells[cr][cc1];
				cell.getCellComponent().setVisible(false);
			}
			var _g2 = cMax + 1;
			while(_g2 < cellColumnCount) {
				var cc2 = _g2++;
				cell = this.rowCells[cr][cc2];
				cell.getCellComponent().setVisible(false);
			}
			cr++;
		}
		var _g11 = cr;
		var _g3 = this.rowCells.length;
		while(_g11 < _g3) {
			var i = _g11++;
			var c = columnCount - 1;
			while(c >= 0) {
				var cell1 = this.rowCells[i][c];
				cell1.getCellComponent().setVisible(false);
				c--;
			}
		}
	}
	,layoutCell: function(row,column,cellRect,cr,cc) {
		var value = this.getValueAt(row,column);
		var cell = this.rowCells[cr][cc];
		if(cell == null) {
			console.log("Logic Error : rowCells[" + cr + "][" + cc + "] = undefined");
			console.log("rowCells.length = " + this.rowCells.length);
		}
		cell.setCellValue(value);
		cell.setTableCellStatus(this,this.isCellSelected(row,column),row,column);
		cell.getCellComponent().setComBounds(cellRect);
		cell.getCellComponent().setVisible(true);
		cell.getCellComponent().validate();
		cell.getCellComponent().paintImmediately();
	}
	,synCellClasses: function() {
		if(this.lastColumnCellFactories == null || this.lastColumnCellFactories.length != this.getColumnCount()) {
			this.clearCells();
			return;
		}
		var i = this.lastColumnCellFactories.length - 1;
		while(i >= 0) {
			if(this.lastColumnCellFactories[i] != this.getCellFactory(0,i)) {
				this.clearCells();
				return;
			}
			i--;
		}
	}
	,clearCells: function() {
		this.removeCells(this.rowCells);
		this.rowCells = new Array();
	}
	,synCreateCellInstances: function() {
		this.synCellClasses();
		var ih = this.getRowHeight();
		var needNum = Math.floor(this.getExtentSize().height / ih) + 2;
		if(this.rowCells.length == needNum) return;
		var columnCount = this.getColumnCount();
		var i;
		this.lastColumnCellFactories = new Array();
		var _g = 0;
		while(_g < columnCount) {
			var i1 = _g++;
			this.lastColumnCellFactories.push(this.getCellFactory(0,i1));
		}
		if(this.rowCells.length < needNum) {
			var addNum = needNum - this.rowCells.length;
			var _g1 = 0;
			while(_g1 < addNum) {
				var i2 = _g1++;
				var columnCells = new Array();
				var _g11 = 0;
				while(_g11 < columnCount) {
					var c = _g11++;
					var cell = org.aswing.AsWingUtils["as"](this.lastColumnCellFactories[c],org.aswing.table.TableCellFactory).createNewCell(false);
					columnCells.push(cell);
					this.addCellToContainer(cell);
				}
				this.rowCells.push(columnCells);
			}
		} else if(this.rowCells.length > needNum) {
			var removeIndex = needNum;
			var removed = this.rowCells.splice(removeIndex,this.rowCells.length - 1);
			this.removeCells(removed);
		}
	}
	,removeCells: function(removed) {
		var _g1 = 0;
		var _g = removed.length;
		while(_g1 < _g) {
			var i = _g1++;
			var columnCells = removed[i];
			var _g3 = 0;
			var _g2 = columnCells.length;
			while(_g3 < _g2) {
				var c = _g3++;
				var cell = org.aswing.AsWingUtils["as"](columnCells[c],org.aswing.table.TableCell);
				this.removeCellFromeContainer(cell);
			}
		}
	}
	,addCellToContainer: function(cell) {
		var cellCom = cell.getCellComponent();
		org.aswing.JTable.setCellComponentProperties(cellCom);
		this.cellPane.append(cellCom);
	}
	,removeCellFromeContainer: function(cell) {
		this.cellPane.remove(cell.getCellComponent());
	}
	,setSize: function(newSize) {
		org.aswing.Container.prototype.setSize.call(this,newSize);
		if(this.testingSize != true) this.setViewPosition(this.getViewPosition());
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,getVerticalUnitIncrement: function() {
		if(this.verticalUnitIncrement == -2147483647) return this.getRowHeight(); else return this.verticalUnitIncrement;
	}
	,getVerticalBlockIncrement: function() {
		if(this.verticalBlockIncrement == -2147483647) return this.getRowHeight() * 5; else return this.verticalBlockIncrement;
	}
	,getHorizontalUnitIncrement: function() {
		if(this.horizontalUnitIncrement == -2147483647) return 1; else return this.horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this.horizontalBlockIncrement == -2147483647) return 10; else return this.horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this.verticalUnitIncrement != increment) {
			this.verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this.verticalBlockIncrement != increment) {
			this.verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this.horizontalUnitIncrement != increment) {
			this.horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this.horizontalBlockIncrement != increment) {
			this.horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setViewportTestSize: function(s) {
		this.testingSize = true;
		this.setSize(s);
		this.testingSize = false;
	}
	,getExtentSize: function() {
		var d = this.getInsets().getInsideSize(this.getSize());
		d.height -= this.getTableHeader().getHeight();
		if(this.getFooter() != null) d.height -= this.getFooter().getHeight();
		return d;
	}
	,getViewSize: function() {
		if(this.getUI() == null) return this.getInsets().getOutsideSize();
		return this.getTableUI().getViewSize(this);
	}
	,getViewPosition: function() {
		return new org.aswing.geom.IntPoint(this.viewPosition.x,this.viewPosition.y);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		if(!this.viewPosition.equals(p)) {
			this.restrictionViewPos(p);
			if(this.viewPosition.equals(p)) return;
			this.viewPosition.setLocation(p);
			this.fireStateChanged(programmatic);
			this.valid = false;
			org.aswing.RepaintManager.getInstance().addInvalidRootComponent(this);
			this.repaint();
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org.aswing.geom.IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org.aswing.geom.IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("rowSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("rowSelectionChanged",listener);
	}
	,addColumnSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("columnSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeColumnSelectionListener: function(listener) {
		this.removeEventListener("columnSelectionChanged",listener);
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,getViewportPane: function() {
		return this;
	}
	,addLayoutComponent: function(comp,constraints) {
	}
	,removeLayoutComponent: function(comp) {
	}
	,preferredLayoutSize: function(target) {
		return this.getViewSize();
	}
	,minimumLayoutSize: function(target) {
		return this.getInsets().getOutsideSize();
	}
	,maximumLayoutSize: function(target) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
		this.synCreateCellInstances();
		this.layoutCells();
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,invalidateLayout: function(target) {
	}
	,__class__: org.aswing.JTable
});
org.aswing.JTextComponent = function() {
	org.aswing.Component.call(this);
	this.textField = new openfl.text.TextField();
	this.textField.set_type(openfl.text.TextFieldType.INPUT);
	this.textField.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.textField.set_background(false);
	this.editable = true;
	this.columnRowCounted = false;
	this.addChild(this.textField);
};
$hxClasses["org.aswing.JTextComponent"] = org.aswing.JTextComponent;
org.aswing.JTextComponent.__name__ = ["org","aswing","JTextComponent"];
org.aswing.JTextComponent.__interfaces__ = [org.aswing.EditableComponent];
org.aswing.JTextComponent.__super__ = org.aswing.Component;
org.aswing.JTextComponent.prototype = $extend(org.aswing.Component.prototype,{
	setDefaultTextFormat: function(dtf) {
		this.getTextField().set_defaultTextFormat(dtf);
	}
	,getDefaultTextFormat: function() {
		return this.getTextField().get_defaultTextFormat();
	}
	,setWordWrap: function(b) {
		this.getTextField().set_wordWrap(b);
		if(this.isAutoSize()) this.revalidate();
	}
	,isWordWrap: function() {
		return this.getTextField().get_wordWrap();
	}
	,getTextField: function() {
		return this.textField;
	}
	,isAutoSize: function() {
		return false;
	}
	,setEnabled: function(b) {
		org.aswing.Component.prototype.setEnabled.call(this,b);
		this.getTextField().selectable = b;
		this.getTextField().mouseEnabled = b;
	}
	,setEditable: function(b) {
		if(b != this.editable) {
			this.editable = b;
			if(b) this.getTextField().set_type(openfl.text.TextFieldType.INPUT); else this.getTextField().set_type(openfl.text.TextFieldType.DYNAMIC);
			this.invalidate();
			this.invalidateColumnRowSize();
			this.repaint();
		}
	}
	,isEditable: function() {
		return this.editable;
	}
	,setFont: function(f) {
	}
	,setForeground: function(c) {
		org.aswing.Component.prototype.setForeground.call(this,c);
		if(this.getForeground() != null) {
			this.getTextField().set_textColor(this.getForeground().getRGB());
			this.getTextField().set_alpha(this.getForeground().getAlpha());
		}
	}
	,setText: function(text) {
		if(this.getTextField().get_text() != text) {
			this.getTextField().set_text(text);
			if(this.isAutoSize()) this.revalidate();
		}
	}
	,getText: function() {
		return this.getTextField().get_text();
	}
	,setHtmlText: function(ht) {
		this.getTextField().set_htmlText(ht);
		if(this.isAutoSize()) this.revalidate();
	}
	,getHtmlText: function() {
		return this.getTextField().get_htmlText();
	}
	,appendText: function(newText) {
		var _g = this.getTextField();
		_g.set_text(_g.get_text() + newText);
		if(this.isAutoSize()) this.revalidate();
	}
	,countPreferredSize: function() {
		throw new org.aswing.error.Error("Subclass of JTextComponent need implement this method : countPreferredSize!");
		return null;
	}
	,invalidateColumnRowSize: function() {
		this.columnRowCounted = false;
	}
	,getColumnWidth: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.columnWidth;
	}
	,getRowHeight: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.rowHeight;
	}
	,getWidthMargin: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.widthMargin;
	}
	,getHeightMargin: function() {
		if(this.columnRowCounted != true) this.countColumnRowSize();
		return this.heightMargin;
	}
	,getTextFieldAutoSizedSize: function(forceWidth,forceHeight) {
		if(forceHeight == null) forceHeight = 0;
		if(forceWidth == null) forceWidth = 0;
		var tf = this.getTextField();
		var oldSize = new org.aswing.geom.IntDimension(Std["int"](tf.get_textWidth()),Std["int"](tf.get_textHeight()));
		var old = tf.autoSize;
		if(forceWidth != 0) tf.set_width(forceWidth);
		if(forceHeight != 0) tf.set_height(forceHeight);
		tf.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
		var size = new org.aswing.geom.IntDimension(Std["int"](tf.get_textWidth()),Std["int"](tf.get_textHeight()));
		tf.set_autoSize(old);
		tf.set_width(oldSize.width);
		tf.set_height(oldSize.height);
		if(forceWidth != 0) size.width = forceWidth;
		if(forceHeight != 0) size.height = forceHeight;
		return size;
	}
	,countColumnRowSize: function() {
		var str = "mmmmm";
		var tf = this.getFont().getTextFormat();
		var textFieldSize = org.aswing.AsWingUtils.computeStringSizeWithFont(this.getFont(),str,true);
		var textSize = org.aswing.AsWingUtils.computeStringSizeWithFont(this.getFont(),str,false);
		if(tf.font == "NSimSun") this.columnWidth = Math.round(textSize.width / 4 + (tf.size | 0) / 6); else this.columnWidth = textSize.width / 5 | 0;
		this.rowHeight = textSize.height;
		this.widthMargin = textFieldSize.width - textSize.width;
		this.heightMargin = textFieldSize.height - textSize.height;
		this.columnRowCounted = true;
	}
	,getInternalFocusObject: function() {
		return this.getTextField();
	}
	,paint: function(b) {
		org.aswing.Component.prototype.paint.call(this,b);
		this.applyBoundsToText(b);
	}
	,applyBoundsToText: function(b) {
		var t = this.getTextField();
		t.set_x(b.x);
		t.set_y(b.y);
		t.set_width(b.width);
		t.set_height(b.height);
	}
	,__class__: org.aswing.JTextComponent
});
org.aswing.JTextArea = function(text,rows,columns) {
	if(columns == null) columns = 0;
	if(rows == null) rows = 0;
	if(text == null) text = "";
	org.aswing.JTextComponent.call(this);
	this.setName("JTextField");
	this.getTextField().multiline = true;
	this.getTextField().set_text(text);
	this.rows = rows;
	this.columns = columns;
	this.viewPos = new org.aswing.geom.IntPoint();
	this.viewportSizeTesting = false;
	this.lastMaxScrollV = this.getTextField().get_maxScrollV();
	this.lastMaxScrollH = this.getTextField().get_maxScrollH();
	this.verticalUnitIncrement = -2147483648;
	this.verticalBlockIncrement = -2147483648;
	this.horizontalUnitIncrement = -2147483648;
	this.horizontalBlockIncrement = -2147483648;
	this.getTextField().addEventListener(openfl.events.Event.CHANGE,$bind(this,this.__onTextAreaTextChange));
	this.getTextField().addEventListener(openfl.events.Event.SCROLL,$bind(this,this.__onTextAreaTextScroll));
	this.updateUI();
};
$hxClasses["org.aswing.JTextArea"] = org.aswing.JTextArea;
org.aswing.JTextArea.__name__ = ["org","aswing","JTextArea"];
org.aswing.JTextArea.__interfaces__ = [org.aswing.Viewportable];
org.aswing.JTextArea.setDefaultMaxChars = function(n) {
	org.aswing.JTextArea.defaultMaxChars = n;
};
org.aswing.JTextArea.getDefaultMaxChars = function() {
	return org.aswing.JTextArea.defaultMaxChars;
};
org.aswing.JTextArea.__super__ = org.aswing.JTextComponent;
org.aswing.JTextArea.prototype = $extend(org.aswing.JTextComponent.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicTextAreaUI;
	}
	,getUIClassID: function() {
		return "TextAreaUI";
	}
	,setColumns: function(columns) {
		if(columns < 0) columns = 0;
		if(this.columns != columns) {
			this.columns = columns;
			if(this.isWordWrap()) {
			}
			this.revalidate();
		}
	}
	,getColumns: function() {
		return this.columns;
	}
	,setRows: function(rows) {
		if(rows < 0) rows = 0;
		if(this.rows != rows) {
			this.rows = rows;
			if(this.isWordWrap()) {
			}
			this.revalidate();
		}
	}
	,getRows: function() {
		return this.rows;
	}
	,isAutoSize: function() {
		return this.columns == 0 || this.rows == 0;
	}
	,countPreferredSize: function() {
		var size;
		if(this.columns > 0 && this.rows > 0) {
			var width = this.getColumnWidth() * this.columns + this.getWidthMargin();
			var height = this.getRowHeight() * this.rows + this.getHeightMargin();
			size = new org.aswing.geom.IntDimension(width,height);
		} else if(this.rows <= 0 && this.columns <= 0) size = this.getTextFieldAutoSizedSize(); else if(this.rows > 0) {
			var forceHeight = this.getRowHeight() * this.rows + this.getHeightMargin();
			size = this.getTextFieldAutoSizedSize(0,forceHeight);
		} else {
			var forceWidth = this.getColumnWidth() * this.columns + this.getWidthMargin();
			size = this.getTextFieldAutoSizedSize(forceWidth,0);
		}
		return this.getInsets().getOutsideSize(size);
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,size: function() {
		org.aswing.JTextComponent.prototype.size.call(this);
		this.applyBoundsToText(this.getPaintBounds());
	}
	,__onTextAreaTextChange: function(e) {
		if(this.viewportSizeTesting) return;
	}
	,__onTextAreaTextScroll: function(e) {
		if(this.viewportSizeTesting) return;
		var t = this.getTextField();
		if(this.focusScrolling) {
			var vp = this.getViewPosition();
			t.scrollH = vp.x;
			t.scrollV = vp.y + 1;
			return;
		}
		var newViewPos = new org.aswing.geom.IntPoint(t.scrollH,t.scrollV - 1);
		if(!this.getViewPosition().equals(newViewPos)) {
			this.viewPos.setLocation(newViewPos);
			this.fireStateChanged(true);
		}
		if(this.lastMaxScrollV != t.get_maxScrollV() || this.lastMaxScrollH != t.get_maxScrollH()) {
			this.lastMaxScrollV = t.get_maxScrollV();
			this.lastMaxScrollH = t.get_maxScrollH();
			this.revalidate();
		}
	}
	,makeFocus: function() {
		if(this.getFocusTransmit() == null) {
			this.focusScrolling = true;
			org.aswing.JTextComponent.prototype.makeFocus.call(this);
			this.focusScrolling = false;
		}
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,getVerticalUnitIncrement: function() {
		if(this.verticalUnitIncrement == -2147483648) return 1; else return this.verticalUnitIncrement;
	}
	,getVerticalBlockIncrement: function() {
		if(this.verticalBlockIncrement == -2147483648) return 10; else return this.verticalBlockIncrement;
	}
	,getHorizontalUnitIncrement: function() {
		if(this.horizontalUnitIncrement == -2147483648) return this.getColumnWidth(); else return this.horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this.horizontalBlockIncrement == -2147483648) return this.getColumnWidth() * 10; else return this.horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this.verticalUnitIncrement != increment) {
			this.verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this.verticalBlockIncrement != increment) {
			this.verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this.horizontalUnitIncrement != increment) {
			this.horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this.horizontalBlockIncrement != increment) {
			this.horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,scrollToBottomLeft: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(0,2147483647));
	}
	,scrollToBottomRight: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(2147483647,2147483647));
	}
	,scrollToTopLeft: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(0,0));
	}
	,scrollToTopRight: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(2147483647,0));
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org.aswing.geom.IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		if(!this.viewPos.equals(p)) {
			this.restrictionViewPos(p);
			if(this.viewPos.equals(p)) return;
			this.viewPos.setLocation(p);
			this.validateScroll();
			this.fireStateChanged(programmatic);
		}
	}
	,setViewportTestSize: function(s) {
		this.viewportSizeTesting = true;
		this.setSize(s);
		this.validateScroll();
		this.viewportSizeTesting = false;
	}
	,getViewSize: function() {
		var t = this.getTextField();
		var wRange;
		var hRange;
		if(this.isWordWrap()) {
			wRange = Std["int"](t.get_textWidth());
			t.scrollH = 0;
		} else if(t.get_maxScrollH() > 0) wRange = Std["int"](t.get_textWidth() + t.get_maxScrollH()); else {
			wRange = Std["int"](t.get_textWidth());
			t.scrollH = 0;
		}
		var extent = t.get_bottomScrollV() - t.scrollV + 1;
		var maxValue = t.get_maxScrollV() + extent;
		var minValue = 1;
		hRange = maxValue - minValue;
		return new org.aswing.geom.IntDimension(wRange,hRange);
	}
	,getExtentSize: function() {
		var t = this.getTextField();
		var extentVer = t.get_bottomScrollV() - t.scrollV + 1;
		var extentHor = Std["int"](t.get_textWidth());
		return new org.aswing.geom.IntDimension(extentHor,extentVer);
	}
	,getViewportPane: function() {
		return this;
	}
	,getViewPosition: function() {
		return this.viewPos.clone();
	}
	,validateScroll: function() {
		var xS = this.viewPos.x;
		var yS = this.viewPos.y + 1;
		var t = this.getTextField();
		if(t.scrollH != xS) t.scrollH = xS;
		if(t.scrollV != yS) t.scrollV = yS;
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org.aswing.geom.IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,__class__: org.aswing.JTextArea
});
org.aswing.JTextField = function(text,columns) {
	if(columns == null) columns = 0;
	if(text == null) text = "";
	org.aswing.JTextComponent.call(this);
	this.setName("JTextField");
	this.getTextField().multiline = false;
	this.getTextField().set_text(text);
	this.columns = columns;
	this.updateUI();
};
$hxClasses["org.aswing.JTextField"] = org.aswing.JTextField;
org.aswing.JTextField.__name__ = ["org","aswing","JTextField"];
org.aswing.JTextField.setDefaultMaxChars = function(n) {
	org.aswing.JTextField.defaultMaxChars = n;
};
org.aswing.JTextField.getDefaultMaxChars = function() {
	return org.aswing.JTextField.defaultMaxChars;
};
org.aswing.JTextField.__super__ = org.aswing.JTextComponent;
org.aswing.JTextField.prototype = $extend(org.aswing.JTextComponent.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicTextFieldUI;
	}
	,getUIClassID: function() {
		return "TextFieldUI";
	}
	,setColumns: function(columns) {
		if(columns == null) columns = 0;
		if(columns < 0) columns = 0;
		if(this.columns != columns) {
			this.columns = columns;
			this.revalidate();
		}
	}
	,getColumns: function() {
		return this.columns;
	}
	,addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,isAutoSize: function() {
		return this.columns == 0;
	}
	,countPreferredSize: function() {
		if(this.columns > 0) {
			var columnWidth = this.getColumnWidth();
			var width = columnWidth * this.columns + this.getWidthMargin();
			var height = this.getRowHeight() + this.getHeightMargin();
			var size = new org.aswing.geom.IntDimension(width,height);
			return this.getInsets().getOutsideSize(size);
		} else return this.getInsets().getOutsideSize(this.getTextFieldAutoSizedSize());
	}
	,__onFocusKeyDown: function(e) {
		if((e.keyCode | 0) == org.aswing.AWKeyboard.ENTER) this.dispatchEvent(new org.aswing.event.AWEvent("act"));
	}
	,paintFocusRect: function(force) {
		if(force == null) force = false;
		org.aswing.FocusManager.getManager(this.get_stage()).setTraversalEnabled(true);
		org.aswing.JTextComponent.prototype.paintFocusRect.call(this,true);
	}
	,__class__: org.aswing.JTextField
});
org.aswing.JToolBar = function(orientation,gap) {
	if(gap == null) gap = 2;
	if(orientation == null) orientation = 0;
	org.aswing.Container.call(this);
	this.orientation = orientation;
	this.gap = gap;
	this.setLayoutWidthOrientation();
	this.updateUI();
};
$hxClasses["org.aswing.JToolBar"] = org.aswing.JToolBar;
org.aswing.JToolBar.__name__ = ["org","aswing","JToolBar"];
org.aswing.JToolBar.__interfaces__ = [org.aswing.Orientable];
org.aswing.JToolBar.__super__ = org.aswing.Container;
org.aswing.JToolBar.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicToolBarUI;
	}
	,getUIClassID: function() {
		return "ToolBarUI";
	}
	,setGap: function(gap) {
		if(this.gap != gap) {
			this.gap = gap;
			this.revalidate();
		}
	}
	,getGap: function() {
		return this.gap;
	}
	,setMargin: function(m) {
		if(this.margin != m) {
			this.margin = m;
			this.revalidate();
			this.repaint();
		}
	}
	,getMargin: function() {
		if(this.margin == null) return new org.aswing.plaf.InsetsUIResource(0,0,0,0); else if(js.Boot.__instanceof(this.margin,org.aswing.plaf.UIResource)) return new org.aswing.plaf.InsetsUIResource().addInsets(this.margin); else return this.margin.clone();
	}
	,getInsets: function() {
		var insets = org.aswing.Container.prototype.getInsets.call(this);
		insets.addInsets(this.getMargin());
		return insets;
	}
	,getOrientation: function() {
		return this.orientation;
	}
	,setOrientation: function(o) {
		if(this.orientation != o) {
			this.orientation = o;
			this.setLayoutWidthOrientation();
			this.revalidate();
			this.repaint();
		}
	}
	,setLayoutWidthOrientation: function() {
		if(this.orientation == 1) this.setLayout(new org.aswing.SoftBoxLayout(1,this.gap)); else this.setLayout(new org.aswing.SoftBoxLayout(0,this.gap));
	}
	,__class__: org.aswing.JToolBar
});
org.aswing.event.TreeModelListener = function() { };
$hxClasses["org.aswing.event.TreeModelListener"] = org.aswing.event.TreeModelListener;
org.aswing.event.TreeModelListener.__name__ = ["org","aswing","event","TreeModelListener"];
org.aswing.event.TreeModelListener.prototype = {
	__class__: org.aswing.event.TreeModelListener
};
org.aswing.JTree = function(newModel) {
	org.aswing.Container.call(this);
	this.setName("JTree");
	this.verticalUnitIncrement = -2147483648;
	this.verticalBlockIncrement = -2147483648;
	this.horizontalUnitIncrement = -2147483648;
	this.horizontalBlockIncrement = -2147483648;
	if(newModel == null) newModel = org.aswing.JTree.getDefaultTreeModel();
	this.viewPosition = new org.aswing.geom.IntPoint();
	this.expandedStack = new org.aswing.util.Stack();
	this.toggleClickCount = 3;
	this.expandedState = new org.aswing.tree.TreePathMap();
	this.rowHeight = 16;
	this.rowHeightSet = false;
	this.fixedCellWidth = -1;
	this.visibleRowCount = 16;
	this.rootVisible = true;
	this.editable = false;
	this.setSelectionModel(new org.aswing.tree.DefaultTreeSelectionModel());
	this.cellFactory = null;
	this.scrollsOnExpand = true;
	this.scrollsOnExpandSet = false;
	this.expandsSelectedPaths = false;
	this.setCellFactory(new org.aswing.tree.GeneralTreeCellFactoryUIResource(org.aswing.tree.DefaultTreeCell));
	this.setCellEditor(new org.aswing.DefaultTextFieldCellEditor());
	this.setModel(newModel);
	this.updateUI();
};
$hxClasses["org.aswing.JTree"] = org.aswing.JTree;
org.aswing.JTree.__name__ = ["org","aswing","JTree"];
org.aswing.JTree.__interfaces__ = [org.aswing.event.CellEditorListener,org.aswing.event.TreeModelListener,org.aswing.Viewportable];
org.aswing.JTree.getDefaultTreeModel = function() {
	var root = new org.aswing.tree.DefaultMutableTreeNode("JTree");
	var parent;
	parent = new org.aswing.tree.DefaultMutableTreeNode("colors");
	root.append(parent);
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("blue"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("violet"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("red"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("yellow"));
	parent = new org.aswing.tree.DefaultMutableTreeNode("sports");
	root.append(parent);
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("basketball"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("soccer"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("football"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("hockey"));
	parent = new org.aswing.tree.DefaultMutableTreeNode("food");
	root.append(parent);
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("hot dogs"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("pizza"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("ravioli"));
	parent.append(new org.aswing.tree.DefaultMutableTreeNode("bananas"));
	root.append(parent);
	return new org.aswing.tree.DefaultTreeModel(root);
};
org.aswing.JTree.__super__ = org.aswing.Container;
org.aswing.JTree.prototype = $extend(org.aswing.Container.prototype,{
	getTreeUI: function() {
		return org.aswing.AsWingUtils["as"](this.ui,org.aswing.plaf.TreeUI);
	}
	,setUI: function(ui) {
		this.settingUI = true;
		org.aswing.Container.prototype.setUI.call(this,ui);
		this.settingUI = false;
	}
	,updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
		this.invalidate();
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicTreeUI;
	}
	,getUIClassID: function() {
		return "TreeUI";
	}
	,setLayout: function(layout) {
		throw new org.aswing.error.Error("You can not set layout to JTree, it's handled by TreeUI");
	}
	,getCellFactory: function() {
		return this.cellFactory;
	}
	,setCellFactory: function(x) {
		var oldValue = this.cellFactory;
		if(this.cellFactory != x) {
			this.cellFactory = x;
			this.firePropertyChange("cellFactory",oldValue,this.cellFactory);
			this.invalidate();
		}
	}
	,setFont: function(f) {
		var old = this.getFont();
		if(old != f) {
			org.aswing.Container.prototype.setFont.call(this,f);
			this.firePropertyChange("font",old,this.getFont());
		}
	}
	,setEditable: function(flag) {
		var oldValue = this.editable;
		if(this.editable != flag) {
			this.editable = flag;
			this.firePropertyChange("editable",oldValue,flag);
		}
	}
	,isEditable: function() {
		return this.editable;
	}
	,setCellEditor: function(cellEditor) {
		var oldEditor = this.cellEditor;
		if(oldEditor != cellEditor) {
			if(oldEditor != null) oldEditor.removeCellEditorListener(this);
			this.cellEditor = cellEditor;
			cellEditor.addCellEditorListener(this);
			this.firePropertyChange("cellEditor",oldEditor,cellEditor);
			this.invalidate();
		}
	}
	,getCellEditor: function() {
		return this.cellEditor;
	}
	,getModel: function() {
		return this.treeModel;
	}
	,setModel: function(newModel) {
		if(this.treeModel == newModel) return;
		this.clearSelection();
		var oldModel = this.treeModel;
		if(this.treeModel != null) this.treeModel.removeTreeModelListener(this);
		this.treeModel = newModel;
		this.clearToggledPaths();
		if(this.treeModel != null) {
			this.treeModel.addTreeModelListener(this);
			if(this.treeModel.getRoot() != null && !this.treeModel.isLeaf(this.treeModel.getRoot())) this.expandedState.put(new org.aswing.tree.TreePath([this.treeModel.getRoot()]),true);
		}
		this.firePropertyChange("model",oldModel,this.treeModel);
		this.invalidate();
	}
	,isRootVisible: function() {
		return this.rootVisible;
	}
	,setRootVisible: function(rootVisible) {
		var oldValue = this.rootVisible;
		if(oldValue != rootVisible) {
			this.rootVisible = rootVisible;
			this.firePropertyChange("rootVisible",oldValue,this.rootVisible);
		}
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight <= 0 || this.rowHeight == rowHeight) return;
		var oldValue = this.rowHeight;
		this.rowHeight = rowHeight;
		this.rowHeightSet = true;
		this.firePropertyChange("rowHeight",oldValue,this.rowHeight);
		this.invalidate();
	}
	,getRowHeight: function() {
		return this.rowHeight;
	}
	,setRowHeightSet: function(b) {
		this.rowHeightSet = b;
	}
	,isRowHeightSet: function() {
		return this.rowHeightSet;
	}
	,getFixedCellWidth: function() {
		return this.fixedCellWidth;
	}
	,setFixedCellWidth: function(width) {
		if(width != this.fixedCellWidth) {
			this.fixedCellWidth = width;
			this.treeDidChange();
		}
	}
	,getSelectionForeground: function() {
		return this.selectionForeground;
	}
	,setSelectionForeground: function(selectionForeground) {
		var old = this.selectionForeground;
		this.selectionForeground = selectionForeground;
		if(!selectionForeground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,getSelectionBackground: function() {
		return this.selectionBackground;
	}
	,setSelectionBackground: function(selectionBackground) {
		var old = this.selectionBackground;
		this.selectionBackground = selectionBackground;
		if(!selectionBackground.equals(old)) {
			this.repaint();
			this.revalidate();
		}
	}
	,setInvokesStopCellEditing: function(newValue) {
		var oldValue = this.invokesStopCellEditing;
		if(oldValue != newValue) {
			this.invokesStopCellEditing = newValue;
			this.firePropertyChange("invokesStopCellEditing",oldValue,newValue);
		}
	}
	,isInvokesStopCellEditing: function() {
		return this.invokesStopCellEditing;
	}
	,setScrollsOnExpand: function(newValue) {
		var oldValue = this.scrollsOnExpand;
		if(oldValue != newValue) {
			this.scrollsOnExpand = newValue;
			this.scrollsOnExpandSet = true;
			this.firePropertyChange("scrollsOnExpand",oldValue,newValue);
		}
	}
	,isScrollsOnExpand: function() {
		return this.scrollsOnExpand;
	}
	,setScrollsOnExpandSet: function(b) {
		this.scrollsOnExpandSet = b;
	}
	,isScrollsOnExpandSet: function() {
		return this.scrollsOnExpandSet;
	}
	,setToggleClickCount: function(clickCount) {
		var oldCount = this.toggleClickCount;
		if(oldCount != clickCount) {
			this.toggleClickCount = clickCount;
			this.firePropertyChange("toggleClickCount",oldCount,clickCount);
		}
	}
	,getToggleClickCount: function() {
		return this.toggleClickCount;
	}
	,setExpandsSelectedPaths: function(newValue) {
		var oldValue = this.expandsSelectedPaths;
		if(oldValue != newValue) {
			this.expandsSelectedPaths = newValue;
			this.firePropertyChange("expandsSelectedPaths",oldValue,newValue);
		}
	}
	,isExpandsSelectedPaths: function() {
		return this.expandsSelectedPaths;
	}
	,isPathEditable: function(path) {
		return this.isEditable();
	}
	,getRowCount: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getRowCount(this);
		return 0;
	}
	,setSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().setSelectionPath(path,programmatic);
	}
	,setSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().setSelectionPaths(paths,programmatic);
	}
	,setLeadSelectionPath: function(newPath) {
		var oldValue = this.leadPath;
		if(oldValue == null && newPath != null || oldValue != null && !oldValue.equals(newPath)) {
			this.leadPath = newPath;
			this.firePropertyChange("leadSelectionPath",oldValue,newPath);
		}
	}
	,setAnchorSelectionPath: function(newPath) {
		var oldValue = this.anchorPath;
		if(oldValue == null && newPath != null || oldValue != null && !oldValue.equals(newPath)) {
			this.anchorPath = newPath;
			this.firePropertyChange("anchorSelectionPath",oldValue,newPath);
		}
	}
	,setSelectionRow: function(row,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setSelectionRows([row],programmatic);
	}
	,setSelectionRows: function(rows,programmatic) {
		if(programmatic == null) programmatic = true;
		var ui = this.getTreeUI();
		if(ui != null && rows != null) {
			var numRows = rows.length;
			var paths = new Array();
			var _g = 0;
			while(_g < numRows) {
				var counter = _g++;
				paths[counter] = ui.getPathForRow(this,rows[counter]);
			}
			this.setSelectionPaths(paths,programmatic);
		}
	}
	,addSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().addSelectionPath(path,programmatic);
	}
	,addSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().addSelectionPaths(paths,programmatic);
	}
	,addSelectionRow: function(row,programmatic) {
		if(programmatic == null) programmatic = true;
		this.addSelectionRows([row],programmatic);
	}
	,addSelectionRows: function(rows,programmatic) {
		if(programmatic == null) programmatic = true;
		var ui = this.getTreeUI();
		if(ui != null && rows != null) {
			var numRows = rows.length;
			var paths = new Array();
			var _g = 0;
			while(_g < numRows) {
				var counter = _g++;
				paths[counter] = ui.getPathForRow(this,rows[counter]);
			}
			this.addSelectionPaths(paths,programmatic);
		}
	}
	,getLastSelectedPathComponent: function() {
		var selPath = this.getSelectionModel().getSelectionPath();
		if(selPath != null) return selPath.getLastPathComponent();
		return null;
	}
	,getLeadSelectionPath: function() {
		return this.leadPath;
	}
	,getAnchorSelectionPath: function() {
		return this.anchorPath;
	}
	,getSelectionPath: function() {
		return this.getSelectionModel().getSelectionPath();
	}
	,getSelectionPaths: function() {
		return this.getSelectionModel().getSelectionPaths();
	}
	,getSelectionRows: function() {
		return this.getSelectionModel().getSelectionRows();
	}
	,getSelectionRow: function() {
		var rows = this.getSelectionModel().getSelectionRows();
		if(rows == null || rows.length == 0) return -1; else return rows[0];
	}
	,getSelectionCount: function() {
		return this.selectionModel.getSelectionCount();
	}
	,getMinSelectionRow: function() {
		return this.getSelectionModel().getMinSelectionRow();
	}
	,getMaxSelectionRow: function() {
		return this.getSelectionModel().getMaxSelectionRow();
	}
	,getLeadSelectionRow: function() {
		var leadPath = this.getLeadSelectionPath();
		if(leadPath != null) return this.getRowForPath(leadPath);
		return -1;
	}
	,isPathSelected: function(path) {
		return this.getSelectionModel().isPathSelected(path);
	}
	,isRowSelected: function(row) {
		return this.getSelectionModel().isRowSelected(row);
	}
	,getExpandedDescendants: function(parent) {
		if(!this.isExpanded(parent)) return null;
		var toggledPaths = this.expandedState.keys();
		var elements = null;
		var path;
		var value = false;
		if(toggledPaths != null) {
			while( toggledPaths.hasNext() ) {
				var path1 = toggledPaths.next();
				value = false;
				value = this.expandedState.get(path1);
				if(path1 != parent && value == true && parent.isDescendant(path1) && this.isPathVisible(path1)) {
					if(elements == null) elements = new org.aswing.util.ArrayList();
					elements.append(path1);
				}
			}
		}
		if(elements == null) return [];
		return elements.toArray();
	}
	,hasBeenExpanded: function(path) {
		return path != null && this.expandedState.get(path) != null;
	}
	,isExpanded: function(path) {
		if(path == null) return false;
		var value = this.expandedState.get(path);
		if(value != true) return false;
		var parentPath = path.getParentPath();
		if(parentPath != null) return this.isExpanded(parentPath);
		return true;
	}
	,isExpandedOfRow: function(row) {
		var tree = this.getTreeUI();
		if(tree != null) {
			var path = tree.getPathForRow(this,row);
			if(path != null) {
				var value = this.expandedState.get(path);
				return value == true;
			}
		}
		return false;
	}
	,isCollapsed: function(path) {
		return !this.isExpanded(path);
	}
	,isCollapsedOfRow: function(row) {
		return !this.isExpandedOfRow(row);
	}
	,makePathVisible: function(path) {
		if(path != null) {
			var parentPath = path.getParentPath();
			if(parentPath != null) this.expandPath(parentPath);
		}
	}
	,isPathVisible: function(path) {
		if(path != null) {
			var parentPath = path.getParentPath();
			if(parentPath != null) return this.isExpanded(parentPath);
			return true;
		}
		return false;
	}
	,getPathBounds: function(path) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getPathBounds(this,path);
		return null;
	}
	,getRowBounds: function(row) {
		return this.getPathBounds(this.getPathForRow(row));
	}
	,getPixelLocationFromLogicLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(startP.x,startP.y);
		return pp;
	}
	,getLogicLocationFromPixelLocation: function(p) {
		var pp = p.clone();
		var startP = this.getViewStartPoint();
		pp.move(-startP.x,-startP.y);
		return pp;
	}
	,getViewStartPoint: function() {
		var viewPos = this.getViewPosition();
		var insets = this.getInsets();
		var insetsX = insets.left;
		var insetsY = insets.top;
		var startX = insetsX - viewPos.x;
		var startY = insetsY - viewPos.y;
		return new org.aswing.geom.IntPoint(startX,startY);
	}
	,scrollPathToVisible: function(path) {
		if(path != null) {
			this.makePathVisible(path);
			var bounds = this.getPathBounds(path);
			if(bounds != null) this.scrollRectToVisible(bounds);
		}
	}
	,scrollRowToVisible: function(row) {
		this.scrollPathToVisible(this.getPathForRow(row));
	}
	,getMousePointedPath: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getMousePointedPath();
		return null;
	}
	,getPathForRow: function(row) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getPathForRow(this,row);
		return null;
	}
	,getRowForPath: function(path) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getRowForPath(this,path);
		return -1;
	}
	,expandPath: function(path) {
		var model = this.getModel();
		if(path != null && model != null && !model.isLeaf(path.getLastPathComponent())) this.setExpandedState(path,true);
	}
	,expandRow: function(row) {
		this.expandPath(this.getPathForRow(row));
	}
	,collapsePath: function(path) {
		this.setExpandedState(path,false);
	}
	,collapseRow: function(row) {
		this.collapsePath(this.getPathForRow(row));
	}
	,getPathForLocation: function(x,y) {
		var closestPath = this.getClosestPathForLocation(x,y);
		if(closestPath != null) {
			var pathBounds = this.getPathBounds(closestPath);
			if(pathBounds != null && x >= pathBounds.x && x < pathBounds.x + pathBounds.width && y >= pathBounds.y && y < pathBounds.y + pathBounds.height) return closestPath;
		}
		return null;
	}
	,getRowForLocation: function(x,y) {
		return this.getRowForPath(this.getPathForLocation(x,y));
	}
	,getClosestPathForLocation: function(x,y) {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getClosestPathForLocation(this,x,y);
		return null;
	}
	,getClosestRowForLocation: function(x,y) {
		return this.getRowForPath(this.getClosestPathForLocation(x,y));
	}
	,isEditing: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.isEditing(this);
		return false;
	}
	,stopEditing: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.stopEditing(this);
		return false;
	}
	,cancelEditing: function() {
		var tree = this.getTreeUI();
		if(tree != null) tree.cancelEditing(this);
	}
	,startEditingAtPath: function(path) {
		var tree = this.getTreeUI();
		if(tree != null) {
			if(tree.startEditingAtPath(this,path)) this.dispatchEvent(new org.aswing.event.TreeCellEditEvent("treeCellEditingStarted",path));
		}
	}
	,getEditingPath: function() {
		var tree = this.getTreeUI();
		if(tree != null) return tree.getEditingPath(this);
		return null;
	}
	,setSelectionModel: function(selectionModel) {
		if(this.selectionModel == selectionModel) return;
		if(selectionModel == null) selectionModel = org.aswing.tree.EmptySelectionModel.sharedInstance();
		var oldValue = this.selectionModel;
		if(this.selectionModel != null) this.selectionModel.removeTreeSelectionListener($bind(this,this.__valueChangedTreeSelectionRedirector));
		this.selectionModel = selectionModel;
		this.selectionModel.addTreeSelectionListener($bind(this,this.__valueChangedTreeSelectionRedirector));
		this.firePropertyChange("selectionModel",oldValue,this.selectionModel);
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,setSelectionMode: function(mode) {
		this.selectionModel.setSelectionMode(mode);
	}
	,getPathBetweenRows: function(index0,index1) {
		var newMinIndex;
		var newMaxIndex;
		var tree = this.getTreeUI();
		newMinIndex = Std["int"](Math.min(index0,index1));
		newMaxIndex = Std["int"](Math.max(index0,index1));
		if(tree != null) {
			var selection = new Array();
			var _g1 = newMinIndex;
			var _g = newMaxIndex + 1;
			while(_g1 < _g) {
				var counter = _g1++;
				selection[counter - newMinIndex] = tree.getPathForRow(this,counter);
			}
			return selection;
		}
		return null;
	}
	,setSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var paths = this.getPathBetweenRows(index0,index1);
		this.getSelectionModel().setSelectionPaths(paths,programmatic);
	}
	,addSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var paths = this.getPathBetweenRows(index0,index1);
		this.getSelectionModel().addSelectionPaths(paths,programmatic);
	}
	,removeSelectionInterval: function(index0,index1,programmatic) {
		if(programmatic == null) programmatic = true;
		var paths = this.getPathBetweenRows(index0,index1);
		this.getSelectionModel().removeSelectionPaths(paths,programmatic);
	}
	,removeSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().removeSelectionPath(path,programmatic);
	}
	,removeSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().removeSelectionPaths(paths,programmatic);
	}
	,removeSelectionRow: function(row,programmatic) {
		if(programmatic == null) programmatic = true;
		this.removeSelectionRows([row],programmatic);
	}
	,removeSelectionRows: function(rows,programmatic) {
		if(programmatic == null) programmatic = true;
		var tree = this.getTreeUI();
		if(tree != null && rows != null) {
			var numRows = rows.length;
			var paths = new Array();
			var _g = 0;
			while(_g < numRows) {
				var counter = _g++;
				paths[counter] = tree.getPathForRow(this,rows[counter]);
			}
			this.removeSelectionPaths(paths,programmatic);
		}
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.getSelectionModel().clearSelection(programmatic);
	}
	,isSelectionEmpty: function() {
		return this.getSelectionModel().isSelectionEmpty();
	}
	,firePropertyChange: function(pn,oldValue,newValue) {
		this.dispatchEvent(new org.aswing.event.PropertyChangeEvent(pn,oldValue,newValue));
	}
	,fireTreeExpanded: function(path) {
		this.dispatchEvent(new org.aswing.event.TreeEvent("treeExpanded",path));
	}
	,fireTreeCollapsed: function(path) {
		this.dispatchEvent(new org.aswing.event.TreeEvent("treeCollapsed",path));
	}
	,fireTreeWillExpand: function(path) {
		this.dispatchEvent(new org.aswing.event.TreeEvent("treeWillExpand",path));
	}
	,fireTreeWillCollapse: function(path) {
		this.dispatchEvent(new org.aswing.event.TreeEvent("treeWillCollapse",path));
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("treeSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("treeSelectionChanged",listener);
	}
	,treeDidChange: function() {
		this.setViewPosition(this.restrictionViewPos(this.getViewPosition()));
		this.revalidate();
		this.repaint();
	}
	,setVisibleRowCount: function(newCount) {
		var oldCount = this.visibleRowCount;
		if(oldCount != newCount) {
			this.visibleRowCount = newCount;
			this.firePropertyChange("visibleRowCount",oldCount,this.visibleRowCount);
			this.invalidate();
		}
	}
	,getVisibleRowCount: function() {
		return this.visibleRowCount;
	}
	,expandRoot: function() {
		var model = this.getModel();
		if(model != null && model.getRoot() != null) this.expandPath(new org.aswing.tree.TreePath([model.getRoot()]));
	}
	,getModelIndexsForPath: function(path) {
		if(path != null) {
			var model = this.getModel();
			var count = path.getPathCount();
			var indexs = new Array();
			var parent = model.getRoot();
			var _g = 1;
			while(_g < count) {
				var counter = _g++;
				indexs[counter - 1] = model.getIndexOfChild(parent,path.getPathComponent(counter));
				parent = path.getPathComponent(counter);
				if(indexs[counter - 1] < 0) return null;
			}
			return indexs;
		}
		return null;
	}
	,getPathForIndexs: function(indexs) {
		if(indexs == null) return null;
		var model = this.getModel();
		if(model == null) return null;
		var count = indexs.length;
		var parent = model.getRoot();
		var parentPath = new org.aswing.tree.TreePath([parent]);
		var _g = 0;
		while(_g < count) {
			var counter = _g++;
			parent = model.getChild(parent,indexs[counter]);
			if(parent == null) return null;
			parentPath = parentPath.pathByAddingChild(parent);
		}
		return parentPath;
	}
	,setExpandedState: function(path,state) {
		if(path != null) {
			var stack;
			var parentPath = path.getParentPath();
			if(this.expandedStack.size() == 0) stack = new org.aswing.util.Stack(); else stack = org.aswing.AsWingUtils["as"](this.expandedStack.pop(),org.aswing.util.Stack);
			try {
				while(parentPath != null) if(this.isExpanded(parentPath)) parentPath = null; else {
					stack.push(parentPath);
					parentPath = parentPath.getParentPath();
				}
				var counter = stack.size() - 1;
				while(counter >= 0) {
					parentPath = org.aswing.AsWingUtils["as"](stack.pop(),org.aswing.tree.TreePath);
					if(!this.isExpanded(parentPath)) {
						try {
							this.fireTreeWillExpand(parentPath);
						} catch( eve1 ) {
							if( js.Boot.__instanceof(eve1,org.aswing.error.Error) ) {
								return;
							} else throw(eve1);
						}
						this.expandedState.put(parentPath,true);
						this.fireTreeExpanded(parentPath);
					}
					counter--;
				}
			} catch( e ) {
				if( js.Boot.__instanceof(e,org.aswing.error.Error) ) {
					if(this.expandedStack.size() < org.aswing.JTree.TEMP_STACK_SIZE) {
						stack.clear();
						this.expandedStack.push(stack);
					}
				} else throw(e);
			}
			var cValue;
			if(state != true) {
				cValue = this.expandedState.get(path);
				if(cValue != null && cValue == true) {
					try {
						this.fireTreeWillCollapse(path);
					} catch( eve2 ) {
						if( js.Boot.__instanceof(eve2,org.aswing.error.Error) ) {
							return;
						} else throw(eve2);
					}
					this.expandedState.put(path,false);
					this.fireTreeCollapsed(path);
					if(this.removeDescendantSelectedPaths(path,false) && !this.isPathSelected(path)) this.addSelectionPath(path);
				}
			} else {
				cValue = this.expandedState.get(path);
				if(cValue == null || !(cValue == true)) {
					try {
						this.fireTreeWillExpand(path);
					} catch( eve3 ) {
						if( js.Boot.__instanceof(eve3,org.aswing.error.Error) ) {
							return;
						} else throw(eve3);
					}
					this.expandedState.put(path,true);
					this.fireTreeExpanded(path);
				}
			}
		}
	}
	,getDescendantToggledPaths: function(parent) {
		if(parent == null) return null;
		var descendants = new Array();
		var nodes = this.expandedState.keys();
		var path;
		while( nodes.hasNext() ) {
			var path1 = nodes.next();
			if(parent.isDescendant(path1)) descendants.push(path1);
		}
		return descendants;
	}
	,removeDescendantToggledPaths: function(toRemove) {
		if(toRemove != null) {
			var _g1 = 0;
			var _g = toRemove.length;
			while(_g1 < _g) {
				var i = _g1++;
				var descendants = this.getDescendantToggledPaths(org.aswing.AsWingUtils["as"](toRemove[i],org.aswing.tree.TreePath));
				if(descendants != null) {
					var _g3 = 0;
					var _g2 = descendants.length;
					while(_g3 < _g2) {
						var j = _g3++;
						this.expandedState.remove(descendants[j]);
					}
				}
			}
		}
	}
	,clearToggledPaths: function() {
		this.expandedState.clear();
	}
	,removeDescendantSelectedPaths: function(path,includePath) {
		var toRemove = this.getDescendantSelectedPaths(path,includePath);
		if(toRemove != null) {
			this.getSelectionModel().removeSelectionPaths(toRemove);
			return true;
		}
		return false;
	}
	,getDescendantSelectedPaths: function(path,includePath) {
		var sm = this.getSelectionModel();
		var selPaths;
		if(sm != null) selPaths = sm.getSelectionPaths(); else selPaths = null;
		if(selPaths != null) {
			var shouldRemove = false;
			var counter = selPaths.length - 1;
			while(counter >= 0) {
				if(selPaths[counter] != null && path.isDescendant(selPaths[counter]) && (!path.equals(selPaths[counter]) || includePath)) shouldRemove = true; else selPaths[counter] = null;
				counter--;
			}
			if(shouldRemove != true) selPaths = null;
			return selPaths;
		}
		return null;
	}
	,removeDescendantSelectedPathsWithEvent: function(e) {
		var pPath = e.getTreePath();
		var oldChildren = e.getChildren();
		var sm = this.getSelectionModel();
		if(sm != null && pPath != null && oldChildren != null && oldChildren.length > 0) {
			var counter = oldChildren.length - 1;
			while(counter >= 0) {
				this.removeDescendantSelectedPaths(pPath.pathByAddingChild(oldChildren[counter]),true);
				counter--;
			}
		}
	}
	,__valueChangedTreeSelectionRedirector: function(e) {
		this.dispatchEvent(e.cloneWithSource(this));
	}
	,treeNodesChanged: function(e) {
	}
	,treeNodesInserted: function(e) {
	}
	,treeNodesRemoved: function(e) {
		if(e == null) return;
		var parent = e.getTreePath();
		var children = e.getChildren();
		if(children == null) return;
		var rPath;
		var toRemove = new Array();
		var counter = children.length - 1;
		while(counter >= 0) {
			rPath = parent.pathByAddingChild(children[counter]);
			if(this.expandedState.get(rPath) != null) toRemove.push(rPath);
			counter--;
		}
		if(toRemove.length > 0) this.removeDescendantToggledPaths(toRemove);
		var model = this.getModel();
		if(model == null || model.isLeaf(parent.getLastPathComponent())) this.expandedState.remove(parent);
		this.removeDescendantSelectedPathsWithEvent(e);
	}
	,treeStructureChanged: function(e) {
		if(e == null) return;
		var parent = e.getTreePath();
		if(parent == null) return;
		if(parent.getPathCount() == 1) {
			this.clearToggledPaths();
			if(this.treeModel.getRoot() != null && !this.treeModel.isLeaf(this.treeModel.getRoot())) this.expandedState.put(parent,true);
		} else if(this.expandedState.get(parent) != null) {
			var toRemove = new Array();
			var isExpanded = this.isExpanded(parent);
			toRemove.push(parent);
			this.removeDescendantToggledPaths(toRemove);
			if(isExpanded) {
				var model = this.getModel();
				if(model == null || model.isLeaf(parent.getLastPathComponent())) this.collapsePath(parent); else this.expandedState.put(parent,true);
			}
		}
		this.removeDescendantSelectedPaths(parent,false);
	}
	,editingStopped: function(source) {
		var tree = this.getTreeUI();
		if(tree != null) {
			var path = tree.getEditingPath(this);
			if(path != null) {
				this.getModel().valueForPathChanged(tree.getEditingPath(this),source.getCellEditorValue());
				this.dispatchEvent(new org.aswing.event.TreeCellEditEvent("treeCellEditingStopped",path,path.getLastPathComponent(),source.getCellEditorValue()));
			}
		}
		this.requestFocus();
	}
	,editingCanceled: function(source) {
		this.dispatchEvent(new org.aswing.event.TreeCellEditEvent("treeCellEditingCanceled",this.getTreeUI().getEditingPath(this)));
		this.requestFocus();
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,getVerticalUnitIncrement: function() {
		if(this.verticalUnitIncrement == -2147483648) return this.getRowHeight(); else return this.verticalUnitIncrement;
	}
	,getVerticalBlockIncrement: function() {
		if(this.verticalBlockIncrement == -2147483648) return Std["int"](Math.max(this.getRowHeight(),this.getExtentSize().height - this.getRowHeight())); else return this.verticalBlockIncrement;
	}
	,getHorizontalUnitIncrement: function() {
		if(this.horizontalUnitIncrement == -2147483648) return 1; else return this.horizontalUnitIncrement;
	}
	,getHorizontalBlockIncrement: function() {
		if(this.horizontalBlockIncrement == -2147483648) return Std["int"](Math.max(1,this.getExtentSize().width - 1)); else return this.horizontalBlockIncrement;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this.verticalUnitIncrement != increment) {
			this.verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this.verticalBlockIncrement != increment) {
			this.verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this.horizontalUnitIncrement != increment) {
			this.horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this.horizontalBlockIncrement != increment) {
			this.horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setViewportTestSize: function(s) {
		this.setSize(s);
	}
	,getExtentSize: function() {
		return this.getInsets().getInsideSize(this.getSize());
	}
	,getViewSize: function() {
		return this.getTreeUI().getViewSize(this);
	}
	,getViewPosition: function() {
		return new org.aswing.geom.IntPoint(this.viewPosition.x,this.viewPosition.y);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		this.restrictionViewPos(p);
		if(!this.viewPosition.equals(p)) {
			this.viewPosition.setLocation(p);
			this.fireStateChanged(programmatic);
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		var visibleRect = this.getVisibleRect();
		var ltPoint = contentRect.leftTop();
		var rbPoint = contentRect.rightBottom();
		var ltIn = visibleRect.containsPoint(ltPoint);
		var rbIn = visibleRect.containsPoint(rbPoint);
		if(ltIn && rbIn) return; else if(ltIn != true) this.setViewPosition(new org.aswing.geom.IntPoint(ltPoint.x,ltPoint.y),programmatic); else {
			var extendSize = this.getExtentSize();
			this.setViewPosition(new org.aswing.geom.IntPoint(rbPoint.x - extendSize.width,rbPoint.y - extendSize.height),programmatic);
		}
	}
	,getVisibleRect: function() {
		var es = this.getExtentSize();
		return new org.aswing.geom.IntRectangle(this.viewPosition.x,this.viewPosition.y,es.width,es.height);
	}
	,restrictionViewPos: function(p) {
		var maxPos = this.getViewMaxPos();
		p.x = Std["int"](Math.max(0,Math.min(maxPos.x,p.x)));
		p.y = Std["int"](Math.max(0,Math.min(maxPos.y,p.y)));
		return p;
	}
	,getViewMaxPos: function() {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		var p = new org.aswing.geom.IntPoint(viewSize.width - showSize.width,viewSize.height - showSize.height);
		if(p.x < 0) p.x = 0;
		if(p.y < 0) p.y = 0;
		return p;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,getViewportPane: function() {
		return this;
	}
	,__class__: org.aswing.JTree
});
org.aswing.JViewport = function(view,tracksWidth,tracksHeight) {
	if(tracksHeight == null) tracksHeight = false;
	if(tracksWidth == null) tracksWidth = false;
	org.aswing.Container.call(this);
	this.setName("JViewport");
	this.tracksWidth = tracksWidth;
	this.tracksHeight = tracksHeight;
	this.verticalUnitIncrement = -2147483648;
	this.verticalBlockIncrement = -2147483648;
	this.horizontalUnitIncrement = -2147483648;
	this.horizontalBlockIncrement = -2147483648;
	this.verticalAlignment = 0;
	this.horizontalAlignment = 0;
	if(view != null) this.setView(view);
	this.setLayout(new org.aswing.ViewportLayout());
	this.updateUI();
};
$hxClasses["org.aswing.JViewport"] = org.aswing.JViewport;
org.aswing.JViewport.__name__ = ["org","aswing","JViewport"];
org.aswing.JViewport.__interfaces__ = [org.aswing.Viewportable];
org.aswing.JViewport.__super__ = org.aswing.Container;
org.aswing.JViewport.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicViewportUI;
	}
	,getUIClassID: function() {
		return "ViewportUI";
	}
	,setLayout: function(layout) {
		if(js.Boot.__instanceof(layout,org.aswing.ViewportLayout)) org.aswing.Container.prototype.setLayout.call(this,layout); else throw new org.aswing.error.Error("Only on set ViewportLayout to JViewport");
	}
	,setTracksWidth: function(b) {
		if(b != this.tracksWidth) {
			this.tracksWidth = b;
			this.revalidate();
		}
	}
	,isTracksWidth: function() {
		return this.tracksWidth;
	}
	,setTracksHeight: function(b) {
		if(this.tracksHeight != b) {
			this.tracksHeight = b;
			this.revalidate();
		}
	}
	,isTracksHeight: function() {
		return this.tracksHeight;
	}
	,getVerticalAlignment: function() {
		return this.verticalAlignment;
	}
	,setVerticalAlignment: function(alignment) {
		if(alignment == this.verticalAlignment) return; else {
			this.verticalAlignment = alignment;
			this.setViewPosition(this.getViewPosition());
		}
	}
	,getHorizontalAlignment: function() {
		return this.horizontalAlignment;
	}
	,setHorizontalAlignment: function(alignment) {
		if(alignment == this.horizontalAlignment) return; else {
			this.horizontalAlignment = alignment;
			this.setViewPosition(this.getViewPosition());
		}
	}
	,setView: function(view) {
		if(this.view != view) {
			this.view = view;
			this.removeAll();
			if(view != null) this.insertImp(-1,view);
			this.fireStateChanged();
		}
	}
	,getView: function() {
		return this.view;
	}
	,setVerticalUnitIncrement: function(increment) {
		if(this.verticalUnitIncrement != increment) {
			this.verticalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setVerticalBlockIncrement: function(increment) {
		if(this.verticalBlockIncrement != increment) {
			this.verticalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalUnitIncrement: function(increment) {
		if(this.horizontalUnitIncrement != increment) {
			this.horizontalUnitIncrement = increment;
			this.fireStateChanged();
		}
	}
	,setHorizontalBlockIncrement: function(increment) {
		if(this.horizontalBlockIncrement != increment) {
			this.horizontalBlockIncrement = increment;
			this.fireStateChanged();
		}
	}
	,append: function(com,constraints) {
		this.setView(com);
	}
	,insert: function(i,com,constraints) {
		this.setView(com);
	}
	,getVerticalUnitIncrement: function() {
		if(this.verticalUnitIncrement != -2147483648) return this.verticalUnitIncrement; else return Std["int"](Math.max(this.getExtentSize().height / 40,1));
	}
	,getVerticalBlockIncrement: function() {
		if(this.verticalBlockIncrement != -2147483648) return this.verticalBlockIncrement; else return this.getExtentSize().height - 1;
	}
	,getHorizontalUnitIncrement: function() {
		if(this.horizontalUnitIncrement != -2147483648) return this.horizontalUnitIncrement; else return Std["int"](Math.max(this.getExtentSize().width / 40,1));
	}
	,getHorizontalBlockIncrement: function() {
		if(this.horizontalBlockIncrement != -2147483648) return this.horizontalBlockIncrement; else return this.getExtentSize().width - 1;
	}
	,setViewportTestSize: function(s) {
		this.setSize(s);
	}
	,getExtentSize: function() {
		return this.getInsets().getInsideSize(this.getSize());
	}
	,getViewSize: function() {
		if(this.view == null) return new org.aswing.geom.IntDimension(); else if(this.isTracksWidth() && this.isTracksHeight()) return this.getExtentSize(); else {
			var viewSize = this.view.getPreferredSize();
			var extentSize = this.getExtentSize();
			if(this.isTracksWidth()) viewSize.width = extentSize.width; else if(this.isTracksHeight()) viewSize.height = extentSize.height;
			return viewSize;
		}
	}
	,getViewPosition: function() {
		if(this.view != null) {
			var p = this.view.getLocation();
			var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
			p.x = ir.x - p.x;
			p.y = ir.y - p.y;
			return p;
		} else return new org.aswing.geom.IntPoint(0,0);
	}
	,getVisibleRect: function() {
		var p = this.getViewPosition();
		var s = this.getExtentSize();
		return new org.aswing.geom.IntRectangle(p.x,p.y,s.width,s.height);
	}
	,setViewPosition: function(p,programmatic) {
		if(programmatic == null) programmatic = true;
		this.restrictionViewPos(p);
		if(!p.equals(this.getViewPosition())) {
			var ir = this.getInsets().getInsideBounds(this.getSize().getBounds());
			if(this.view != null) this.view.setLocationXY(ir.x - p.x,ir.y - p.y);
			this.fireStateChanged(programmatic);
		}
	}
	,scrollRectToVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		this.setViewPosition(new org.aswing.geom.IntPoint(contentRect.x,contentRect.y),programmatic);
	}
	,ensureRectVisible: function(contentRect,programmatic) {
		if(programmatic == null) programmatic = true;
		contentRect = contentRect.clone();
		var vp = this.getViewPosition();
		var es = this.getExtentSize();
		var vs = this.getViewSize();
		var range = new org.aswing.geom.IntRectangle(vp.x,vp.y,es.width,es.height);
		if(contentRect.x < 0) {
			contentRect.width += contentRect.x;
			contentRect.x = 0;
		}
		if(contentRect.y < 0) {
			contentRect.height += contentRect.y;
			contentRect.y = 0;
		}
		if(contentRect.x + contentRect.width > vs.width) contentRect.width = vs.width - contentRect.x;
		if(contentRect.y + contentRect.height > vs.height) contentRect.height = vs.height - contentRect.y;
		var newVP = vp.clone();
		if(contentRect.x + contentRect.width > range.x + range.width) newVP.x = contentRect.x + contentRect.width - es.width;
		if(contentRect.y + contentRect.height > range.y + range.height) newVP.y = contentRect.y + contentRect.height - es.height;
		if(contentRect.x < range.x) newVP.x = contentRect.x;
		if(contentRect.y < range.y) newVP.y = contentRect.y;
		this.setViewPosition(newVP,programmatic);
	}
	,scrollVertical: function(delta) {
		this.setViewPosition(this.getViewPosition().move(0,delta));
	}
	,scrollHorizontal: function(delta) {
		this.setViewPosition(this.getViewPosition().move(delta,0));
	}
	,scrollToBottomLeft: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(0,2147483647));
	}
	,scrollToBottomRight: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(2147483647,2147483647));
	}
	,scrollToTopLeft: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(0,0));
	}
	,scrollToTopRight: function() {
		this.setViewPosition(new org.aswing.geom.IntPoint(2147483647,0));
	}
	,restrictionViewPos: function(p) {
		var showSize = this.getExtentSize();
		var viewSize = this.getViewSize();
		if(showSize.width < viewSize.width) p.x = Std["int"](Math.max(0,Math.min(viewSize.width - showSize.width,p.x))); else if(showSize.width > viewSize.width) {
			if(this.horizontalAlignment == 0) p.x = -((showSize.width - viewSize.width) / 2 | 0); else if(this.horizontalAlignment == 4) p.x = -(showSize.width - viewSize.width); else p.x = 0;
		} else p.x = 0;
		if(showSize.height < viewSize.height) p.y = Std["int"](Math.max(0,Math.min(viewSize.height - showSize.height,p.y))); else if(showSize.height > viewSize.height) {
			if(this.verticalAlignment == 0) p.y = -((showSize.height - viewSize.height) / 2 | 0); else if(this.verticalAlignment == 3) p.y = -(showSize.height - viewSize.height); else p.y = 0;
		} else p.y = 0;
		return p;
	}
	,addStateListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("stateChanged",listener,false,priority);
	}
	,removeStateListener: function(listener) {
		this.removeEventListener("stateChanged",listener);
	}
	,fireStateChanged: function(programmatic) {
		if(programmatic == null) programmatic = true;
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("stateChanged",programmatic));
	}
	,getViewportPane: function() {
		return this;
	}
	,__class__: org.aswing.JViewport
});
org.aswing.KeyMap = function() {
	this.map = new haxe.ds.StringMap();
};
$hxClasses["org.aswing.KeyMap"] = org.aswing.KeyMap;
org.aswing.KeyMap.__name__ = ["org","aswing","KeyMap"];
org.aswing.KeyMap.getCodec = function(key) {
	return org.aswing.KeyMap.getCodecWithKeySequence(key.getCodeSequence());
};
org.aswing.KeyMap.getCodecWithKeySequence = function(keySequence) {
	return keySequence.join("|");
};
org.aswing.KeyMap.prototype = {
	registerKeyAction: function(key,action) {
		this.map.set(org.aswing.KeyMap.getCodec(key),new org.aswing.KeyAction(key,action));
	}
	,unregisterKeyAction: function(key) {
		this.map.remove(org.aswing.KeyMap.getCodec(key));
	}
	,getKeyAction: function(key) {
		return this.getKeyActionWithCodec(org.aswing.KeyMap.getCodec(key));
	}
	,getKeyActionWithCodec: function(codec) {
		var ka = this.map.get(codec);
		if(ka != null) return ka.action;
		return null;
	}
	,fireKeyAction: function(keySequence) {
		var codec = org.aswing.KeyMap.getCodecWithKeySequence(keySequence);
		var action = this.getKeyActionWithCodec(codec);
		if(action != null) {
			action();
			return true;
		}
		return false;
	}
	,containsKey: function(key) {
		return this.map.exists(org.aswing.KeyMap.getCodec(key));
	}
	,__class__: org.aswing.KeyMap
};
org.aswing.KeyAction = function(key,action) {
	this.key = key;
	this.action = action;
};
$hxClasses["org.aswing.KeyAction"] = org.aswing.KeyAction;
org.aswing.KeyAction.__name__ = ["org","aswing","KeyAction"];
org.aswing.KeyAction.prototype = {
	__class__: org.aswing.KeyAction
};
org.aswing.KeyType = function() { };
$hxClasses["org.aswing.KeyType"] = org.aswing.KeyType;
org.aswing.KeyType.__name__ = ["org","aswing","KeyType"];
org.aswing.KeyType.prototype = {
	__class__: org.aswing.KeyType
};
org.aswing.KeySequence = function($arguments) {
	if(js.Boot.__instanceof($arguments[0],org.aswing.KeyStroke)) {
		var key = org.aswing.AsWingUtils["as"]($arguments[0],org.aswing.KeyStroke);
		this.codeSequence = [key.getCode()];
		this.codeString = key.getDescription();
		var _g1 = 1;
		var _g = $arguments.length;
		while(_g1 < _g) {
			var i = _g1++;
			key = org.aswing.AsWingUtils["as"]($arguments[i],org.aswing.KeyStroke);
			this.codeString += "+" + key.getDescription();
			this.codeSequence.push(key.getCode());
		}
	} else if(($arguments[1] instanceof Array) && $arguments[1].__enum__ == null) {
		this.codeString = $arguments[0].toString();
		this.codeSequence = $arguments[1].concat();
	} else throw new org.aswing.error.Error("KeySequence constructing error!!");
};
$hxClasses["org.aswing.KeySequence"] = org.aswing.KeySequence;
org.aswing.KeySequence.__name__ = ["org","aswing","KeySequence"];
org.aswing.KeySequence.__interfaces__ = [org.aswing.KeyType];
org.aswing.KeySequence.prototype = {
	getDescription: function() {
		return this.codeString;
	}
	,getCodeSequence: function() {
		return this.codeSequence.slice();
	}
	,toString: function() {
		return "KeySequence[" + Std.string($bind(this,this.getDescription)) + "]";
	}
	,__class__: org.aswing.KeySequence
};
org.aswing.KeyStroke = function(description,code) {
	this.codeString = description;
	this.code = code;
};
$hxClasses["org.aswing.KeyStroke"] = org.aswing.KeyStroke;
org.aswing.KeyStroke.__name__ = ["org","aswing","KeyStroke"];
org.aswing.KeyStroke.__interfaces__ = [org.aswing.KeyType];
org.aswing.KeyStroke.prototype = {
	getDescription: function() {
		return this.codeString;
	}
	,getCodeSequence: function() {
		return [this.code];
	}
	,getCode: function() {
		return this.code;
	}
	,toString: function() {
		return "Keyboard[" + Std.string($bind(this,this.getDescription)) + "]";
	}
	,__class__: org.aswing.KeyStroke
};
org.aswing.KeyboardManager = function() {
	this.enabled = true;
	this.inited = false;
	this.keyJustActed = false;
	this.keySequence = new org.aswing.util.ArrayList();
	this.keymap = new org.aswing.KeyMap();
	this.mnemonicModifier = null;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.KeyboardManager"] = org.aswing.KeyboardManager;
org.aswing.KeyboardManager.__name__ = ["org","aswing","KeyboardManager"];
org.aswing.KeyboardManager.getDefaultMnemonicModifier = function() {
	return org.aswing.KeyboardManager.defaultMnemonicModifier.slice();
};
org.aswing.KeyboardManager.setDefaultMnemonicModifier = function(keyCodes) {
	org.aswing.KeyboardManager.defaultMnemonicModifier = keyCodes.slice();
};
org.aswing.KeyboardManager.__super__ = openfl.events.EventDispatcher;
org.aswing.KeyboardManager.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	init: function(root) {
		if(this.inited != true) {
			this.inited = true;
			root.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__onKeyDown),false,0,true);
			root.addEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.__onKeyUp),false,0,true);
			root.addEventListener(openfl.events.Event.DEACTIVATE,$bind(this,this.__deactived),false,0,true);
		} else throw new org.aswing.error.Error("This KeyboardManager was already inited!");
	}
	,registerKeyAction: function(key,action) {
		this.keymap.registerKeyAction(key,action);
	}
	,unregisterKeyAction: function(key) {
		this.keymap.unregisterKeyAction(key);
	}
	,getKeyMap: function() {
		return this.keymap;
	}
	,isKeyDown: function(keyCode) {
		return this.keySequence.contains(keyCode);
	}
	,setMnemonicModifier: function(keyCodes) {
		if(keyCodes == null) keyCodes = null; else this.mnemonicModifier = keyCodes.slice();
	}
	,setEnabled: function(b) {
		this.enabled = b;
		if(b != true) this.keySequence.clear();
	}
	,isEnabled: function() {
		return this.enabled;
	}
	,getMnemonicModifier: function() {
		if(this.mnemonicModifier == null) return org.aswing.KeyboardManager.getDefaultMnemonicModifier(); else return this.mnemonicModifier.slice();
	}
	,isMnemonicModifierDown: function() {
		var mm = this.getMnemonicModifier();
		var _g1 = 0;
		var _g = mm.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.isKeyDown(mm[i])) return false;
		}
		return mm.length > 0;
	}
	,isKeyJustActed: function() {
		return this.keyJustActed;
	}
	,__onKeyDown: function(e) {
		if(this.enabled != true) return;
		this.dispatchEvent(e);
		var code = e.keyCode;
		if(!this.keySequence.contains(code)) this.keySequence.append(code);
		this.keyJustActed = false;
		if(this.keymap.fireKeyAction(this.keySequence.toArray())) this.keyJustActed = true;
	}
	,__onKeyUp: function(e) {
		if(this.enabled != true) return;
		this.dispatchEvent(e);
		var code = e.keyCode;
		this.keySequence.remove(code);
		if(e.ctrlKey != true) this.keySequence.remove(org.aswing.AWKeyboard.CONTROL);
		if(e.shiftKey != true) this.keySequence.remove(org.aswing.AWKeyboard.SHIFT);
	}
	,__deactived: function(e) {
		this.keySequence.clear();
	}
	,__class__: org.aswing.KeyboardManager
});
org.aswing.ListModel = function() { };
$hxClasses["org.aswing.ListModel"] = org.aswing.ListModel;
org.aswing.ListModel.__name__ = ["org","aswing","ListModel"];
org.aswing.ListModel.prototype = {
	__class__: org.aswing.ListModel
};
org.aswing.LookAndFeel = function() { };
$hxClasses["org.aswing.LookAndFeel"] = org.aswing.LookAndFeel;
org.aswing.LookAndFeel.__name__ = ["org","aswing","LookAndFeel"];
org.aswing.LookAndFeel.installBasicProperties = function(c,componentUIPrefix,defaultOpaquerName,defaultFocusableName) {
	if(defaultFocusableName == null) defaultFocusableName = "focusable";
	if(defaultOpaquerName == null) defaultOpaquerName = "opaque";
	if(!c.isOpaqueSet()) {
		c.setOpaque(c.getUI().getBoolean(componentUIPrefix + defaultOpaquerName));
		c.setOpaqueSet(false);
	}
	if(!c.isFocusableSet()) {
		c.setFocusable(c.getUI().getBoolean(componentUIPrefix + defaultFocusableName));
		c.setFocusableSet(false);
	}
};
org.aswing.LookAndFeel.installColors = function(c,componentUIPrefix,defaultBgName,defaultFgName,defaultMgName) {
	if(defaultMgName == null) defaultMgName = "mideground";
	if(defaultFgName == null) defaultFgName = "foreground";
	if(defaultBgName == null) defaultBgName = "background";
	var bg = c.getBackground();
	if(bg == null || js.Boot.__instanceof(bg,org.aswing.plaf.UIResource)) c.setBackground(c.getUI().getColor(componentUIPrefix + defaultBgName));
	var fg = c.getForeground();
	if(fg == null || js.Boot.__instanceof(fg,org.aswing.plaf.UIResource)) c.setForeground(c.getUI().getColor(componentUIPrefix + defaultFgName));
	var mg = c.getMideground();
	if(mg == null || js.Boot.__instanceof(mg,org.aswing.plaf.UIResource)) c.setMideground(c.getUI().getColor(componentUIPrefix + defaultMgName));
};
org.aswing.LookAndFeel.installStyleTune = function(c,componentUIPrefix,pname) {
	if(pname == null) pname = "colorAdjust";
	var ca = c.getStyleTune();
	if(ca == null || js.Boot.__instanceof(ca,org.aswing.plaf.UIResource)) c.setStyleTune(c.getUI().getStyleTune(componentUIPrefix + pname));
};
org.aswing.LookAndFeel.installFont = function(c,componentUIPrefix,defaultFontName) {
	if(defaultFontName == null) defaultFontName = "font";
	var f = c.getFont();
	if(f == null || js.Boot.__instanceof(f,org.aswing.plaf.UIResource)) c.setFont(c.getUI().getFont(componentUIPrefix + defaultFontName));
};
org.aswing.LookAndFeel.installColorsAndFont = function(c,componentUIPrefix,defaultBgName,defaultFgName,defaultFontName,defaultMgName,defaultCaName) {
	if(defaultCaName == null) defaultCaName = "colorAdjust";
	if(defaultMgName == null) defaultMgName = "mideground";
	if(defaultFontName == null) defaultFontName = "font";
	if(defaultFgName == null) defaultFgName = "foreground";
	if(defaultBgName == null) defaultBgName = "background";
	org.aswing.LookAndFeel.installColors(c,componentUIPrefix,defaultBgName,defaultFgName,defaultMgName);
	org.aswing.LookAndFeel.installFont(c,componentUIPrefix,defaultFontName);
	org.aswing.LookAndFeel.installStyleTune(c,componentUIPrefix,defaultCaName);
};
org.aswing.LookAndFeel.installBorderAndBFDecorators = function(c,componentUIPrefix,defaultBorderName,defaultBGDName,defaultFGDName) {
	if(defaultFGDName == null) defaultFGDName = "fg";
	if(defaultBGDName == null) defaultBGDName = "bg";
	if(defaultBorderName == null) defaultBorderName = "border";
	var b = c.getBorder();
	if(js.Boot.__instanceof(b,org.aswing.plaf.UIResource)) c.setBorder(c.getUI().getBorder(componentUIPrefix + defaultBorderName));
	var bg = c.getBackgroundDecorator();
	if(js.Boot.__instanceof(bg,org.aswing.plaf.UIResource)) c.setBackgroundDecorator(c.getUI().getGroundDecorator(componentUIPrefix + defaultBGDName));
	var fg = c.getForegroundDecorator();
	if(js.Boot.__instanceof(fg,org.aswing.plaf.UIResource)) c.setForegroundDecorator(c.getUI().getGroundDecorator(componentUIPrefix + defaultFGDName));
};
org.aswing.LookAndFeel.uninstallBorderAndBFDecorators = function(c) {
	if(Std["is"](c.getBorder(),org.aswing.plaf.UIResource)) c.setBorder(org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE);
	if(Std["is"](c.getBackgroundDecorator(),org.aswing.plaf.UIResource)) c.setBackgroundDecorator(org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE);
	if(Std["is"](c.getForegroundDecorator(),org.aswing.plaf.UIResource)) c.setForegroundDecorator(org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE);
};
org.aswing.LookAndFeel.prototype = {
	getDefaults: function() {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,__class__: org.aswing.LookAndFeel
};
org.aswing.MenuSelectionManager = function() {
	this.selection = new org.aswing.util.ArrayList();
	this.keyEnabled = true;
	this.lastTriggerRef = new org.aswing.util.WeakReference();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.MenuSelectionManager"] = org.aswing.MenuSelectionManager;
org.aswing.MenuSelectionManager.__name__ = ["org","aswing","MenuSelectionManager"];
org.aswing.MenuSelectionManager.defaultManager = function() {
	if(org.aswing.MenuSelectionManager.instance == null) org.aswing.MenuSelectionManager.instance = new org.aswing.MenuSelectionManager();
	return org.aswing.MenuSelectionManager.instance;
};
org.aswing.MenuSelectionManager.setDefaultManager = function(m) {
	org.aswing.MenuSelectionManager.instance = m;
};
org.aswing.MenuSelectionManager.__super__ = openfl.events.EventDispatcher;
org.aswing.MenuSelectionManager.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	setKeyEnabled: function(b) {
		this.keyEnabled = b;
	}
	,isKeyEnabled: function() {
		return this.keyEnabled;
	}
	,setSelectedPath: function(trigger,path,programmatic) {
		var i;
		var c;
		var currentSelectionCount = this.selection.size();
		var firstDifference = 0;
		if(path == null) path = new Array();
		var _g1 = 0;
		var _g = path.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(i1 < currentSelectionCount && this.selection.get(i1) == path[i1]) firstDifference++; else break;
		}
		i = currentSelectionCount - 1;
		while(i >= firstDifference) {
			var me = org.aswing.AsWingUtils["as"](this.selection.get(i),org.aswing.MenuElement);
			this.selection.removeAt(i);
			me.menuSelectionChanged(false);
			i--;
		}
		var _g11 = firstDifference;
		var _g2 = path.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			var tm = org.aswing.AsWingUtils["as"](path[i2],org.aswing.MenuElement);
			if(tm != null) {
				this.selection.append(tm);
				tm.menuSelectionChanged(true);
			}
		}
		if(firstDifference < path.length - 1 || currentSelectionCount != path.length) this.fireSelectionChanged(programmatic);
		var lastTrigger = this.lastTriggerRef.get_value();
		if(this.selection.size() == 0) {
			if(lastTrigger != null) {
				lastTrigger.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__onMSMKeyDown));
				this.lastTriggerRef.clear();
			}
		} else if(lastTrigger != trigger) {
			if(lastTrigger != null) lastTrigger.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__onMSMKeyDown));
			lastTrigger = trigger;
			if(trigger != null) trigger.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__onMSMKeyDown),false,0,false);
			this.lastTriggerRef.set_value(trigger);
		}
	}
	,addSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("selectionChanged",listener,false,priority);
	}
	,removeSelectionListener: function(listener) {
		this.removeEventListener("selectionChanged",listener);
	}
	,getSelectedPath: function() {
		return this.selection.toArray();
	}
	,clearSelectedPath: function(programmatic) {
		if(this.selection.size() > 0) this.setSelectedPath(null,null,true);
	}
	,isComponentPartOfCurrentMenu: function(c) {
		if(this.selection.size() > 0) {
			var me = org.aswing.AsWingUtils["as"](this.selection.get(0),org.aswing.MenuElement);
			return this.isComponentPartOfMenu(me,c);
		} else return false;
	}
	,isNavigatingKey: function(code) {
		return this.isPageNavKey(code) || this.isItemNavKey(code);
	}
	,isPageNavKey: function(code) {
		return this.isPrevPageKey(code) || this.isNextPageKey(code);
	}
	,isItemNavKey: function(code) {
		return this.isPrevItemKey(code) || this.isNextItemKey(code);
	}
	,isPrevPageKey: function(code) {
		return code == org.aswing.AWKeyboard.LEFT;
	}
	,isPrevItemKey: function(code) {
		return code == org.aswing.AWKeyboard.UP;
	}
	,isNextPageKey: function(code) {
		return code == org.aswing.AWKeyboard.RIGHT;
	}
	,isNextItemKey: function(code) {
		return code == org.aswing.AWKeyboard.DOWN;
	}
	,isEnterKey: function(code) {
		return code == org.aswing.AWKeyboard.ENTER;
	}
	,isEscKey: function(code) {
		return code == org.aswing.AWKeyboard.TAB || code == org.aswing.AWKeyboard.ESCAPE;
	}
	,nextSubElement: function(parent,sub) {
		return this.besideSubElement(parent,sub,1);
	}
	,prevSubElement: function(parent,sub) {
		return this.besideSubElement(parent,sub,-1);
	}
	,besideSubElement: function(parent,sub,dir) {
		if(parent == null || sub == null) return null;
		var subs = parent.getSubElements();
		var index = org.aswing.util.ArrayUtils.indexInArray(subs,sub);
		if(index < 0) return null;
		index += dir | 0;
		if(index >= subs.length) index = 0; else if(index < 0) index = subs.length - 1;
		return org.aswing.AsWingUtils["as"](subs[index],org.aswing.MenuElement);
	}
	,isComponentPartOfMenu: function(root,c) {
		var children;
		var i;
		var d;
		if(root == null) return false;
		if(root.getMenuComponent() == c) return true; else {
			children = root.getSubElements();
			var _g1 = 0;
			var _g = children.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				var me = org.aswing.AsWingUtils["as"](children[i1],org.aswing.MenuElement);
				if(me != null && this.isComponentPartOfMenu(me,c)) return true;
			}
		}
		return false;
	}
	,fireSelectionChanged: function(programmatic) {
		this.dispatchEvent(new org.aswing.event.InteractiveEvent("selectionChanged",programmatic));
	}
	,__onMSMKeyDown: function(e) {
		if(this.selection.size() == 0 || !this.isKeyEnabled()) return;
		var code = e.keyCode;
		if(this.isEscKey(code)) {
			this.setSelectedPath(null,null,true);
			return;
		}
		var element = org.aswing.AsWingUtils["as"](this.selection.last(),org.aswing.MenuElement);
		element.processKeyEvent(code);
	}
	,__class__: org.aswing.MenuSelectionManager
});
org.aswing.MutableListModel = function() { };
$hxClasses["org.aswing.MutableListModel"] = org.aswing.MutableListModel;
org.aswing.MutableListModel.__name__ = ["org","aswing","MutableListModel"];
org.aswing.MutableListModel.__interfaces__ = [org.aswing.ListModel];
org.aswing.MutableListModel.prototype = {
	__class__: org.aswing.MutableListModel
};
org.aswing.RepaintManager = function() {
	if(org.aswing.RepaintManager.instance != null) throw new org.aswing.error.Error("Singleton can't be create more than once!");
	this.repaintQueue = new Array();
	this.validateQueue = new Array();
	this.renderring = false;
	this.alwaysUseTimer = false;
	this.timer = new org.aswing.util.Timer(20,0);
	this.timer.addEventListener("act",$bind(this,this.__timerRender));
};
$hxClasses["org.aswing.RepaintManager"] = org.aswing.RepaintManager;
org.aswing.RepaintManager.__name__ = ["org","aswing","RepaintManager"];
org.aswing.RepaintManager.getInstance = function() {
	if(org.aswing.RepaintManager.instance == null) org.aswing.RepaintManager.instance = new org.aswing.RepaintManager();
	return org.aswing.RepaintManager.instance;
};
org.aswing.RepaintManager.prototype = {
	setAlwaysUseTimer: function(b,delay) {
		if(delay == null) delay = 19;
		this.alwaysUseTimer = b;
		this.timer.setDelay(delay);
	}
	,addRepaintComponent: function(com) {
		this.repaintQueue.push(com);
		this.renderLater(com);
	}
	,addInvalidComponent: function(com) {
		var validateRoot = this.getValidateRootComponent(com);
		if(validateRoot != null) {
			this.validateQueue.push(validateRoot);
			this.renderLater(com);
		}
	}
	,addInvalidRootComponent: function(com) {
		this.validateQueue.push(com);
		this.renderLater(com);
	}
	,renderLater: function(c) {
		var st = org.aswing.AsWingManager.getStage();
		if(this.alwaysUseTimer || st == null || this.renderring) {
			if(this.timer.isRunning() != true) this.timer.restart();
		} else {
			st.addEventListener(openfl.events.Event.RENDER,$bind(this,this.__render),false,0,true);
			st.invalidate();
		}
	}
	,getValidateRootComponent: function(com) {
		var validateRoot = null;
		var i;
		i = com;
		while(i != null) {
			if(i.isValidateRoot()) {
				validateRoot = i;
				break;
			}
			i = i.getParent();
		}
		i = validateRoot;
		while(i != null) {
			if(!i.isVisible()) {
			}
			i = i.getParent();
		}
		return validateRoot;
	}
	,__timerRender: function(e) {
		this.__render();
	}
	,__render: function(e) {
		if(e != null) {
			var st = org.aswing.AsWingManager.getStage();
			st.removeEventListener(openfl.events.Event.RENDER,$bind(this,this.__render));
		}
		var i;
		var n;
		var com;
		this.renderring = true;
		var processValidates = this.validateQueue.slice();
		this.validateQueue = new Array();
		n = processValidates.length;
		i = -1;
		if(n > 0) {
		}
		while(++i < n) {
			com = processValidates[i];
			com.validate();
		}
		var processRepaints = this.repaintQueue.slice();
		this.repaintQueue = new Array();
		n = processRepaints.length;
		i = -1;
		while(++i < n) {
			com = processRepaints[i];
			com.paintImmediately();
		}
		this.renderring = false;
	}
	,__class__: org.aswing.RepaintManager
};
org.aswing.ScrollPaneLayout = function(style) {
	if(style == null) style = 0;
	this.style = style;
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.ScrollPaneLayout"] = org.aswing.ScrollPaneLayout;
org.aswing.ScrollPaneLayout.__name__ = ["org","aswing","ScrollPaneLayout"];
org.aswing.ScrollPaneLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.ScrollPaneLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	minimumLayoutSize: function(target) {
		if(js.Boot.__instanceof(target,org.aswing.JScrollPane)) {
			var scrollPane;
			if(js.Boot.__instanceof(target,org.aswing.JScrollPane)) scrollPane = target; else scrollPane = null;
			var size = this.getScrollBarsSize(scrollPane);
			var i = scrollPane.getInsets();
			size = size.increaseSize(i.getOutsideSize());
			var viewport = scrollPane.getViewport();
			if(viewport != null) {
				i = viewport.getViewportPane().getInsets();
				size.increaseSize(i.getOutsideSize());
				size.increaseSize(viewport.getViewportPane().getMinimumSize());
			}
			return size;
		} else return org.aswing.EmptyLayout.prototype.minimumLayoutSize.call(this,target);
	}
	,getScrollBarsSize: function(scrollPane) {
		var vsb = scrollPane.getVerticalScrollBar();
		var hsb = scrollPane.getHorizontalScrollBar();
		var size = new org.aswing.geom.IntDimension();
		if(vsb != null && scrollPane.getVerticalScrollBarPolicy() == 2) size.width = vsb.getPreferredWidth();
		if(hsb != null && scrollPane.getHorizontalScrollBarPolicy() == 2) size.height = hsb.getPreferredHeight();
		return size;
	}
	,preferredLayoutSize: function(target) {
		if(js.Boot.__instanceof(target,org.aswing.JScrollPane)) {
			var scrollPane;
			if(js.Boot.__instanceof(target,org.aswing.JScrollPane)) scrollPane = target; else scrollPane = null;
			var i = scrollPane.getInsets();
			var size = i.getOutsideSize();
			size.increaseSize(this.getScrollBarsSize(scrollPane));
			var viewport = scrollPane.getViewport();
			if(viewport != null) size.increaseSize(viewport.getViewportPane().getPreferredSize());
			return size;
		} else return org.aswing.EmptyLayout.prototype.preferredLayoutSize.call(this,target);
	}
	,layoutContainer: function(target) {
		if(js.Boot.__instanceof(target,org.aswing.JScrollPane)) {
			var scrollPane;
			if(js.Boot.__instanceof(target,org.aswing.JScrollPane)) scrollPane = target; else scrollPane = null;
			var viewport = scrollPane.getViewport();
			var vScrollBar = scrollPane.getVerticalScrollBar();
			var hScrollBar = scrollPane.getHorizontalScrollBar();
			var fcd = scrollPane.getSize();
			var insets = scrollPane.getInsets();
			var cb = insets.getInsideBounds(fcd.getBounds());
			var vPreferSize = vScrollBar.getPreferredSize();
			var hPreferSize = hScrollBar.getPreferredSize();
			var vx;
			var vy;
			var vh;
			var vw;
			var hx;
			var hy;
			var hw;
			var hh;
			var vpPane = viewport.getViewportPane();
			var wdis = 0;
			var hdis = 0;
			if(scrollPane.getHorizontalScrollBarPolicy() == 2) hdis = hPreferSize.height;
			if(scrollPane.getVerticalScrollBarPolicy() == 2) wdis = vPreferSize.width;
			viewport.setViewportTestSize(new org.aswing.geom.IntDimension(cb.width - wdis,cb.height - hdis));
			var showSize = viewport.getExtentSize();
			var viewSize = viewport.getViewSize();
			vw = vPreferSize.width;
			hh = hPreferSize.height;
			if(scrollPane.getHorizontalScrollBarPolicy() == 1) {
				hScrollBar.setVisible(false);
				hh = 0;
			} else if(viewSize.width <= showSize.width) {
				if(hScrollBar.isEnabled()) hScrollBar.setEnabled(false);
				if(scrollPane.getHorizontalScrollBarPolicy() != 2) {
					hScrollBar.setVisible(false);
					hh = 0;
					viewport.setViewPosition(new org.aswing.geom.IntPoint(0,viewport.getViewPosition().y));
				} else hScrollBar.setVisible(true);
			} else {
				hScrollBar.setVisible(true);
				if(!hScrollBar.isEnabled()) hScrollBar.setEnabled(true);
			}
			if(hh != hdis) {
				viewport.setViewportTestSize(new org.aswing.geom.IntDimension(cb.width,cb.height - hh));
				showSize = viewport.getExtentSize();
				viewSize = viewport.getViewSize();
			}
			if(scrollPane.getVerticalScrollBarPolicy() == 1) {
				vScrollBar.setVisible(false);
				vw = 0;
			} else if(viewSize.height <= showSize.height) {
				vScrollBar.setEnabled(false);
				if(scrollPane.getVerticalScrollBarPolicy() != 2) {
					vScrollBar.setVisible(false);
					vw = 0;
					viewport.setViewPosition(new org.aswing.geom.IntPoint(viewport.getViewPosition().x,0));
				} else vScrollBar.setVisible(true);
			} else {
				vScrollBar.setVisible(true);
				if(!vScrollBar.isEnabled()) vScrollBar.setEnabled(true);
			}
			if(vw != wdis) {
				viewport.setViewportTestSize(new org.aswing.geom.IntDimension(cb.width - vw,cb.height - hh));
				showSize = viewport.getExtentSize();
				viewSize = viewport.getViewSize();
			}
			if(viewSize.width > showSize.width && scrollPane.getHorizontalScrollBarPolicy() == 0) {
				if(!hScrollBar.isVisible()) {
					hScrollBar.setEnabled(true);
					hScrollBar.setVisible(true);
					hh = hPreferSize.height;
					viewport.setViewportTestSize(new org.aswing.geom.IntDimension(cb.width - vw,cb.height - hh));
					showSize = viewport.getExtentSize();
					viewSize = viewport.getViewSize();
				}
			}
			var viewPortX = cb.x;
			var viewPortY = cb.y;
			if(this.style == 3) {
				vx = cb.x;
				vy = cb.y + hh;
				vh = cb.height - hh;
				hx = cb.x + vw;
				hy = cb.y;
				hw = cb.width - vw;
				viewPortY += hh;
				viewPortX += vw;
			} else if(this.style == 2) {
				vx = cb.x + cb.width - vw;
				vy = cb.y + hh;
				vh = cb.height - hh;
				hx = cb.x;
				hy = cb.y;
				hw = cb.width - vw;
				viewPortY += hh;
			} else if(this.style == 1) {
				vx = cb.x;
				vy = cb.y;
				vh = cb.height - hh;
				hx = cb.x + vw;
				hy = cb.y + cb.height - hh;
				hw = cb.width - vw;
				viewPortX += vw;
			} else {
				vx = cb.x + cb.width - vw;
				vy = cb.y;
				vh = cb.height - hh;
				hx = cb.x;
				hy = cb.y + cb.height - hh;
				hw = cb.width - vw;
			}
			if(vScrollBar.isVisible()) vScrollBar.setComBoundsXYWH(vx,vy,vw,vh);
			if(hScrollBar.isVisible()) hScrollBar.setComBoundsXYWH(hx,hy,hw,hh);
			vpPane.setComBoundsXYWH(viewPortX,viewPortY,cb.width - vw,cb.height - hh);
			if(hScrollBar.isVisible()) {
				hScrollBar.setValues(Std["int"](Math.max(Math.min(hScrollBar.getValue(),viewSize.width - showSize.width),0)),showSize.width,0,viewSize.width);
				hScrollBar.setUnitIncrement(viewport.getHorizontalUnitIncrement());
				hScrollBar.setBlockIncrement(viewport.getHorizontalBlockIncrement());
			}
			if(vScrollBar.isVisible()) {
				vScrollBar.setValues(Std["int"](Math.max(Math.min(vScrollBar.getValue(),viewSize.height - showSize.height),0)),showSize.height,0,viewSize.height);
				vScrollBar.setUnitIncrement(viewport.getVerticalUnitIncrement());
				vScrollBar.setBlockIncrement(viewport.getVerticalBlockIncrement());
			}
		}
	}
	,__class__: org.aswing.ScrollPaneLayout
});
org.aswing.SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl.display.Sprite.call(this);
	this.upState = upState;
	this.overState = overState;
	this.downState = downState;
	this.hitTestState = hitTestState;
	this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseGoDown));
	this.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.onMouseOver));
};
$hxClasses["org.aswing.SimpleButton"] = org.aswing.SimpleButton;
org.aswing.SimpleButton.__name__ = ["org","aswing","SimpleButton"];
org.aswing.SimpleButton.__super__ = openfl.display.Sprite;
org.aswing.SimpleButton.prototype = $extend(openfl.display.Sprite.prototype,{
	show: function() {
		this.clear();
		this.addChild(this.upState);
	}
	,clear: function() {
		while(this.__children.length > 0) this.removeChildAt(0);
	}
	,onMouseOver: function(event) {
		this._over = true;
		this.clear();
		this.addChild(this.overState);
		this.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.onMouseOut));
	}
	,onMouseOut: function(event) {
		this._over = false;
		if(!this._down) {
			this.clear();
			this.addChild(this.upState);
		}
		this.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.onMouseOut));
	}
	,onMouseGoDown: function(event) {
		this._down = true;
		this.clear();
		this.addChild(this.downState);
		org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseGoUp));
	}
	,onMouseGoUp: function(event) {
		this.clear();
		this.addChild(this.upState);
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseGoUp));
	}
	,__class__: org.aswing.SimpleButton
});
org.aswing.SimpleButtonIcon = function(asset) {
	this.asset = asset;
	this.width = Math.ceil(asset.get_width());
	this.height = Math.ceil(asset.get_height());
	if(org.aswing.SimpleButtonIcon.disabledFilters == null) {
		var cmatrix_0 = 0.3;
		var cmatrix_1 = 0.59;
		var cmatrix_2 = 0.11;
		var cmatrix_3 = 0;
		var cmatrix_4 = 0;
		var cmatrix_5 = 0.3;
		var cmatrix_6 = 0.59;
		var cmatrix_7 = 0.11;
		var cmatrix_8 = 0;
		var cmatrix_9 = 0;
		var cmatrix_10 = 0.3;
		var cmatrix_11 = 0.59;
		var cmatrix_12 = 0.11;
		var cmatrix_13 = 0;
		var cmatrix_14 = 0;
		var cmatrix_15 = 0;
		var cmatrix_16 = 0;
		var cmatrix_17 = 0;
		var cmatrix_18 = 1;
		var cmatrix_19 = 0;
	}
};
$hxClasses["org.aswing.SimpleButtonIcon"] = org.aswing.SimpleButtonIcon;
org.aswing.SimpleButtonIcon.__name__ = ["org","aswing","SimpleButtonIcon"];
org.aswing.SimpleButtonIcon.__interfaces__ = [org.aswing.Icon];
org.aswing.SimpleButtonIcon.prototype = {
	getDisplay: function(c) {
		return this.asset;
	}
	,getIconWidth: function(c) {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.height;
	}
	,updateIcon: function(c,g,x,y) {
		this.asset.set_x(x);
		this.asset.set_y(y);
		this.asset.set_filters(c.isEnabled()?org.aswing.SimpleButtonIcon.eabledFilters:org.aswing.SimpleButtonIcon.disabledFilters);
	}
	,__class__: org.aswing.SimpleButtonIcon
};
org.aswing.SimpleButtonIconToggle = function(asset) {
	this.asset = asset;
	this.width = Math.ceil(asset.get_width());
	this.height = Math.ceil(asset.get_height());
	asset.mouseEnabled = false;
	this.upState = asset.upState;
	this.overState = asset.overState;
	this.downState = asset.downState;
	if(org.aswing.SimpleButtonIconToggle.disabledFilters == null) {
		var cmatrix_0 = 0.3;
		var cmatrix_1 = 0.59;
		var cmatrix_2 = 0.11;
		var cmatrix_3 = 0;
		var cmatrix_4 = 0;
		var cmatrix_5 = 0.3;
		var cmatrix_6 = 0.59;
		var cmatrix_7 = 0.11;
		var cmatrix_8 = 0;
		var cmatrix_9 = 0;
		var cmatrix_10 = 0.3;
		var cmatrix_11 = 0.59;
		var cmatrix_12 = 0.11;
		var cmatrix_13 = 0;
		var cmatrix_14 = 0;
		var cmatrix_15 = 0;
		var cmatrix_16 = 0;
		var cmatrix_17 = 0;
		var cmatrix_18 = 1;
		var cmatrix_19 = 0;
	}
};
$hxClasses["org.aswing.SimpleButtonIconToggle"] = org.aswing.SimpleButtonIconToggle;
org.aswing.SimpleButtonIconToggle.__name__ = ["org","aswing","SimpleButtonIconToggle"];
org.aswing.SimpleButtonIconToggle.__interfaces__ = [org.aswing.Icon];
org.aswing.SimpleButtonIconToggle.prototype = {
	getDisplay: function(c) {
		return this.asset;
	}
	,getIconWidth: function(c) {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.height;
	}
	,updateIcon: function(c,g,x,y) {
		this.asset.set_x(x);
		this.asset.set_y(y);
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		var state = null;
		if(b != null) {
			var model = b.getModel();
			if(model.isPressed() && model.isArmed() || model.isSelected()) state = this.downState; else if(b.isRollOverEnabled() && model.isRollOver()) state = this.overState; else state = this.upState;
			this.asset.upState = state;
			this.asset.set_filters(model.isEnabled()?org.aswing.SimpleButtonIconToggle.eabledFilters:org.aswing.SimpleButtonIconToggle.disabledFilters);
		}
	}
	,__class__: org.aswing.SimpleButtonIconToggle
};
org.aswing.SoftBox = function(axis,gap,align) {
	if(align == null) align = 2;
	if(gap == null) gap = 0;
	org.aswing.JPanel.call(this);
	this.setName("SoftBox");
	this.setLayout(new org.aswing.SoftBoxLayout(axis,gap,align));
};
$hxClasses["org.aswing.SoftBox"] = org.aswing.SoftBox;
org.aswing.SoftBox.__name__ = ["org","aswing","SoftBox"];
org.aswing.SoftBox.createHorizontalBox = function(gap,align) {
	if(align == null) align = 2;
	if(gap == null) gap = 0;
	return new org.aswing.SoftBox(0,gap,align);
};
org.aswing.SoftBox.createVerticalBox = function(gap,align) {
	if(align == null) align = 2;
	if(gap == null) gap = 0;
	return new org.aswing.SoftBox(1,gap,align);
};
org.aswing.SoftBox.createHorizontalGlue = function(width) {
	if(width == null) width = 4;
	return org.aswing.JSpacer.createHorizontalSpacer(width);
};
org.aswing.SoftBox.createVerticalGlue = function(height) {
	if(height == null) height = 4;
	return org.aswing.JSpacer.createVerticalSpacer(height);
};
org.aswing.SoftBox.__super__ = org.aswing.JPanel;
org.aswing.SoftBox.prototype = $extend(org.aswing.JPanel.prototype,{
	setAxis: function(axis) {
		org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.SoftBoxLayout).setAxis(axis);
	}
	,getAxis: function() {
		return org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.SoftBoxLayout).getAxis();
	}
	,setGap: function(gap) {
		org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.SoftBoxLayout).setGap(gap);
	}
	,getGap: function() {
		return org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.SoftBoxLayout).getGap();
	}
	,setAlign: function(align) {
		org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.SoftBoxLayout).setAlign(align);
	}
	,getAlign: function() {
		return org.aswing.AsWingUtils["as"](this.getLayout(),org.aswing.SoftBoxLayout).getAlign();
	}
	,__class__: org.aswing.SoftBox
});
org.aswing.SoftBoxLayout = function(axis,gap,align) {
	if(align == null) align = 2;
	if(gap == null) gap = 0;
	if(axis == null) axis = 0;
	this.setAxis(axis);
	this.setGap(gap);
	this.setAlign(align);
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.SoftBoxLayout"] = org.aswing.SoftBoxLayout;
org.aswing.SoftBoxLayout.__name__ = ["org","aswing","SoftBoxLayout"];
org.aswing.SoftBoxLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.SoftBoxLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	setAxis: function(axis) {
		if(axis == null) axis = 0;
		this.axis = axis;
	}
	,getAxis: function() {
		return this.axis;
	}
	,setGap: function(gap) {
		if(gap == null) gap = 0;
		this.gap = gap;
	}
	,getGap: function() {
		return this.gap;
	}
	,setAlign: function(align) {
		if(align == null) align = 2;
		this.align = align;
	}
	,getAlign: function() {
		return this.align;
	}
	,preferredLayoutSize: function(target) {
		var count = target.getComponentCount();
		var insets = target.getInsets();
		var width = 0;
		var height = 0;
		var wTotal = 0;
		var hTotal = 0;
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			var c = target.getComponent(i);
			if(c.isVisible()) {
				var size = c.getPreferredSize();
				width = Std["int"](Math.max(width,size.width));
				height = Std["int"](Math.max(height,size.height));
				var g;
				if(i > 0) g = this.gap; else g = 0;
				wTotal += size.width + g;
				hTotal += size.height + g;
			}
		}
		if(this.axis == 1) height = hTotal; else width = wTotal;
		var dim = new org.aswing.geom.IntDimension(width,height);
		return insets.getOutsideSize(dim);
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,layoutContainer: function(target) {
		var count = target.getComponentCount();
		var size = target.getSize();
		var insets = target.getInsets();
		var rd = insets.getInsideBounds(size.getBounds());
		var ch = rd.height;
		var cw = rd.width;
		var x = rd.x;
		var y = rd.y;
		if(this.align == 4 || this.align == 3) {
			if(this.axis == 1) y = y + ch; else x = x + cw;
			var i = count - 1;
			while(i >= 0) {
				var c = target.getComponent(i);
				if(c.isVisible()) {
					var ps = c.getPreferredSize();
					if(this.axis == 1) {
						y -= ps.height;
						c.setBounds(new org.aswing.geom.IntRectangle(x,y,cw,ps.height));
						y -= this.gap;
					} else {
						x -= ps.width;
						c.setBounds(new org.aswing.geom.IntRectangle(x,y,ps.width,ch));
						x -= this.gap;
					}
				}
				i--;
			}
		} else {
			if(this.align == 0) {
				var prefferedSize = insets.getInsideSize(target.getPreferredSize());
				if(this.axis == 1) y = Math.round(y + (ch - prefferedSize.height) / 2); else x = Math.round(x + (cw - prefferedSize.width) / 2);
			}
			var _g = 0;
			while(_g < count) {
				var ii = _g++;
				var comp = target.getComponent(ii);
				if(comp.isVisible()) {
					var cps = comp.getPreferredSize();
					if(this.axis == 1) {
						comp.setBounds(new org.aswing.geom.IntRectangle(x,y,cw,cps.height));
						y += cps.height + this.gap;
					} else {
						comp.setBounds(new org.aswing.geom.IntRectangle(x,y,cps.width,ch));
						x += cps.width + this.gap;
					}
				}
			}
		}
	}
	,getLayoutAlignmentX: function(target) {
		return 0.5;
	}
	,getLayoutAlignmentY: function(target) {
		return 0.5;
	}
	,__class__: org.aswing.SoftBoxLayout
});
org.aswing.SolidBackground = function(color) {
	this.color = color;
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.SolidBackground"] = org.aswing.SolidBackground;
org.aswing.SolidBackground.__name__ = ["org","aswing","SolidBackground"];
org.aswing.SolidBackground.__interfaces__ = [org.aswing.GroundDecorator];
org.aswing.SolidBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		g.fillRectangle(new org.aswing.graphics.SolidBrush(this.color),bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.SolidBackground
};
org.aswing.StyleResult = function(mainColor,tune) {
	this.clight = tune.getCLight(mainColor);
	this.cdark = tune.getCDark(mainColor);
	this.blight = tune.getBLight(mainColor);
	this.bdark = tune.getBDark(mainColor);
	this.shadow = tune.getShadowAlpha();
	this.round = tune.round;
};
$hxClasses["org.aswing.StyleResult"] = org.aswing.StyleResult;
org.aswing.StyleResult.__name__ = ["org","aswing","StyleResult"];
org.aswing.StyleResult.prototype = {
	__class__: org.aswing.StyleResult
};
org.aswing.StyleTune = function(cg,bo,bg,sa,r,ma) {
	if(r == null) r = 0;
	if(sa == null) sa = 0.2;
	if(bg == null) bg = 0.35;
	if(bo == null) bo = 0.15;
	if(cg == null) cg = 0.2;
	this.cGradient = cg;
	this.bOffset = bo;
	this.bGradient = bg;
	this.shadowAlpha = sa;
	this.round = r;
	if(ma == null) this.mideAdjuster = this; else this.mideAdjuster = ma;
};
$hxClasses["org.aswing.StyleTune"] = org.aswing.StyleTune;
org.aswing.StyleTune.__name__ = ["org","aswing","StyleTune"];
org.aswing.StyleTune.prototype = {
	get_mide: function() {
		return this.mideAdjuster;
	}
	,set_mide: function(adjuster) {
		this.mideAdjuster = adjuster;
		return adjuster;
	}
	,sharpen: function(factor) {
		return new org.aswing.StyleTune(this.cGradient * factor,this.bOffset * factor,this.bGradient * factor,this.shadowAlpha * factor,this.round,this.get_mide());
	}
	,changeRound: function(newRound) {
		return new org.aswing.StyleTune(this.cGradient,this.bOffset,this.bGradient,this.shadowAlpha,newRound,this.get_mide());
	}
	,clone: function() {
		return new org.aswing.StyleTune(this.cGradient,this.bOffset,this.bGradient,this.shadowAlpha,this.round,this.get_mide());
	}
	,getCLight: function(c) {
		return c.changeLuminance(c.getLuminance() + this.cGradient / 2);
	}
	,getCDark: function(c) {
		return c.changeLuminance(c.getLuminance() - this.cGradient / 2);
	}
	,getBLight: function(c) {
		return c.changeLuminance(c.getLuminance() + this.bGradient / 2 + this.bOffset);
	}
	,getBDark: function(c) {
		return c.changeLuminance(c.getLuminance() - this.bGradient / 2 + this.bOffset);
	}
	,getShadowAlpha: function() {
		return this.shadowAlpha;
	}
	,getRound: function() {
		return this.round;
	}
	,toString: function() {
		return "StyleTune{cGradient:" + this.cGradient + ", bOffset:" + this.bOffset + ", bGradient:" + this.bGradient + ", shadowAlpha:" + this.shadowAlpha + ", round:" + this.round + (this.mideAdjuster != this?"mide:" + this.mideAdjuster.toString():"") + "}";
	}
	,__class__: org.aswing.StyleTune
	,__properties__: {set_mide:"set_mide",get_mide:"get_mide"}
};
org.aswing.ToggleButtonModel = function() {
	org.aswing.DefaultButtonModel.call(this);
};
$hxClasses["org.aswing.ToggleButtonModel"] = org.aswing.ToggleButtonModel;
org.aswing.ToggleButtonModel.__name__ = ["org","aswing","ToggleButtonModel"];
org.aswing.ToggleButtonModel.__super__ = org.aswing.DefaultButtonModel;
org.aswing.ToggleButtonModel.prototype = $extend(org.aswing.DefaultButtonModel.prototype,{
	setSelected: function(b) {
		var group = this.getGroup();
		if(group != null) {
			group.setSelected(this,b);
			b = group.isSelected(this);
		}
		org.aswing.DefaultButtonModel.prototype.setSelected.call(this,b);
	}
	,setPressed: function(b) {
		if(this.isPressed() == b || !this.isEnabled()) return;
		if(b == false && this.isArmed()) this.setSelected(!this.isSelected());
		this.pressed = b;
		this.fireStateChanged();
		if(!this.isPressed() && this.isArmed()) this.fireActionEvent();
	}
	,__class__: org.aswing.ToggleButtonModel
});
org.aswing.UIDefaults = function() {
	haxe.ds.StringMap.call(this);
};
$hxClasses["org.aswing.UIDefaults"] = org.aswing.UIDefaults;
org.aswing.UIDefaults.__name__ = ["org","aswing","UIDefaults"];
org.aswing.UIDefaults.__super__ = haxe.ds.StringMap;
org.aswing.UIDefaults.prototype = $extend(haxe.ds.StringMap.prototype,{
	putDefaults: function(keyValueList) {
		var i = 0;
		while(i < keyValueList.length) {
			this.set(keyValueList[i],keyValueList[i + 1]);
			i += 2;
		}
	}
	,getUI: function(target) {
		var ui = org.aswing.AsWingUtils["as"](this.getInstance(target.getUIClassID()),org.aswing.plaf.ComponentUI);
		if(ui == null) ui = org.aswing.AsWingUtils["as"](this.getCreateInstance(target.getDefaultBasicUIClass()),org.aswing.plaf.ComponentUI);
		return ui;
	}
	,getBoolean: function(key) {
		return this.get(key) == true;
	}
	,getNumber: function(key) {
		return org.aswing.AsWingUtils["as"](this.get(key),Float);
	}
	,getInt: function(key) {
		return org.aswing.AsWingUtils["as"](this.get(key),Int);
	}
	,getUint: function(key) {
		return org.aswing.AsWingUtils["as"](this.get(key),Int);
	}
	,getString: function(key) {
		return org.aswing.AsWingUtils["as"](this.get(key),String);
	}
	,getBorder: function(key) {
		var border = org.aswing.AsWingUtils["as"](this.getInstance(key),org.aswing.Border);
		if(border == null) border = org.aswing.plaf.EmptyUIResources.BORDER;
		return border;
	}
	,getIcon: function(key) {
		var icon = org.aswing.AsWingUtils["as"](this.getInstance(key),org.aswing.Icon);
		if(icon == null) icon = org.aswing.plaf.EmptyUIResources.ICON;
		return icon;
	}
	,getGroundDecorator: function(key) {
		var dec = org.aswing.AsWingUtils["as"](this.getInstance(key),org.aswing.GroundDecorator);
		if(dec == null) dec = org.aswing.plaf.EmptyUIResources.DECORATOR;
		return dec;
	}
	,getColor: function(key) {
		var color = org.aswing.AsWingUtils["as"](this.getInstance(key),org.aswing.ASColor);
		if(color == null) color = org.aswing.plaf.EmptyUIResources.COLOR;
		return color;
	}
	,getFont: function(key) {
		var font = org.aswing.AsWingUtils["as"](this.getInstance(key),org.aswing.ASFont);
		if(font == null) font = org.aswing.plaf.EmptyUIResources.FONT;
		return font;
	}
	,getInsets: function(key) {
		var i = org.aswing.AsWingUtils["as"](this.getInstance(key),org.aswing.Insets);
		if(i == null) i = org.aswing.plaf.EmptyUIResources.INSETS;
		return i;
	}
	,getStyleTune: function(key) {
		var i = org.aswing.AsWingUtils["as"](this.getInstance(key),org.aswing.StyleTune);
		if(i == null) i = org.aswing.plaf.EmptyUIResources.STYLE_TUNE;
		return i;
	}
	,getConstructor: function(key) {
		return org.aswing.AsWingUtils["as"](this.get(key),Class);
	}
	,getInstance: function(key) {
		var value = this.get(key);
		if(js.Boot.__instanceof(value,Class)) return this.getCreateInstance(value); else return value;
	}
	,getCreateInstance: function(constructor) {
		return Type.createInstance(constructor,[]);
	}
	,__class__: org.aswing.UIDefaults
});
org.aswing.UIManager = function() { };
$hxClasses["org.aswing.UIManager"] = org.aswing.UIManager;
org.aswing.UIManager.__name__ = ["org","aswing","UIManager"];
org.aswing.UIManager.setLookAndFeel = function(laf) {
	org.aswing.UIManager.lookAndFeel = laf;
	org.aswing.UIManager.setLookAndFeelDefaults(laf.getDefaults());
};
org.aswing.UIManager.getLookAndFeel = function() {
	org.aswing.UIManager.checkLookAndFeel();
	return org.aswing.UIManager.lookAndFeel;
};
org.aswing.UIManager.getDefaults = function() {
	return org.aswing.UIManager.getLookAndFeelDefaults();
};
org.aswing.UIManager.getLookAndFeelDefaults = function() {
	org.aswing.UIManager.checkLookAndFeel();
	return org.aswing.UIManager.lookAndFeelDefaults;
};
org.aswing.UIManager.setLookAndFeelDefaults = function(d) {
	org.aswing.UIManager.lookAndFeelDefaults = d;
};
org.aswing.UIManager.checkLookAndFeel = function() {
	if(org.aswing.UIManager.lookAndFeel == null) org.aswing.UIManager.setLookAndFeel(new org.aswing.plaf.basic.BasicLookAndFeel());
};
org.aswing.UIManager.containsKey = function(key) {
	return org.aswing.UIManager.getDefaults().exists(key);
};
org.aswing.UIManager.get = function(key) {
	return org.aswing.UIManager.getDefaults().get(key);
};
org.aswing.UIManager.getUI = function(target) {
	return org.aswing.UIManager.getDefaults().getUI(target);
};
org.aswing.UIManager.getBoolean = function(key) {
	return org.aswing.UIManager.getDefaults().getBoolean(key);
};
org.aswing.UIManager.getNumber = function(key) {
	return org.aswing.UIManager.getDefaults().getNumber(key);
};
org.aswing.UIManager.getInt = function(key) {
	return org.aswing.UIManager.getDefaults().getInt(key);
};
org.aswing.UIManager.getUint = function(key) {
	return org.aswing.UIManager.getDefaults().getUint(key);
};
org.aswing.UIManager.getString = function(key) {
	return org.aswing.UIManager.getDefaults().getString(key);
};
org.aswing.UIManager.getBorder = function(key) {
	return org.aswing.UIManager.getDefaults().getBorder(key);
};
org.aswing.UIManager.getGroundDecorator = function(key) {
	return org.aswing.UIManager.getDefaults().getGroundDecorator(key);
};
org.aswing.UIManager.getColor = function(key) {
	return org.aswing.UIManager.getDefaults().getColor(key);
};
org.aswing.UIManager.getFont = function(key) {
	return org.aswing.UIManager.getDefaults().getFont(key);
};
org.aswing.UIManager.getIcon = function(key) {
	return org.aswing.UIManager.getDefaults().getIcon(key);
};
org.aswing.UIManager.getInsets = function(key) {
	return org.aswing.UIManager.getDefaults().getInsets(key);
};
org.aswing.UIManager.getStyleTune = function(key) {
	return org.aswing.UIManager.getDefaults().getStyleTune(key);
};
org.aswing.UIManager.getInstance = function(key) {
	return org.aswing.UIManager.getDefaults().getInstance(key);
};
org.aswing.UIManager.getClass = function(key) {
	return org.aswing.UIManager.getDefaults().getConstructor(key);
};
org.aswing.util.List = function() { };
$hxClasses["org.aswing.util.List"] = org.aswing.util.List;
org.aswing.util.List.__name__ = ["org","aswing","util","List"];
org.aswing.util.List.prototype = {
	__class__: org.aswing.util.List
};
org.aswing.VectorListModel = function(initalData) {
	org.aswing.AbstractListModel.call(this);
	if(initalData != null) this._elements = initalData.slice(); else this._elements = new Array();
};
$hxClasses["org.aswing.VectorListModel"] = org.aswing.VectorListModel;
org.aswing.VectorListModel.__name__ = ["org","aswing","VectorListModel"];
org.aswing.VectorListModel.__interfaces__ = [org.aswing.util.List,org.aswing.MutableListModel];
org.aswing.VectorListModel.__super__ = org.aswing.AbstractListModel;
org.aswing.VectorListModel.prototype = $extend(org.aswing.AbstractListModel.prototype,{
	get: function(i) {
		return this._elements[i];
	}
	,getElementAt: function(i) {
		return this._elements[i];
	}
	,append: function(obj,index) {
		if(index == null) index = -1;
		if(index == -1) {
			index = this._elements.length;
			this._elements.push(obj);
		} else {
			var x = obj;
			this._elements.splice(index,0,x);
		}
		this.fireIntervalAdded(this,index,index);
	}
	,replaceAt: function(index,obj) {
		if(index < 0 || index >= this.size()) return null;
		var oldObj = this._elements[index];
		this._elements[index] = obj;
		this.fireContentsChanged(this,index,index,[oldObj]);
		return oldObj;
	}
	,appendAll: function(arr,index) {
		if(index == null) index = -1;
		if(arr == null || arr.length <= 0) return;
		if(index == -1) index = this._elements.length;
		if(index == 0) this._elements = arr.concat(this._elements); else if(index == this._elements.length) this._elements = this._elements.concat(arr); else {
			var right = this._elements.splice(index,this._elements.length - index);
			this._elements = this._elements.concat(arr);
			this._elements = this._elements.concat(right);
		}
		this.fireIntervalAdded(this,index,index + arr.length - 1);
	}
	,valueChanged: function(obj) {
		this.valueChangedAt(this.indexOf(obj));
	}
	,valueChangedAt: function(index) {
		if(index >= 0 && index < this._elements.length) this.fireContentsChanged(this,index,index,[]);
	}
	,valueChangedRange: function(from,to) {
		this.fireContentsChanged(this,from,to,[]);
	}
	,removeAt: function(index) {
		if(index < 0 || index >= this.size()) return null;
		var obj = this._elements[index];
		this._elements.splice(index,1);
		this.fireIntervalRemoved(this,index,index,[obj]);
		return obj;
	}
	,remove: function(obj) {
		var i = this.indexOf(obj);
		if(i >= 0) return this.removeAt(i); else return null;
	}
	,removeRange: function(fromIndex,toIndex) {
		if(this._elements.length > 0) {
			fromIndex = Std["int"](Math.max(0,fromIndex));
			toIndex = Std["int"](Math.min(toIndex,this._elements.length - 1));
			if(fromIndex > toIndex) return []; else {
				var removed = this._elements.splice(fromIndex,toIndex - fromIndex + 1);
				this.fireIntervalRemoved(this,fromIndex,toIndex,removed);
				return removed;
			}
		} else return [];
	}
	,removeElementAt: function(index) {
		this.removeAt(index);
	}
	,insertElementAt: function(item,index) {
		this.append(item,index);
	}
	,indexOf: function(obj) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] == obj) return i;
		}
		return -1;
	}
	,contains: function(obj) {
		return this.indexOf(obj) >= 0;
	}
	,appendList: function(list,index) {
		if(index == null) index = -1;
		this.appendAll(list.toArray(),index);
	}
	,pop: function() {
		if(this.size() > 0) return this.removeAt(this.size() - 1); else return null;
	}
	,shift: function() {
		if(this.size() > 0) return this.removeAt(0); else return null;
	}
	,first: function() {
		return this._elements[0];
	}
	,last: function() {
		return this._elements[this._elements.length - 1];
	}
	,size: function() {
		return this._elements.length;
	}
	,isEmpty: function() {
		return this._elements.length <= 0;
	}
	,getSize: function() {
		return this.size();
	}
	,clear: function() {
		var ei = this.size() - 1;
		if(ei >= 0) {
			var temp = this.toArray();
			this._elements.slice(0);
			this.fireIntervalRemoved(this,0,ei,temp);
		}
	}
	,toArray: function() {
		return this._elements.slice();
	}
	,subArray: function(startIndex,length) {
		if(this.size() == 0 || length <= 0) return new Array();
		return this._elements.slice(startIndex,Std["int"](Math.min(startIndex + length,this.size())));
	}
	,sort: function(compare,options) {
		this._elements.sort(function(a,b) {
			if(a == b) return 0;
			if(a > b) return 1; else return -1;
		});
		this.fireContentsChanged(this,0,this._elements.length - 1,[]);
		return this._elements;
	}
	,sortOn: function(key,options) {
		this._elements.sort(function(a,b) {
			if(a == b) return 0;
			if(a > b) return 1; else return -1;
		});
		this.fireContentsChanged(this,0,this._elements.length - 1,[]);
		return this._elements;
	}
	,toString: function() {
		return "VectorListModel : " + this._elements.toString();
	}
	,__class__: org.aswing.VectorListModel
});
org.aswing.ViewportLayout = function() {
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.ViewportLayout"] = org.aswing.ViewportLayout;
org.aswing.ViewportLayout.__name__ = ["org","aswing","ViewportLayout"];
org.aswing.ViewportLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.ViewportLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	preferredLayoutSize: function(parent) {
		var vp;
		if(js.Boot.__instanceof(parent,org.aswing.JViewport)) vp = parent; else vp = null;
		var viewPreferSize = null;
		if(vp.getView() != null) viewPreferSize = vp.getView().getPreferredSize(); else viewPreferSize = new org.aswing.geom.IntDimension(0,0);
		return vp.getViewportPane().getInsets().getOutsideSize(viewPreferSize);
	}
	,layoutContainer: function(parent) {
		var vp;
		if(js.Boot.__instanceof(parent,org.aswing.JViewport)) vp = parent; else vp = null;
		if(vp == null) return;
		var view = vp.getView();
		if(view == null) return;
		var extentSize = vp.getExtentSize();
		var viewSize = vp.getViewSize();
		var viewPosition = vp.getViewPosition();
		viewPosition.x = Math.round(viewPosition.x);
		viewPosition.y = Math.round(viewPosition.y);
		if(viewPosition.x + extentSize.width > viewSize.width) viewPosition.x = Std["int"](Math.max(0,viewSize.width - extentSize.width));
		if(viewPosition.y + extentSize.height > viewSize.height) viewPosition.y = Std["int"](Math.max(0,viewSize.height - extentSize.height));
		vp.setViewPosition(viewPosition);
		view.setSize(viewSize);
	}
	,__class__: org.aswing.ViewportLayout
});
org.aswing.WindowLayout = function() {
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.WindowLayout"] = org.aswing.WindowLayout;
org.aswing.WindowLayout.__name__ = ["org","aswing","WindowLayout"];
org.aswing.WindowLayout.__super__ = org.aswing.EmptyLayout;
org.aswing.WindowLayout.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	addLayoutComponent: function(comp,constraints) {
		if(constraints == "Title") this.titleBar = comp; else if(constraints == "Content") this.contentPane = comp; else throw new org.aswing.error.Error("ERROR When add component to JWindow/JFrame, constraints must be TITLE or CONTENT : " + Std.string(constraints));
	}
	,getTitleBar: function() {
		return this.titleBar;
	}
	,getContentPane: function() {
		return this.contentPane;
	}
	,removeLayoutComponent: function(comp) {
		if(comp == this.titleBar) this.titleBar = null; else if(comp == this.contentPane) this.contentPane = null;
	}
	,minimumLayoutSize: function(target) {
		var insets = target.getInsets();
		var size = insets.getOutsideSize();
		if(this.titleBar != null) size.increaseSize(this.titleBar.getMinimumSize());
		return size;
	}
	,preferredLayoutSize: function(target) {
		var insets = target.getInsets();
		var size = insets.getOutsideSize();
		var titleBarSize;
		var contentSize;
		if(this.titleBar != null) titleBarSize = this.titleBar.getPreferredSize(); else titleBarSize = new org.aswing.geom.IntDimension(0,0);
		if(this.contentPane != null) contentSize = this.contentPane.getPreferredSize(); else contentSize = new org.aswing.geom.IntDimension(0,0);
		size.increaseSize(new org.aswing.geom.IntDimension(Std["int"](Math.max(titleBarSize.width,contentSize.width)),titleBarSize.height + contentSize.height | 0));
		return size;
	}
	,layoutContainer: function(target) {
		var td = target.getSize();
		var insets = target.getInsets();
		var r = insets.getInsideBounds(td.getBounds());
		var d;
		if(this.titleBar != null) {
			d = this.titleBar.getPreferredSize();
			this.titleBar.setBounds(new org.aswing.geom.IntRectangle(r.x,r.y,r.width,d.height));
			r.y += d.height;
			r.height -= d.height;
		}
		if(this.contentPane != null) this.contentPane.setBounds(new org.aswing.geom.IntRectangle(r.x,r.y,r.width,r.height));
	}
	,toString: function() {
		return "WindowLayout[]";
	}
	,__class__: org.aswing.WindowLayout
});
org.aswing.WindowOrderFocusTraversalPolicy = function() {
	org.aswing.ContainerOrderFocusTraversalPolicy.call(this);
};
$hxClasses["org.aswing.WindowOrderFocusTraversalPolicy"] = org.aswing.WindowOrderFocusTraversalPolicy;
org.aswing.WindowOrderFocusTraversalPolicy.__name__ = ["org","aswing","WindowOrderFocusTraversalPolicy"];
org.aswing.WindowOrderFocusTraversalPolicy.__super__ = org.aswing.ContainerOrderFocusTraversalPolicy;
org.aswing.WindowOrderFocusTraversalPolicy.prototype = $extend(org.aswing.ContainerOrderFocusTraversalPolicy.prototype,{
	getDefaultComponent: function(container) {
		if(js.Boot.__instanceof(container,org.aswing.JWindow)) {
			var $window;
			if(js.Boot.__instanceof(container,org.aswing.JWindow)) $window = container; else $window = null;
			var content = $window.getContentPane();
			if(content.isShowing() && content.isVisible() && content.isFocusable()) return content;
			var dc = this.getFirstComponent(content);
			if(dc == null) return org.aswing.ContainerOrderFocusTraversalPolicy.prototype.getDefaultComponent.call(this,container); else return dc;
		} else return org.aswing.ContainerOrderFocusTraversalPolicy.prototype.getDefaultComponent.call(this,container);
	}
	,__class__: org.aswing.WindowOrderFocusTraversalPolicy
});
org.aswing.border = {};
org.aswing.border.DecorateBorder = function(interior) {
	this.interior = interior;
};
$hxClasses["org.aswing.border.DecorateBorder"] = org.aswing.border.DecorateBorder;
org.aswing.border.DecorateBorder.__name__ = ["org","aswing","border","DecorateBorder"];
org.aswing.border.DecorateBorder.__interfaces__ = [org.aswing.Border];
org.aswing.border.DecorateBorder.prototype = {
	setInterior: function(interior) {
		this.interior = interior;
	}
	,getInterior: function() {
		return this.interior;
	}
	,getDisplayImp: function() {
		return null;
	}
	,updateBorderImp: function(com,g,bounds) {
		throw new org.aswing.error.ImpMissError();
	}
	,getBorderInsetsImp: function(c,bounds) {
		throw new org.aswing.error.ImpMissError();
		return new org.aswing.Insets();
	}
	,getDisplay: function(c) {
		var inter = this.getInterior();
		if(inter != null) {
			var interDis = inter.getDisplay(c);
			var selfDis = this.getDisplayImp();
			if(interDis == null) return selfDis; else if(selfDis == null) return interDis; else {
				if(this.disContainer == null) {
					this.disContainer = new openfl.display.Sprite();
					this.disContainer.addChild(selfDis);
					this.disContainer.addChild(interDis);
				}
				return this.disContainer;
			}
		} else return this.getDisplayImp();
	}
	,updateBorder: function(c,g,bounds) {
		this.updateBorderImp(c,g,bounds);
		if(this.getInterior() != null) {
			var interiorBounds = this.getBorderInsetsImp(c,bounds).getInsideBounds(bounds);
			this.getInterior().updateBorder(c,g,interiorBounds);
		}
	}
	,getBorderInsets: function(c,bounds) {
		var insets = this.getBorderInsetsImp(c,bounds);
		if(this.getInterior() != null) {
			var interiorBounds = insets.getInsideBounds(bounds);
			insets.addInsets(this.getInterior().getBorderInsets(c,interiorBounds));
		}
		return insets;
	}
	,__class__: org.aswing.border.DecorateBorder
};
org.aswing.border.BevelBorder = function(interior,bevelType,highlightOuterColor,highlightInnerColor,shadowOuterColor,shadowInnerColor,thickness) {
	if(thickness == null) thickness = 2;
	if(bevelType == null) bevelType = 1;
	org.aswing.border.DecorateBorder.call(this,interior);
	this.bevelType = bevelType;
	if(highlightInnerColor != null && shadowOuterColor == null) {
		this.highlightOuter = highlightOuterColor.brighter();
		this.highlightInner = highlightOuterColor;
		this.shadowOuter = null;
		this.shadowInner = null;
	} else {
		this.highlightOuter = highlightOuterColor;
		this.highlightInner = highlightInnerColor;
		this.shadowOuter = shadowOuterColor;
		this.shadowInner = shadowInnerColor;
	}
	this.thickness = thickness;
};
$hxClasses["org.aswing.border.BevelBorder"] = org.aswing.border.BevelBorder;
org.aswing.border.BevelBorder.__name__ = ["org","aswing","border","BevelBorder"];
org.aswing.border.BevelBorder.__super__ = org.aswing.border.DecorateBorder;
org.aswing.border.BevelBorder.prototype = $extend(org.aswing.border.DecorateBorder.prototype,{
	updateBorderImp: function(com,g,b) {
		if(this.bevelType == 0) this.paintRaisedBevel(com,g,b.x,b.y,b.width,b.height); else this.paintLoweredBevel(com,g,b.x,b.y,b.width,b.height);
	}
	,getBorderInsetsImp: function(c,bounds) {
		return new org.aswing.Insets(this.thickness | 0,this.thickness | 0,this.thickness | 0,this.thickness | 0);
	}
	,getDisplayImp: function() {
		return null;
	}
	,setThickness: function(t) {
		this.thickness = t;
	}
	,getThickness: function() {
		return this.thickness;
	}
	,getHighlightOuterColorWith: function(c) {
		var highlight = this.getHighlightOuterColor();
		if(highlight == null) highlight = c.getBackground().brighter().brighter();
		return highlight;
	}
	,getHighlightInnerColorWith: function(c) {
		var highlight = this.getHighlightInnerColor();
		if(highlight == null) highlight = c.getBackground().brighter();
		return highlight;
	}
	,getShadowInnerColorWith: function(c) {
		var shadow = this.getShadowInnerColor();
		if(shadow == null) shadow = c.getBackground().darker();
		return shadow;
	}
	,getShadowOuterColorWith: function(c) {
		var shadow = this.getShadowOuterColor();
		if(shadow == null) shadow = c.getBackground().darker().darker();
		return shadow;
	}
	,setHighlightOuterColor: function(color) {
		this.highlightOuter = color;
	}
	,getHighlightOuterColor: function() {
		return this.highlightOuter;
	}
	,setHighlightInnerColor: function(color) {
		this.highlightInner = color;
	}
	,getHighlightInnerColor: function() {
		return this.highlightInner;
	}
	,setShadowInnerColor: function(color) {
		this.shadowInner = color;
	}
	,getShadowInnerColor: function() {
		return this.shadowInner;
	}
	,setShadowOuterColor: function(color) {
		this.shadowOuter = color;
	}
	,getShadowOuterColor: function() {
		return this.shadowOuter;
	}
	,setBevelType: function(bevelType) {
		this.bevelType = bevelType | 0;
	}
	,getBevelType: function() {
		return this.bevelType;
	}
	,paintRaisedBevel: function(c,g,x,y,width,height) {
		var h = height;
		var w = width;
		var pt = this.thickness / 2;
		x += pt / 2;
		y += pt / 2;
		w -= pt;
		h -= pt;
		var pen = new org.aswing.graphics.Pen(this.getHighlightOuterColorWith(c),pt,false,openfl.display.LineScaleMode.NORMAL,openfl.display.CapsStyle.SQUARE,openfl.display.JointStyle.MITER);
		g.drawLine(pen,x,y,x,y + h - pt);
		g.drawLine(pen,x + pt,y,x + w - pt,y);
		pen.setColor(this.getHighlightInnerColorWith(c));
		g.drawLine(pen,x + pt,y + pt,x + pt,y + h - 2 * pt);
		g.drawLine(pen,x + 2 * pt,y + pt,x + w - 2 * pt,y + pt);
		pen.setColor(this.getShadowOuterColorWith(c));
		g.drawLine(pen,x,y + h - 0 * pt,x + w - 0 * pt,y + h - 0 * pt);
		g.drawLine(pen,x + w - 0 * pt,y,x + w - 0 * pt,y + h - pt);
		pen.setColor(this.getShadowInnerColorWith(c));
		g.drawLine(pen,x + pt,y + h - pt,x + w - pt,y + h - pt);
		g.drawLine(pen,x + w - pt,y + pt,x + w - pt,y + h - 2 * pt);
	}
	,paintLoweredBevel: function(c,g,x,y,width,height) {
		var h = height;
		var w = width;
		var pt = this.thickness / 2;
		x += pt / 2;
		y += pt / 2;
		w -= pt;
		h -= pt;
		var pen = new org.aswing.graphics.Pen(this.getShadowInnerColorWith(c),pt,false,openfl.display.LineScaleMode.NORMAL,openfl.display.CapsStyle.SQUARE,openfl.display.JointStyle.MITER);
		g.drawLine(pen,x,y,x,y + h - pt);
		g.drawLine(pen,x + pt,y,x + w - pt,y);
		pen.setColor(this.getShadowOuterColorWith(c));
		g.drawLine(pen,x + pt,y + pt,x + pt,y + h - 2 * pt);
		g.drawLine(pen,x + 2 * pt,y + pt,x + w - 2 * pt,y + pt);
		pen.setColor(this.getHighlightOuterColorWith(c));
		g.drawLine(pen,x,y + h - 0 * pt,x + w - 0 * pt,y + h - 0 * pt);
		g.drawLine(pen,x + w - 0 * pt,y,x + w - 0 * pt,y + h - pt);
		pen.setColor(this.getHighlightInnerColorWith(c));
		g.drawLine(pen,x + pt,y + h - pt,x + w - pt,y + h - pt);
		g.drawLine(pen,x + w - pt,y + pt,x + w - pt,y + h - 2 * pt);
	}
	,__class__: org.aswing.border.BevelBorder
});
org.aswing.border.EmptyBorder = function(interior,margin) {
	org.aswing.border.DecorateBorder.call(this,interior);
	if(margin == null) this.margin = new org.aswing.Insets(); else this.margin = margin.clone();
};
$hxClasses["org.aswing.border.EmptyBorder"] = org.aswing.border.EmptyBorder;
org.aswing.border.EmptyBorder.__name__ = ["org","aswing","border","EmptyBorder"];
org.aswing.border.EmptyBorder.createIndent = function(indent) {
	return new org.aswing.border.EmptyBorder(null,new org.aswing.Insets(indent,indent,indent,indent));
};
org.aswing.border.EmptyBorder.__super__ = org.aswing.border.DecorateBorder;
org.aswing.border.EmptyBorder.prototype = $extend(org.aswing.border.DecorateBorder.prototype,{
	setTop: function(v) {
		this.margin.top = v;
	}
	,setLeft: function(v) {
		this.margin.left = v;
	}
	,setBottom: function(v) {
		this.margin.bottom = v;
	}
	,setRight: function(v) {
		this.margin.right = v;
	}
	,getTop: function() {
		return this.margin.top;
	}
	,getLeft: function() {
		return this.margin.left;
	}
	,getBottom: function() {
		return this.margin.bottom;
	}
	,getRight: function() {
		return this.margin.right;
	}
	,updateBorderImp: function(com,g,bounds) {
	}
	,getBorderInsetsImp: function(c,bounds) {
		return this.margin.clone();
	}
	,__class__: org.aswing.border.EmptyBorder
});
org.aswing.border.LineBorder = function(interior,color,thickness,round) {
	if(round == null) round = 0;
	if(thickness == null) thickness = 1;
	org.aswing.border.DecorateBorder.call(this,interior);
	if(color == null) color = org.aswing.ASColor.BLACK;
	this.color = color;
	this.thickness = thickness;
	this.round = round;
};
$hxClasses["org.aswing.border.LineBorder"] = org.aswing.border.LineBorder;
org.aswing.border.LineBorder.__name__ = ["org","aswing","border","LineBorder"];
org.aswing.border.LineBorder.__super__ = org.aswing.border.DecorateBorder;
org.aswing.border.LineBorder.prototype = $extend(org.aswing.border.DecorateBorder.prototype,{
	updateBorderImp: function(com,g,b) {
		var t = this.thickness;
		if(this.round <= 0) g.drawRectangle(new org.aswing.graphics.Pen(this.color,this.thickness),b.x + t / 2,b.y + t / 2,b.width - t,b.height - t); else g.fillRoundRectRingWithThickness(new org.aswing.graphics.SolidBrush(this.color),b.x,b.y,b.width,b.height,this.round,t);
	}
	,getBorderInsetsImp: function(com,bounds) {
		var width = Std["int"](Math.ceil(this.thickness + this.round - this.round * 0.707106781186547));
		return new org.aswing.Insets(width,width,width,width);
	}
	,getDisplayImp: function() {
		return null;
	}
	,getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		this.color = color;
	}
	,getThickness: function() {
		return this.thickness;
	}
	,setThickness: function(thickness) {
		this.thickness = thickness;
	}
	,getRound: function() {
		return this.round;
	}
	,setRound: function(round) {
		this.round = round;
	}
	,__class__: org.aswing.border.LineBorder
});
org.aswing.border.SideLineBorder = function(interior,side,color,thickness) {
	if(thickness == null) thickness = 1;
	if(side == null) side = 0;
	org.aswing.border.DecorateBorder.call(this,interior);
	if(color == null) color = org.aswing.ASColor.BLACK;
	this.side = side;
	this.color = color;
	this.thickness = thickness;
};
$hxClasses["org.aswing.border.SideLineBorder"] = org.aswing.border.SideLineBorder;
org.aswing.border.SideLineBorder.__name__ = ["org","aswing","border","SideLineBorder"];
org.aswing.border.SideLineBorder.__super__ = org.aswing.border.DecorateBorder;
org.aswing.border.SideLineBorder.prototype = $extend(org.aswing.border.DecorateBorder.prototype,{
	updateBorderImp: function(com,g,b) {
		var pen = new org.aswing.graphics.Pen(this.color,this.thickness);
		var x1;
		var x2;
		var y1;
		var y2;
		if(this.side == 1) {
			x1 = b.x;
			y1 = b.y + b.height - this.thickness / 2;
			x2 = b.x + b.width;
			y2 = y1;
		} else if(this.side == 2) {
			x1 = b.x + b.width - this.thickness / 2;
			y1 = b.y;
			x2 = x1;
			y2 = b.y + b.height;
		} else if(this.side == 3) {
			x1 = b.x + this.thickness / 2;
			y1 = b.y;
			x2 = x1;
			y2 = b.y + b.height;
		} else {
			x1 = b.x;
			y1 = b.y + this.thickness / 2;
			x2 = b.x + b.width;
			y2 = y1;
		}
		g.drawLine(pen,x1,y1,x2,y2);
	}
	,getBorderInsetsImp: function(c,bounds) {
		var i = new org.aswing.Insets();
		if(this.side == 1) i.bottom = this.thickness | 0; else if(this.side == 2) i.right = this.thickness | 0; else if(this.side == 3) i.left = this.thickness | 0; else i.top = this.thickness | 0;
		return i;
	}
	,getDisplayImp: function() {
		return null;
	}
	,getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		this.color = color;
	}
	,getThickness: function() {
		return this.thickness;
	}
	,setThickness: function(thickness) {
		this.thickness = thickness;
	}
	,getSide: function() {
		return this.side;
	}
	,setSide: function(side) {
		this.side = side | 0;
	}
	,__class__: org.aswing.border.SideLineBorder
});
org.aswing.border.TitledBorder = function(interior,title,position,align,edge,round) {
	if(round == null) round = 0;
	if(edge == null) edge = 0;
	if(align == null) align = 0;
	if(position == null) position = 1;
	if(title == null) title = "";
	org.aswing.border.DecorateBorder.call(this,interior);
	this.title = title;
	this.position = position;
	this.align = align;
	this.edge = edge;
	this.round = round;
	this.font = this.get_DEFAULT_FONT();
	this.color = this.get_DEFAULT_COLOR();
	this.lineColor = this.get_DEFAULT_LINE_COLOR();
	this.lineLightColor = this.get_DEFAULT_LINE_LIGHT_COLOR();
	this.lineThickness = 1;
	this.beveled = true;
	this.textField = null;
	this.textFieldSize = null;
};
$hxClasses["org.aswing.border.TitledBorder"] = org.aswing.border.TitledBorder;
org.aswing.border.TitledBorder.__name__ = ["org","aswing","border","TitledBorder"];
org.aswing.border.TitledBorder.__super__ = org.aswing.border.DecorateBorder;
org.aswing.border.TitledBorder.prototype = $extend(org.aswing.border.DecorateBorder.prototype,{
	get_DEFAULT_FONT: function() {
		return org.aswing.UIManager.getFont("systemFont");
	}
	,get_DEFAULT_COLOR: function() {
		return org.aswing.UIManager.getColor("controlText");
	}
	,get_DEFAULT_LINE_COLOR: function() {
		return org.aswing.ASColor.GRAY;
	}
	,get_DEFAULT_LINE_LIGHT_COLOR: function() {
		return org.aswing.ASColor.WHITE;
	}
	,getTextField: function() {
		if(this.textField == null) {
			this.textField = new openfl.text.TextField();
			this.textField.selectable = false;
		}
		return this.textField;
	}
	,updateBorderImp: function(c,g,bounds) {
		var textHeight = Math.ceil(this.getTextFieldSize().height);
		var x1 = bounds.x + this.lineThickness * 0.5;
		var y1 = bounds.y + this.lineThickness * 0.5;
		if(this.position == 1) y1 += textHeight / 2;
		var w = bounds.width - this.lineThickness;
		var h = bounds.height - this.lineThickness - textHeight / 2;
		if(this.beveled) {
			w -= this.lineThickness;
			h -= this.lineThickness;
		}
		var x2 = x1 + w;
		var y2 = y1 + h;
		var textR = new org.aswing.geom.IntRectangle();
		var viewR = new org.aswing.geom.IntRectangle(bounds.x,bounds.y,bounds.width,bounds.height);
		var text = this.title;
		var verticalAlignment = this.position;
		var horizontalAlignment = this.align;
		var pen = new org.aswing.graphics.Pen(this.lineColor,this.lineThickness);
		if(this.round <= 0) {
			if(bounds.width <= this.edge * 2) {
				g.drawRectangle(pen,x1,y1,w,h);
				if(this.beveled) {
					pen.setColor(this.lineLightColor);
					g.beginDraw(pen);
					g.moveTo(x1 + this.lineThickness,y2 - this.lineThickness);
					g.lineTo(x1 + this.lineThickness,y1 + this.lineThickness);
					g.lineTo(x2 - this.lineThickness,y1 + this.lineThickness);
					g.moveTo(x2 + this.lineThickness,y1);
					g.lineTo(x2 + this.lineThickness,y2 + this.lineThickness);
					g.lineTo(x1,y2 + this.lineThickness);
				}
				this.textField.set_text("");
			} else {
				viewR.x += this.edge | 0;
				viewR.width -= this.edge * 2 | 0;
				text = org.aswing.AsWingUtils.layoutText(this.font,text,verticalAlignment,horizontalAlignment,viewR,textR);
				g.beginDraw(pen);
				if(this.position == 1) {
					g.moveTo(textR.x - 1,y1);
					g.lineTo(x1,y1);
					g.lineTo(x1,y2);
					g.lineTo(x2,y2);
					g.lineTo(x2,y1);
					g.lineTo(textR.x + textR.width + 1,y1);
				} else {
					g.moveTo(textR.x - 1,y2);
					g.lineTo(x1,y2);
					g.lineTo(x1,y1);
					g.lineTo(x2,y1);
					g.lineTo(x2,y2);
					g.lineTo(textR.x + textR.width + 1,y2);
				}
				g.endDraw();
				if(this.beveled) {
					pen.setColor(this.lineLightColor);
					g.beginDraw(pen);
					if(this.position == 1) {
						g.moveTo(textR.x - 1,y1 + this.lineThickness);
						g.lineTo(x1 + this.lineThickness,y1 + this.lineThickness);
						g.lineTo(x1 + this.lineThickness,y2 - this.lineThickness);
						g.moveTo(x1,y2 + this.lineThickness);
						g.lineTo(x2 + this.lineThickness,y2 + this.lineThickness);
						g.lineTo(x2 + this.lineThickness,y1);
						g.moveTo(x2 - this.lineThickness,y1 + this.lineThickness);
						g.lineTo(textR.x + textR.width + 1,y1 + this.lineThickness);
					} else {
						g.moveTo(textR.x - 1,y2 + this.lineThickness);
						g.lineTo(x1,y2 + this.lineThickness);
						g.moveTo(x1 + this.lineThickness,y2 - this.lineThickness);
						g.lineTo(x1 + this.lineThickness,y1 + this.lineThickness);
						g.lineTo(x2 - this.lineThickness,y1 + this.lineThickness);
						g.moveTo(x2 + this.lineThickness,y1);
						g.lineTo(x2 + this.lineThickness,y2 + this.lineThickness);
						g.lineTo(textR.x + textR.width + 1,y2 + this.lineThickness);
					}
					g.endDraw();
				}
			}
		} else if(bounds.width <= this.edge * 2 + this.round * 2) {
			if(this.beveled) g.drawRoundRect(new org.aswing.graphics.Pen(this.lineLightColor,this.lineThickness),x1 + this.lineThickness,y1 + this.lineThickness,w,h,Math.min(this.round,Math.min(w / 2,h / 2)));
			g.drawRoundRect(pen,x1,y1,w,h,Math.min(this.round,Math.min(w / 2,h / 2)));
			this.textField.set_text("");
		} else {
			viewR.x += this.edge + this.round | 0;
			viewR.width -= (this.edge + this.round) * 2 | 0;
			text = org.aswing.AsWingUtils.layoutText(this.font,text,verticalAlignment,horizontalAlignment,viewR,textR);
			var r = this.round;
			if(this.beveled) {
				pen.setColor(this.lineLightColor);
				g.beginDraw(pen);
				var t = this.lineThickness;
				x1 += t;
				x2 += t;
				y1 += t;
				y2 += t;
				if(this.position == 1) {
					g.moveTo(textR.x - 1,y1);
					g.lineTo(x1 + r,y1);
					g.curveTo(x1,y1,x1,y1 + r);
					g.lineTo(x1,y2 - r);
					g.curveTo(x1,y2,x1 + r,y2);
					g.lineTo(x2 - r,y2);
					g.curveTo(x2,y2,x2,y2 - r);
					g.lineTo(x2,y1 + r);
					g.curveTo(x2,y1,x2 - r,y1);
					g.lineTo(textR.x + textR.width + 1,y1);
				} else {
					g.moveTo(textR.x + textR.width + 1,y2);
					g.lineTo(x2 - r,y2);
					g.curveTo(x2,y2,x2,y2 - r);
					g.lineTo(x2,y1 + r);
					g.curveTo(x2,y1,x2 - r,y1);
					g.lineTo(x1 + r,y1);
					g.curveTo(x1,y1,x1,y1 + r);
					g.lineTo(x1,y2 - r);
					g.curveTo(x1,y2,x1 + r,y2);
					g.lineTo(textR.x - 1,y2);
				}
				g.endDraw();
				x1 -= t;
				x2 -= t;
				y1 -= t;
				y2 -= t;
			}
			pen.setColor(this.lineColor);
			g.beginDraw(pen);
			if(this.position == 1) {
				g.moveTo(textR.x - 1,y1);
				g.lineTo(x1 + r,y1);
				g.curveTo(x1,y1,x1,y1 + r);
				g.lineTo(x1,y2 - r);
				g.curveTo(x1,y2,x1 + r,y2);
				g.lineTo(x2 - r,y2);
				g.curveTo(x2,y2,x2,y2 - r);
				g.lineTo(x2,y1 + r);
				g.curveTo(x2,y1,x2 - r,y1);
				g.lineTo(textR.x + textR.width + 1,y1);
			} else {
				g.moveTo(textR.x + textR.width + 1,y2);
				g.lineTo(x2 - r,y2);
				g.curveTo(x2,y2,x2,y2 - r);
				g.lineTo(x2,y1 + r);
				g.curveTo(x2,y1,x2 - r,y1);
				g.lineTo(x1 + r,y1);
				g.curveTo(x1,y1,x1,y1 + r);
				g.lineTo(x1,y2 - r);
				g.curveTo(x1,y2,x1 + r,y2);
				g.lineTo(textR.x - 1,y2);
			}
			g.endDraw();
		}
		this.textField.set_text(text);
		org.aswing.AsWingUtils.applyTextFontAndColor(this.textField,this.font,this.color);
		this.textField.set_x(textR.x);
		this.textField.set_y(textR.y);
	}
	,getBorderInsetsImp: function(c,bounds) {
		var cornerW = Math.ceil(this.lineThickness * 2 + this.round - this.round * 0.707106781186547);
		var insets = new org.aswing.Insets(cornerW | 0,cornerW | 0,cornerW | 0,cornerW | 0);
		if(this.position == 3) insets.bottom += Math.ceil(this.getTextFieldSize().height); else insets.top += Math.ceil(this.getTextFieldSize().height);
		return insets;
	}
	,getDisplayImp: function() {
		return this.getTextField();
	}
	,getFont: function() {
		return this.font;
	}
	,setFont: function(font) {
		if(this.font != font) {
			if(font == null) font = this.get_DEFAULT_FONT();
			this.font = font;
			this.textFieldSize == null;
		}
	}
	,getLineColor: function() {
		return this.lineColor;
	}
	,setLineColor: function(lineColor) {
		if(lineColor != null) this.lineColor = lineColor;
	}
	,getLineLightColor: function() {
		return this.lineLightColor;
	}
	,setLineLightColor: function(lineLightColor) {
		if(lineLightColor != null) this.lineLightColor = lineLightColor;
	}
	,isBeveled: function() {
		return this.beveled;
	}
	,setBeveled: function(b) {
		this.beveled = b;
	}
	,getEdge: function() {
		return this.edge;
	}
	,setEdge: function(edge) {
		this.edge = edge;
	}
	,getTitle: function() {
		return this.title;
	}
	,setTitle: function(title) {
		if(this.title != title) {
			this.title = title;
			this.textFieldSize == null;
		}
	}
	,getRound: function() {
		return this.round;
	}
	,setRound: function(round) {
		this.round = round;
	}
	,getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		this.color = color;
	}
	,getAlign: function() {
		return this.align;
	}
	,setAlign: function(align) {
		this.align = align;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(position) {
		this.position = position;
	}
	,getLineThickness: function() {
		return this.lineThickness | 0;
	}
	,setLineThickness: function(lineThickness) {
		this.lineThickness = lineThickness;
	}
	,getTextFieldSize: function() {
		if(this.textFieldSize == null) this.textFieldSize = this.getFont().computeTextSize(this.title);
		return this.textFieldSize;
	}
	,__class__: org.aswing.border.TitledBorder
	,__properties__: {get_DEFAULT_FONT:"get_DEFAULT_FONT",get_DEFAULT_COLOR:"get_DEFAULT_COLOR",get_DEFAULT_LINE_COLOR:"get_DEFAULT_LINE_COLOR",get_DEFAULT_LINE_LIGHT_COLOR:"get_DEFAULT_LINE_LIGHT_COLOR"}
});
org.aswing.dnd = {};
org.aswing.dnd.DraggingImage = function() { };
$hxClasses["org.aswing.dnd.DraggingImage"] = org.aswing.dnd.DraggingImage;
org.aswing.dnd.DraggingImage.__name__ = ["org","aswing","dnd","DraggingImage"];
org.aswing.dnd.DraggingImage.prototype = {
	__class__: org.aswing.dnd.DraggingImage
};
org.aswing.dnd.DefaultDragImage = function(dragInitiator) {
	this.width = Std["int"](dragInitiator.get_width());
	this.height = Std["int"](dragInitiator.get_height());
	this.image = new openfl.display.Shape();
};
$hxClasses["org.aswing.dnd.DefaultDragImage"] = org.aswing.dnd.DefaultDragImage;
org.aswing.dnd.DefaultDragImage.__name__ = ["org","aswing","dnd","DefaultDragImage"];
org.aswing.dnd.DefaultDragImage.__interfaces__ = [org.aswing.dnd.DraggingImage];
org.aswing.dnd.DefaultDragImage.prototype = {
	getDisplay: function() {
		return this.image;
	}
	,switchToRejectImage: function() {
		this.image.get_graphics().clear();
		var r = Math.min(this.width,this.height) - 2;
		var x = 0;
		var y = 0;
		var w = this.width;
		var h = this.height;
		var g = new org.aswing.graphics.Graphics2D(this.image.get_graphics());
		g.drawLine(new org.aswing.graphics.Pen(org.aswing.ASColor.RED,2),x + 1,y + 1,x + 1 + r,y + 1 + r);
		g.drawLine(new org.aswing.graphics.Pen(org.aswing.ASColor.RED,2),x + 1 + r,y + 1,x + 1,y + 1 + r);
		g.drawRectangle(new org.aswing.graphics.Pen(org.aswing.ASColor.GRAY),x,y,w,h);
	}
	,switchToAcceptImage: function() {
		this.image.get_graphics().clear();
		var g = new org.aswing.graphics.Graphics2D(this.image.get_graphics());
		g.drawRectangle(new org.aswing.graphics.Pen(org.aswing.ASColor.GRAY),0,0,this.width,this.height);
	}
	,__class__: org.aswing.dnd.DefaultDragImage
};
org.aswing.dnd.DropMotion = function() { };
$hxClasses["org.aswing.dnd.DropMotion"] = org.aswing.dnd.DropMotion;
org.aswing.dnd.DropMotion.__name__ = ["org","aswing","dnd","DropMotion"];
org.aswing.dnd.DropMotion.prototype = {
	__class__: org.aswing.dnd.DropMotion
};
org.aswing.dnd.DirectlyRemoveMotion = function() {
};
$hxClasses["org.aswing.dnd.DirectlyRemoveMotion"] = org.aswing.dnd.DirectlyRemoveMotion;
org.aswing.dnd.DirectlyRemoveMotion.__name__ = ["org","aswing","dnd","DirectlyRemoveMotion"];
org.aswing.dnd.DirectlyRemoveMotion.__interfaces__ = [org.aswing.dnd.DropMotion];
org.aswing.dnd.DirectlyRemoveMotion.prototype = {
	startMotionAndLaterRemove: function(dragInitiator,dragObject) {
		if(dragObject.parent != null) dragObject.parent.removeChild(dragObject);
	}
	,forceStop: function() {
	}
	,__class__: org.aswing.dnd.DirectlyRemoveMotion
};
org.aswing.dnd.DragListener = function() { };
$hxClasses["org.aswing.dnd.DragListener"] = org.aswing.dnd.DragListener;
org.aswing.dnd.DragListener.__name__ = ["org","aswing","dnd","DragListener"];
org.aswing.dnd.DragListener.prototype = {
	__class__: org.aswing.dnd.DragListener
};
org.aswing.dnd.RejectedMotion = function() {
	this.timer = new org.aswing.util.Timer(40);
	this.timer.addEventListener("act",$bind(this,this.__enterFrame));
};
$hxClasses["org.aswing.dnd.RejectedMotion"] = org.aswing.dnd.RejectedMotion;
org.aswing.dnd.RejectedMotion.__name__ = ["org","aswing","dnd","RejectedMotion"];
org.aswing.dnd.RejectedMotion.__interfaces__ = [org.aswing.dnd.DropMotion];
org.aswing.dnd.RejectedMotion.prototype = {
	startNewMotion: function(dragInitiator,dragObject) {
		this.dragObject = dragObject;
		this.initiatorPos = dragInitiator.getGlobalLocation();
		if(this.initiatorPos == null) this.initiatorPos = new org.aswing.geom.IntPoint();
		this.timer.start();
	}
	,forceStop: function() {
		this.finishMotion();
	}
	,startMotionAndLaterRemove: function(dragInitiator,dragObject) {
		this.startNewMotion(dragInitiator,dragObject);
	}
	,finishMotion: function() {
		if(this.timer.isRunning()) {
			this.timer.stop();
			this.dragObject.set_alpha(1);
			if(this.dragObject.parent != null) this.dragObject.parent.removeChild(this.dragObject);
		}
	}
	,__enterFrame: function(e) {
		var speed = 0.25;
		var p = new openfl.geom.Point(this.dragObject.get_x(),this.dragObject.get_y());
		p = this.dragObject.parent.localToGlobal(p);
		p.x += (this.initiatorPos.x - p.x) * speed;
		p.y += (this.initiatorPos.y - p.y) * speed;
		if(openfl.geom.Point.distance(p,this.initiatorPos.toPoint()) < 2) {
			this.finishMotion();
			return;
		}
		p = this.dragObject.parent.globalToLocal(p);
		var _g = this.dragObject;
		_g.set_alpha(_g.alpha + (0.04 - this.dragObject.alpha) * speed);
		this.dragObject.set_x(p.x);
		this.dragObject.set_y(p.y);
	}
	,__class__: org.aswing.dnd.RejectedMotion
};
org.aswing.util.Impulser = function() { };
$hxClasses["org.aswing.util.Impulser"] = org.aswing.util.Impulser;
org.aswing.util.Impulser.__name__ = ["org","aswing","util","Impulser"];
org.aswing.util.Impulser.prototype = {
	__class__: org.aswing.util.Impulser
};
org.aswing.util.AbstractImpulser = function(delay,repeats) {
	if(repeats == null) repeats = 0;
	this.delay = delay;
	this.initialDelay = 0;
	this.repeats = repeats;
	this.isInitalFire = true;
	this.repeatCount = repeats;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.util.AbstractImpulser"] = org.aswing.util.AbstractImpulser;
org.aswing.util.AbstractImpulser.__name__ = ["org","aswing","util","AbstractImpulser"];
org.aswing.util.AbstractImpulser.__interfaces__ = [org.aswing.util.Impulser];
org.aswing.util.AbstractImpulser.__super__ = openfl.events.EventDispatcher;
org.aswing.util.AbstractImpulser.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	addActionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("act",listener,false,priority,useWeakReference);
	}
	,removeActionListener: function(listener) {
		this.removeEventListener("act",listener);
	}
	,setDelay: function(delay) {
		this.delay = delay;
	}
	,getDelay: function() {
		return this.delay;
	}
	,setInitialDelay: function(initialDelay) {
		this.initialDelay = initialDelay;
	}
	,getInitialDelay: function() {
		if(this.initialDelay == 0) return this.delay; else return this.initialDelay;
	}
	,setRepeats: function(flag) {
		this.repeats = flag;
		this.repeatCount = this.repeats;
	}
	,isRepeats: function() {
		return this.repeats == 0;
	}
	,isRunning: function() {
		return false;
	}
	,stop: function() {
	}
	,start: function() {
	}
	,restart: function() {
	}
	,__class__: org.aswing.util.AbstractImpulser
});
org.aswing.util.Timer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	if(Math.isNaN(delay) || delay < 0) throw new org.aswing.error.Error("The delay specified is negative or not a finite number");
	org.aswing.util.AbstractImpulser.call(this,delay,repeatCount);
	this.currentCount = 0;
};
$hxClasses["org.aswing.util.Timer"] = org.aswing.util.Timer;
org.aswing.util.Timer.__name__ = ["org","aswing","util","Timer"];
org.aswing.util.Timer.__interfaces__ = [org.aswing.util.Impulser];
org.aswing.util.Timer.__super__ = org.aswing.util.AbstractImpulser;
org.aswing.util.Timer.prototype = $extend(org.aswing.util.AbstractImpulser.prototype,{
	reset: function() {
		if(this.running) this.stop();
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.timer = new haxe.Timer(this.delay);
			this.timer.run = $bind(this,this.fireActionPerformed);
		}
	}
	,restart: function() {
		this.reset();
		this.start();
	}
	,stop: function() {
		this.running = false;
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
	}
	,setDelay: function(delay) {
		this.delay = delay;
		if(this.running) {
			this.stop();
			this.start();
		}
	}
	,getDelay: function() {
		return this.delay;
	}
	,fireActionPerformed: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new org.aswing.event.AWEvent("act"));
			this.dispatchEvent(new org.aswing.event.AWEvent("act_complete"));
		} else this.dispatchEvent(new org.aswing.event.AWEvent("act"));
	}
	,__class__: org.aswing.util.Timer
});
org.aswing.error = {};
org.aswing.error.Error = function(inMessage,id) {
	if(id == null) id = 0;
	this.message = inMessage;
	this.errorID = id;
};
$hxClasses["org.aswing.error.Error"] = org.aswing.error.Error;
org.aswing.error.Error.__name__ = ["org","aswing","error","Error"];
org.aswing.error.Error.prototype = {
	toString: function() {
		return this.message;
	}
	,getStackTrace: function() {
		return "";
	}
	,__class__: org.aswing.error.Error
};
org.aswing.dnd.DragManager = function() { };
$hxClasses["org.aswing.dnd.DragManager"] = org.aswing.dnd.DragManager;
org.aswing.dnd.DragManager.__name__ = ["org","aswing","dnd","DragManager"];
org.aswing.dnd.DragManager.setDragingImageContainerRoot = function(theRoot) {
	org.aswing.dnd.DragManager.root = theRoot;
};
org.aswing.dnd.DragManager.startDrag = function(dragInitiator,sourceData,dragImage,dragListener) {
	if(org.aswing.dnd.DragManager.s_isDragging) {
		throw new org.aswing.error.Error("The last dragging action is not finished, can't start a new one!");
		return;
	}
	var stage = dragInitiator.get_stage();
	if(stage == null) {
		throw new org.aswing.error.Error("The drag initiator is not on stage!");
		return;
	}
	org.aswing.dnd.DragManager.curStage = stage;
	if(dragImage == null) dragImage = new org.aswing.dnd.DefaultDragImage(dragInitiator);
	org.aswing.dnd.DragManager.s_isDragging = true;
	org.aswing.dnd.DragManager.s_dragInitiator = dragInitiator;
	org.aswing.dnd.DragManager.s_sourceData = sourceData;
	org.aswing.dnd.DragManager.s_dragImage = dragImage;
	org.aswing.dnd.DragManager.s_dragListener = dragListener;
	if(org.aswing.dnd.DragManager.s_dragListener != null) org.aswing.dnd.DragManager.addDragListener(org.aswing.dnd.DragManager.s_dragListener);
	if(org.aswing.dnd.DragManager.runningMotion != null) {
		org.aswing.dnd.DragManager.runningMotion.forceStop();
		org.aswing.dnd.DragManager.runningMotion = null;
	}
	var container = stage;
	if(org.aswing.dnd.DragManager.dragProxyMC == null) {
		org.aswing.dnd.DragManager.dragProxyMC = new openfl.display.Sprite();
		org.aswing.dnd.DragManager.dragProxyMC.mouseEnabled = false;
		org.aswing.dnd.DragManager.dragProxyMC.name = "drag_image";
	} else if(org.aswing.dnd.DragManager.dragProxyMC.parent != null) org.aswing.dnd.DragManager.dragProxyMC.parent.removeChild(org.aswing.dnd.DragManager.dragProxyMC);
	if(org.aswing.dnd.DragManager.dragProxyMC.__children.length > 0) org.aswing.dnd.DragManager.dragProxyMC.removeChildAt(0);
	container.addChild(org.aswing.dnd.DragManager.dragProxyMC);
	var globalPos = org.aswing.AsWingUtils.getStageMousePosition(stage);
	var dp = container.globalToLocal(dragInitiator.getGlobalLocation().toPoint());
	org.aswing.dnd.DragManager.dragProxyMC.set_x(dp.x);
	org.aswing.dnd.DragManager.dragProxyMC.set_y(dp.y);
	org.aswing.dnd.DragManager.dragProxyMC.addChild(dragImage.getDisplay());
	org.aswing.dnd.DragManager.dragProxyMC.startDrag(false);
	org.aswing.dnd.DragManager.mouseOffset = new org.aswing.geom.IntPoint(Std["int"](container.get_mouseX() - dp.x),Std["int"](container.get_mouseY() - dp.y));
	org.aswing.dnd.DragManager.fireDragStartEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos);
	org.aswing.dnd.DragManager.enteredComponent = null;
	org.aswing.dnd.DragManager.s_dragImage.switchToRejectImage();
	org.aswing.dnd.DragManager.__onMouseMoveOnStage(stage);
	org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,org.aswing.dnd.DragManager.__onMouseMove,false,0,true);
	org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,org.aswing.dnd.DragManager.__onMouseDown,false,0,true);
	org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_UP,org.aswing.dnd.DragManager.__onMouseUp,false,0,true);
};
org.aswing.dnd.DragManager.addDragListener = function(lis) {
	org.aswing.dnd.DragManager.listeners.push(lis);
};
org.aswing.dnd.DragManager.removeDragListener = function(lis) {
	org.aswing.util.ArrayUtils.removeFromArray(org.aswing.dnd.DragManager.listeners,lis);
};
org.aswing.dnd.DragManager.setDropMotion = function(motion) {
	if(motion == null) motion = org.aswing.dnd.DragManager.DEFAULT_DROP_MOTION;
	org.aswing.dnd.DragManager.dropMotion = motion;
};
org.aswing.dnd.DragManager.getCurrentDragImage = function() {
	return org.aswing.dnd.DragManager.s_dragImage;
};
org.aswing.dnd.DragManager.getCurrentDropTarget = function() {
	return org.aswing.dnd.DragManager.getDropTarget(org.aswing.dnd.DragManager.curStage);
};
org.aswing.dnd.DragManager.getDropTargetComponent = function(pos) {
	return org.aswing.AsWingUtils["as"](org.aswing.dnd.DragManager.getDropTarget(org.aswing.dnd.DragManager.curStage,pos,org.aswing.Component),org.aswing.Component);
};
org.aswing.dnd.DragManager.getCurrentDropTargetComponent = function() {
	return org.aswing.AsWingUtils["as"](org.aswing.dnd.DragManager.getDropTarget(org.aswing.dnd.DragManager.curStage,null,org.aswing.Component),org.aswing.Component);
};
org.aswing.dnd.DragManager.getDropTragetDropTriggerComponent = function(pos) {
	return org.aswing.AsWingUtils["as"](org.aswing.dnd.DragManager.getDropTarget(org.aswing.dnd.DragManager.curStage,pos,org.aswing.Component,org.aswing.dnd.DragManager.____dropTargetCheck),org.aswing.Component);
};
org.aswing.dnd.DragManager.getCurrentDropTargetDropTriggerComponent = function() {
	return org.aswing.AsWingUtils["as"](org.aswing.dnd.DragManager.getDropTarget(org.aswing.dnd.DragManager.curStage,null,org.aswing.Component,org.aswing.dnd.DragManager.____dropTargetCheck),org.aswing.Component);
};
org.aswing.dnd.DragManager.____dropTargetCheck = function(tar) {
	return tar.isDropTrigger();
};
org.aswing.dnd.DragManager.getDropTarget = function(stage,pos,targetType,addtionCheck) {
	if(stage == null) return null;
	if(pos == null) pos = new openfl.geom.Point(org.aswing.AsWingManager.getStage().get_mouseX(),org.aswing.AsWingManager.getStage().get_mouseY());
	if(targetType == null) targetType = openfl.display.DisplayObject;
	if(addtionCheck == null) {
	}
	var targets = org.aswing.AsWingManager.getStage().getObjectsUnderPoint(pos);
	var n = targets.length;
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		var tar = targets[i];
		if(js.Boot.__instanceof(tar,targetType) && tar != org.aswing.dnd.DragManager.dragProxyMC && !org.aswing.dnd.DragManager.dragProxyMC.contains(tar)) {
			if(addtionCheck == null) return tar; else if(addtionCheck(tar)) return tar;
		}
	}
	return null;
};
org.aswing.dnd.DragManager.__onMouseMoveOnStage = function(stage) {
	org.aswing.dnd.DragManager.onMouseMove(org.aswing.AsWingManager.getStage().get_mouseX(),org.aswing.AsWingManager.getStage().get_mouseY());
};
org.aswing.dnd.DragManager.onMouseMove = function(mx,my) {
	var globalPos = new org.aswing.geom.IntPoint(mx | 0,my | 0);
	var dropC = org.aswing.dnd.DragManager.getCurrentDropTargetDropTriggerComponent();
	if(dropC != org.aswing.dnd.DragManager.enteredComponent) {
		if(org.aswing.dnd.DragManager.enteredComponent != null) {
			org.aswing.dnd.DragManager.s_dragImage.switchToRejectImage();
			org.aswing.dnd.DragManager.fireDragExitEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos,org.aswing.dnd.DragManager.enteredComponent,dropC);
			org.aswing.dnd.DragManager.enteredComponent.fireDragExitEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos,dropC);
		}
		if(dropC != null) {
			if(dropC.isDragAcceptableInitiator(org.aswing.dnd.DragManager.s_dragInitiator)) org.aswing.dnd.DragManager.s_dragImage.switchToAcceptImage();
			org.aswing.dnd.DragManager.fireDragEnterEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos,dropC,org.aswing.dnd.DragManager.enteredComponent);
			dropC.fireDragEnterEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos,org.aswing.dnd.DragManager.enteredComponent);
		}
		org.aswing.dnd.DragManager.enteredComponent = dropC;
	} else if(org.aswing.dnd.DragManager.enteredComponent != null) {
		org.aswing.dnd.DragManager.fireDragOverringEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos,org.aswing.dnd.DragManager.enteredComponent);
		org.aswing.dnd.DragManager.enteredComponent.fireDragOverringEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos);
	}
};
org.aswing.dnd.DragManager.__onMouseMove = function(e) {
	org.aswing.dnd.DragManager.onMouseMove(e.stageX,e.stageY);
};
org.aswing.dnd.DragManager.__onMouseUp = function(e) {
	org.aswing.dnd.DragManager.drop();
};
org.aswing.dnd.DragManager.__onMouseDown = function(e) {
	org.aswing.dnd.DragManager.drop();
};
org.aswing.dnd.DragManager.drop = function() {
	org.aswing.dnd.DragManager.dragProxyMC.stopDrag();
	var globalPos = org.aswing.AsWingUtils.getStageMousePosition();
	var stage = org.aswing.dnd.DragManager.curStage;
	org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,org.aswing.dnd.DragManager.__onMouseMove);
	org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,org.aswing.dnd.DragManager.__onMouseDown);
	org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,org.aswing.dnd.DragManager.__onMouseUp);
	org.aswing.dnd.DragManager.s_isDragging = false;
	if(org.aswing.dnd.DragManager.enteredComponent != null) org.aswing.dnd.DragManager.setDropMotion(org.aswing.dnd.DragManager.DEFAULT_DROP_MOTION); else org.aswing.dnd.DragManager.setDropMotion(org.aswing.dnd.DragManager.DEFAULT_REJECT_DROP_MOTION);
	org.aswing.dnd.DragManager.fireDragDropEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos,org.aswing.dnd.DragManager.enteredComponent);
	if(org.aswing.dnd.DragManager.enteredComponent != null) org.aswing.dnd.DragManager.enteredComponent.fireDragDropEvent(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.s_sourceData,globalPos);
	org.aswing.dnd.DragManager.runningMotion = org.aswing.dnd.DragManager.dropMotion;
	org.aswing.dnd.DragManager.runningMotion.startMotionAndLaterRemove(org.aswing.dnd.DragManager.s_dragInitiator,org.aswing.dnd.DragManager.dragProxyMC);
	if(org.aswing.dnd.DragManager.s_dragListener != null) org.aswing.dnd.DragManager.removeDragListener(org.aswing.dnd.DragManager.s_dragListener);
	org.aswing.dnd.DragManager.curStage = null;
	org.aswing.dnd.DragManager.s_dragImage = null;
	org.aswing.dnd.DragManager.s_dragListener = null;
	org.aswing.dnd.DragManager.s_sourceData = null;
	org.aswing.dnd.DragManager.enteredComponent = null;
};
org.aswing.dnd.DragManager.fireDragStartEvent = function(dragInitiator,sourceData,pos) {
	var e = new org.aswing.event.DragAndDropEvent("dragStart",dragInitiator,sourceData,pos);
	var _g1 = 0;
	var _g = org.aswing.dnd.DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org.aswing.dnd.DragManager.listeners[i];
		lis.onDragStart(e);
	}
};
org.aswing.dnd.DragManager.fireDragEnterEvent = function(dragInitiator,sourceData,pos,targetComponent,relatedTarget) {
	var e = new org.aswing.event.DragAndDropEvent("dragEnter",dragInitiator,sourceData,pos,targetComponent,relatedTarget);
	var _g1 = 0;
	var _g = org.aswing.dnd.DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org.aswing.dnd.DragManager.listeners[i];
		lis.onDragEnter(e);
	}
};
org.aswing.dnd.DragManager.fireDragOverringEvent = function(dragInitiator,sourceData,pos,targetComponent) {
	var e = new org.aswing.event.DragAndDropEvent("dragOverring",dragInitiator,sourceData,pos,targetComponent);
	var _g1 = 0;
	var _g = org.aswing.dnd.DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org.aswing.dnd.DragManager.listeners[i];
		lis.onDragOverring(e);
	}
};
org.aswing.dnd.DragManager.fireDragExitEvent = function(dragInitiator,sourceData,pos,targetComponent,relatedTarget) {
	var e = new org.aswing.event.DragAndDropEvent("dragExit",dragInitiator,sourceData,pos,targetComponent,relatedTarget);
	var _g1 = 0;
	var _g = org.aswing.dnd.DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org.aswing.dnd.DragManager.listeners[i];
		lis.onDragExit(e);
	}
};
org.aswing.dnd.DragManager.fireDragDropEvent = function(dragInitiator,sourceData,pos,targetComponent) {
	var e = new org.aswing.event.DragAndDropEvent("dragDrop",dragInitiator,sourceData,pos,targetComponent);
	var _g1 = 0;
	var _g = org.aswing.dnd.DragManager.listeners.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lis = org.aswing.dnd.DragManager.listeners[i];
		lis.onDragDrop(e);
	}
};
org.aswing.dnd.SourceData = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["org.aswing.dnd.SourceData"] = org.aswing.dnd.SourceData;
org.aswing.dnd.SourceData.__name__ = ["org","aswing","dnd","SourceData"];
org.aswing.dnd.SourceData.prototype = {
	getName: function() {
		return this.name;
	}
	,getData: function() {
		return this.data;
	}
	,__class__: org.aswing.dnd.SourceData
};
org.aswing.error.AsWingManagerNotInited = function() {
	org.aswing.error.Error.call(this,"You have not call AsWingManager.setRoot() yet!");
};
$hxClasses["org.aswing.error.AsWingManagerNotInited"] = org.aswing.error.AsWingManagerNotInited;
org.aswing.error.AsWingManagerNotInited.__name__ = ["org","aswing","error","AsWingManagerNotInited"];
org.aswing.error.AsWingManagerNotInited.__super__ = org.aswing.error.Error;
org.aswing.error.AsWingManagerNotInited.prototype = $extend(org.aswing.error.Error.prototype,{
	__class__: org.aswing.error.AsWingManagerNotInited
});
org.aswing.error.ImpMissError = function() {
	org.aswing.error.Error.call(this,"Subclass should override this method to do implementation!!");
};
$hxClasses["org.aswing.error.ImpMissError"] = org.aswing.error.ImpMissError;
org.aswing.error.ImpMissError.__name__ = ["org","aswing","error","ImpMissError"];
org.aswing.error.ImpMissError.__super__ = org.aswing.error.Error;
org.aswing.error.ImpMissError.prototype = $extend(org.aswing.error.Error.prototype,{
	__class__: org.aswing.error.ImpMissError
});
org.aswing.event.AWEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["org.aswing.event.AWEvent"] = org.aswing.event.AWEvent;
org.aswing.event.AWEvent.__name__ = ["org","aswing","event","AWEvent"];
org.aswing.event.AWEvent.__super__ = openfl.events.Event;
org.aswing.event.AWEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new org.aswing.event.AWEvent(this.type,this.bubbles,this.cancelable);
	}
	,__class__: org.aswing.event.AWEvent
});
org.aswing.event.ClickCountEvent = function(type,count) {
	org.aswing.event.AWEvent.call(this,type,false,false);
	this.count = count;
};
$hxClasses["org.aswing.event.ClickCountEvent"] = org.aswing.event.ClickCountEvent;
org.aswing.event.ClickCountEvent.__name__ = ["org","aswing","event","ClickCountEvent"];
org.aswing.event.ClickCountEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.ClickCountEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	getCount: function() {
		return this.count;
	}
	,clone: function() {
		return new org.aswing.event.ClickCountEvent(this.type,this.count);
	}
	,__class__: org.aswing.event.ClickCountEvent
});
org.aswing.event.ContainerEvent = function(type,container,child) {
	org.aswing.event.AWEvent.call(this,type,false,false);
	this.container = container;
	this.child = child;
};
$hxClasses["org.aswing.event.ContainerEvent"] = org.aswing.event.ContainerEvent;
org.aswing.event.ContainerEvent.__name__ = ["org","aswing","event","ContainerEvent"];
org.aswing.event.ContainerEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.ContainerEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	clone: function() {
		return new org.aswing.event.ContainerEvent(this.type,this.container,this.child);
	}
	,getContainer: function() {
		return this.container;
	}
	,getChild: function() {
		return this.child;
	}
	,__class__: org.aswing.event.ContainerEvent
});
org.aswing.event.DragAndDropEvent = function(type,dragInitiator,sourceData,mousePos,targetComponent,relatedTargetComponent) {
	org.aswing.event.AWEvent.call(this,type,false,false);
	this.dragInitiator = dragInitiator;
	this.sourceData = sourceData;
	this.mousePos = mousePos.clone();
	this.targetComponent = targetComponent;
	this.relatedTargetComponent = relatedTargetComponent;
};
$hxClasses["org.aswing.event.DragAndDropEvent"] = org.aswing.event.DragAndDropEvent;
org.aswing.event.DragAndDropEvent.__name__ = ["org","aswing","event","DragAndDropEvent"];
org.aswing.event.DragAndDropEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.DragAndDropEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	clone: function() {
		return new org.aswing.event.DragAndDropEvent(this.type,this.dragInitiator,this.sourceData,this.mousePos,this.targetComponent);
	}
	,getDragInitiator: function() {
		return this.dragInitiator;
	}
	,getSourceData: function() {
		return this.sourceData;
	}
	,getMousePosition: function() {
		return this.mousePos;
	}
	,getTargetComponent: function() {
		return this.targetComponent;
	}
	,getRelatedTargetComponent: function() {
		return this.relatedTargetComponent;
	}
	,__class__: org.aswing.event.DragAndDropEvent
});
org.aswing.event.FocusKeyEvent = function(type,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(keyCode == null) keyCode = 0;
	if(charCode == null) charCode = 0;
	openfl.events.KeyboardEvent.call(this,type,false,false,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey);
};
$hxClasses["org.aswing.event.FocusKeyEvent"] = org.aswing.event.FocusKeyEvent;
org.aswing.event.FocusKeyEvent.__name__ = ["org","aswing","event","FocusKeyEvent"];
org.aswing.event.FocusKeyEvent.__super__ = openfl.events.KeyboardEvent;
org.aswing.event.FocusKeyEvent.prototype = $extend(openfl.events.KeyboardEvent.prototype,{
	clone: function() {
		return new org.aswing.event.FocusKeyEvent(this.type,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey);
	}
	,__class__: org.aswing.event.FocusKeyEvent
});
org.aswing.event.InteractiveEvent = function(type,programmatic,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	if(programmatic == null) programmatic = false;
	org.aswing.event.AWEvent.call(this,type,bubbles,cancelable);
	this.programmatic = programmatic;
};
$hxClasses["org.aswing.event.InteractiveEvent"] = org.aswing.event.InteractiveEvent;
org.aswing.event.InteractiveEvent.__name__ = ["org","aswing","event","InteractiveEvent"];
org.aswing.event.InteractiveEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.InteractiveEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	isProgrammatic: function() {
		return this.programmatic;
	}
	,clone: function() {
		return new org.aswing.event.InteractiveEvent(this.type,this.isProgrammatic(),this.bubbles,this.cancelable);
	}
	,__class__: org.aswing.event.InteractiveEvent
});
org.aswing.event.FrameEvent = function(type,programmatic) {
	if(programmatic == null) programmatic = false;
	org.aswing.event.InteractiveEvent.call(this,type,programmatic,this.bubbles,this.cancelable);
};
$hxClasses["org.aswing.event.FrameEvent"] = org.aswing.event.FrameEvent;
org.aswing.event.FrameEvent.__name__ = ["org","aswing","event","FrameEvent"];
org.aswing.event.FrameEvent.__super__ = org.aswing.event.InteractiveEvent;
org.aswing.event.FrameEvent.prototype = $extend(org.aswing.event.InteractiveEvent.prototype,{
	clone: function() {
		return new org.aswing.event.FrameEvent(this.type,this.isProgrammatic());
	}
	,__class__: org.aswing.event.FrameEvent
});
org.aswing.event.ModelEvent = function(source) {
	this.source = source;
};
$hxClasses["org.aswing.event.ModelEvent"] = org.aswing.event.ModelEvent;
org.aswing.event.ModelEvent.__name__ = ["org","aswing","event","ModelEvent"];
org.aswing.event.ModelEvent.prototype = {
	getSource: function() {
		return this.source;
	}
	,__class__: org.aswing.event.ModelEvent
};
org.aswing.event.ListDataEvent = function(source,index0,index1,removedItems) {
	org.aswing.event.ModelEvent.call(this,source);
	this.index0 = index0;
	this.index1 = index1;
	this.removedItems = removedItems.slice();
};
$hxClasses["org.aswing.event.ListDataEvent"] = org.aswing.event.ListDataEvent;
org.aswing.event.ListDataEvent.__name__ = ["org","aswing","event","ListDataEvent"];
org.aswing.event.ListDataEvent.__super__ = org.aswing.event.ModelEvent;
org.aswing.event.ListDataEvent.prototype = $extend(org.aswing.event.ModelEvent.prototype,{
	getIndex0: function() {
		return this.index0;
	}
	,getIndex1: function() {
		return this.index1;
	}
	,getRemovedItems: function() {
		return this.removedItems.slice();
	}
	,__class__: org.aswing.event.ListDataEvent
});
org.aswing.event.ListItemEvent = function(type,value,cell,e) {
	openfl.events.MouseEvent.call(this,type,false,false,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown);
	this.value = value;
	this.cell = cell;
};
$hxClasses["org.aswing.event.ListItemEvent"] = org.aswing.event.ListItemEvent;
org.aswing.event.ListItemEvent.__name__ = ["org","aswing","event","ListItemEvent"];
org.aswing.event.ListItemEvent.__super__ = openfl.events.MouseEvent;
org.aswing.event.ListItemEvent.prototype = $extend(openfl.events.MouseEvent.prototype,{
	getValue: function() {
		return this.value;
	}
	,getCell: function() {
		return this.cell;
	}
	,clone: function() {
		return new org.aswing.event.ListItemEvent(this.type,this.value,this.cell,this);
	}
	,__class__: org.aswing.event.ListItemEvent
});
org.aswing.event.MovedEvent = function(oldPos,newPos) {
	org.aswing.event.AWEvent.call(this,"moved",false,false);
	this.oldPos = oldPos.clone();
	this.newPos = newPos.clone();
};
$hxClasses["org.aswing.event.MovedEvent"] = org.aswing.event.MovedEvent;
org.aswing.event.MovedEvent.__name__ = ["org","aswing","event","MovedEvent"];
org.aswing.event.MovedEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.MovedEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	clone: function() {
		return new org.aswing.event.MovedEvent(this.oldPos,this.newPos);
	}
	,getOldLocation: function() {
		return this.oldPos.clone();
	}
	,getNewLocation: function() {
		return this.newPos.clone();
	}
	,__class__: org.aswing.event.MovedEvent
});
org.aswing.event.PopupEvent = function(type) {
	org.aswing.event.AWEvent.call(this,type,false,false);
};
$hxClasses["org.aswing.event.PopupEvent"] = org.aswing.event.PopupEvent;
org.aswing.event.PopupEvent.__name__ = ["org","aswing","event","PopupEvent"];
org.aswing.event.PopupEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.PopupEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	clone: function() {
		return new org.aswing.event.PopupEvent(this.type);
	}
	,__class__: org.aswing.event.PopupEvent
});
org.aswing.event.PropertyChangeEvent = function(propertyName,oldValue,newValue) {
	org.aswing.event.AWEvent.call(this,"propertyChange",false,false);
	this.propertyName = propertyName;
	this.oldValue = oldValue;
	this.newValue = newValue;
};
$hxClasses["org.aswing.event.PropertyChangeEvent"] = org.aswing.event.PropertyChangeEvent;
org.aswing.event.PropertyChangeEvent.__name__ = ["org","aswing","event","PropertyChangeEvent"];
org.aswing.event.PropertyChangeEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.PropertyChangeEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	getPropertyName: function() {
		return this.propertyName;
	}
	,getOldValue: function() {
		return this.oldValue;
	}
	,getNewValue: function() {
		return this.newValue;
	}
	,clone: function() {
		return new org.aswing.event.PropertyChangeEvent(this.propertyName,this.oldValue,this.newValue);
	}
	,__class__: org.aswing.event.PropertyChangeEvent
});
org.aswing.event.ReleaseEvent = function(type,pressTarget,releasedOutSide,e) {
	openfl.events.MouseEvent.call(this,type,false,false,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown);
	this.pressTarget = pressTarget;
	this.releasedOutSide = releasedOutSide;
};
$hxClasses["org.aswing.event.ReleaseEvent"] = org.aswing.event.ReleaseEvent;
org.aswing.event.ReleaseEvent.__name__ = ["org","aswing","event","ReleaseEvent"];
org.aswing.event.ReleaseEvent.__super__ = openfl.events.MouseEvent;
org.aswing.event.ReleaseEvent.prototype = $extend(openfl.events.MouseEvent.prototype,{
	getPressTarget: function() {
		return this.pressTarget;
	}
	,isReleasedOutSide: function() {
		return this.releasedOutSide;
	}
	,clone: function() {
		return new org.aswing.event.ReleaseEvent(this.type,this.getPressTarget(),this.isReleasedOutSide(),this);
	}
	,__class__: org.aswing.event.ReleaseEvent
});
org.aswing.event.ResizedEvent = function(oldSize,newSize) {
	org.aswing.event.AWEvent.call(this,"resized",false,false);
	this.oldSize = oldSize.clone();
	this.newSize = newSize.clone();
};
$hxClasses["org.aswing.event.ResizedEvent"] = org.aswing.event.ResizedEvent;
org.aswing.event.ResizedEvent.__name__ = ["org","aswing","event","ResizedEvent"];
org.aswing.event.ResizedEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.ResizedEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	clone: function() {
		return new org.aswing.event.ResizedEvent(this.oldSize,this.newSize);
	}
	,getOldSize: function() {
		return this.oldSize.clone();
	}
	,getNewSize: function() {
		return this.newSize.clone();
	}
	,__class__: org.aswing.event.ResizedEvent
});
org.aswing.event.ScrollPaneEvent = function(type,programmatic,scrollbar,viewportChanged) {
	if(viewportChanged == null) viewportChanged = false;
	if(programmatic == null) programmatic = false;
	org.aswing.event.InteractiveEvent.call(this,type,programmatic,false,false);
};
$hxClasses["org.aswing.event.ScrollPaneEvent"] = org.aswing.event.ScrollPaneEvent;
org.aswing.event.ScrollPaneEvent.__name__ = ["org","aswing","event","ScrollPaneEvent"];
org.aswing.event.ScrollPaneEvent.__super__ = org.aswing.event.InteractiveEvent;
org.aswing.event.ScrollPaneEvent.prototype = $extend(org.aswing.event.InteractiveEvent.prototype,{
	clone: function() {
		return new org.aswing.event.ScrollPaneEvent(this.type,this.isProgrammatic(),this.scrollbar,this.viewportChanged);
	}
	,getScrollBar: function() {
		return this.scrollbar;
	}
	,isViewportChanged: function() {
		return this.viewportChanged;
	}
	,__class__: org.aswing.event.ScrollPaneEvent
});
org.aswing.event.SelectionEvent = function(type,firstIndex,lastIndex,programmatic) {
	org.aswing.event.InteractiveEvent.call(this,type,programmatic);
	this.firstIndex = firstIndex;
	this.lastIndex = lastIndex;
};
$hxClasses["org.aswing.event.SelectionEvent"] = org.aswing.event.SelectionEvent;
org.aswing.event.SelectionEvent.__name__ = ["org","aswing","event","SelectionEvent"];
org.aswing.event.SelectionEvent.__super__ = org.aswing.event.InteractiveEvent;
org.aswing.event.SelectionEvent.prototype = $extend(org.aswing.event.InteractiveEvent.prototype,{
	getFirstIndex: function() {
		return this.firstIndex;
	}
	,getLastIndex: function() {
		return this.lastIndex;
	}
	,clone: function() {
		return new org.aswing.event.SelectionEvent(this.type,this.firstIndex,this.lastIndex,this.isProgrammatic());
	}
	,__class__: org.aswing.event.SelectionEvent
});
org.aswing.event.TableCellEditEvent = function(type,row,column,oldValue,newValue) {
	org.aswing.event.AWEvent.call(this,type,false,false);
	this.row = row;
	this.column = column;
	this.oldValue = oldValue;
	this.newValue = newValue;
};
$hxClasses["org.aswing.event.TableCellEditEvent"] = org.aswing.event.TableCellEditEvent;
org.aswing.event.TableCellEditEvent.__name__ = ["org","aswing","event","TableCellEditEvent"];
org.aswing.event.TableCellEditEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.TableCellEditEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	getRow: function() {
		return this.row;
	}
	,getColumn: function() {
		return this.column;
	}
	,getOldValue: function() {
		return this.oldValue;
	}
	,getNewValue: function() {
		return this.newValue;
	}
	,clone: function() {
		return new org.aswing.event.TableCellEditEvent(this.type,this.row,this.column,this.oldValue,this.newValue);
	}
	,__class__: org.aswing.event.TableCellEditEvent
});
org.aswing.event.TableModelEvent = function(source,firstRow,lastRow,column,type) {
	if(type == null) type = "update";
	if(column == null) column = -1;
	if(lastRow == null) lastRow = -2;
	if(firstRow == null) firstRow = -2;
	org.aswing.event.ModelEvent.call(this,source);
	if(firstRow == -2) this.init(0,2147483647,column,type); else if(lastRow == -2) this.init(firstRow,firstRow,column,type); else this.init(firstRow,lastRow,column,type);
};
$hxClasses["org.aswing.event.TableModelEvent"] = org.aswing.event.TableModelEvent;
org.aswing.event.TableModelEvent.__name__ = ["org","aswing","event","TableModelEvent"];
org.aswing.event.TableModelEvent.__super__ = org.aswing.event.ModelEvent;
org.aswing.event.TableModelEvent.prototype = $extend(org.aswing.event.ModelEvent.prototype,{
	init: function(firstRow,lastRow,column,type) {
		this.firstRow = firstRow;
		this.lastRow = lastRow;
		this.column = column;
		this.type = type;
	}
	,getType: function() {
		return this.type;
	}
	,getFirstRow: function() {
		return this.firstRow;
	}
	,getLastRow: function() {
		return this.lastRow;
	}
	,getColumn: function() {
		return this.column;
	}
	,__class__: org.aswing.event.TableModelEvent
});
org.aswing.event.ToolTipEvent = function(type) {
	org.aswing.event.AWEvent.call(this,type);
};
$hxClasses["org.aswing.event.ToolTipEvent"] = org.aswing.event.ToolTipEvent;
org.aswing.event.ToolTipEvent.__name__ = ["org","aswing","event","ToolTipEvent"];
org.aswing.event.ToolTipEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.ToolTipEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	clone: function() {
		return new org.aswing.event.ToolTipEvent(this.type);
	}
	,__class__: org.aswing.event.ToolTipEvent
});
org.aswing.event.TreeCellEditEvent = function(type,path,oldValue,newValue) {
	org.aswing.event.AWEvent.call(this,type,this.bubbles,this.cancelable);
	this.oldValue = oldValue;
	this.newValue = newValue;
};
$hxClasses["org.aswing.event.TreeCellEditEvent"] = org.aswing.event.TreeCellEditEvent;
org.aswing.event.TreeCellEditEvent.__name__ = ["org","aswing","event","TreeCellEditEvent"];
org.aswing.event.TreeCellEditEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.TreeCellEditEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	getPath: function() {
		return this.path;
	}
	,getOldValue: function() {
		return this.oldValue;
	}
	,getNewValue: function() {
		return this.newValue;
	}
	,clone: function() {
		return new org.aswing.event.TreeCellEditEvent(this.type,this.path,this.oldValue,this.newValue);
	}
	,__class__: org.aswing.event.TreeCellEditEvent
});
org.aswing.event.TreeEvent = function(type,path) {
	org.aswing.event.AWEvent.call(this,type,false,false);
	this.path = path;
};
$hxClasses["org.aswing.event.TreeEvent"] = org.aswing.event.TreeEvent;
org.aswing.event.TreeEvent.__name__ = ["org","aswing","event","TreeEvent"];
org.aswing.event.TreeEvent.__super__ = org.aswing.event.AWEvent;
org.aswing.event.TreeEvent.prototype = $extend(org.aswing.event.AWEvent.prototype,{
	getPath: function() {
		return this.path;
	}
	,clone: function() {
		return new org.aswing.event.TreeEvent(this.type,this.path);
	}
	,__class__: org.aswing.event.TreeEvent
});
org.aswing.event.TreeModelEvent = function(source,path,childIndices,children) {
	org.aswing.event.ModelEvent.call(this,source);
	this.path = path;
	this.childIndices = childIndices;
	this.children = children;
};
$hxClasses["org.aswing.event.TreeModelEvent"] = org.aswing.event.TreeModelEvent;
org.aswing.event.TreeModelEvent.__name__ = ["org","aswing","event","TreeModelEvent"];
org.aswing.event.TreeModelEvent.__super__ = org.aswing.event.ModelEvent;
org.aswing.event.TreeModelEvent.prototype = $extend(org.aswing.event.ModelEvent.prototype,{
	getTreePath: function() {
		return this.path;
	}
	,getPath: function() {
		if(this.path != null) return this.path.getPath();
		return null;
	}
	,getChildren: function() {
		if(this.children != null) return this.children.slice();
		return null;
	}
	,getChildIndices: function() {
		if(this.childIndices != null) return this.childIndices.slice();
		return null;
	}
	,toString: function() {
		return "TreeModelEvent[Path:" + Std.string(this.getPath()) + ", childIndices:" + Std.string(this.childIndices) + ", children:" + Std.string(this.children) + "]";
	}
	,__class__: org.aswing.event.TreeModelEvent
});
org.aswing.event.TreeSelectionEvent = function(source,programmatic,paths,areNew,oldLeadSelectionPath,newLeadSelectionPath) {
	org.aswing.event.InteractiveEvent.call(this,"treeSelectionChanged",programmatic);
	this.source = source;
	this.paths = paths;
	this.areNew = areNew;
	this.oldLeadSelectionPath = oldLeadSelectionPath;
	this.newLeadSelectionPath = newLeadSelectionPath;
};
$hxClasses["org.aswing.event.TreeSelectionEvent"] = org.aswing.event.TreeSelectionEvent;
org.aswing.event.TreeSelectionEvent.__name__ = ["org","aswing","event","TreeSelectionEvent"];
org.aswing.event.TreeSelectionEvent.__super__ = org.aswing.event.InteractiveEvent;
org.aswing.event.TreeSelectionEvent.prototype = $extend(org.aswing.event.InteractiveEvent.prototype,{
	getSource: function() {
		return this.source;
	}
	,getPaths: function() {
		return this.paths.slice();
	}
	,getPath: function() {
		return this.paths[0];
	}
	,isAddedPath: function() {
		return this.areNew[0] == true;
	}
	,isAddedPathOfPath: function(path) {
		var _g1 = 0;
		var _g = this.paths.length;
		while(_g1 < _g) {
			var counter = _g1++;
			if(this.paths[counter].equals(path)) return this.areNew[counter] == true;
		}
		throw new org.aswing.error.Error("path is not a path identified by the TreeSelectionEvent");
	}
	,isAddedPathOfIndex: function(index) {
		if(this.paths == null || index < 0 || index >= this.paths.length) throw new org.aswing.error.Error("index is beyond range of added paths identified by TreeSelectionEvent");
		return this.areNew[index] == true;
	}
	,getOldLeadSelectionPath: function() {
		return this.oldLeadSelectionPath;
	}
	,getNewLeadSelectionPath: function() {
		return this.newLeadSelectionPath;
	}
	,cloneWithSource: function(newSource) {
		return new org.aswing.event.TreeSelectionEvent(newSource,this.isProgrammatic(),this.paths,this.areNew,this.oldLeadSelectionPath,this.newLeadSelectionPath);
	}
	,clone: function() {
		return new org.aswing.event.TreeSelectionEvent(this.source,this.isProgrammatic(),this.paths,this.areNew,this.oldLeadSelectionPath,this.newLeadSelectionPath);
	}
	,__class__: org.aswing.event.TreeSelectionEvent
});
org.aswing.event.WindowEvent = function(type,programmatic) {
	if(programmatic == null) programmatic = false;
	org.aswing.event.InteractiveEvent.call(this,type,programmatic);
};
$hxClasses["org.aswing.event.WindowEvent"] = org.aswing.event.WindowEvent;
org.aswing.event.WindowEvent.__name__ = ["org","aswing","event","WindowEvent"];
org.aswing.event.WindowEvent.__super__ = org.aswing.event.InteractiveEvent;
org.aswing.event.WindowEvent.prototype = $extend(org.aswing.event.InteractiveEvent.prototype,{
	clone: function() {
		return new org.aswing.event.WindowEvent(this.type,this.isProgrammatic());
	}
	,__class__: org.aswing.event.WindowEvent
});
org.aswing.geom = {};
org.aswing.geom.IntDimension = function(width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.width = 0;
	this.height = 0;
	this.width = width;
	this.height = height;
};
$hxClasses["org.aswing.geom.IntDimension"] = org.aswing.geom.IntDimension;
org.aswing.geom.IntDimension.__name__ = ["org","aswing","geom","IntDimension"];
org.aswing.geom.IntDimension.createBigDimension = function() {
	return new org.aswing.geom.IntDimension(100000,100000);
};
org.aswing.geom.IntDimension.prototype = {
	setSize: function(dim) {
		this.width = dim.width;
		this.height = dim.height;
	}
	,setSizeWH: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,increaseSize: function(s) {
		this.width += s.width;
		this.height += s.height;
		return this;
	}
	,decreaseSize: function(s) {
		this.width -= s.width;
		this.height -= s.height;
		return this;
	}
	,change: function(deltaW,deltaH) {
		this.width += deltaW;
		this.height += deltaH;
		return this;
	}
	,changedSize: function(deltaW,deltaH) {
		var s = new org.aswing.geom.IntDimension(deltaW,deltaH);
		return s;
	}
	,combine: function(d) {
		this.width = Std["int"](Math.max(this.width,d.width));
		this.height = Std["int"](Math.max(this.height,d.height));
		return this;
	}
	,combineSize: function(d) {
		return this.clone().combine(d);
	}
	,getBounds: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		var p = new org.aswing.geom.IntPoint(x,y);
		var r = new org.aswing.geom.IntRectangle();
		r.setLocation(p);
		r.setSize(this);
		return r;
	}
	,equals: function(o) {
		var d;
		if(js.Boot.__instanceof(o,org.aswing.geom.IntDimension)) d = o; else d = null;
		if(d == null) return false;
		return this.width == d.width && this.height == d.height;
	}
	,clone: function() {
		return new org.aswing.geom.IntDimension(this.width,this.height);
	}
	,toString: function() {
		return "IntDimension[" + this.width + "," + this.height + "]";
	}
	,__class__: org.aswing.geom.IntDimension
};
org.aswing.geom.IntPoint = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = 0;
	this.y = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["org.aswing.geom.IntPoint"] = org.aswing.geom.IntPoint;
org.aswing.geom.IntPoint.__name__ = ["org","aswing","geom","IntPoint"];
org.aswing.geom.IntPoint.creatWithPoint = function(p) {
	return new org.aswing.geom.IntPoint(p.x | 0,p.y | 0);
};
org.aswing.geom.IntPoint.prototype = {
	toPoint: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,setWithPoint: function(p) {
		this.x = p.x | 0;
		this.y = p.y | 0;
	}
	,setLocation: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,setLocationXY: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
	}
	,move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		return this;
	}
	,moveRadians: function(direction,distance) {
		this.x += Math.round(Math.cos(direction) * distance);
		this.y += Math.round(Math.sin(direction) * distance);
		return this;
	}
	,nextPoint: function(direction,distance) {
		return new org.aswing.geom.IntPoint(Std["int"](this.x + Math.cos(direction) * distance),Std["int"](this.y + Math.sin(direction) * distance));
	}
	,distanceSq: function(p) {
		var xx = p.x;
		var yy = p.y;
		return (this.x - xx) * (this.x - xx) + (this.y - yy) * (this.y - yy);
	}
	,distance: function(p) {
		return Std["int"](Math.sqrt(this.distanceSq(p)));
	}
	,equals: function(o) {
		var toCompare;
		if(js.Boot.__instanceof(o,org.aswing.geom.IntPoint)) toCompare = o; else toCompare = null;
		if(toCompare == null) return false;
		return this.x == toCompare.x && this.y == toCompare.y;
	}
	,clone: function() {
		return new org.aswing.geom.IntPoint(this.x,this.y);
	}
	,toString: function() {
		return "IntPoint[" + this.x + "," + this.y + "]";
	}
	,__class__: org.aswing.geom.IntPoint
};
org.aswing.geom.IntRectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = 0;
	this.y = 0;
	this.width = 0;
	this.height = 0;
	this.setRectXYWH(x,y,width,height);
};
$hxClasses["org.aswing.geom.IntRectangle"] = org.aswing.geom.IntRectangle;
org.aswing.geom.IntRectangle.__name__ = ["org","aswing","geom","IntRectangle"];
org.aswing.geom.IntRectangle.creatWithRectangle = function(r) {
	return new org.aswing.geom.IntRectangle(r.x | 0,r.y | 0,r.width | 0,r.height | 0);
};
org.aswing.geom.IntRectangle.prototype = {
	toRectangle: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,setWithRectangle: function(r) {
		this.x = r.x | 0;
		this.y = r.y | 0;
		this.width = r.width | 0;
		this.height = r.height | 0;
	}
	,setRect: function(rect) {
		this.setRectXYWH(rect.x,rect.y,rect.width,rect.height);
	}
	,setRectXYWH: function(x,y,width,height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	,setLocation: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,setSize: function(size) {
		this.width = size.width;
		this.height = size.height;
	}
	,getSize: function() {
		return new org.aswing.geom.IntDimension(this.width,this.height);
	}
	,getLocation: function() {
		return new org.aswing.geom.IntPoint(this.x,this.y);
	}
	,union: function(r) {
		var x1 = Std["int"](Math.min(this.x,r.x));
		var x2 = Std["int"](Math.max(this.x + this.width,r.x + r.width));
		var y1 = Std["int"](Math.min(this.y,r.y));
		var y2 = Std["int"](Math.max(this.y + this.height,r.y + r.height));
		return new org.aswing.geom.IntRectangle(x1,y1,x2 - x1,y2 - y1);
	}
	,grow: function(h,v) {
		this.x -= h;
		this.y -= v;
		this.width += h * 2;
		this.height += v * 2;
	}
	,move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,resize: function(dwidth,dheight) {
		if(dheight == null) dheight = 0;
		if(dwidth == null) dwidth = 0;
		this.width += dwidth;
		this.height += dheight;
	}
	,leftTop: function() {
		return new org.aswing.geom.IntPoint(this.x,this.y);
	}
	,rightTop: function() {
		return new org.aswing.geom.IntPoint(this.x + this.width,this.y);
	}
	,leftBottom: function() {
		return new org.aswing.geom.IntPoint(this.x,this.y + this.height);
	}
	,rightBottom: function() {
		return new org.aswing.geom.IntPoint(this.x + this.width,this.y + this.height);
	}
	,containsPoint: function(p) {
		if(p.x < this.x || p.y < this.y || p.x > this.x + this.width || p.y > this.y + this.height) return false; else return true;
	}
	,equals: function(o) {
		var r;
		if(js.Boot.__instanceof(o,org.aswing.geom.IntRectangle)) r = o; else r = null;
		if(r == null) return false;
		return this.x == r.x && this.y == r.y && this.width == r.width && this.height == r.height;
	}
	,clone: function() {
		return new org.aswing.geom.IntRectangle(this.x,this.y,this.width,this.height);
	}
	,toString: function() {
		return "IntRectangle[x:" + this.x + ",y:" + this.y + ", width:" + this.width + ",height:" + this.height + "]";
	}
	,__class__: org.aswing.geom.IntRectangle
};
org.aswing.graphics.GradientBrush = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	this.fillType = fillType;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
};
$hxClasses["org.aswing.graphics.GradientBrush"] = org.aswing.graphics.GradientBrush;
org.aswing.graphics.GradientBrush.__name__ = ["org","aswing","graphics","GradientBrush"];
org.aswing.graphics.GradientBrush.__interfaces__ = [org.aswing.graphics.IBrush];
org.aswing.graphics.GradientBrush.prototype = {
	getFillType: function() {
		return this.fillType;
	}
	,setFillType: function(t) {
		this.fillType = t;
	}
	,getColors: function() {
		return this.colors;
	}
	,setColors: function(cs) {
		this.colors = cs;
	}
	,getAlphas: function() {
		return this.alphas;
	}
	,setAlphas: function(alphas) {
		this.alphas = alphas;
	}
	,getRatios: function() {
		return this.ratios;
	}
	,setRatios: function(ratios) {
		this.ratios = ratios;
	}
	,getMatrix: function() {
		return this.matrix;
	}
	,setMatrix: function(m) {
		this.matrix = m;
	}
	,beginFill: function(target) {
		target.beginGradientFill(this.fillType,this.colors,this.alphas,this.ratios,this.matrix,this.spreadMethod,this.interpolationMethod,this.focalPointRatio);
	}
	,endFill: function(target) {
		target.endFill();
	}
	,__class__: org.aswing.graphics.GradientBrush
};
org.aswing.graphics.Graphics2D = function(target) {
	this.target = target;
};
$hxClasses["org.aswing.graphics.Graphics2D"] = org.aswing.graphics.Graphics2D;
org.aswing.graphics.Graphics2D.__name__ = ["org","aswing","graphics","Graphics2D"];
org.aswing.graphics.Graphics2D.prototype = {
	setTarget: function(target) {
		this.target = target;
	}
	,dispose: function() {
		this.target = null;
	}
	,startPen: function(p) {
		p.setTo(this.target);
	}
	,endPen: function() {
		this.target.lineStyle();
		this.target.moveTo(0,0);
	}
	,startBrush: function(b) {
		this.brush = b;
		b.beginFill(this.target);
	}
	,endBrush: function() {
		this.brush.endFill(this.target);
		this.target.moveTo(0,0);
	}
	,clear: function() {
		if(this.target != null) this.target.clear();
	}
	,drawLine: function(p,x1,y1,x2,y2) {
		this.startPen(p);
		this.line(x1,y1,x2,y2);
		this.endPen();
	}
	,drawPolyline: function(p,points) {
		this.startPen(p);
		this.polyline(points);
		this.endPen();
	}
	,fillPolyline: function(b,points) {
		this.startBrush(b);
		this.polyline(points);
		this.endBrush();
	}
	,drawPolygon: function(pen,points) {
		this.startPen(pen);
		this.polygon(points);
		this.endPen();
	}
	,fillPolygon: function(brush,points) {
		this.startBrush(brush);
		this.polygon(points);
		this.endBrush();
	}
	,fillPolygonRing: function(brush,points1,points2) {
		this.startBrush(brush);
		this.polygon(points1);
		this.polygon(points2);
		this.endBrush();
	}
	,drawRectangle: function(pen,x,y,width,height) {
		this.startPen(pen);
		this.rectangle(x,y,width,height);
		this.endPen();
	}
	,fillRectangle: function(brush,x,y,width,height) {
		this.startBrush(brush);
		this.rectangle(x,y,width,height);
		this.endBrush();
	}
	,fillRectangleRing: function(brush,centerX,centerY,width1,height1,width2,height2) {
		this.startBrush(brush);
		this.rectangle(centerX - width1 / 2,centerY - height1 / 2,width1,height1);
		this.rectangle(centerX - width2 / 2,centerY - height2 / 2,width2,height2);
		this.endBrush();
	}
	,fillRectangleRingWithThickness: function(brush,x,y,width,height,thickness) {
		this.startBrush(brush);
		this.rectangle(x,y,width,height);
		this.rectangle(x + thickness,y + thickness,width - thickness * 2,height - thickness * 2);
		this.endBrush();
	}
	,drawCircle: function(pen,centerX,centerY,radius) {
		this.startPen(pen);
		this.circle(centerX,centerY,radius);
		this.endPen();
	}
	,fillCircle: function(brush,centerX,centerY,radius) {
		this.startBrush(brush);
		this.circle(centerX,centerY,radius);
		this.endBrush();
	}
	,fillCircleRing: function(brush,centerX,centerY,radius1,radius2) {
		this.startBrush(brush);
		this.circle(centerX,centerY,radius1);
		this.circle(centerX,centerY,radius2);
		this.endBrush();
	}
	,fillCircleRingWithThickness: function(brush,centerX,centerY,radius,thickness) {
		this.startBrush(brush);
		this.circle(centerX,centerY,radius);
		radius -= thickness;
		this.circle(centerX,centerY,radius);
		this.endBrush();
	}
	,drawEllipse: function(pen,x,y,width,height) {
		this.startPen(pen);
		this.ellipse(x,y,width,height);
		this.endPen();
	}
	,fillEllipse: function(brush,x,y,width,height) {
		this.startBrush(brush);
		this.ellipse(x,y,width,height);
		this.endBrush();
	}
	,fillEllipseRing: function(brush,centerX,centerY,width1,height1,width2,height2) {
		this.startBrush(brush);
		this.ellipse(centerX - width1 / 2,centerY - height1 / 2,width1,height1);
		this.ellipse(centerX - width2 / 2,centerY - height2 / 2,width2,height2);
		this.endBrush();
	}
	,fillEllipseRingWithThickness: function(brush,x,y,width,height,thickness) {
		this.startBrush(brush);
		this.ellipse(x,y,width,height);
		this.ellipse(x + thickness,y + thickness,width - thickness * 2,height - thickness * 2);
		this.endBrush();
	}
	,drawRoundRect: function(pen,x,y,width,height,radius,trR,blR,brR) {
		if(brR == null) brR = -1;
		if(blR == null) blR = -1;
		if(trR == null) trR = -1;
		this.startPen(pen);
		this.roundRect(x,y,width,height,radius,trR,blR,brR);
		this.endPen();
	}
	,fillRoundRect: function(brush,x,y,width,height,radius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(bottomRightRadius == null) bottomRightRadius = -1;
		if(bottomLeftRadius == null) bottomLeftRadius = -1;
		if(topRightRadius == null) topRightRadius = -1;
		this.startBrush(brush);
		this.roundRect(x,y,width,height,radius,topRightRadius,bottomLeftRadius,bottomRightRadius);
		this.endBrush();
	}
	,fillRoundRectRing: function(brush,centerX,centerY,width1,height1,radius1,width2,height2,radius2) {
		this.startBrush(brush);
		this.roundRect(centerX - width1 / 2,centerY - height1 / 2,width1,height1,radius1);
		this.roundRect(centerX - width2 / 2,centerY - height2 / 2,width2,height2,radius2);
		this.endBrush();
	}
	,fillRoundRectRingWithThickness: function(brush,x,y,width,height,radius,thickness,innerRadius) {
		if(innerRadius == null) innerRadius = -1;
		this.startBrush(brush);
		this.roundRect(x,y,width,height,radius);
		if(innerRadius == -1) innerRadius = radius - thickness;
		this.roundRect(x + thickness,y + thickness,width - thickness * 2,height - thickness * 2,innerRadius);
		this.endBrush();
	}
	,beginFill: function(brush) {
		this.startBrush(brush);
	}
	,endFill: function() {
		this.endBrush();
		this.target.moveTo(0,0);
	}
	,beginDraw: function(pen) {
		this.startPen(pen);
	}
	,endDraw: function() {
		this.endPen();
		this.target.moveTo(0,0);
	}
	,moveTo: function(x,y) {
		this.target.moveTo(x,y);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.target.curveTo(controlX,controlY,anchorX,anchorY);
	}
	,lineTo: function(x,y) {
		this.target.lineTo(x,y);
	}
	,line: function(x1,y1,x2,y2) {
		this.target.moveTo(x1,y1);
		this.target.lineTo(x2,y2);
	}
	,polygon: function(points) {
		if(points.length > 1) {
			this.polyline(points);
			this.target.lineTo(points[0].x,points[0].y);
		}
	}
	,polyline: function(points) {
		if(points.length > 1) {
			this.target.moveTo(points[0].x,points[0].y);
			var _g1 = 1;
			var _g = points.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.target.lineTo(points[i].x,points[i].y);
			}
		}
	}
	,rectangle: function(x,y,width,height) {
		this.target.drawRect(x,y,width,height);
	}
	,ellipse: function(x,y,width,height) {
		var pi = Math.PI;
		var xradius = width / 2;
		var yradius = height / 2;
		var cx = x + xradius;
		var cy = y + yradius;
		var tanpi8 = Math.tan(pi / 8);
		var cospi4 = Math.cos(pi / 4);
		var sinpi4 = Math.sin(pi / 4);
		this.target.moveTo(xradius + cx,cy);
		this.target.curveTo(xradius + cx,yradius * tanpi8 + cy,xradius * cospi4 + cx,yradius * sinpi4 + cy);
		this.target.curveTo(xradius * tanpi8 + cx,yradius + cy,cx,yradius + cy);
		this.target.curveTo(-xradius * tanpi8 + cx,yradius + cy,-xradius * cospi4 + cx,yradius * sinpi4 + cy);
		this.target.curveTo(-xradius + cx,yradius * tanpi8 + cy,-xradius + cx,cy);
		this.target.curveTo(-xradius + cx,-yradius * tanpi8 + cy,-xradius * cospi4 + cx,-yradius * sinpi4 + cy);
		this.target.curveTo(-xradius * tanpi8 + cx,-yradius + cy,cx,-yradius + cy);
		this.target.curveTo(xradius * tanpi8 + cx,-yradius + cy,xradius * cospi4 + cx,-yradius * sinpi4 + cy);
		this.target.curveTo(xradius + cx,-yradius * tanpi8 + cy,xradius + cx,cy);
	}
	,circle: function(centerX,centerY,radius) {
		this.target.drawCircle(centerX,centerY,radius);
	}
	,roundRect: function(x,y,width,height,radius,trR,blR,brR) {
		if(brR == null) brR = -1;
		if(blR == null) blR = -1;
		if(trR == null) trR = -1;
		var tlR = radius;
		if(trR == -1) trR = radius;
		if(blR == -1) blR = radius;
		if(brR == -1) brR = radius;
		this.target.moveTo(x + blR,y + height);
		this.target.lineTo(x + width - brR,y + height);
		this.target.curveTo(x + width,y + height,x + width,y + height - blR);
		this.target.lineTo(x + width,y + trR);
		this.target.curveTo(x + width,y,x + width - trR,y);
		this.target.lineTo(x + tlR,y);
		this.target.curveTo(x,y,x,y + tlR);
		this.target.lineTo(x,y + height - blR);
		this.target.curveTo(x,y + height,x + blR,y + height);
	}
	,wedge: function(radius,x,y,angle) {
		this.target.moveTo(0,0);
		this.target.lineTo(radius,0);
		var nSeg = Std["int"](Math.floor(angle / 30));
		var pSeg = angle - nSeg * 30;
		var a = 0.268;
		var endx;
		var endy;
		var ax;
		var ay;
		var storeCount = 0.0;
		var _g = 0;
		while(_g < nSeg) {
			var i = _g++;
			endx = radius * Math.cos((i + 1) * 30 * (Math.PI / 180));
			endy = radius * Math.sin((i + 1) * 30 * (Math.PI / 180));
			ax = endx + radius * a * Math.cos(((i + 1) * 30 - 90) * (Math.PI / 180));
			ay = endy + radius * a * Math.sin(((i + 1) * 30 - 90) * (Math.PI / 180));
			this.target.curveTo(ax,ay,endx,endy);
			storeCount = i + 1;
		}
		if(pSeg > 0) {
			a = Math.tan(pSeg / 2 * (Math.PI / 180));
			endx = radius * Math.cos((storeCount * 30 + pSeg) * (Math.PI / 180));
			endy = radius * Math.sin((storeCount * 30 + pSeg) * (Math.PI / 180));
			ax = endx + radius * a * Math.cos((storeCount * 30 + pSeg - 90) * (Math.PI / 180));
			ay = endy + radius * a * Math.sin((storeCount * 30 + pSeg - 90) * (Math.PI / 180));
			this.target.curveTo(ax,ay,endx,endy);
		}
		this.target.lineTo(0,0);
	}
	,__class__: org.aswing.graphics.Graphics2D
};
org.aswing.graphics.IPen = function() { };
$hxClasses["org.aswing.graphics.IPen"] = org.aswing.graphics.IPen;
org.aswing.graphics.IPen.__name__ = ["org","aswing","graphics","IPen"];
org.aswing.graphics.IPen.prototype = {
	__class__: org.aswing.graphics.IPen
};
org.aswing.graphics.Pen = function(color,thickness,pixelHinting,scaleMode,caps,joints,miterLimit) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 1;
	this._color = color;
	this._thickness = thickness;
	this._pixelHinting = pixelHinting;
	this._scaleMode = scaleMode;
	this._caps = caps;
	this._joints = joints;
	this._miterLimit = miterLimit;
};
$hxClasses["org.aswing.graphics.Pen"] = org.aswing.graphics.Pen;
org.aswing.graphics.Pen.__name__ = ["org","aswing","graphics","Pen"];
org.aswing.graphics.Pen.__interfaces__ = [org.aswing.graphics.IPen];
org.aswing.graphics.Pen.prototype = {
	getColor: function() {
		return this._color;
	}
	,setColor: function(color) {
		this._color = color;
	}
	,getThickness: function() {
		return this._thickness;
	}
	,setThickness: function(thickness) {
		this._thickness = thickness;
	}
	,getPixelHinting: function() {
		return this._pixelHinting;
	}
	,setPixelHinting: function(pixelHinting) {
		this._pixelHinting = pixelHinting;
	}
	,getScaleMode: function() {
		return this._scaleMode;
	}
	,setScaleMode: function(scaleMode) {
		this._scaleMode = scaleMode;
	}
	,getCaps: function() {
		return this._caps;
	}
	,setCaps: function(caps) {
		this._caps = caps;
	}
	,getJoints: function() {
		return this._joints;
	}
	,setJoints: function(joints) {
		this._joints = joints;
	}
	,getMiterLimit: function() {
		return this._miterLimit;
	}
	,setMiterLimit: function(miterLimit) {
		this._miterLimit = miterLimit;
	}
	,setTo: function(target) {
		target.lineStyle(this._thickness,this._color.getRGB(),this._color.getAlpha(),this._pixelHinting,this._scaleMode,this._caps,this._joints,this._miterLimit);
	}
	,__class__: org.aswing.graphics.Pen
};
org.aswing.plaf.ASColorUIResource = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	org.aswing.ASColor.call(this,color,alpha);
};
$hxClasses["org.aswing.plaf.ASColorUIResource"] = org.aswing.plaf.ASColorUIResource;
org.aswing.plaf.ASColorUIResource.__name__ = ["org","aswing","plaf","ASColorUIResource"];
org.aswing.plaf.ASColorUIResource.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.ASColorUIResource.createResourceColor = function(color) {
	return new org.aswing.plaf.ASColorUIResource(color.getRGB(),color.getAlpha());
};
org.aswing.plaf.ASColorUIResource.__super__ = org.aswing.ASColor;
org.aswing.plaf.ASColorUIResource.prototype = $extend(org.aswing.ASColor.prototype,{
	__class__: org.aswing.plaf.ASColorUIResource
});
org.aswing.plaf.ASFontUIResource = function(name,size,bold,italic,underline,embedFontsOrAdvancedPros) {
	if(underline == null) underline = false;
	if(italic == null) italic = false;
	if(bold == null) bold = false;
	if(size == null) size = 11;
	if(name == null) name = "Tahoma";
	org.aswing.ASFont.call(this,name,size,bold,italic,underline,embedFontsOrAdvancedPros);
};
$hxClasses["org.aswing.plaf.ASFontUIResource"] = org.aswing.plaf.ASFontUIResource;
org.aswing.plaf.ASFontUIResource.__name__ = ["org","aswing","plaf","ASFontUIResource"];
org.aswing.plaf.ASFontUIResource.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.ASFontUIResource.createResourceFont = function(font) {
	return new org.aswing.plaf.ASFontUIResource(font.getName(),font.getSize(),font.isBold(),font.isItalic(),font.isUnderline(),font.getAdvancedProperties());
};
org.aswing.plaf.ASFontUIResource.__super__ = org.aswing.ASFont;
org.aswing.plaf.ASFontUIResource.prototype = $extend(org.aswing.ASFont.prototype,{
	__class__: org.aswing.plaf.ASFontUIResource
});
org.aswing.plaf.ComponentUI = function() { };
$hxClasses["org.aswing.plaf.ComponentUI"] = org.aswing.plaf.ComponentUI;
org.aswing.plaf.ComponentUI.__name__ = ["org","aswing","plaf","ComponentUI"];
org.aswing.plaf.ComponentUI.prototype = {
	__class__: org.aswing.plaf.ComponentUI
};
org.aswing.plaf.AdjusterUI = function() { };
$hxClasses["org.aswing.plaf.AdjusterUI"] = org.aswing.plaf.AdjusterUI;
org.aswing.plaf.AdjusterUI.__name__ = ["org","aswing","plaf","AdjusterUI"];
org.aswing.plaf.AdjusterUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.AdjusterUI.prototype = {
	__class__: org.aswing.plaf.AdjusterUI
};
org.aswing.plaf.ArrayUIResource = function() { };
$hxClasses["org.aswing.plaf.ArrayUIResource"] = org.aswing.plaf.ArrayUIResource;
org.aswing.plaf.ArrayUIResource.__name__ = ["org","aswing","plaf","ArrayUIResource"];
org.aswing.plaf.BaseComponentUI = function() {
};
$hxClasses["org.aswing.plaf.BaseComponentUI"] = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.BaseComponentUI.__name__ = ["org","aswing","plaf","BaseComponentUI"];
org.aswing.plaf.BaseComponentUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.BaseComponentUI.prototype = {
	installUI: function(c) {
		throw new org.aswing.error.ImpMissError();
	}
	,uninstallUI: function(c) {
		throw new org.aswing.error.ImpMissError();
	}
	,refreshStyleProperties: function() {
		throw new org.aswing.error.ImpMissError();
	}
	,putDefault: function(key,value) {
		if(this.defaults == null) this.defaults = new org.aswing.UIDefaults();
		this.defaults.set(key,value);
	}
	,getDefault: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.get(key); else return org.aswing.UIManager.get(key);
	}
	,paint: function(c,g,b) {
		this.paintBackGround(c,g,b);
	}
	,paintFocus: function(c,g,b) {
		if(g != null) {
			g.drawRectangle(new org.aswing.graphics.Pen(this.getDefaultFocusColorInner(),1),b.x + 0.5,b.y + 0.5,b.width - 1,b.height - 1);
			g.drawRectangle(new org.aswing.graphics.Pen(this.getDefaultFocusColorOutter(),1),b.x + 1.5,b.y + 1.5,b.width - 3,b.height - 3);
		}
	}
	,getDefaultFocusColorInner: function() {
		return this.getColor("focusInner");
	}
	,getDefaultFocusColorOutter: function() {
		return this.getColor("focusOutter");
	}
	,paintBackGround: function(c,g,b) {
		if(c.isOpaque()) g.fillRectangle(new org.aswing.graphics.SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height);
	}
	,getInternalFocusObject: function(c) {
		return c;
	}
	,getMaximumSize: function(c) {
		return null;
	}
	,getMinimumSize: function(c) {
		return null;
	}
	,getPreferredSize: function(c) {
		return null;
	}
	,containsDefaultsKey: function(key) {
		return this.defaults != null && this.defaults.exists(key);
	}
	,containsKey: function(key) {
		return this.containsDefaultsKey(key) || org.aswing.UIManager.containsKey(key);
	}
	,getBoolean: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getBoolean(key);
		return org.aswing.UIManager.getBoolean(key);
	}
	,getNumber: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getNumber(key);
		return org.aswing.UIManager.getNumber(key);
	}
	,getInt: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getInt(key);
		return org.aswing.UIManager.getInt(key);
	}
	,getUint: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getUint(key);
		return org.aswing.UIManager.getUint(key);
	}
	,getString: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getString(key);
		return org.aswing.UIManager.getString(key);
	}
	,getBorder: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getBorder(key);
		return org.aswing.UIManager.getBorder(key);
	}
	,getIcon: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getIcon(key);
		return org.aswing.UIManager.getIcon(key);
	}
	,getGroundDecorator: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getGroundDecorator(key);
		return org.aswing.UIManager.getGroundDecorator(key);
	}
	,getColor: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getColor(key);
		return org.aswing.UIManager.getColor(key);
	}
	,getFont: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getFont(key);
		return org.aswing.UIManager.getFont(key);
	}
	,getInsets: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getInsets(key);
		return org.aswing.UIManager.getInsets(key);
	}
	,getStyleTune: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getStyleTune(key);
		return org.aswing.UIManager.getStyleTune(key);
	}
	,getInstance: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getInstance(key);
		return org.aswing.UIManager.getInstance(key);
	}
	,getClass: function(key) {
		if(this.containsDefaultsKey(key)) return this.defaults.getConstructor(key);
		return org.aswing.UIManager.getClass(key);
	}
	,__class__: org.aswing.plaf.BaseComponentUI
};
org.aswing.plaf.ComboBoxUI = function() { };
$hxClasses["org.aswing.plaf.ComboBoxUI"] = org.aswing.plaf.ComboBoxUI;
org.aswing.plaf.ComboBoxUI.__name__ = ["org","aswing","plaf","ComboBoxUI"];
org.aswing.plaf.ComboBoxUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.ComboBoxUI.prototype = {
	__class__: org.aswing.plaf.ComboBoxUI
};
org.aswing.plaf.UIStyleTune = function(cg,bo,bg,sa,r,ma) {
	if(r == null) r = 0;
	if(sa == null) sa = 0.2;
	if(bg == null) bg = 0.35;
	if(bo == null) bo = 0.15;
	if(cg == null) cg = 0.2;
	org.aswing.StyleTune.call(this,cg,bo,bg,sa,r,ma);
};
$hxClasses["org.aswing.plaf.UIStyleTune"] = org.aswing.plaf.UIStyleTune;
org.aswing.plaf.UIStyleTune.__name__ = ["org","aswing","plaf","UIStyleTune"];
org.aswing.plaf.UIStyleTune.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.UIStyleTune.__super__ = org.aswing.StyleTune;
org.aswing.plaf.UIStyleTune.prototype = $extend(org.aswing.StyleTune.prototype,{
	__class__: org.aswing.plaf.UIStyleTune
});
org.aswing.plaf.DefaultEmptyDecoraterResource = function() {
};
$hxClasses["org.aswing.plaf.DefaultEmptyDecoraterResource"] = org.aswing.plaf.DefaultEmptyDecoraterResource;
org.aswing.plaf.DefaultEmptyDecoraterResource.__name__ = ["org","aswing","plaf","DefaultEmptyDecoraterResource"];
org.aswing.plaf.DefaultEmptyDecoraterResource.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator,org.aswing.Border,org.aswing.Icon];
org.aswing.plaf.DefaultEmptyDecoraterResource.prototype = {
	getDisplay: function(c) {
		return null;
	}
	,getIconWidth: function(c) {
		return 0;
	}
	,getIconHeight: function(c) {
		return 0;
	}
	,updateIcon: function(com,g,x,y) {
	}
	,updateBorder: function(com,g,bounds) {
	}
	,getBorderInsets: function(com,bounds) {
		return new org.aswing.Insets(0,0,0,0);
	}
	,updateDecorator: function(com,g,bounds) {
	}
	,__class__: org.aswing.plaf.DefaultEmptyDecoraterResource
};
org.aswing.plaf.EmptyLayoutUIResourse = function() {
	org.aswing.EmptyLayout.call(this);
};
$hxClasses["org.aswing.plaf.EmptyLayoutUIResourse"] = org.aswing.plaf.EmptyLayoutUIResourse;
org.aswing.plaf.EmptyLayoutUIResourse.__name__ = ["org","aswing","plaf","EmptyLayoutUIResourse"];
org.aswing.plaf.EmptyLayoutUIResourse.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.EmptyLayoutUIResourse.__super__ = org.aswing.EmptyLayout;
org.aswing.plaf.EmptyLayoutUIResourse.prototype = $extend(org.aswing.EmptyLayout.prototype,{
	__class__: org.aswing.plaf.EmptyLayoutUIResourse
});
org.aswing.plaf.InsetsUIResource = function(top,left,bottom,right) {
	if(right == null) right = 0;
	if(bottom == null) bottom = 0;
	if(left == null) left = 0;
	if(top == null) top = 0;
	org.aswing.Insets.call(this,top,left,bottom,right);
};
$hxClasses["org.aswing.plaf.InsetsUIResource"] = org.aswing.plaf.InsetsUIResource;
org.aswing.plaf.InsetsUIResource.__name__ = ["org","aswing","plaf","InsetsUIResource"];
org.aswing.plaf.InsetsUIResource.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.InsetsUIResource.__super__ = org.aswing.Insets;
org.aswing.plaf.InsetsUIResource.prototype = $extend(org.aswing.Insets.prototype,{
	createInsetsResource: function(insets) {
		return new org.aswing.plaf.InsetsUIResource(insets.top,insets.left,insets.bottom,insets.right);
	}
	,__class__: org.aswing.plaf.InsetsUIResource
});
org.aswing.plaf.EmptyUIResources = function() { };
$hxClasses["org.aswing.plaf.EmptyUIResources"] = org.aswing.plaf.EmptyUIResources;
org.aswing.plaf.EmptyUIResources.__name__ = ["org","aswing","plaf","EmptyUIResources"];
org.aswing.plaf.FrameUI = function() { };
$hxClasses["org.aswing.plaf.FrameUI"] = org.aswing.plaf.FrameUI;
org.aswing.plaf.FrameUI.__name__ = ["org","aswing","plaf","FrameUI"];
org.aswing.plaf.FrameUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.FrameUI.prototype = {
	__class__: org.aswing.plaf.FrameUI
};
org.aswing.plaf.MenuElementUI = function() { };
$hxClasses["org.aswing.plaf.MenuElementUI"] = org.aswing.plaf.MenuElementUI;
org.aswing.plaf.MenuElementUI.__name__ = ["org","aswing","plaf","MenuElementUI"];
org.aswing.plaf.MenuElementUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.MenuElementUI.prototype = {
	__class__: org.aswing.plaf.MenuElementUI
};
org.aswing.plaf.SliderUI = function() { };
$hxClasses["org.aswing.plaf.SliderUI"] = org.aswing.plaf.SliderUI;
org.aswing.plaf.SliderUI.__name__ = ["org","aswing","plaf","SliderUI"];
org.aswing.plaf.SliderUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.SliderUI.prototype = {
	__class__: org.aswing.plaf.SliderUI
};
org.aswing.plaf.SplitPaneUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.SplitPaneUI"] = org.aswing.plaf.SplitPaneUI;
org.aswing.plaf.SplitPaneUI.__name__ = ["org","aswing","plaf","SplitPaneUI"];
org.aswing.plaf.SplitPaneUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.SplitPaneUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	resetToPreferredSizes: function(jc) {
		console.log("Subclass need to override this method!");
	}
	,__class__: org.aswing.plaf.SplitPaneUI
});
org.aswing.plaf.TableUI = function() { };
$hxClasses["org.aswing.plaf.TableUI"] = org.aswing.plaf.TableUI;
org.aswing.plaf.TableUI.__name__ = ["org","aswing","plaf","TableUI"];
org.aswing.plaf.TableUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.TableUI.prototype = {
	__class__: org.aswing.plaf.TableUI
};
org.aswing.plaf.TreeUI = function() { };
$hxClasses["org.aswing.plaf.TreeUI"] = org.aswing.plaf.TreeUI;
org.aswing.plaf.TreeUI.__name__ = ["org","aswing","plaf","TreeUI"];
org.aswing.plaf.TreeUI.__interfaces__ = [org.aswing.plaf.ComponentUI];
org.aswing.plaf.TreeUI.prototype = {
	__class__: org.aswing.plaf.TreeUI
};
org.aswing.plaf.basic = {};
org.aswing.plaf.basic.BasicAccordionUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicAccordionUI"] = org.aswing.plaf.basic.BasicAccordionUI;
org.aswing.plaf.basic.BasicAccordionUI.__name__ = ["org","aswing","plaf","basic","BasicAccordionUI"];
org.aswing.plaf.basic.BasicAccordionUI.__interfaces__ = [org.aswing.LayoutManager];
org.aswing.plaf.basic.BasicAccordionUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicAccordionUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		this.headers = new Array();
		this.destSize = new org.aswing.geom.IntDimension();
		if(js.Boot.__instanceof(c,org.aswing.JAccordion)) this.accordion = c; else this.accordion = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JAccordion)) this.accordion = c; else this.accordion = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Accordion.";
	}
	,installDefaults: function() {
		this.accordion.setLayout(this);
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.accordion,pp);
		org.aswing.LookAndFeel.installColorsAndFont(this.accordion,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.accordion,pp);
		this.motionSpeed = this.getInt(pp + "motionSpeed");
		if(this.motionSpeed <= 0 || this.motionSpeed == 0) this.motionSpeed = org.aswing.plaf.basic.BasicAccordionUI.MOTION_SPEED;
		var tabMargin = this.getInsets(pp + "tabMargin");
		if(tabMargin == null) tabMargin = new org.aswing.plaf.InsetsUIResource(1,1,1,1);
		var i = this.accordion.getMargin();
		if(i == null || js.Boot.__instanceof(i,org.aswing.plaf.UIResource)) this.accordion.setMargin(tabMargin);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.accordion);
	}
	,installComponents: function() {
		this.headerContainer = new openfl.display.Sprite();
		this.accordion.addChild(this.headerContainer);
		this.synTabs();
		this.synHeaderProperties();
	}
	,uninstallComponents: function() {
		var _g1 = 0;
		var _g = this.headers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var header = this.getHeader(i);
			this.headerContainer.removeChild(header.getTabComponent());
			header.getTabComponent().removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__tabClick));
		}
		this.headers.slice(0);
		this.accordion.removeChild(this.headerContainer);
	}
	,installListeners: function() {
		this.accordion.addStateListener($bind(this,this.__onSelectionChanged));
		this.accordion.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.motionTimer = new org.aswing.util.Timer(40);
		this.motionTimer.addEventListener("act",$bind(this,this.__onMotion));
	}
	,uninstallListeners: function() {
		this.accordion.removeStateListener($bind(this,this.__onSelectionChanged));
		this.accordion.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.motionTimer.stop();
		this.motionTimer = null;
	}
	,paintFocus: function(c,g,b) {
		var header = this.getSelectedHeader();
		if(header != null) header.getTabComponent().paintFocusRect(true); else org.aswing.plaf.BaseComponentUI.prototype.paintFocus.call(this,c,g,b);
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
	}
	,createNewHeader: function() {
		var header = org.aswing.AsWingUtils["as"](this.getInstance(this.getPropertyPrefix() + "header"),org.aswing.plaf.basic.tabbedpane.Tab);
		if(header == null) header = new org.aswing.plaf.basic.accordion.BasicAccordionHeader();
		header.initTab(this.accordion);
		header.getTabComponent().setFocusable(false);
		return header;
	}
	,getHeader: function(i) {
		return org.aswing.AsWingUtils["as"](this.headers[i],org.aswing.plaf.basic.tabbedpane.Tab);
	}
	,synTabs: function() {
		var comCount = this.accordion.getComponentCount();
		if(comCount != this.headers.length) {
			var i;
			var header;
			if(comCount > this.headers.length) {
				var _g = this.headers.length;
				while(_g < comCount) {
					var i1 = _g++;
					header = this.createNewHeader();
					header.setTextAndIcon(this.accordion.getTitleAt(i1),this.accordion.getIconAt(i1));
					this.setHeaderProperties(header);
					header.getTabComponent().setToolTipText(this.accordion.getTipAt(i1));
					header.getTabComponent().addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__tabClick));
					this.headerContainer.addChild(header.getTabComponent());
					this.headers.push(header);
				}
			} else {
				var _g1 = 0;
				var _g2 = this.headers.length - comCount;
				while(_g1 < _g2) {
					var i2 = _g1++;
					header = org.aswing.AsWingUtils["as"](this.headers.pop(),org.aswing.plaf.basic.tabbedpane.Tab);
					header.getTabComponent().removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__tabClick));
					this.headerContainer.removeChild(header.getTabComponent());
				}
			}
		}
	}
	,synHeaderProperties: function() {
		var _g1 = 0;
		var _g = this.headers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var header = this.getHeader(i);
			header.setTextAndIcon(this.accordion.getTitleAt(i),this.accordion.getIconAt(i));
			this.setHeaderProperties(header);
			header.getTabComponent().setUIElement(true);
			header.getTabComponent().setEnabled(this.accordion.isEnabledAt(i));
			header.getTabComponent().setVisible(this.accordion.isVisibleAt(i));
			header.getTabComponent().setToolTipText(this.accordion.getTipAt(i));
		}
	}
	,setHeaderProperties: function(header) {
		header.setHorizontalAlignment(this.accordion.getHorizontalAlignment());
		header.setHorizontalTextPosition(this.accordion.getHorizontalTextPosition());
		header.setIconTextGap(this.accordion.getIconTextGap());
		header.setMargin(this.accordion.getMargin());
		header.setVerticalAlignment(this.accordion.getVerticalAlignment());
		header.setVerticalTextPosition(this.accordion.getVerticalTextPosition());
		header.setFont(this.accordion.getFont());
		header.setForeground(this.accordion.getForeground());
	}
	,ensureHeadersOnTopDepths: function() {
		this.accordion.bringToTop(this.headerContainer);
	}
	,getSelectedHeader: function() {
		if(this.accordion.getSelectedIndex() >= 0) return this.getHeader(this.accordion.getSelectedIndex()); else return null;
	}
	,indexOfHeaderComponent: function(tab) {
		var _g1 = 0;
		var _g = this.headers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.getHeader(i).getTabComponent() == tab) return i;
		}
		return -1;
	}
	,__tabClick: function(e) {
		this.accordion.setSelectedIndex(this.indexOfHeaderComponent(org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.Component)));
	}
	,__onSelectionChanged: function(e) {
		this.accordion.revalidate();
		this.accordion.repaint();
	}
	,__onKeyDown: function(e) {
		if(this.headers.length > 0) {
			var n = this.accordion.getComponentCount();
			var code = e.keyCode;
			var index;
			if(code == org.aswing.AWKeyboard.DOWN) {
				this.setTraversingTrue();
				index = this.accordion.getSelectedIndex();
				index++;
				while(index < n && (!this.accordion.isEnabledAt(index) || !this.accordion.isVisibleAt(index))) index++;
				if(index >= n) return;
				this.accordion.setSelectedIndex(index);
			} else if(code == org.aswing.AWKeyboard.UP) {
				this.setTraversingTrue();
				index = this.accordion.getSelectedIndex();
				index--;
				while(index >= 0 && (!this.accordion.isEnabledAt(index) || !this.accordion.isVisibleAt(index))) index--;
				if(index < 0) return;
				this.accordion.setSelectedIndex(index);
			}
		}
	}
	,setTraversingTrue: function() {
		var fm = org.aswing.FocusManager.getManager(this.accordion.get_stage());
		if(fm != null) fm.setTraversing(true);
	}
	,__onMotion: function(e) {
		var isFinished = true;
		var n = this.headerDestinations.length;
		var selected = this.accordion.getSelectedIndex();
		var i = 0;
		var child;
		var _g = 0;
		while(_g < n) {
			var i1 = _g++;
			var header = this.getHeader(i1);
			var tab = header.getTabComponent();
			var curY = tab.getY();
			var desY = this.headerDestinations[i1];
			var toY;
			if(Math.abs(desY - curY) <= this.motionSpeed) toY = desY; else {
				if(desY > curY) toY = curY + this.motionSpeed; else toY = curY - this.motionSpeed;
				isFinished = false;
			}
			tab.setLocationXY(tab.getX(),toY);
			tab.validate();
			child = this.accordion.getComponent(i1);
			child.setLocationXY(child.getX(),toY + tab.getHeight());
		}
		this.adjustClipSizes();
		if(isFinished) {
			this.motionTimer.stop();
			var _g1 = 0;
			while(_g1 < n) {
				var i2 = _g1++;
				child = this.accordion.getComponent(i2);
				if(selected == i2) child.setVisible(true); else child.setVisible(false);
			}
		}
		var _g2 = 0;
		while(_g2 < n) {
			var i3 = _g2++;
			child = this.accordion.getComponent(i3);
			child.validate();
		}
	}
	,adjustClipSizes: function() {
		var n = this.headerDestinations.length;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var child = this.accordion.getComponent(i);
			var orderY = this.childrenOrderYs[i];
			if(child.isVisible()) child.setClipSize(new org.aswing.geom.IntDimension(this.destSize.width,this.destSize.height - (child.getY() - orderY)));
		}
	}
	,addLayoutComponent: function(comp,constraints) {
		this.synTabs();
	}
	,removeLayoutComponent: function(comp) {
		this.synTabs();
	}
	,invalidateLayout: function(target) {
	}
	,layoutContainer: function(target) {
		this.synHeaderProperties();
		var insets = this.accordion.getInsets();
		var i = 0;
		var x = insets.left;
		var y = insets.top;
		var w = this.accordion.getWidth() - x - insets.right;
		var h = this.accordion.getHeight() - y - insets.bottom;
		var header;
		var tab;
		var size;
		var count = this.accordion.getComponentCount();
		var selected = this.accordion.getSelectedIndex();
		if(selected < 0) {
			if(count > 0) this.accordion.setSelectedIndex(0);
			return;
		}
		this.headerDestinations = new Array();
		this.childrenOrderYs = new Array();
		var vX;
		var vY;
		var vWidth;
		var vHeight;
		vHeight = h;
		vWidth = w;
		vX = x;
		var _g1 = 0;
		var _g = selected + 1;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(!this.accordion.isVisibleAt(i1)) continue;
			header = this.getHeader(i1);
			tab = header.getTabComponent();
			size = tab.getPreferredSize();
			tab.setSizeWH(w,size.height);
			tab.setLocationXY(x,tab.getY());
			this.accordion.getComponent(i1).setLocationXY(x,tab.getY() + size.height);
			this.headerDestinations[i1] = y;
			y += size.height;
			this.childrenOrderYs[i1] = y;
			vHeight -= size.height;
			if(i1 == selected) {
				header.setSelected(true);
				this.accordion.getComponent(i1).setVisible(true);
			} else header.setSelected(false);
			tab.validate();
		}
		vY = y;
		var _g2 = selected + 1;
		while(_g2 < count) {
			var i2 = _g2++;
			if(!this.accordion.isVisibleAt(i2)) continue;
			header = this.getHeader(i2);
			tab = header.getTabComponent();
			y += tab.getPreferredSize().height;
			this.childrenOrderYs[i2] = y;
		}
		y = this.accordion.getHeight() - insets.bottom;
		i = count - 1;
		while(i > selected) {
			if(!this.accordion.isVisibleAt(i)) continue;
			header = this.getHeader(i);
			tab = header.getTabComponent();
			size = tab.getPreferredSize();
			y -= size.height;
			this.headerDestinations[i] = y;
			tab.setSizeWH(w,size.height);
			tab.setLocationXY(x,tab.getY());
			this.accordion.getComponent(i).setLocationXY(x,tab.getY() + size.height);
			header.setSelected(false);
			vHeight -= size.height;
			tab.validate();
			i--;
		}
		this.destSize.setSizeWH(vWidth,vHeight);
		var _g3 = 0;
		while(_g3 < count) {
			var i3 = _g3++;
			if(!this.accordion.isVisibleAt(i3)) continue;
			if(this.accordion.getComponent(i3).isVisible()) this.accordion.getComponent(i3).setSize(this.destSize);
		}
		this.motionTimer.start();
		this.__onMotion(null);
		this.ensureHeadersOnTopDepths();
	}
	,preferredLayoutSize: function(target) {
		if(target == this.accordion) {
			this.synHeaderProperties();
			var insets = this.accordion.getInsets();
			var w = 0;
			var h = 0;
			var i = 0;
			var size;
			var _g1 = 0;
			var _g = this.accordion.getComponentCount();
			while(_g1 < _g) {
				var i1 = _g1++;
				size = this.accordion.getComponent(i1).getPreferredSize();
				w = Std["int"](Math.max(w,size.width));
				h = Std["int"](Math.max(h,size.height));
			}
			var _g11 = 0;
			var _g2 = this.accordion.getComponentCount();
			while(_g11 < _g2) {
				var i2 = _g11++;
				size = this.getHeader(i2).getTabComponent().getPreferredSize();
				w = Std["int"](Math.max(w,size.width));
				h += size.height;
			}
			return insets.getOutsideSize(new org.aswing.geom.IntDimension(w,h));
		}
		return null;
	}
	,minimumLayoutSize: function(target) {
		if(target == this.accordion) {
			this.synHeaderProperties();
			var insets = this.accordion.getInsets();
			var w = 0;
			var h = 0;
			var i = 0;
			var size;
			var _g1 = 0;
			var _g = this.accordion.getComponentCount();
			while(_g1 < _g) {
				var i1 = _g1++;
				size = this.accordion.getComponent(i1).getMinimumSize();
				w = Std["int"](Math.max(w,size.width));
				h = Std["int"](Math.max(h,size.height));
			}
			var _g11 = 0;
			var _g2 = this.accordion.getComponentCount();
			while(_g11 < _g2) {
				var i2 = _g11++;
				size = this.getHeader(i2).getTabComponent().getMinimumSize();
				w = Std["int"](Math.max(w,size.width));
				h += size.height;
			}
			return insets.getOutsideSize(new org.aswing.geom.IntDimension(w,h));
		}
		return null;
	}
	,maximumLayoutSize: function(target) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,getMaximumSize: function(c) {
		return this.maximumLayoutSize(this.accordion);
	}
	,getMinimumSize: function(c) {
		return this.minimumLayoutSize(this.accordion);
	}
	,getPreferredSize: function(c) {
		return this.preferredLayoutSize(this.accordion);
	}
	,__class__: org.aswing.plaf.basic.BasicAccordionUI
});
org.aswing.plaf.basic.BasicAdjusterUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
	this.inputText = new org.aswing.JTextField("",3);
	this.inputText.setFocusable(false);
	this.popupSlider = new org.aswing.JSlider();
	this.popupSlider.setFocusable(false);
	this.popupSlider.setOpaque(false);
};
$hxClasses["org.aswing.plaf.basic.BasicAdjusterUI"] = org.aswing.plaf.basic.BasicAdjusterUI;
org.aswing.plaf.basic.BasicAdjusterUI.__name__ = ["org","aswing","plaf","basic","BasicAdjusterUI"];
org.aswing.plaf.basic.BasicAdjusterUI.__interfaces__ = [org.aswing.plaf.AdjusterUI];
org.aswing.plaf.basic.BasicAdjusterUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicAdjusterUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPopupSlider: function() {
		return this.popupSlider;
	}
	,getInputText: function() {
		return this.inputText;
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JAdjuster)) this.adjuster = c; else this.adjuster = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JAdjuster)) this.adjuster = c; else this.adjuster = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Adjuster.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.adjuster,pp);
		org.aswing.LookAndFeel.installColorsAndFont(this.adjuster,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.adjuster,pp);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.adjuster);
	}
	,installComponents: function() {
		this.initInputText();
		this.initPopupSlider();
		this.arrowButton = this.createArrowButton();
		this.arrowButton.setUIElement(true);
		this.popupSlider.setUIElement(true);
		this.popupSliderUI = this.createPopupSliderUI();
		this.popupSlider.setUI(this.popupSliderUI);
		this.popupSlider.setModel(this.adjuster.getModel());
		this.adjuster.addChild(this.inputText);
		this.adjuster.addChild(this.arrowButton);
		this.inputText.getTextField().addEventListener(openfl.events.Event.CHANGE,$bind(this,this.__textChanged));
		this.inputText.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.arrowButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onArrowButtonPressed));
		this.arrowButton.addEventListener("release",$bind(this,this.__onArrowButtonReleased));
	}
	,uninstallComponents: function() {
		this.inputText.getTextField().removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.__textChanged));
		this.inputText.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.arrowButton.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onArrowButtonPressed));
		this.arrowButton.removeEventListener("release",$bind(this,this.__onArrowButtonReleased));
		this.adjuster.removeChild(this.arrowButton);
		this.adjuster.removeChild(this.inputText);
		if(this.popup != null && this.popup.isVisible()) this.popup.dispose();
	}
	,installListeners: function() {
		this.adjuster.addStateListener($bind(this,this.__onValueChanged));
		this.adjuster.addEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.adjuster.addEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.adjuster.addEventListener("focusLost",$bind(this,this.__onFocusLost));
	}
	,uninstallListeners: function() {
		this.adjuster.removeStateListener($bind(this,this.__onValueChanged));
		this.adjuster.removeEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.adjuster.removeEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.adjuster.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.fillInputTextWithCurrentValue();
		this.layoutAdjuster();
		this.getInputText().setEditable(this.adjuster.isEditable());
		this.getInputText().setEnabled(this.adjuster.isEnabled());
		this.arrowButton.setEnabled(this.adjuster.isEnabled());
		this.inputText.setFont(this.adjuster.getFont());
		this.inputText.setForeground(this.adjuster.getForeground());
	}
	,paintBackGround: function(c,g,b) {
	}
	,getInternalFocusObject: function(c) {
		return this.inputText.getTextField();
	}
	,initInputText: function() {
		this.inputText.setForeground(null);
		this.inputText.setColumns(this.adjuster.getColumns());
		this.inputText.setBackgroundDecorator(null);
		this.inputText.setOpaque(false);
		this.inputText.setBorder(null);
		this.inputText.setFont(this.adjuster.getFont());
	}
	,initPopupSlider: function() {
		this.popupSlider.setOrientation(this.adjuster.getOrientation());
	}
	,createArrowButton: function() {
		var btn = new org.aswing.JButton("",this.createArrowIcon());
		btn.setFocusable(false);
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org.aswing.Insets());
		btn.setBorder(null);
		btn.setMideground(null);
		btn.setStyleTune(null);
		btn.setForeground(null);
		btn.setBackground(null);
		btn.setFont(null);
		return btn;
	}
	,createPopupSliderUI: function() {
		return new org.aswing.plaf.basic.adjuster.PopupSliderUI();
	}
	,createArrowIcon: function() {
		return new org.aswing.plaf.basic.icon.ArrowIcon(Math.PI / 2,16);
	}
	,getPopup: function() {
		if(this.popup == null) {
			this.popup = new org.aswing.JPopup();
			this.popup.append(this.popupSlider,"Center");
			this.popup.set_filters([new openfl.filters.DropShadowFilter(4,45,0,0.3)]);
		}
		return this.popup;
	}
	,fillInputTextWithCurrentValue: function() {
		this.inputText.setText(this.getShouldFilledText());
	}
	,getShouldFilledText: function() {
		var value = this.adjuster.getValue();
		var text = (this.adjuster.getValueTranslator())(value);
		return text;
	}
	,getTextButtonGap: function() {
		return 1;
	}
	,layoutAdjuster: function() {
		var td = this.adjuster.getSize();
		var insets = this.adjuster.getInsets();
		var top = insets.top;
		var left = insets.left;
		var right = td.width - insets.right;
		var gap = this.getTextButtonGap();
		var height = td.height - insets.top - insets.bottom;
		var buttonSize = this.arrowButton.getPreferredSize();
		this.arrowButton.setSizeWH(buttonSize.width,height);
		this.arrowButton.setLocationXY(right - buttonSize.width,top);
		this.inputText.setLocationXY(left,top);
		this.inputText.setSizeWH(td.width - insets.left - insets.right - buttonSize.width - gap,height);
	}
	,getPreferredSize: function(c) {
		var insets = this.adjuster.getInsets();
		var textSize = this.inputText.getPreferredSize();
		var btnSize = this.arrowButton.getPreferredSize();
		var size = new org.aswing.geom.IntDimension(textSize.width + this.getTextButtonGap() + btnSize.width,Std["int"](Math.max(textSize.height,btnSize.height)));
		return insets.getOutsideSize(size);
	}
	,getMinimumSize: function(c) {
		return this.adjuster.getInsets().getOutsideSize(this.arrowButton.getPreferredSize());
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,__onValueChanged: function(e) {
		if(this.textInputing != true) this.fillInputTextWithCurrentValue();
	}
	,__onInputTextMouseWheel: function(e) {
		this.adjuster.setValue(this.adjuster.getValue() + e.delta * this.getUnitIncrement());
	}
	,__textChanged: function(e) {
		this.textInputing = true;
		var text = this.inputText.getText();
		var value = Std["int"]((this.adjuster.getValueParser())(text));
		this.adjuster.setValue(value);
		this.textInputing = false;
	}
	,__inputTextAction: function(fireActOnlyIfChanged) {
		if(fireActOnlyIfChanged == null) fireActOnlyIfChanged = false;
		var text = this.inputText.getText();
		var value = Std["int"]((this.adjuster.getValueParser())(text));
		this.adjuster.setValue(value);
		this.fillInputTextWithCurrentValue();
		if(fireActOnlyIfChanged != true) this.fireActionEvent(); else if(value != this.startEditingValue) this.fireActionEvent();
	}
	,fireActionEvent: function() {
		this.startEditingValue = this.adjuster.getValue();
		this.adjuster.dispatchEvent(new org.aswing.event.AWEvent("act"));
	}
	,__onFocusGained: function(e) {
		this.startEditingValue = this.adjuster.getValue();
	}
	,__onFocusLost: function(e) {
		this.__inputTextAction(true);
	}
	,__onInputTextKeyDown: function(e) {
		var code = e.keyCode;
		var unit = this.getUnitIncrement();
		var block;
		if(this.popupSlider.getMajorTickSpacing() > 0) block = this.popupSlider.getMajorTickSpacing(); else block = unit * 10;
		var delta = 0;
		if(code == org.aswing.AWKeyboard.ENTER) {
			this.__inputTextAction(false);
			return;
		}
		if(code == org.aswing.AWKeyboard.UP) delta = unit; else if(code == org.aswing.AWKeyboard.DOWN) delta = -unit; else if(code == org.aswing.AWKeyboard.PAGE_UP) delta = block; else if(code == org.aswing.AWKeyboard.PAGE_DOWN) delta = -block; else if(code == org.aswing.AWKeyboard.HOME) {
			this.adjuster.setValue(this.adjuster.getMinimum());
			return;
		} else if(code == org.aswing.AWKeyboard.END) {
			this.adjuster.setValue(this.adjuster.getMaximum() - this.adjuster.getExtent());
			return;
		}
		this.adjuster.setValue(this.adjuster.getValue() + delta);
	}
	,__onArrowButtonPressed: function(e) {
		var popupWindow = this.getPopup();
		if(popupWindow.isOnStage()) popupWindow.dispose();
		popupWindow.changeOwner(org.aswing.AsWingUtils.getOwnerAncestor(this.adjuster));
		popupWindow.pack();
		popupWindow.show();
		var max = this.adjuster.getMaximum();
		var min = this.adjuster.getMinimum();
		var pw = popupWindow.getWidth();
		var ph = popupWindow.getHeight();
		var sw = this.getSliderTrackWidth();
		var sh = this.getSliderTrackHeight();
		var insets = popupWindow.getInsets();
		var sliderInsets = this.popupSliderUI.getTrackMargin();
		insets.top += sliderInsets.top;
		insets.left += sliderInsets.left;
		insets.bottom += sliderInsets.bottom;
		insets.right += sliderInsets.right;
		var mouseP = this.adjuster.getMousePosition();
		var windowP = new org.aswing.geom.IntPoint(mouseP.x - pw / 2 | 0,mouseP.y - ph / 2 | 0);
		var value = this.adjuster.getValue();
		var valueL;
		if(this.adjuster.getOrientation() == 1) {
			valueL = (value - min) / (max - min) * sh;
			windowP.y = mouseP.y - (sh - valueL) - insets.top | 0;
		} else {
			valueL = (value - min) / (max - min) * sw;
			windowP.x = mouseP.x - valueL - insets.left | 0;
			windowP.y += Std["int"](this.adjuster.getHeight() / 4);
		}
		var agp = this.adjuster.getGlobalLocation();
		agp.move(windowP.x,windowP.y);
		popupWindow.setLocation(agp);
		this.startMousePoint = this.adjuster.getMousePosition();
		this.startValue = this.adjuster.getValue();
		if(org.aswing.AsWingManager.getStage() != null) {
			org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoveOnSlider),false,0,false);
			this.adjuster.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__onMouseMoveOnSliderRemovedFromStage),false,0,false);
		}
	}
	,__onMouseMoveOnSliderRemovedFromStage: function(e) {
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoveOnSlider));
		this.adjuster.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__onMouseMoveOnSliderRemovedFromStage));
	}
	,__onArrowButtonReleased: function(e) {
		if(this.adjuster.get_stage() != null) this.__onMouseMoveOnSliderRemovedFromStage(null);
		this.popup.dispose();
		this.fireActionEvent();
	}
	,__onMouseMoveOnSlider: function(e) {
		var delta = 0;
		var valueDelta = 0;
		var range = this.adjuster.getMaximum() - this.adjuster.getMinimum();
		var p = this.adjuster.getMousePosition();
		if(this.adjuster.getOrientation() == 1) {
			delta = -p.y + this.startMousePoint.y;
			valueDelta = delta / this.getSliderTrackHeight() * range;
		} else {
			delta = p.x - this.startMousePoint.x;
			valueDelta = delta / this.getSliderTrackWidth() * range;
		}
		this.adjuster.setValue(this.startValue + valueDelta | 0);
		e.updateAfterEvent();
	}
	,getUnitIncrement: function() {
		var unit = 0;
		if(this.popupSlider.getMinorTickSpacing() > 0) unit = this.popupSlider.getMinorTickSpacing(); else if(this.popupSlider.getMajorTickSpacing() > 0) unit = this.popupSlider.getMajorTickSpacing(); else {
			var range = this.popupSlider.getMaximum() - this.popupSlider.getMinimum();
			if(range > 2) unit = Std["int"](Math.max(1,Math.round(range / 500))); else unit = range / 100 | 0;
		}
		return unit;
	}
	,getSliderTrackWidth: function() {
		var sliderInsets = this.popupSliderUI.getTrackMargin();
		var w = this.popupSlider.getWidth();
		if(w == 0) w = this.popupSlider.getPreferredWidth();
		return w - sliderInsets.left - sliderInsets.right;
	}
	,getSliderTrackHeight: function() {
		var sliderInsets = this.popupSliderUI.getTrackMargin();
		var h = this.popupSlider.getHeight();
		if(h == 0) h = this.popupSlider.getPreferredHeight();
		return h - sliderInsets.top - sliderInsets.bottom;
	}
	,__class__: org.aswing.plaf.basic.BasicAdjusterUI
});
org.aswing.plaf.basic.BasicButtonUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicButtonUI"] = org.aswing.plaf.basic.BasicButtonUI;
org.aswing.plaf.basic.BasicButtonUI.__name__ = ["org","aswing","plaf","basic","BasicButtonUI"];
org.aswing.plaf.basic.BasicButtonUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicButtonUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Button.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) this.button = c; else this.button = null;
		this.installDefaults(this.button);
		this.installComponents(this.button);
		this.installListeners(this.button);
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) this.button = c; else this.button = null;
		this.uninstallDefaults(this.button);
		this.uninstallComponents(this.button);
		this.uninstallListeners(this.button);
	}
	,installDefaults: function(b) {
		var pp = this.getPropertyPrefix();
		if(!b.isShiftOffsetSet()) {
			b.setShiftOffset(this.getInt(pp + "textShiftOffset"));
			b.setShiftOffsetSet(false);
		}
		if(Std["is"](b.getMargin(),org.aswing.plaf.UIResource)) b.setMargin(this.getInsets(pp + "margin"));
		org.aswing.LookAndFeel.installColorsAndFont(b,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(b,pp);
		org.aswing.LookAndFeel.installBasicProperties(b,pp);
		this.button.mouseChildren = false;
		if(Std["is"](b.getTextFilters(),org.aswing.plaf.UIResource)) b.setTextFilters(this.getInstance(pp + "textFilters"));
	}
	,refreshStyleProperties: function() {
		this.installDefaults(this.button);
		this.button.repaint();
		this.button.revalidate();
	}
	,uninstallDefaults: function(b) {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(b);
	}
	,installComponents: function(b) {
		this.textField = org.aswing.AsWingUtils.createLabel(b,"label");
		b.setFontValidated(false);
	}
	,uninstallComponents: function(b) {
		b.removeChild(this.textField);
	}
	,installListeners: function(b) {
		b.addStateListener($bind(this,this.__stateListener));
		b.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		b.addEventListener("focusKeyUp",$bind(this,this.__onKeyUp));
	}
	,uninstallListeners: function(b) {
		b.removeStateListener($bind(this,this.__stateListener));
		b.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		b.removeEventListener("focusKeyUp",$bind(this,this.__onKeyUp));
	}
	,getTextShiftOffset: function() {
		return this.button.getShiftOffset();
	}
	,__stateListener: function(e) {
		this.button.repaint();
	}
	,__onKeyDown: function(e) {
		if(!(this.button.isShowing() && this.button.isEnabled())) return;
		var model = this.button.getModel();
		if((e.keyCode | 0) == org.aswing.AWKeyboard.SPACE && !(model.isRollOver() && model.isPressed())) {
			this.setTraversingTrue();
			model.setRollOver(true);
			model.setArmed(true);
			model.setPressed(true);
		}
	}
	,__onKeyUp: function(e) {
		if(!(this.button.isShowing() && this.button.isEnabled())) return;
		if((e.keyCode | 0) == org.aswing.AWKeyboard.SPACE) {
			var model = this.button.getModel();
			this.setTraversingTrue();
			model.setPressed(false);
			model.setArmed(false);
			model.setRollOver(false);
		}
	}
	,setTraversingTrue: function() {
		var fm = org.aswing.FocusManager.getManager(this.button.get_stage());
		if(fm != null) fm.setTraversing(true);
	}
	,paint: function(c,g,r) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,r);
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		var insets = b.getMargin();
		if(insets != null) r = insets.getInsideBounds(r);
		org.aswing.plaf.basic.BasicButtonUI.viewRect.setRect(r);
		org.aswing.plaf.basic.BasicButtonUI.textRect.x = org.aswing.plaf.basic.BasicButtonUI.textRect.y = org.aswing.plaf.basic.BasicButtonUI.textRect.width = org.aswing.plaf.basic.BasicButtonUI.textRect.height = 0;
		org.aswing.plaf.basic.BasicButtonUI.iconRect.x = org.aswing.plaf.basic.BasicButtonUI.iconRect.y = org.aswing.plaf.basic.BasicButtonUI.iconRect.width = org.aswing.plaf.basic.BasicButtonUI.iconRect.height = 0;
		var text = org.aswing.AsWingUtils.layoutCompoundLabel(c,c.getFont(),b.getDisplayText(),this.getIconToLayout(),b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),org.aswing.plaf.basic.BasicButtonUI.viewRect,org.aswing.plaf.basic.BasicButtonUI.iconRect,org.aswing.plaf.basic.BasicButtonUI.textRect,b.getDisplayText() == null?0:b.getIconTextGap());
		this.paintIcon(b,g,org.aswing.plaf.basic.BasicButtonUI.iconRect);
		if(text != null && text != "") {
			this.textField.set_visible(true);
			if(b.getModel().isArmed() || b.getModel().isSelected()) {
				org.aswing.plaf.basic.BasicButtonUI.textRect.x += this.getTextShiftOffset();
				org.aswing.plaf.basic.BasicButtonUI.textRect.y += this.getTextShiftOffset();
			}
			this.paintText(b,org.aswing.plaf.basic.BasicButtonUI.textRect,text);
		} else {
			this.textField.set_text("");
			this.textField.set_visible(false);
		}
	}
	,getIconToLayout: function() {
		return this.button.getIcon();
	}
	,paintBackGround: function(c,g,b) {
	}
	,paintText: function(b,textRect,text) {
		b.bringToTop(this.textField);
		var font = b.getFont();
		if(this.textField.get_text() != text) this.textField.set_text(text);
		if(!b.isFontValidated()) {
			org.aswing.AsWingUtils.applyTextFont(this.textField,font);
			b.setFontValidated(true);
		}
		org.aswing.AsWingUtils.applyTextColor(this.textField,this.getTextPaintColor(b));
		this.textField.set_x(textRect.x);
		this.textField.set_y(textRect.y);
		if(b.getMnemonicIndex() >= 0) this.textField.setTextFormat(new openfl.text.TextFormat(null,null,null,null,null,true),b.getMnemonicIndex());
		this.textField.set_filters(b.getTextFilters());
	}
	,getTextPaintColor: function(b) {
		if(b.isEnabled()) return b.getForeground(); else return org.aswing.plaf.basic.BasicGraphicsUtils.getDisabledColor(b);
	}
	,paintIcon: function(b,g,iconRect) {
		var model = b.getModel();
		var icon = b.getIcon();
		var tmpIcon = null;
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(icon == null) return;
		if(!model.isEnabled()) {
			if(model.isSelected()) tmpIcon = b.getDisabledSelectedIcon(); else tmpIcon = b.getDisabledIcon();
		} else if(model.isPressed() && model.isArmed()) tmpIcon = b.getPressedIcon(); else if(b.isRollOverEnabled() && model.isRollOver()) {
			if(model.isSelected()) tmpIcon = b.getRollOverSelectedIcon(); else tmpIcon = b.getRollOverIcon();
		} else if(model.isSelected()) tmpIcon = b.getSelectedIcon();
		if(tmpIcon != null) icon = tmpIcon;
		this.setIconVisible(icon,true);
		if(model.isPressed() && model.isArmed()) icon.updateIcon(b,g,iconRect.x + this.getTextShiftOffset(),iconRect.y + this.getTextShiftOffset()); else icon.updateIcon(b,g,iconRect.x,iconRect.y);
	}
	,setIconVisible: function(icon,visible) {
		if(icon.getDisplay(this.button) != null) icon.getDisplay(this.button).set_visible(visible);
	}
	,getIcons: function() {
		var arr = new Array();
		if(this.button.getIcon() != null) arr.push(this.button.getIcon());
		if(this.button.getDisabledIcon() != null) arr.push(this.button.getDisabledIcon());
		if(this.button.getSelectedIcon() != null) arr.push(this.button.getSelectedIcon());
		if(this.button.getDisabledSelectedIcon() != null) arr.push(this.button.getDisabledSelectedIcon());
		if(this.button.getRollOverIcon() != null) arr.push(this.button.getRollOverIcon());
		if(this.button.getRollOverSelectedIcon() != null) arr.push(this.button.getRollOverSelectedIcon());
		if(this.button.getPressedIcon() != null) arr.push(this.button.getPressedIcon());
		return arr;
	}
	,getButtonPreferredSize: function(b,icon,text) {
		org.aswing.plaf.basic.BasicButtonUI.viewRect.setRectXYWH(0,0,100000,100000);
		org.aswing.plaf.basic.BasicButtonUI.textRect.x = org.aswing.plaf.basic.BasicButtonUI.textRect.y = org.aswing.plaf.basic.BasicButtonUI.textRect.width = org.aswing.plaf.basic.BasicButtonUI.textRect.height = 0;
		org.aswing.plaf.basic.BasicButtonUI.iconRect.x = org.aswing.plaf.basic.BasicButtonUI.iconRect.y = org.aswing.plaf.basic.BasicButtonUI.iconRect.width = org.aswing.plaf.basic.BasicButtonUI.iconRect.height = 0;
		org.aswing.AsWingUtils.layoutCompoundLabel(b,b.getFont(),text,icon,b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),org.aswing.plaf.basic.BasicButtonUI.viewRect,org.aswing.plaf.basic.BasicButtonUI.iconRect,org.aswing.plaf.basic.BasicButtonUI.textRect,b.getDisplayText() == null?0:b.getIconTextGap());
		var size;
		if(icon == null) size = org.aswing.plaf.basic.BasicButtonUI.textRect.getSize(); else if(b.getDisplayText() == null || b.getDisplayText() == "") size = org.aswing.plaf.basic.BasicButtonUI.iconRect.getSize(); else {
			var r = org.aswing.plaf.basic.BasicButtonUI.iconRect.union(org.aswing.plaf.basic.BasicButtonUI.textRect);
			size = r.getSize();
		}
		size = b.getInsets().getOutsideSize(size);
		if(b.getMargin() != null) size = b.getMargin().getOutsideSize(size);
		return size;
	}
	,getButtonMinimumSize: function(b,icon,text) {
		var size = b.getInsets().getOutsideSize();
		if(b.getMargin() != null) size = b.getMargin().getOutsideSize(size);
		return size;
	}
	,getPreferredSize: function(c) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		return this.getButtonPreferredSize(b,this.getIconToLayout(),b.getDisplayText());
	}
	,getMinimumSize: function(c) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		return this.getButtonMinimumSize(b,this.getIconToLayout(),b.getDisplayText());
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,__class__: org.aswing.plaf.basic.BasicButtonUI
});
org.aswing.plaf.basic.BasicMenuItemUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicMenuItemUI"] = org.aswing.plaf.basic.BasicMenuItemUI;
org.aswing.plaf.basic.BasicMenuItemUI.__name__ = ["org","aswing","plaf","basic","BasicMenuItemUI"];
org.aswing.plaf.basic.BasicMenuItemUI.__interfaces__ = [org.aswing.plaf.MenuElementUI];
org.aswing.plaf.basic.BasicMenuItemUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicMenuItemUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	layoutMenuItem: function(font,text,accelFont,acceleratorText,icon,checkIcon,arrowIcon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,arg) {
		var viewRect = arg[0];
		var iconRect = arg[1];
		var textRect = arg[2];
		var acceleratorRect = arg[3];
		var checkIconRect = arg[4];
		var arrowIconRect = arg[5];
		var textIconGap = arg[6];
		var menuItemGap = arg[7];
		org.aswing.AsWingUtils.layoutCompoundLabel(this.menuItem,font,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewRect,iconRect,textRect,textIconGap);
		if(acceleratorText == null || acceleratorText == "") {
			acceleratorRect.width = acceleratorRect.height = 0;
			acceleratorText = "";
		} else {
			var td = accelFont.computeTextSize(acceleratorText);
			acceleratorRect.width = td.width;
			acceleratorRect.height = td.height;
		}
		if(this.useCheckAndArrow()) {
			if(checkIcon != null) {
				checkIconRect.width = checkIcon.getIconWidth(this.menuItem);
				checkIconRect.height = checkIcon.getIconHeight(this.menuItem);
			} else checkIconRect.width = checkIconRect.height = 0;
			if(arrowIcon != null) {
				arrowIconRect.width = arrowIcon.getIconWidth(this.menuItem);
				arrowIconRect.height = arrowIcon.getIconHeight(this.menuItem);
			} else arrowIconRect.width = arrowIconRect.height = 0;
		}
		var labelRect = iconRect.union(textRect);
		textRect.x += menuItemGap;
		iconRect.x += menuItemGap;
		acceleratorRect.x = viewRect.x + viewRect.width - arrowIconRect.width - menuItemGap * 2 - acceleratorRect.width;
		if(this.useCheckAndArrow()) {
			checkIconRect.x = viewRect.x + menuItemGap;
			textRect.x += menuItemGap + checkIconRect.width;
			iconRect.x += menuItemGap + checkIconRect.width;
			arrowIconRect.x = viewRect.x + viewRect.width - menuItemGap - arrowIconRect.width;
		}
		acceleratorRect.y = labelRect.y + Math.floor(labelRect.height / 2) - Math.floor(acceleratorRect.height / 2);
		if(this.useCheckAndArrow()) {
			arrowIconRect.y = labelRect.y + Math.floor(labelRect.height / 2) - Math.floor(arrowIconRect.height / 2);
			checkIconRect.y = labelRect.y + Math.floor(labelRect.height / 2) - Math.floor(checkIconRect.height / 2);
		}
		return text;
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JMenuItem)) this.menuItem = c; else this.menuItem = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JMenuItem)) this.menuItem = c; else this.menuItem = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "MenuItem.";
	}
	,installDefaults: function() {
		this.menuItem.setHorizontalAlignment(2);
		this.menuItem.setVerticalAlignment(0);
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.menuItem,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.menuItem,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.menuItem,pp);
		this.selectionBackground = this.getColor(pp + "selectionBackground");
		this.selectionForeground = this.getColor(pp + "selectionForeground");
		this.disabledForeground = this.getColor(pp + "disabledForeground");
		this.acceleratorForeground = this.getColor(pp + "acceleratorForeground");
		this.acceleratorSelectionForeground = this.getColor(pp + "acceleratorSelectionForeground");
		this.acceleratorFont = this.getFont(pp + "acceleratorFont");
		this.acceleratorFontValidated = false;
		if(Std["is"](this.menuItem.getMargin(),org.aswing.plaf.UIResource)) this.menuItem.setMargin(this.getInsets(pp + "margin"));
		this.arrowIcon = this.getIcon(pp + "arrowIcon");
		this.checkIcon = this.getIcon(pp + "checkIcon");
		this.installIcon(this.arrowIcon);
		this.installIcon(this.checkIcon);
	}
	,installIcon: function(icon) {
		if(icon != null && icon.getDisplay(this.menuItem) != null) this.menuItem.addChild(icon.getDisplay(this.menuItem));
	}
	,uninstallIcon: function(icon) {
		if(icon != null && icon.getDisplay(this.menuItem) != null) this.menuItem.removeChild(icon.getDisplay(this.menuItem));
	}
	,installComponents: function() {
		this.textField = org.aswing.AsWingUtils.createLabel(this.menuItem,"label");
		this.accelTextField = org.aswing.AsWingUtils.createLabel(this.menuItem,"accLabel");
		this.menuItem.setFontValidated(false);
	}
	,installListeners: function() {
		this.menuItem.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.____menuItemRollOver));
		this.menuItem.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.____menuItemRollOut));
		this.menuItem.addActionListener($bind(this,this.____menuItemAct));
		this.menuItem.addStateListener($bind(this,this.__menuStateChanged));
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.menuItem);
		this.uninstallIcon(this.arrowIcon);
		this.uninstallIcon(this.checkIcon);
	}
	,uninstallComponents: function() {
		this.menuItem.removeChild(this.textField);
		this.menuItem.removeChild(this.accelTextField);
	}
	,uninstallListeners: function() {
		this.menuItem.removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.____menuItemRollOver));
		this.menuItem.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.____menuItemRollOut));
		this.menuItem.removeActionListener($bind(this,this.____menuItemAct));
		this.menuItem.removeStateListener($bind(this,this.__menuStateChanged));
	}
	,processKeyEvent: function(code) {
		var manager = org.aswing.MenuSelectionManager.defaultManager();
		var path = manager.getSelectedPath();
		if(path[path.length - 1] != this.menuItem) return;
		if(manager.isEnterKey(code)) {
			this.menuItem.doClick();
			return;
		}
		if(path.length > 1 && path[path.length - 1] == this.menuItem) {
			if(manager.isPageNavKey(code)) {
				path.pop();
				manager.setSelectedPath(this.menuItem.get_stage(),path,false);
				org.aswing.AsWingUtils["as"](path[path.length - 1],org.aswing.MenuElement).processKeyEvent(code);
			} else if(manager.isItemNavKey(code)) {
				path.pop();
				if(manager.isPrevItemKey(code)) path.push(manager.prevSubElement(org.aswing.AsWingUtils["as"](path[path.length - 1],org.aswing.MenuElement),this.menuItem)); else path.push(manager.nextSubElement(org.aswing.AsWingUtils["as"](path[path.length - 1],org.aswing.MenuElement),this.menuItem));
				manager.setSelectedPath(this.menuItem.get_stage(),path,false);
			}
		}
	}
	,__menuItemRollOver: function(e) {
		org.aswing.MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.get_stage(),this.getPath(),false);
		this.menuItem.repaint();
	}
	,__menuItemRollOut: function(e) {
		var path = org.aswing.MenuSelectionManager.defaultManager().getSelectedPath();
		if(path.length > 1 && js.Boot.__instanceof(path[path.length - 1],org.aswing.JMenuItem) && path[path.length - 1] == this.menuItem) {
			path.pop();
			org.aswing.MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.get_stage(),path,false);
		}
		this.menuItem.repaint();
	}
	,__menuItemAct: function(e) {
		org.aswing.MenuSelectionManager.defaultManager().clearSelectedPath(false);
		this.menuItem.repaint();
	}
	,__menuStateChanged: function(e) {
		this.menuItem.repaint();
	}
	,____menuItemRollOver: function(e) {
		this.__menuItemRollOver(e);
	}
	,____menuItemRollOut: function(e) {
		this.__menuItemRollOut(e);
	}
	,____menuItemAct: function(e) {
		this.__menuItemAct(e);
	}
	,isMenu: function() {
		return false;
	}
	,isTopMenu: function() {
		return false;
	}
	,shouldPaintSelected: function() {
		return this.menuItem.getModel().isRollOver();
	}
	,getPath: function() {
		var m = org.aswing.MenuSelectionManager.defaultManager();
		var oldPath = m.getSelectedPath();
		var newPath;
		var i = oldPath.length;
		if(i == 0) return [];
		var parent = this.menuItem.getParent();
		var me = null;
		me = org.aswing.AsWingUtils["as"](oldPath[i - 1],org.aswing.MenuElement);
		if(me.getMenuComponent() == parent) {
			newPath = oldPath.slice();
			newPath.push(this.menuItem);
		} else {
			var j = 0;
			var _g1 = 0;
			var _g = oldPath.length;
			while(_g1 < _g) {
				var j1 = _g1++;
				me = org.aswing.AsWingUtils["as"](oldPath[j1],org.aswing.MenuElement);
				if(me.getMenuComponent() == parent) break;
			}
			newPath = oldPath.slice(0,j + 1);
			newPath.push(this.menuItem);
		}
		return newPath;
	}
	,paint: function(c,g,b) {
		var mi;
		if(js.Boot.__instanceof(c,org.aswing.JMenuItem)) mi = c; else mi = null;
		this.paintMenuItem(mi,g,b,this.checkIcon,this.arrowIcon,this.selectionBackground,this.selectionForeground,this.menuItem.getIconTextGap());
	}
	,paintMenuItem: function(b,g,r,checkIcon,arrowIcon,background,foreground,textIconGap) {
		var model = b.getModel();
		this.resetRects();
		org.aswing.plaf.basic.BasicMenuItemUI.viewRect.setRect(r);
		var font = b.getFont();
		var acceleratorText = this.getAcceleratorText(b);
		var text = "";
		text = this.layoutMenuItem(font,b.getDisplayText(),this.acceleratorFont,acceleratorText,b.getIcon(),checkIcon,arrowIcon,b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),[org.aswing.plaf.basic.BasicMenuItemUI.viewRect,org.aswing.plaf.basic.BasicMenuItemUI.iconRect,org.aswing.plaf.basic.BasicMenuItemUI.textRect,org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect,org.aswing.plaf.basic.BasicMenuItemUI.checkIconRect,org.aswing.plaf.basic.BasicMenuItemUI.arrowIconRect,b.getDisplayText() == null?0:textIconGap,textIconGap]);
		this.paintMenuBackground(b,g,r,background);
		var isSelected = this.shouldPaintSelected();
		this.paintCheckIcon(b,this.useCheckAndArrow(),g,org.aswing.plaf.basic.BasicMenuItemUI.checkIconRect.x,org.aswing.plaf.basic.BasicMenuItemUI.checkIconRect.y);
		var icon = null;
		if(b.getIcon() != null) {
			if(!model.isEnabled()) icon = b.getDisabledIcon(); else if(model.isPressed() && model.isArmed()) {
				icon = b.getPressedIcon();
				if(icon == null) icon = b.getIcon();
			} else icon = b.getIcon();
		}
		this.paintIcon(b,icon,g,org.aswing.plaf.basic.BasicMenuItemUI.iconRect.x,org.aswing.plaf.basic.BasicMenuItemUI.iconRect.y);
		var tc;
		if(text != null && text != "") {
			tc = b.getForeground();
			if(isSelected) tc = this.selectionForeground;
			if(!b.isEnabled()) {
				if(this.disabledForeground != null) tc = this.disabledForeground; else tc = org.aswing.plaf.basic.BasicGraphicsUtils.getDisabledColor(b);
			}
			this.textField.set_visible(true);
			this.paintTextField(b,org.aswing.plaf.basic.BasicMenuItemUI.textRect,this.textField,text,font,tc,!b.isFontValidated());
			b.setFontValidated(true);
		} else this.textField.set_visible(false);
		if(acceleratorText != null && acceleratorText != "") {
			var accOffset = 0;
			var parent = this.menuItem.getParent();
			if(parent != null) {
				var p = parent;
				var maxValueInt;
				if(p.getClientProperty("maxAccWidth") == null) maxValueInt = org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.width; else maxValueInt = p.getClientProperty("maxAccWidth");
				accOffset = maxValueInt - org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.width;
			}
			var accTextFieldRect = new org.aswing.geom.IntRectangle();
			accTextFieldRect.x = org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.x - accOffset;
			accTextFieldRect.y = org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.y;
			tc = this.acceleratorForeground;
			if(!model.isEnabled()) {
				if(this.disabledForeground != null) tc = this.disabledForeground; else tc = org.aswing.plaf.basic.BasicGraphicsUtils.getDisabledColor(b);
			} else if(isSelected) tc = this.acceleratorSelectionForeground;
			this.accelTextField.set_visible(true);
			this.paintTextField(b,accTextFieldRect,this.accelTextField,acceleratorText,this.acceleratorFont,tc,!this.acceleratorFontValidated);
			this.acceleratorFontValidated = true;
		} else this.accelTextField.set_visible(false);
		this.paintArrowIcon(b,this.useCheckAndArrow(),g,org.aswing.plaf.basic.BasicMenuItemUI.arrowIconRect.x,org.aswing.plaf.basic.BasicMenuItemUI.arrowIconRect.y);
	}
	,paintCheckIcon: function(b,isPaint,g,x,y) {
		if(this.checkIcon == null) return;
		if(isPaint != true) this.setIconVisible(this.checkIcon,false); else {
			this.setIconVisible(this.checkIcon,true);
			this.checkIcon.updateIcon(b,g,x,y);
		}
	}
	,paintArrowIcon: function(b,isPaint,g,x,y) {
		if(this.arrowIcon == null) return;
		if(isPaint != true) this.setIconVisible(this.arrowIcon,false); else {
			this.setIconVisible(this.arrowIcon,true);
			this.arrowIcon.updateIcon(b,g,x,y);
		}
	}
	,paintIcon: function(b,icon,g,x,y) {
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(icon != null) {
			this.setIconVisible(icon,true);
			icon.updateIcon(b,g,x,y);
		}
	}
	,setIconVisible: function(icon,visible) {
		if(icon.getDisplay(this.menuItem) != null) icon.getDisplay(this.menuItem).set_visible(visible);
	}
	,getIcons: function() {
		var arr = new Array();
		var button = this.menuItem;
		if(button.getIcon() != null) arr.push(button.getIcon());
		if(button.getDisabledIcon() != null) arr.push(button.getDisabledIcon());
		if(button.getSelectedIcon() != null) arr.push(button.getSelectedIcon());
		if(button.getDisabledSelectedIcon() != null) arr.push(button.getDisabledSelectedIcon());
		if(button.getRollOverIcon() != null) arr.push(button.getRollOverIcon());
		if(button.getRollOverSelectedIcon() != null) arr.push(button.getRollOverSelectedIcon());
		if(button.getPressedIcon() != null) arr.push(button.getPressedIcon());
		return arr;
	}
	,paintMenuBackground: function(menuItem,g,r,bgColor) {
		var color = bgColor;
		var tune = menuItem.getStyleTune();
		if(menuItem.isOpaque()) {
			if(!this.shouldPaintSelected()) color = menuItem.getBackground();
			this.doPaintMenuBackground(menuItem,g,color,r,tune.round);
		} else if(this.shouldPaintSelected() && (menuItem.getBackgroundDecorator() == null || menuItem.getBackgroundDecorator() == org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE)) this.doPaintMenuBackground(menuItem,g,color,r,tune.round);
	}
	,doPaintMenuBackground: function(c,g,cl,r,round) {
		var tune = c.getStyleTune();
		var style = new org.aswing.StyleResult(cl,tune);
		org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,r,style,Math.PI / 2);
	}
	,paintTextField: function(b,tRect,textField,text,font,color,validateFont) {
		if(textField.get_text() != text) textField.set_text(text);
		if(validateFont) org.aswing.AsWingUtils.applyTextFont(textField,font);
		org.aswing.AsWingUtils.applyTextColor(textField,color);
		textField.set_x(tRect.x);
		textField.set_y(tRect.y);
		if(b.getMnemonicIndex() >= 0) textField.setTextFormat(new openfl.text.TextFormat(null,null,null,null,null,true),b.getMnemonicIndex());
	}
	,resetRects: function() {
		org.aswing.plaf.basic.BasicMenuItemUI.iconRect.setRect(org.aswing.plaf.basic.BasicMenuItemUI.zeroRect);
		org.aswing.plaf.basic.BasicMenuItemUI.textRect.setRect(org.aswing.plaf.basic.BasicMenuItemUI.zeroRect);
		org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.setRect(org.aswing.plaf.basic.BasicMenuItemUI.zeroRect);
		org.aswing.plaf.basic.BasicMenuItemUI.checkIconRect.setRect(org.aswing.plaf.basic.BasicMenuItemUI.zeroRect);
		org.aswing.plaf.basic.BasicMenuItemUI.arrowIconRect.setRect(org.aswing.plaf.basic.BasicMenuItemUI.zeroRect);
		org.aswing.plaf.basic.BasicMenuItemUI.viewRect.setRectXYWH(0,0,100000,100000);
		org.aswing.plaf.basic.BasicMenuItemUI.r.setRect(org.aswing.plaf.basic.BasicMenuItemUI.zeroRect);
	}
	,getPreferredMenuItemSize: function(b,checkIcon,arrowIcon,textIconGap) {
		var icon = b.getIcon();
		var text = b.getDisplayText();
		var acceleratorText = this.getAcceleratorText(b);
		var font = b.getFont();
		this.resetRects();
		this.layoutMenuItem(font,text,this.acceleratorFont,acceleratorText,icon,checkIcon,arrowIcon,b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),[org.aswing.plaf.basic.BasicMenuItemUI.viewRect,org.aswing.plaf.basic.BasicMenuItemUI.iconRect,org.aswing.plaf.basic.BasicMenuItemUI.textRect,org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect,org.aswing.plaf.basic.BasicMenuItemUI.checkIconRect,org.aswing.plaf.basic.BasicMenuItemUI.arrowIconRect,text == null?0:textIconGap,textIconGap]);
		org.aswing.plaf.basic.BasicMenuItemUI.r = org.aswing.plaf.basic.BasicMenuItemUI.textRect.union(org.aswing.plaf.basic.BasicMenuItemUI.iconRect);
		var parent = this.menuItem.getParent();
		if(parent != null && !this.isTopMenu()) {
			var p = parent;
			var maxTextValue = p.getClientProperty("maxTextWidth");
			var maxAccValue = p.getClientProperty("maxAccWidth");
			if(null != maxTextValue && org.aswing.plaf.basic.BasicMenuItemUI.r.width < maxTextValue) org.aswing.plaf.basic.BasicMenuItemUI.r.width = maxTextValue; else p.putClientProperty("maxTextWidth",org.aswing.plaf.basic.BasicMenuItemUI.r.width);
			if(null == maxAccValue || org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.width > maxAccValue) {
				maxAccValue = org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.width;
				p.putClientProperty("maxAccWidth",org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect.width);
			}
			org.aswing.plaf.basic.BasicMenuItemUI.r.width += maxAccValue;
			org.aswing.plaf.basic.BasicMenuItemUI.r.width += textIconGap;
		}
		if(this.useCheckAndArrow()) {
			org.aswing.plaf.basic.BasicMenuItemUI.r.width += org.aswing.plaf.basic.BasicMenuItemUI.checkIconRect.width;
			org.aswing.plaf.basic.BasicMenuItemUI.r.width += textIconGap;
			org.aswing.plaf.basic.BasicMenuItemUI.r.width += textIconGap;
			org.aswing.plaf.basic.BasicMenuItemUI.r.width += org.aswing.plaf.basic.BasicMenuItemUI.arrowIconRect.width;
		}
		org.aswing.plaf.basic.BasicMenuItemUI.r.width += 2 * textIconGap;
		var insets = b.getInsets();
		if(insets != null) {
			org.aswing.plaf.basic.BasicMenuItemUI.r.width += insets.left + insets.right;
			org.aswing.plaf.basic.BasicMenuItemUI.r.height += insets.top + insets.bottom;
		}
		org.aswing.plaf.basic.BasicMenuItemUI.r.width = Math.ceil(org.aswing.plaf.basic.BasicMenuItemUI.r.width);
		org.aswing.plaf.basic.BasicMenuItemUI.r.height = Math.ceil(org.aswing.plaf.basic.BasicMenuItemUI.r.height);
		if(org.aswing.plaf.basic.BasicMenuItemUI.r.width % 2 == 0) org.aswing.plaf.basic.BasicMenuItemUI.r.width++;
		if(org.aswing.plaf.basic.BasicMenuItemUI.r.height % 2 == 0) org.aswing.plaf.basic.BasicMenuItemUI.r.height++;
		return org.aswing.plaf.basic.BasicMenuItemUI.r.getSize();
	}
	,getAcceleratorText: function(b) {
		if(b.getAccelerator() == null) return ""; else return b.getAccelerator().getDescription();
	}
	,useCheckAndArrow: function() {
		return !this.isTopMenu();
	}
	,getPreferredSize: function(c) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.JMenuItem)) b = c; else b = null;
		return this.getPreferredMenuItemSize(b,this.checkIcon,this.arrowIcon,this.menuItem.getIconTextGap());
	}
	,getMinimumSize: function(c) {
		var size = this.menuItem.getInsets().getOutsideSize();
		if(this.menuItem.getMargin() != null) size = this.menuItem.getMargin().getOutsideSize(size);
		return size;
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,__class__: org.aswing.plaf.basic.BasicMenuItemUI
});
org.aswing.plaf.basic.BasicCheckBoxMenuItemUI = function() {
	org.aswing.plaf.basic.BasicMenuItemUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicCheckBoxMenuItemUI"] = org.aswing.plaf.basic.BasicCheckBoxMenuItemUI;
org.aswing.plaf.basic.BasicCheckBoxMenuItemUI.__name__ = ["org","aswing","plaf","basic","BasicCheckBoxMenuItemUI"];
org.aswing.plaf.basic.BasicCheckBoxMenuItemUI.__super__ = org.aswing.plaf.basic.BasicMenuItemUI;
org.aswing.plaf.basic.BasicCheckBoxMenuItemUI.prototype = $extend(org.aswing.plaf.basic.BasicMenuItemUI.prototype,{
	getPropertyPrefix: function() {
		return "CheckBoxMenuItem.";
	}
	,__class__: org.aswing.plaf.basic.BasicCheckBoxMenuItemUI
});
org.aswing.plaf.basic.BasicToggleButtonUI = function() {
	org.aswing.plaf.basic.BasicButtonUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicToggleButtonUI"] = org.aswing.plaf.basic.BasicToggleButtonUI;
org.aswing.plaf.basic.BasicToggleButtonUI.__name__ = ["org","aswing","plaf","basic","BasicToggleButtonUI"];
org.aswing.plaf.basic.BasicToggleButtonUI.__super__ = org.aswing.plaf.basic.BasicButtonUI;
org.aswing.plaf.basic.BasicToggleButtonUI.prototype = $extend(org.aswing.plaf.basic.BasicButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "ToggleButton.";
	}
	,paintIcon: function(b,g,iconRect) {
		var model = b.getModel();
		var icon = null;
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(!model.isEnabled()) {
			if(model.isSelected()) icon = b.getDisabledSelectedIcon(); else icon = b.getDisabledIcon();
		} else if(model.isPressed() && model.isArmed()) {
			icon = b.getPressedIcon();
			if(icon == null) icon = b.getSelectedIcon();
		} else if(model.isSelected()) {
			if(b.isRollOverEnabled() && model.isRollOver()) {
				icon = b.getRollOverSelectedIcon();
				if(icon == null) icon = b.getSelectedIcon();
			} else icon = b.getSelectedIcon();
		} else if(b.isRollOverEnabled() && model.isRollOver()) icon = b.getRollOverIcon();
		if(icon == null) icon = b.getIcon();
		if(icon == null) icon = this.getIconToLayout();
		if(icon != null) {
			this.setIconVisible(icon,true);
			icon.updateIcon(b,g,iconRect.x,iconRect.y);
		}
	}
	,__class__: org.aswing.plaf.basic.BasicToggleButtonUI
});
org.aswing.plaf.basic.BasicRadioButtonUI = function() {
	org.aswing.plaf.basic.BasicToggleButtonUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicRadioButtonUI"] = org.aswing.plaf.basic.BasicRadioButtonUI;
org.aswing.plaf.basic.BasicRadioButtonUI.__name__ = ["org","aswing","plaf","basic","BasicRadioButtonUI"];
org.aswing.plaf.basic.BasicRadioButtonUI.__super__ = org.aswing.plaf.basic.BasicToggleButtonUI;
org.aswing.plaf.basic.BasicRadioButtonUI.prototype = $extend(org.aswing.plaf.basic.BasicToggleButtonUI.prototype,{
	installDefaults: function(b) {
		org.aswing.plaf.basic.BasicToggleButtonUI.prototype.installDefaults.call(this,b);
		this.defaultIcon = this.getIcon(this.getPropertyPrefix() + "icon");
	}
	,uninstallDefaults: function(b) {
		org.aswing.plaf.basic.BasicToggleButtonUI.prototype.uninstallDefaults.call(this,b);
		if(this.defaultIcon.getDisplay(b) != null) {
			if(this.button.contains(this.defaultIcon.getDisplay(b))) this.button.removeChild(this.defaultIcon.getDisplay(b));
		}
	}
	,getPropertyPrefix: function() {
		return "RadioButton.";
	}
	,getDefaultIcon: function() {
		return this.defaultIcon;
	}
	,getIconToLayout: function() {
		if(this.button.getIcon() == null) {
			if(this.defaultIcon.getDisplay(this.button) != null) {
				if(!this.button.contains(this.defaultIcon.getDisplay(this.button))) this.button.addChild(this.defaultIcon.getDisplay(this.button));
			}
			return this.defaultIcon;
		} else return this.button.getIcon();
	}
	,paintBackGround: function(c,g,b) {
		if(c.isOpaque()) g.fillRectangle(new org.aswing.graphics.SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height);
	}
	,__class__: org.aswing.plaf.basic.BasicRadioButtonUI
});
org.aswing.plaf.basic.BasicCheckBoxUI = function() {
	org.aswing.plaf.basic.BasicRadioButtonUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicCheckBoxUI"] = org.aswing.plaf.basic.BasicCheckBoxUI;
org.aswing.plaf.basic.BasicCheckBoxUI.__name__ = ["org","aswing","plaf","basic","BasicCheckBoxUI"];
org.aswing.plaf.basic.BasicCheckBoxUI.__super__ = org.aswing.plaf.basic.BasicRadioButtonUI;
org.aswing.plaf.basic.BasicCheckBoxUI.prototype = $extend(org.aswing.plaf.basic.BasicRadioButtonUI.prototype,{
	getPropertyPrefix: function() {
		return "CheckBox.";
	}
	,__class__: org.aswing.plaf.basic.BasicCheckBoxUI
});
org.aswing.plaf.basic.BasicComboBoxUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicComboBoxUI"] = org.aswing.plaf.basic.BasicComboBoxUI;
org.aswing.plaf.basic.BasicComboBoxUI.__name__ = ["org","aswing","plaf","basic","BasicComboBoxUI"];
org.aswing.plaf.basic.BasicComboBoxUI.__interfaces__ = [org.aswing.plaf.ComboBoxUI];
org.aswing.plaf.basic.BasicComboBoxUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicComboBoxUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JComboBox)) this.box = c; else this.box = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JComboBox)) this.box = c; else this.box = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "ComboBox.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.box,pp);
		org.aswing.LookAndFeel.installColorsAndFont(this.box,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.box,pp);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.box);
	}
	,installComponents: function() {
		this.dropDownButton = this.createDropDownButton();
		this.dropDownButton.setUIElement(true);
		this.box.addChild(this.dropDownButton);
	}
	,uninstallComponents: function() {
		this.box.removeChild(this.dropDownButton);
		if(this.isPopupVisible(this.box)) this.setPopupVisible(this.box,false);
	}
	,installListeners: function() {
		this.getPopupList().setFocusable(false);
		this.box.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onBoxPressed));
		this.box.addEventListener("focusKeyDown",$bind(this,this.__onFocusKeyDown));
		this.box.addEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.box.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__onBoxRemovedFromStage));
		this.getPopupList().addEventListener("itemClick",$bind(this,this.__onListItemReleased),false,0,false);
		this.popupTimer = new org.aswing.util.Timer(40);
		this.popupTimer.addActionListener($bind(this,this.__movePopup));
	}
	,uninstallListeners: function() {
		this.popupTimer.stop();
		this.popupTimer = null;
		this.box.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onBoxPressed));
		this.box.removeEventListener("focusKeyDown",$bind(this,this.__onFocusKeyDown));
		this.box.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.box.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__onBoxRemovedFromStage));
		this.getPopupList().removeEventListener("itemClick",$bind(this,this.__onListItemReleased));
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.layoutCombobox();
		this.dropDownButton.setEnabled(this.box.isEnabled());
	}
	,paintBackGround: function(c,g,b) {
	}
	,createDropDownButton: function() {
		var btn = new org.aswing.JButton("",new org.aswing.plaf.basic.icon.ArrowIcon(Math.PI / 2,16));
		btn.setFocusable(false);
		btn.setPreferredSize(new org.aswing.geom.IntDimension(16,16));
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org.aswing.Insets());
		btn.setBorder(null);
		btn.setMideground(null);
		btn.setStyleTune(null);
		return btn;
	}
	,getScollPane: function() {
		if(this.scollPane == null) {
			this.scollPane = new org.aswing.JScrollPane(this.getPopupList());
			this.scollPane.setBorder(this.getBorder(this.getPropertyPrefix() + "popupBorder"));
			this.scollPane.setOpaque(false);
			this.scollPane.setStyleProxy(this.box);
			this.scollPane.setBackground(null);
			this.scollPane.setStyleTune(null);
		}
		return this.scollPane;
	}
	,getPopup: function() {
		if(this.popup == null) {
			this.popup = new org.aswing.JPopup(org.aswing.AsWingManager.getRoot(),false);
			this.popup.setLayout(new org.aswing.BorderLayout());
			this.popup.append(this.getScollPane(),"Center");
			this.popup.setClipMasked(false);
		}
		return this.popup;
	}
	,getPopupList: function() {
		return this.box.getPopupList();
	}
	,viewPopup: function() {
		if(!this.box.isOnStage()) return;
		var width = this.box.getWidth();
		var cellHeight;
		if(this.box.getListCellFactory().isAllCellHasSameHeight()) cellHeight = this.box.getListCellFactory().getCellHeight(); else cellHeight = this.box.getPreferredSize().height;
		var height = Std["int"](Math.min(this.box.getItemCount(),this.box.getMaximumRowCount()) * cellHeight);
		var i = this.getScollPane().getInsets();
		height += i.top + i.bottom;
		width += i.right - i.left;
		i = this.getPopupList().getInsets();
		height += i.top + i.bottom;
		width += i.right - i.left;
		this.getPopup().changeOwner(org.aswing.AsWingUtils.getOwnerAncestor(this.box));
		this.getPopup().setSizeWH(width,height);
		this.getPopup().show();
		this.startMoveToView();
		org.aswing.AsWingManager.callLater($bind(this,this.__addMouseDownListenerToStage));
	}
	,__addMouseDownListenerToStage: function() {
		if(this.getPopup().isVisible() && this.box.get_stage() != null) org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDownWhenPopuped),false,0,false);
	}
	,hidePopup: function() {
		if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onMouseDownWhenPopuped));
		this.popupTimer.stop();
		if(this.getPopup().isVisible()) this.getPopup().dispose();
	}
	,startMoveToView: function() {
		var popupPane = this.getPopup();
		var height = popupPane.getHeight();
		var popupPaneHeight = height;
		var downDest = this.box.componentToGlobal(new org.aswing.geom.IntPoint(0,this.box.getHeight()));
		var upDest = new org.aswing.geom.IntPoint(downDest.x,downDest.y - this.box.getHeight() - popupPaneHeight);
		var visibleBounds = org.aswing.AsWingUtils.getVisibleMaximizedBounds(popupPane.parent);
		var distToBottom = visibleBounds.y + visibleBounds.height - downDest.y - popupPaneHeight;
		var distToTop = upDest.y - visibleBounds.y;
		var gp = this.box.getGlobalLocation();
		if(distToBottom > 0 || distToBottom < 0 && distToTop < 0 && distToBottom > distToTop) {
			this.moveDir = 1;
			gp.y += this.box.getHeight();
			this.scrollRect = new org.aswing.geom.IntRectangle(0,height,popupPane.getWidth(),0);
		} else {
			this.moveDir = -1;
			this.scrollRect = new org.aswing.geom.IntRectangle(0,0,popupPane.getWidth(),0);
		}
		popupPane.setGlobalLocation(gp);
		popupPane.setClipMaskRect(this.scrollRect);
		this.popupTimer.restart();
	}
	,setComboBoxValueFromListSelection: function() {
		var selectedValue = this.getPopupList().getSelectedValue();
		this.box.setSelectedItem(selectedValue,false);
	}
	,__movePopup: function(e) {
		var popupPane = this.getPopup();
		var popupPaneHeight = popupPane.getHeight();
		var maxTime = 10;
		var minTime = 3;
		var speed = 50;
		if(popupPaneHeight < speed * minTime) speed = Math.ceil(popupPaneHeight / minTime); else if(popupPaneHeight > speed * maxTime) speed = Math.ceil(popupPaneHeight / maxTime);
		if(popupPane.getHeight() - this.scrollRect.height <= speed) {
			speed = Std["int"](popupPane.getHeight() - this.scrollRect.height);
			this.popupTimer.stop();
			this.getPopupList().ensureIndexIsVisible(this.getPopupList().getSelectedIndex());
		}
		if(this.moveDir > 0) {
			this.scrollRect.y -= speed;
			this.scrollRect.height += speed;
		} else {
			var _g = popupPane;
			_g.set_y(_g.get_y() - speed);
			this.scrollRect.height += speed;
		}
		popupPane.setClipMaskRect(this.scrollRect);
	}
	,__onFocusKeyDown: function(e) {
		var code = e.keyCode | 0;
		if(code == org.aswing.AWKeyboard.DOWN) {
			if(!this.isPopupVisible(this.box)) {
				this.setPopupVisible(this.box,true);
				return;
			}
		}
		if(code == org.aswing.AWKeyboard.ESCAPE) {
			if(this.isPopupVisible(this.box)) {
				this.setPopupVisible(this.box,false);
				return;
			}
		}
		if(code == org.aswing.AWKeyboard.ENTER && this.isPopupVisible(this.box)) {
			this.hidePopup();
			this.setComboBoxValueFromListSelection();
			return;
		}
		var list = this.getPopupList();
		var index = list.getSelectedIndex();
		if(code == org.aswing.AWKeyboard.DOWN) index += 1; else if(code == org.aswing.AWKeyboard.UP) index -= 1; else if(code == org.aswing.AWKeyboard.PAGE_DOWN) index += this.box.getMaximumRowCount(); else if(code == org.aswing.AWKeyboard.PAGE_UP) index -= this.box.getMaximumRowCount(); else if(code == org.aswing.AWKeyboard.HOME) index = 0; else if(code == org.aswing.AWKeyboard.END) index = list.getModel().getSize() - 1; else return;
		index = Std["int"](Math.max(0,Math.min(list.getModel().getSize() - 1,index)));
		list.setSelectedIndex(index,false);
		list.ensureIndexIsVisible(index);
	}
	,__onFocusLost: function(e) {
		this.hidePopup();
	}
	,__onBoxRemovedFromStage: function(e) {
		this.hidePopup();
	}
	,__onListItemReleased: function(e) {
		this.hidePopup();
		this.setComboBoxValueFromListSelection();
	}
	,__onBoxPressed: function(e) {
		if(!this.isPopupVisible(this.box)) {
			if(this.box.isEditable()) {
				if(!this.box.getEditor().getEditorComponent().hitTestMouse()) this.setPopupVisible(this.box,true);
			} else this.setPopupVisible(this.box,true);
		} else this.hidePopup();
	}
	,__onMouseDownWhenPopuped: function(e) {
		if(!this.getPopup().hitTestMouse() && !this.box.hitTestMouse()) this.hidePopup();
	}
	,setPopupVisible: function(c,v) {
		if(v) this.viewPopup(); else this.hidePopup();
	}
	,isPopupVisible: function(c) {
		return this.getPopup().isVisible();
	}
	,layoutCombobox: function() {
		var td = this.box.getSize();
		var insets = this.box.getInsets();
		var top = insets.top;
		var left = insets.left;
		var right = td.width - insets.right;
		var height = td.height - insets.top - insets.bottom;
		var buttonSize = this.dropDownButton.getPreferredSize();
		this.dropDownButton.setSizeWH(buttonSize.width,height);
		this.dropDownButton.setLocationXY(right - buttonSize.width,top);
		this.box.getEditor().getEditorComponent().setLocationXY(left,top);
		this.box.getEditor().getEditorComponent().setSizeWH(td.width - insets.left - insets.right - buttonSize.width,height);
		this.box.getEditor().getEditorComponent().revalidate();
	}
	,getPreferredSize: function(c) {
		var insets = this.box.getInsets();
		var listPreferSize = this.getPopupList().getPreferredSize();
		var ew = listPreferSize.width;
		var wh = this.box.getEditor().getEditorComponent().getPreferredSize().height;
		var buttonSize = this.dropDownButton.getPreferredSize();
		buttonSize.width += ew;
		if(wh > buttonSize.height) buttonSize.height = wh;
		return insets.getOutsideSize(buttonSize);
	}
	,getMinimumSize: function(c) {
		return this.box.getInsets().getOutsideSize(this.dropDownButton.getPreferredSize());
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,__class__: org.aswing.plaf.basic.BasicComboBoxUI
});
org.aswing.plaf.basic.BasicFrameTitleBarUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicFrameTitleBarUI"] = org.aswing.plaf.basic.BasicFrameTitleBarUI;
org.aswing.plaf.basic.BasicFrameTitleBarUI.__name__ = ["org","aswing","plaf","basic","BasicFrameTitleBarUI"];
org.aswing.plaf.basic.BasicFrameTitleBarUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicFrameTitleBarUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.FrameTitleBar)) this.bar = c; else this.bar = null;
		this.installDefaults();
		this.installComponent();
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponent();
		this.bar = null;
	}
	,installDefaults: function() {
		var pp = "FrameTitleBar.";
		org.aswing.LookAndFeel.installColorsAndFont(this.bar.getSelf(),pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.bar.getSelf(),pp);
		org.aswing.LookAndFeel.installBasicProperties(this.bar.getSelf(),pp);
	}
	,installComponent: function() {
		if(this.bar.getIconifiedButton() != null) this.bar.getIconifiedButton().setIcon(this.getIcon("FrameTitleBar.iconifiedIcon"));
		if(this.bar.getMaximizeButton() != null) this.bar.getMaximizeButton().setIcon(this.getIcon("FrameTitleBar.maximizeIcon"));
		if(this.bar.getRestoreButton() != null) this.bar.getRestoreButton().setIcon(this.getIcon("FrameTitleBar.normalIcon"));
		if(this.bar.getCloseButton() != null) this.bar.getCloseButton().setIcon(this.getIcon("FrameTitleBar.closeIcon"));
		this.bar.setButtonIconGap(this.getInt("FrameTitleBar.buttonGap"));
		this.bar.setMinimizeHeight(this.getInt("FrameTitleBar.titleBarHeight"));
		this.bar.getSelf().revalidateIfNecessary();
	}
	,uninstallComponent: function() {
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.bar.getSelf());
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		var cl = this.bar.getSelf().getForeground();
		var colors = new org.aswing.StyleResult(cl,this.bar.getSelf().getStyleTune());
		this.bar.getLabel().setForeground(this.bar.isActive()?colors.bdark:colors.blight);
		this.bar.getLabel().setFont(this.bar.getSelf().getFont());
		this.bar.getLabel().paintImmediately();
	}
	,paintBackGround: function(c,g,b) {
	}
	,__class__: org.aswing.plaf.basic.BasicFrameTitleBarUI
});
org.aswing.plaf.basic.BasicFrameUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicFrameUI"] = org.aswing.plaf.basic.BasicFrameUI;
org.aswing.plaf.basic.BasicFrameUI.__name__ = ["org","aswing","plaf","basic","BasicFrameUI"];
org.aswing.plaf.basic.BasicFrameUI.__interfaces__ = [org.aswing.plaf.FrameUI];
org.aswing.plaf.basic.BasicFrameUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicFrameUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JFrame)) this.frame = c; else this.frame = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "Frame.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.frame,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.frame,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.frame,pp);
		this.resizeArrowColor = this.getColor("resizeArrow");
		this.resizeArrowLightColor = this.getColor("resizeArrowLight");
		this.resizeArrowDarkColor = this.getColor("resizeArrowDark");
		var ico = this.frame.getIcon();
		if(js.Boot.__instanceof(ico,org.aswing.plaf.UIResource)) this.frame.setIcon(this.getIcon(this.getPropertyPrefix() + "icon"));
		if(Std["is"](this.frame.getResizerMargin(),org.aswing.plaf.UIResource)) this.frame.setResizerMargin(this.getInsets(this.getPropertyPrefix() + "resizerMargin"));
	}
	,installComponents: function() {
		if(this.frame.getResizer() == null || Std["is"](this.frame.getResizer(),org.aswing.plaf.UIResource)) {
			var resizer = org.aswing.AsWingUtils["as"](this.getInstance(this.getPropertyPrefix() + "resizer"),org.aswing.resizer.Resizer);
			this.frame.setResizer(resizer);
		}
		if(!this.frame.isDragDirectlySet()) {
			this.frame.setDragDirectly(this.getBoolean(this.getPropertyPrefix() + "dragDirectly"));
			this.frame.setDragDirectlySet(false);
		}
		this.boundsMC = new openfl.display.Sprite();
		this.boundsMC.name = "drag_bounds";
	}
	,installListeners: function() {
		this.frame.addEventListener("propertyChange",$bind(this,this.__titleBarChanged));
		this.frame.addEventListener("windowActived",$bind(this,this.__activeChange));
		this.frame.addEventListener("windowDeactived",$bind(this,this.__activeChange));
		this.frame.addEventListener("popupClosed",$bind(this,this.__frameClosed));
		this.frame.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__frameClosed));
		this.__titleBarChanged(null);
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.frame);
		this.frame.set_filters([]);
	}
	,uninstallComponents: function() {
		this.removeBoundsMC();
	}
	,uninstallListeners: function() {
		this.frame.removeEventListener("propertyChange",$bind(this,this.__titleBarChanged));
		this.frame.removeEventListener("windowActived",$bind(this,this.__activeChange));
		this.frame.removeEventListener("windowDeactived",$bind(this,this.__activeChange));
		this.frame.removeEventListener("popupClosed",$bind(this,this.__frameClosed));
		this.frame.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__frameClosed));
		this.removeTitleBarListeners();
		if(this.flashTimer != null) {
			this.flashTimer.stop();
			this.flashTimer = null;
		}
	}
	,flashModalFrame: function() {
		if(this.flashTimer == null) {
			this.flashTimer = new org.aswing.util.Timer(50,8);
			this.flashTimer.addEventListener("act",$bind(this,this.__flashTick));
			this.flashTimer.addEventListener("act_complete",$bind(this,this.__flashComplete));
		}
		this.flashing = true;
		this.flashingActivedColor = false;
		this.flashTimer.restart();
	}
	,__flashTick: function(e) {
		this.flashingActivedColor = !this.flashingActivedColor;
		this.frame.repaint();
		this.titleBar.getSelf().repaint();
	}
	,__flashComplete: function(e) {
		this.flashing = false;
		this.frame.repaint();
		this.titleBar.getSelf().repaint();
	}
	,isPaintActivedFrame: function() {
		if(this.flashing) return this.flashingActivedColor; else return this.frame.isActive();
	}
	,paintBackGround: function(c,g,b) {
	}
	,__titleBarChanged: function(e) {
		if(e != null && e.getPropertyName() != "titleBar") return;
		var oldTC = null;
		if(e != null && e.getOldValue() != null) {
			var oldT = e.getOldValue();
			oldTC = oldT.getSelf();
		}
		if(oldTC != null) {
			oldTC.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onTitleBarPress));
			oldTC.removeEventListener("release",$bind(this,this.__onTitleBarRelease));
			oldTC.removeEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.__onTitleBarDoubleClick));
		}
		this.titleBar = this.frame.getTitleBar();
		this.addTitleBarListeners();
	}
	,addTitleBarListeners: function() {
		if(this.titleBar != null) {
			var titleBarC = this.titleBar.getSelf();
			titleBarC.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onTitleBarPress),false,0,false);
			titleBarC.addEventListener("release",$bind(this,this.__onTitleBarRelease),false,0,false);
			titleBarC.doubleClickEnabled = true;
			titleBarC.addEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.__onTitleBarDoubleClick),false,0,false);
		}
	}
	,removeTitleBarListeners: function() {
		if(this.titleBar != null) {
			var titleBarC = this.titleBar.getSelf();
			titleBarC.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onTitleBarPress));
			titleBarC.removeEventListener("release",$bind(this,this.__onTitleBarRelease));
			titleBarC.doubleClickEnabled = false;
			titleBarC.removeEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.__onTitleBarDoubleClick));
		}
	}
	,isMaximizedFrame: function() {
		var state = this.frame.getState();
		return (state & 4) == 4 || (state & 8) == 8;
	}
	,__activeChange: function(e) {
		this.frame.repaint();
	}
	,__onTitleBarPress: function(e) {
		if(e.target != this.titleBar && e.target != this.titleBar.getLabel()) return;
		if(!this.titleBar.isTitleEnabled()) return;
		if(this.frame.isDragable() && !this.isMaximizedFrame()) {
			if(this.frame.isDragDirectly()) {
				var db = this.frame.getInsets().getInsideBounds(this.frame.getMaximizedBounds()).toRectangle();
				var gap = this.titleBar.getSelf().getHeight();
				db.x -= this.frame.getWidth() - gap;
				db.y -= this.frame.getInsets().top;
				db.width += this.frame.getWidth() - gap * 2;
				db.height -= gap;
				this.frame.startDrag(false,db);
			} else {
				this.startMousePos = this.frame.getMousePosition();
				this.startPos = this.frame.getLocation();
				if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMove),false,0,false);
				console.log("__onTitleBarPress");
			}
		}
	}
	,__onTitleBarRelease: function(e) {
		if(org.aswing.AsWingUtils["as"](e.getPressTarget(),org.aswing.FrameTitleBar) != this.titleBar && e.getPressTarget() != this.titleBar.getLabel()) return;
		if(!this.titleBar.isTitleEnabled()) return;
		this.frame.stopDrag();
		if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMove));
		if(this.frame.isDragable() && !this.isMaximizedFrame() && !this.frame.isDragDirectly()) {
			var dest = this.representMoveBounds();
			this.frame.setLocation(dest);
			this.frame.validate();
		}
		this.removeBoundsMC();
	}
	,__onTitleBarDoubleClick: function(e) {
		if(e.target != this.titleBar && e.target != this.titleBar.getLabel()) return;
		if(!this.titleBar.isTitleEnabled()) return;
		if(this.frame.isResizable()) {
			var state = this.frame.getState();
			if((state & 4) == 4 || (state & 8) == 8 || (state & 2) == 2) this.frame.setState(0,false); else this.frame.setState(12,false);
		}
	}
	,__frameClosed: function(e) {
		this.removeBoundsMC();
		if(this.flashTimer != null) {
			this.flashTimer.stop();
			this.flashTimer = null;
		}
		if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMove));
	}
	,removeBoundsMC: function() {
		if(this.frame.parent != null && this.frame.parent.contains(this.boundsMC)) this.frame.parent.removeChild(this.boundsMC);
	}
	,representMoveBounds: function(e) {
		var par = this.frame.parent;
		if(this.boundsMC.parent != par) par.addChild(this.boundsMC);
		var currentMousePos = this.frame.getMousePosition();
		var bounds = this.frame.getComBounds();
		bounds.x = this.startPos.x + currentMousePos.x - this.startMousePos.x;
		bounds.y = this.startPos.y + currentMousePos.y - this.startMousePos.y;
		var gap = this.titleBar.getSelf().getHeight();
		var frameMaxBounds = this.frame.getMaximizedBounds();
		var topLeft = frameMaxBounds.leftTop();
		var topRight = frameMaxBounds.rightTop();
		var bottomLeft = frameMaxBounds.leftBottom();
		if(bounds.x < topLeft.x - bounds.width + gap) bounds.x = topLeft.x - bounds.width + gap | 0;
		if(bounds.x > topRight.x - gap) bounds.x = topRight.x - gap | 0;
		if(bounds.y < topLeft.y) bounds.y = topLeft.y;
		if(bounds.y > bottomLeft.y - gap) bounds.y = bottomLeft.y - gap | 0;
		var margin = this.frame.getResizerMargin();
		var db = bounds.clone();
		db.x += margin.left;
		db.y += margin.top;
		db.width -= margin.getMarginWidth();
		db.height -= margin.getMarginHeight();
		var x = db.x;
		var y = db.y;
		var w = db.width;
		var h = db.height;
		var g = new org.aswing.graphics.Graphics2D(this.boundsMC.get_graphics());
		this.boundsMC.get_graphics().clear();
		g.drawRectangle(new org.aswing.graphics.Pen(this.resizeArrowLightColor,1),x - 1,y - 1,w + 2,h + 2);
		g.drawRectangle(new org.aswing.graphics.Pen(this.resizeArrowColor,1),x,y,w,h);
		g.drawRectangle(new org.aswing.graphics.Pen(this.resizeArrowDarkColor,1),x + 1,y + 1,w - 2,h - 2);
		return bounds.leftTop();
	}
	,__onMouseMove: function(e) {
		this.representMoveBounds(e);
	}
	,__class__: org.aswing.plaf.basic.BasicFrameUI
});
org.aswing.plaf.basic.BasicGraphicsUtils = function() { };
$hxClasses["org.aswing.plaf.basic.BasicGraphicsUtils"] = org.aswing.plaf.basic.BasicGraphicsUtils;
org.aswing.plaf.basic.BasicGraphicsUtils.__name__ = ["org","aswing","plaf","basic","BasicGraphicsUtils"];
org.aswing.plaf.basic.BasicGraphicsUtils.getGradientBrush = function(tune,matrix,border,ratios) {
	if(border == null) border = false;
	var light;
	var dark;
	if(border) {
		light = tune.blight;
		dark = tune.bdark;
	} else {
		light = tune.clight;
		dark = tune.cdark;
	}
	if(ratios == null) ratios = org.aswing.plaf.basic.BasicGraphicsUtils.gradientRatio;
	return new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[light.getRGB(),dark.getRGB()],[light.getAlpha(),dark.getAlpha()],ratios,matrix);
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRect = function(g,x,y,w,h,r) {
	var fix;
	if(r > 5) fix = 0; else fix = org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix;
	g.roundRect(x,y,w,h,r,r,r + fix,r + fix);
};
org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect = function(g,b,tune,direction,border,matrixB,ratios) {
	if(border == null) border = false;
	if(direction == null) direction = 1.5707963267948966;
	if(matrixB == null) matrixB = b;
	org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org.aswing.plaf.basic.BasicGraphicsUtils.getGradientBrush(tune,org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix,border,ratios));
	var r = tune.round;
	if(r < org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix) g.rectangle(b.x,b.y,b.width,b.height); else {
		var fix = org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix;
		if(r > 5) fix = 0;
		g.roundRect(b.x,b.y,b.width,b.height,r,r,r + fix,r + fix);
	}
	g.endFill();
};
org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientCircle = function(g,b,tune,direction) {
	if(direction == null) direction = 1.5707963267948966;
	var matrixB = b;
	org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org.aswing.plaf.basic.BasicGraphicsUtils.getGradientBrush(tune,org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix,false,null));
	org.aswing.plaf.basic.BasicGraphicsUtils.drawCircle(g,b);
	g.endFill();
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawCircle = function(g,b) {
	g.circle(b.x + b.width / 2,b.y + b.height / 2,Math.floor(Math.min(b.width,b.height) / 2) - 1);
};
org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRectBottomRightAngle = function(g,b,tune,direction,border,matrixB) {
	if(border == null) border = false;
	if(direction == null) direction = 1.5707963267948966;
	if(matrixB == null) matrixB = b;
	org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org.aswing.plaf.basic.BasicGraphicsUtils.getGradientBrush(tune,org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix,border));
	var r = tune.round;
	if(r < org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix) g.rectangle(b.x,b.y,b.width,b.height); else {
		var fix = org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix;
		if(r > 5) fix = 0;
		g.roundRect(b.x,b.y,b.width,b.height,r,r,0,0);
	}
	g.endFill();
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRectLine = function(g,x,y,w,h,r,t) {
	if(r < org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix) {
		g.rectangle(x,y,w,h);
		g.rectangle(x + t,y + t,w - t * 2,h - t * 2);
	} else {
		var fix = org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix;
		if(r > 5) fix = 0;
		g.roundRect(x,y,w,h,r,r,r + fix,r + fix);
		r -= t / 2;
		g.roundRect(x + t,y + t,w - t * 2,h - t * 2,r,r,r + fix,r + fix);
	}
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine = function(g,b,t,tune,direction,border,matrixB) {
	if(border == null) border = true;
	if(direction == null) direction = 1.5707963267948966;
	var w = b.width;
	var h = b.height;
	var x = b.x;
	var y = b.y;
	var r = tune.round;
	if(matrixB == null) matrixB = b;
	org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix.createGradientBox(matrixB.width,matrixB.height,direction,matrixB.x,matrixB.y);
	g.beginFill(org.aswing.plaf.basic.BasicGraphicsUtils.getGradientBrush(tune,org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix,border));
	org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRectLine(g,b.x,b.y,b.width,b.height,r,t);
	g.endFill();
};
org.aswing.plaf.basic.BasicGraphicsUtils.getArrowPath = function(width,direction,centerX,centerY,round) {
	if(round == null) round = true;
	var center = new openfl.geom.Point(centerX,centerY);
	var w = width;
	var ps1 = new Array();
	ps1.push(org.aswing.plaf.basic.BasicGraphicsUtils.nextPoint(center,direction,w / 2 / 2,round));
	var back = org.aswing.plaf.basic.BasicGraphicsUtils.nextPoint(center,direction + Math.PI,w / 2 / 2);
	ps1.push(org.aswing.plaf.basic.BasicGraphicsUtils.nextPoint(back,direction - Math.PI / 2,w / 2,round));
	ps1.push(org.aswing.plaf.basic.BasicGraphicsUtils.nextPoint(back,direction + Math.PI / 2,w / 2,round));
	return ps1;
};
org.aswing.plaf.basic.BasicGraphicsUtils.nextPoint = function(p,dir,dis,round) {
	if(round == null) round = false;
	if(round) return new openfl.geom.Point(Math.round(p.x + Math.cos(dir) * dis),Math.round(p.y + Math.sin(dir) * dis)); else return new openfl.geom.Point(p.x + Math.cos(dir) * dis,p.y + Math.sin(dir) * dis);
};
org.aswing.plaf.basic.BasicGraphicsUtils.getDisabledColor = function(c) {
	var bg = c.getBackground();
	if(bg == null) bg = org.aswing.ASColor.BLACK;
	return org.aswing.plaf.basic.BasicGraphicsUtils.disabledColor(bg);
};
org.aswing.plaf.basic.BasicGraphicsUtils.disabledColor = function(cl) {
	var bg = cl;
	var hue = bg.getHue();
	var lum = bg.getLuminance();
	var sat = bg.getSaturation();
	if(lum < 0.6) lum += 0.1; else lum -= 0.1;
	sat -= 0.2;
	return org.aswing.ASColor.getASColorWithHLS(hue,lum,sat,bg.getAlpha());
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawUpperedBezel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var x1 = r.x;
	var y1 = r.y;
	var w = r.width;
	var h = r.height;
	var brush = new org.aswing.graphics.SolidBrush(darkShadow);
	g.fillRectangleRingWithThickness(brush,x1,y1,w,h,1);
	brush.setColor(lightHighlight);
	g.fillRectangleRingWithThickness(brush,x1,y1,w - 1,h - 1,1);
	brush.setColor(highlight);
	g.fillRectangleRingWithThickness(brush,x1 + 1,y1 + 1,w - 2,h - 2,1);
	brush.setColor(shadow);
	g.fillRectangle(brush,x1 + w - 2,y1 + 1,1,h - 2);
	g.fillRectangle(brush,x1 + 1,y1 + h - 2,w - 2,1);
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawLoweredBezel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var x1 = r.x;
	var y1 = r.y;
	var w = r.width;
	var h = r.height;
	var brush = new org.aswing.graphics.SolidBrush(darkShadow);
	g.fillRectangleRingWithThickness(brush,x1,y1,w,h,1);
	brush.setColor(darkShadow);
	g.fillRectangleRingWithThickness(brush,x1,y1,w - 1,h - 1,1);
	brush.setColor(highlight);
	g.fillRectangleRingWithThickness(brush,x1 + 1,y1 + 1,w - 2,h - 2,1);
	brush.setColor(highlight);
	g.fillRectangle(brush,x1 + w - 2,y1 + 1,1,h - 2);
	g.fillRectangle(brush,x1 + 1,y1 + h - 2,w - 2,1);
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawBezel = function(g,r,isPressed,shadow,darkShadow,highlight,lightHighlight) {
	if(isPressed) org.aswing.plaf.basic.BasicGraphicsUtils.drawLoweredBezel(g,r,shadow,darkShadow,highlight,lightHighlight); else org.aswing.plaf.basic.BasicGraphicsUtils.drawUpperedBezel(g,r,shadow,darkShadow,highlight,lightHighlight);
};
org.aswing.plaf.basic.BasicGraphicsUtils.paintBezel = function(g,r,isPressed,shadow,darkShadow,highlight,lightHighlight) {
	if(isPressed) org.aswing.plaf.basic.BasicGraphicsUtils.paintLoweredBevel(g,r,shadow,darkShadow,highlight,lightHighlight); else org.aswing.plaf.basic.BasicGraphicsUtils.paintRaisedBevel(g,r,shadow,darkShadow,highlight,lightHighlight);
};
org.aswing.plaf.basic.BasicGraphicsUtils.paintRaisedBevel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var h = r.height - 1;
	var w = r.width - 1;
	var x = r.x + 0.5;
	var y = r.y + 0.5;
	var pen = new org.aswing.graphics.Pen(lightHighlight,1,false,openfl.display.LineScaleMode.NORMAL,openfl.display.CapsStyle.SQUARE,openfl.display.JointStyle.MITER);
	g.drawLine(pen,x,y,x,y + h - 2);
	g.drawLine(pen,x + 1,y,x + w - 2,y);
	pen.setColor(highlight);
	g.drawLine(pen,x + 1,y + 1,x + 1,y + h - 3);
	g.drawLine(pen,x + 2,y + 1,x + w - 3,y + 1);
	pen.setColor(darkShadow);
	g.drawLine(pen,x,y + h - 1,x + w - 1,y + h - 1);
	g.drawLine(pen,x + w - 1,y,x + w - 1,y + h - 2);
	pen.setColor(shadow);
	g.drawLine(pen,x + 1,y + h - 2,x + w - 2,y + h - 2);
	g.drawLine(pen,x + w - 2,y + 1,x + w - 2,y + h - 3);
};
org.aswing.plaf.basic.BasicGraphicsUtils.paintLoweredBevel = function(g,r,shadow,darkShadow,highlight,lightHighlight) {
	var h = r.height - 1;
	var w = r.width - 1;
	var x = r.x + 0.5;
	var y = r.y + 0.5;
	var pen = new org.aswing.graphics.Pen(shadow,1,false,openfl.display.LineScaleMode.NORMAL,openfl.display.CapsStyle.SQUARE,openfl.display.JointStyle.MITER);
	g.drawLine(pen,x,y,x,y + h - 1);
	g.drawLine(pen,x + 1,y,x + w - 1,y);
	pen.setColor(darkShadow);
	g.drawLine(pen,x + 1,y + 1,x + 1,y + h - 2);
	g.drawLine(pen,x + 2,y + 1,x + w - 2,y + 1);
	pen.setColor(lightHighlight);
	g.drawLine(pen,x + 1,y + h - 1,x + w - 1,y + h - 1);
	g.drawLine(pen,x + w - 1,y + 1,x + w - 1,y + h - 2);
	pen.setColor(highlight);
	g.drawLine(pen,x + 2,y + h - 2,x + w - 2,y + h - 2);
	g.drawLine(pen,x + w - 2,y + 2,x + w - 2,y + h - 3);
};
org.aswing.plaf.basic.BasicGraphicsUtils.paintButtonBackGround = function(c,g,b) {
	var bgColor;
	if(c.getBackground() == null) bgColor = org.aswing.ASColor.WHITE; else bgColor = c.getBackground();
	if(c.isOpaque()) {
		if(c.getModel().isArmed() || c.getModel().isSelected() || !c.isEnabled()) g.fillRectangle(new org.aswing.graphics.SolidBrush(bgColor),b.x,b.y,b.width,b.height); else org.aswing.plaf.basic.BasicGraphicsUtils.drawControlBackground(g,b,bgColor,Math.PI / 2);
	}
};
org.aswing.plaf.basic.BasicGraphicsUtils.drawControlBackground = function(g,b,bgColor,direction) {
	g.fillRectangle(new org.aswing.graphics.SolidBrush(bgColor),b.x,b.y,b.width,b.height);
	var x = b.x;
	var y = b.y;
	var w = b.width;
	var h = b.height;
	var colors = [16777215,16777215];
	var alphas = [0.75,0];
	var ratios = [0,100];
	var matrix = new openfl.geom.Matrix();
	matrix.createGradientBox(w,h,direction,x,y);
	var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,colors,alphas,ratios,matrix);
	g.fillRectangle(brush,x,y,w,h);
};
org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRect = function(g,b,c1,c2,direction,ratios) {
	var x = b.x;
	var y = b.y;
	var w = b.width;
	var h = b.height;
	var colors = [c1.getRGB(),c2.getRGB()];
	var alphas = [c1.getAlpha(),c2.getAlpha()];
	if(ratios == null) ratios = [0,255];
	var matrix = new openfl.geom.Matrix();
	matrix.createGradientBox(w,h,direction,x,y);
	var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,colors,alphas,ratios,matrix);
	g.fillRectangle(brush,x,y,w,h);
};
org.aswing.plaf.basic.BasicLabelUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicLabelUI"] = org.aswing.plaf.basic.BasicLabelUI;
org.aswing.plaf.basic.BasicLabelUI.__name__ = ["org","aswing","plaf","basic","BasicLabelUI"];
org.aswing.plaf.basic.BasicLabelUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicLabelUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Label.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JLabel)) this.label = c; else this.label = null;
		this.installDefaults(this.label);
		this.installComponents(this.label);
		this.installListeners(this.label);
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JLabel)) this.label = c; else this.label = null;
		this.uninstallDefaults(this.label);
		this.uninstallComponents(this.label);
		this.uninstallListeners(this.label);
	}
	,installDefaults: function(b) {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(b,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(b,pp);
		org.aswing.LookAndFeel.installBasicProperties(b,pp);
	}
	,uninstallDefaults: function(b) {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(b);
	}
	,installComponents: function(b) {
		this.textField = new openfl.text.TextField();
		this.textField.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
		this.textField.selectable = false;
		this.textField.mouseEnabled = false;
		b.addChild(this.textField);
		b.setFontValidated(false);
	}
	,uninstallComponents: function(b) {
		b.removeChild(this.textField);
	}
	,installListeners: function(b) {
	}
	,uninstallListeners: function(b) {
	}
	,paint: function(c,g,r) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,r);
		var b;
		if(js.Boot.__instanceof(c,org.aswing.JLabel)) b = c; else b = null;
		org.aswing.plaf.basic.BasicLabelUI.viewRect.setRect(r);
		org.aswing.plaf.basic.BasicLabelUI.textRect.x = org.aswing.plaf.basic.BasicLabelUI.textRect.y = org.aswing.plaf.basic.BasicLabelUI.textRect.width = org.aswing.plaf.basic.BasicLabelUI.textRect.height = 0;
		org.aswing.plaf.basic.BasicLabelUI.iconRect.x = org.aswing.plaf.basic.BasicLabelUI.iconRect.y = org.aswing.plaf.basic.BasicLabelUI.iconRect.width = org.aswing.plaf.basic.BasicLabelUI.iconRect.height = 0;
		var text = org.aswing.AsWingUtils.layoutCompoundLabel(c,c.getFont(),b.getText(),this.getIconToLayout(),Std["int"](b.getVerticalAlignment()),Std["int"](b.getHorizontalAlignment()),Std["int"](b.getVerticalTextPosition()),Std["int"](b.getHorizontalTextPosition()),org.aswing.plaf.basic.BasicLabelUI.viewRect,org.aswing.plaf.basic.BasicLabelUI.iconRect,org.aswing.plaf.basic.BasicLabelUI.textRect,Std["int"](b.getText() == null?0:b.getIconTextGap()));
		this.paintIcon(b,g,org.aswing.plaf.basic.BasicLabelUI.iconRect);
		if(text != null && text != "") {
			this.textField.set_visible(true);
			this.paintText(b,org.aswing.plaf.basic.BasicLabelUI.textRect,text);
		} else {
			this.textField.set_text("");
			this.textField.set_visible(false);
		}
		this.textField.selectable = b.isSelectable();
		this.textField.mouseEnabled = b.isSelectable();
	}
	,getIconToLayout: function() {
		return this.label.getIcon();
	}
	,paintText: function(b,textRect,text) {
		var font = b.getFont();
		if(this.textField.get_text() != text) this.textField.set_text(text);
		if(!b.isFontValidated()) {
			org.aswing.AsWingUtils.applyTextFont(this.textField,font);
			b.setFontValidated(true);
		}
		org.aswing.AsWingUtils.applyTextColor(this.textField,b.getForeground());
		this.textField.set_x(textRect.x);
		this.textField.set_y(textRect.y);
		if(!b.isEnabled()) {
			var f = new Array();
			f.push(new openfl.filters.BlurFilter(2,2,2));
			b.set_filters(f);
		} else b.set_filters([]);
		this.textField.set_filters(this.label.getTextFilters());
	}
	,paintIcon: function(b,g,iconRect) {
		var icon = b.getIcon();
		var tmpIcon = null;
		var icons = this.getIcons();
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ico = icons[i];
			this.setIconVisible(ico,false);
		}
		if(icon == null) return;
		if(!b.isEnabled()) tmpIcon = b.getDisabledIcon();
		if(tmpIcon != null) icon = tmpIcon;
		this.setIconVisible(icon,true);
		icon.updateIcon(b,g,iconRect.x,iconRect.y);
	}
	,setIconVisible: function(icon,visible) {
		if(icon.getDisplay(this.label) != null) icon.getDisplay(this.label).set_visible(visible);
	}
	,getIcons: function() {
		var arr = new Array();
		if(this.label.getIcon() != null) arr.push(this.label.getIcon());
		if(this.label.getDisabledIcon() != null) arr.push(this.label.getDisabledIcon());
		return arr;
	}
	,getLabelPreferredSize: function(b,icon,text) {
		org.aswing.plaf.basic.BasicLabelUI.viewRect.setRectXYWH(0,0,100000,100000);
		org.aswing.plaf.basic.BasicLabelUI.textRect.x = org.aswing.plaf.basic.BasicLabelUI.textRect.y = org.aswing.plaf.basic.BasicLabelUI.textRect.width = org.aswing.plaf.basic.BasicLabelUI.textRect.height = 0;
		org.aswing.plaf.basic.BasicLabelUI.iconRect.x = org.aswing.plaf.basic.BasicLabelUI.iconRect.y = org.aswing.plaf.basic.BasicLabelUI.iconRect.width = org.aswing.plaf.basic.BasicLabelUI.iconRect.height = 0;
		org.aswing.AsWingUtils.layoutCompoundLabel(b,b.getFont(),text,icon,Std["int"](b.getVerticalAlignment()),Std["int"](b.getHorizontalAlignment()),Std["int"](b.getVerticalTextPosition()),Std["int"](b.getHorizontalTextPosition()),org.aswing.plaf.basic.BasicLabelUI.viewRect,org.aswing.plaf.basic.BasicLabelUI.iconRect,org.aswing.plaf.basic.BasicLabelUI.textRect,Std["int"](b.getText() == null?0:b.getIconTextGap()));
		var size;
		if(icon == null) size = org.aswing.plaf.basic.BasicLabelUI.textRect.getSize(); else if(b.getText() == null || b.getText() == "") size = org.aswing.plaf.basic.BasicLabelUI.iconRect.getSize(); else {
			var r = org.aswing.plaf.basic.BasicLabelUI.iconRect.union(org.aswing.plaf.basic.BasicLabelUI.textRect);
			size = r.getSize();
		}
		size = b.getInsets().getOutsideSize(size);
		return size;
	}
	,getPreferredSize: function(c) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.JLabel)) b = c; else b = null;
		return this.getLabelPreferredSize(b,this.getIconToLayout(),b.getText());
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize();
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,__class__: org.aswing.plaf.basic.BasicLabelUI
});
org.aswing.plaf.basic.BasicListUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicListUI"] = org.aswing.plaf.basic.BasicListUI;
org.aswing.plaf.basic.BasicListUI.__name__ = ["org","aswing","plaf","basic","BasicListUI"];
org.aswing.plaf.basic.BasicListUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicListUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JList)) this.list = c; else this.list = null;
		this.installDefaults();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "List.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.list,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.list,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.list,pp);
		var sbg = this.list.getSelectionBackground();
		if(sbg == null || js.Boot.__instanceof(sbg,org.aswing.plaf.UIResource)) this.list.setSelectionBackground(this.getColor(pp + "selectionBackground"));
		var sfg = this.list.getSelectionForeground();
		if(sfg == null || js.Boot.__instanceof(sfg,org.aswing.plaf.UIResource)) this.list.setSelectionForeground(this.getColor(pp + "selectionForeground"));
	}
	,installListeners: function() {
		this.list.addEventListener("itemClick",$bind(this,this.__onItemClick),false,0,false);
		this.list.addEventListener("itemMouseDown",$bind(this,this.__onItemMouseDown),false,0,false);
		this.list.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown),false,0,false);
		this.list.addEventListener("focusLost",$bind(this,this.__onFocusLost),false,0,false);
		this.list.addEventListener("listSelectionChanged",$bind(this,this.__onSelectionChanged),false,0,false);
		this.list.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel),false,0,false);
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.list);
	}
	,uninstallListeners: function() {
		this.list.removeEventListener("itemClick",$bind(this,this.__onItemClick));
		this.list.removeEventListener("itemMouseDown",$bind(this,this.__onItemMouseDown));
		this.list.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.list.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.list.removeEventListener("listSelectionChanged",$bind(this,this.__onSelectionChanged));
		this.list.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
	}
	,paintFocus: function(c,g,b) {
		var fm = org.aswing.FocusManager.getManager(this.list.get_stage());
		if(fm != null) {
			this.focusGraphics = g;
			this.focusRectangle = b;
			this.focusGraphicsOwner = fm.moveFocusRectUpperTo(this.list).get_graphics();
			this.paintCurrentCellFocus();
		}
	}
	,paintCurrentCellFocus: function() {
		if(this.paintFocusedCell != null) this.paintCellFocus(this.paintFocusedCell.getCellComponent()); else org.aswing.plaf.BaseComponentUI.prototype.paintFocus.call(this,this.list,this.focusGraphics,this.focusRectangle);
	}
	,paintCellFocusWithIndex: function(index) {
		if(index < 0 || index >= this.list.getModel().getSize()) return;
		this.paintFocusedCell = this.list.getCellByIndex(index);
		this.paintFocusedIndex = index;
		if(this.paintFocusedCell != null) this.paintCellFocus(this.paintFocusedCell.getCellComponent());
	}
	,paintCellFocus: function(cellComponent) {
		if(this.focusGraphicsOwner != null) this.focusGraphicsOwner.clear();
		org.aswing.plaf.BaseComponentUI.prototype.paintFocus.call(this,this.list,this.focusGraphics,this.focusRectangle);
		org.aswing.plaf.BaseComponentUI.prototype.paintFocus.call(this,this.list,this.focusGraphics,this.paintFocusedCell.getCellComponent().getComBounds());
	}
	,__onMouseWheel: function(e) {
		if(!this.list.isEnabled()) return;
		var viewPos = this.list.getViewPosition();
		if(e.shiftKey) viewPos.x -= e.delta * this.list.getHorizontalUnitIncrement(); else viewPos.y -= e.delta * this.list.getVerticalUnitIncrement();
		this.list.setViewPosition(viewPos);
	}
	,__onFocusLost: function(e) {
		if(this.focusGraphicsOwner != null) this.focusGraphicsOwner.clear();
	}
	,__onKeyDown: function(e) {
		if(!this.list.isEnabled()) return;
		var code = e.keyCode;
		var dir = 0;
		if(code == org.aswing.AWKeyboard.UP || code == org.aswing.AWKeyboard.DOWN || code == org.aswing.AWKeyboard.SPACE) {
			var fm = org.aswing.FocusManager.getManager(this.list.get_stage());
			if(fm != null) fm.setTraversing(true);
		}
		if(code == org.aswing.AWKeyboard.UP) dir = -1; else if(code == org.aswing.AWKeyboard.DOWN) dir = 1;
		if(this.paintFocusedIndex == -1) this.paintFocusedIndex = this.list.getSelectedIndex();
		if(this.paintFocusedIndex < -1) this.paintFocusedIndex = -1; else if(this.paintFocusedIndex > this.list.getModel().getSize()) this.paintFocusedIndex = this.list.getModel().getSize();
		var index = this.paintFocusedIndex + dir | 0;
		if(code == org.aswing.AWKeyboard.HOME) index = 0; else if(code == org.aswing.AWKeyboard.END) index = this.list.getModel().getSize() - 1;
		if(index < 0 || index >= this.list.getModel().getSize()) return;
		if(dir != 0 || (code == org.aswing.AWKeyboard.HOME || code == org.aswing.AWKeyboard.END)) {
			this.list.ensureIndexIsVisible(index);
			this.list.validate();
			if(e.shiftKey) {
				var archor = this.list.getAnchorSelectionIndex();
				if(archor < 0) archor = index;
				this.list.setSelectionInterval(archor,index,false);
			} else if(e.ctrlKey) {
			} else this.list.setSelectionInterval(index,index,false);
			this.paintCellFocusWithIndex(index);
		} else if(code == org.aswing.AWKeyboard.SPACE) {
			this.list.addSelectionInterval(index,index,false);
			this.paintCellFocusWithIndex(index);
			this.list.ensureIndexIsVisible(index);
		}
	}
	,__onSelectionChanged: function(e) {
		var fm = org.aswing.FocusManager.getManager(this.list.get_stage());
		if(fm != null && fm.isTraversing() && this.list.isFocusOwner()) {
			if(this.focusGraphics == null) this.list.paintFocusRect(true);
			this.paintCellFocusWithIndex(this.list.getLeadSelectionIndex());
		}
	}
	,__onItemMouseDown: function(e) {
		var index = this.list.getItemIndexByCell(e.getCell());
		this.pressedIndex = index;
		this.pressedCtrl = e.ctrlKey;
		this.pressedShift = e.shiftKey;
		this.doSelectionWhenRelease = false;
		if(this.list.getSelectionMode() == 1) {
			if(this.list.isSelectedIndex(index)) this.doSelectionWhenRelease = true; else this.doSelection();
		} else this.list.setSelectionInterval(index,index,false);
	}
	,doSelection: function() {
		var index = this.pressedIndex | 0;
		if(this.pressedShift) {
			var archor = this.list.getAnchorSelectionIndex();
			if(archor < 0) archor = index;
			this.list.setSelectionInterval(archor,index,false);
		} else if(this.pressedCtrl) {
			if(!this.list.isSelectedIndex(index)) this.list.addSelectionInterval(index,index,false); else this.list.removeSelectionInterval(index,index,false);
		} else this.list.setSelectionInterval(index,index,false);
	}
	,__onItemClick: function(e) {
		if(this.doSelectionWhenRelease) {
			this.doSelection();
			this.doSelectionWhenRelease = false;
		}
	}
	,__class__: org.aswing.plaf.basic.BasicListUI
});
org.aswing.plaf.basic.BasicLookAndFeel = function() {
	this.NULL_COLOR = org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR;
	this.NULL_FONT = org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_FONT;
};
$hxClasses["org.aswing.plaf.basic.BasicLookAndFeel"] = org.aswing.plaf.basic.BasicLookAndFeel;
org.aswing.plaf.basic.BasicLookAndFeel.__name__ = ["org","aswing","plaf","basic","BasicLookAndFeel"];
org.aswing.plaf.basic.BasicLookAndFeel.__super__ = org.aswing.LookAndFeel;
org.aswing.plaf.basic.BasicLookAndFeel.prototype = $extend(org.aswing.LookAndFeel.prototype,{
	getDefaults: function() {
		var table = new org.aswing.UIDefaults();
		this.initClassDefaults(table);
		this.initSystemColorDefaults(table);
		this.initSystemFontDefaults(table);
		this.initCommonUtils(table);
		this.initComponentDefaults(table);
		return table;
	}
	,initClassDefaults: function(table) {
		var uiDefaults = [];
		table.putDefaults(uiDefaults);
	}
	,initSystemColorDefaults: function(table) {
		var defaultSystemColors = ["window",15132390,"windowText",16777214,"menu",15395562,"menuText",6118749,"control",0,"controlMide",3127274,"controlText",5066061,"selectionForeground",16777215];
		var _g1 = 0;
		var _g = defaultSystemColors.length;
		while(_g1 < _g) {
			var i = _g1++;
			table.set(defaultSystemColors[i],new org.aswing.plaf.ASColorUIResource(defaultSystemColors[i + 1]));
		}
		table.set("selectionBackground",new org.aswing.plaf.ASColorUIResource(9680984,0.9));
		table.set("focusInner",new org.aswing.plaf.ASColorUIResource(4259648,0.3));
		table.set("focusOutter",new org.aswing.plaf.ASColorUIResource(4259648,0.4));
	}
	,initSystemFontDefaults: function(table) {
		var defaultSystemFonts = ["systemFont",new org.aswing.plaf.ASFontUIResource("Arial",12),"menuFont",new org.aswing.plaf.ASFontUIResource("Arial",12),"controlFont",new org.aswing.plaf.ASFontUIResource("Arial",12,false),"windowFont",new org.aswing.plaf.ASFontUIResource("Arial",12,true)];
		table.putDefaults(defaultSystemFonts);
	}
	,initCommonUtils: function(table) {
		org.aswing.resizer.ResizerController.setDefaultResizerClass(org.aswing.resizer.DefaultResizer);
		var arrowColors = ["resizeArrow",new org.aswing.plaf.ASColorUIResource(5095888),"resizeArrowLight",new org.aswing.plaf.ASColorUIResource(10674150),"resizeArrowDark",new org.aswing.plaf.ASColorUIResource(2790817)];
		table.putDefaults(arrowColors);
		var cursors = ["System.hResizeCursor",org.aswing.plaf.basic.cursor.H_ResizeCursor,"System.vResizeCursor",org.aswing.plaf.basic.cursor.V_ResizeCursor,"System.hvResizeCursor",org.aswing.plaf.basic.cursor.HV_ResizeCursor,"System.hMoveCursor",org.aswing.plaf.basic.cursor.H_ResizeCursor,"System.vMoveCursor",org.aswing.plaf.basic.cursor.V_ResizeCursor,"System.hvMoveCursor",org.aswing.plaf.basic.cursor.HV_ResizeCursor];
		table.putDefaults(cursors);
	}
	,initComponentDefaults: function(table) {
		var buttonBG = new org.aswing.plaf.ASColorUIResource(4103381);
		var textBG = new org.aswing.plaf.ASColorUIResource(16448250);
		var f;
		f = new Array();
		f.push(new openfl.filters.DropShadowFilter(1,45,0,0.3,1,1,1,1));
		var comDefaults = ["Button.background",buttonBG,"Button.foreground",new org.aswing.plaf.ASColorUIResource(16777214),"Button.mideground",table.get("controlMide"),"Button.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,-0.02,0.34,0.22,5),"Button.opaque",true,"Button.focusable",true,"Button.font",table.getFont("controlFont"),"Button.bg",org.aswing.plaf.basic.background.ButtonBackground,"Button.margin",new org.aswing.plaf.InsetsUIResource(2,3,5,3),"Button.textShiftOffset",0,"Button.textFilters",f];
		table.putDefaults(comDefaults);
		f = new Array();
		f.push(new openfl.filters.DropShadowFilter(1,45,0,0.0,1,1,1,1));
		comDefaults = ["LabelButton.background",buttonBG,"LabelButton.foreground",new org.aswing.plaf.ASColorUIResource(22039),"LabelButton.mideground",table.get("controlMide"),"LabelButton.colorAdjust",new org.aswing.plaf.UIStyleTune(0.26,0.05,0.20,0.20),"LabelButton.opaque",false,"LabelButton.focusable",true,"LabelButton.font",table.getFont("controlFont"),"LabelButton.margin",new org.aswing.plaf.InsetsUIResource(0,0,0,0),"LabelButton.textShiftOffset",0,"LabelButton.textFilters",f];
		table.putDefaults(comDefaults);
		comDefaults = ["Panel.background",table.get("window"),"Panel.foreground",table.get("windowText"),"Panel.mideground",table.get("controlMide"),"Panel.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"Panel.opaque",false,"Panel.focusable",false,"Panel.bg",org.aswing.plaf.basic.background.PanelBackground,"Panel.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		f = new Array();
		f.push(new openfl.filters.DropShadowFilter(1,45,0,0.3,1,1,1,1));
		comDefaults = ["ToggleButton.background",buttonBG,"ToggleButton.foreground",new org.aswing.plaf.ASColorUIResource(16777214),"ToggleButton.mideground",table.get("controlMide"),"ToggleButton.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,-0.02,0.34,0.22,5),"ToggleButton.opaque",true,"ToggleButton.focusable",true,"ToggleButton.font",table.getFont("controlFont"),"ToggleButton.bg",org.aswing.plaf.basic.background.ToggleButtonBackground,"ToggleButton.margin",new org.aswing.plaf.InsetsUIResource(2,3,5,3),"ToggleButton.textShiftOffset",1,"ToggleButton.textFilters",f];
		table.putDefaults(comDefaults);
		comDefaults = ["RadioButton.background",new org.aswing.plaf.ASColorUIResource(14804453),"RadioButton.foreground",table.get("controlText"),"RadioButton.mideground",new org.aswing.plaf.ASColorUIResource(3780607),"RadioButton.colorAdjust",new org.aswing.plaf.UIStyleTune(0.8,0.01,0.4,0.30,0,new org.aswing.plaf.UIStyleTune(0.4,0.1,0.1,0.00)),"RadioButton.opaque",false,"RadioButton.focusable",true,"RadioButton.font",table.getFont("controlFont"),"RadioButton.icon",org.aswing.plaf.basic.icon.RadioButtonIcon,"RadioButton.margin",new org.aswing.plaf.InsetsUIResource(0,0,0,0),"RadioButton.textShiftOffset",0,"RadioButton.textFilters",[]];
		table.putDefaults(comDefaults);
		comDefaults = ["TextField.background",textBG,"TextField.foreground",table.get("controlText"),"TextField.mideground",new org.aswing.plaf.ASColorUIResource(9026304),"TextField.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,-0.30,0.0,0.30,3),"TextField.opaque",true,"TextField.focusable",true,"TextField.font",table.getFont("controlFont"),"TextField.bg",org.aswing.plaf.basic.background.TextComponentBackBround,"TextField.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["CheckBox.background",new org.aswing.plaf.ASColorUIResource(14804453),"CheckBox.foreground",table.get("controlText"),"CheckBox.mideground",new org.aswing.plaf.ASColorUIResource(3780607),"CheckBox.colorAdjust",new org.aswing.plaf.UIStyleTune(0.8,0.01,0.4,0.30,2,new org.aswing.plaf.UIStyleTune(0.5,-0.2,0.5,0.70)),"CheckBox.opaque",false,"CheckBox.focusable",true,"CheckBox.font",table.getFont("controlFont"),"CheckBox.icon",org.aswing.plaf.basic.icon.CheckBoxIcon,"CheckBox.margin",new org.aswing.plaf.InsetsUIResource(0,0,0,0),"CheckBox.textShiftOffset",0,"CheckBox.textFilters",[]];
		table.putDefaults(comDefaults);
		comDefaults = ["Separator.background",new org.aswing.plaf.ASColorUIResource(3507061,0.3),"Separator.foreground",this.NULL_COLOR,"Separator.mideground",this.NULL_COLOR,"Separator.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"Separator.opaque",false,"Separator.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["ScrollBar.background",new org.aswing.plaf.ASColorUIResource(11053224,0.3),"ScrollBar.foreground",table.get("controlText"),"ScrollBar.mideground",new org.aswing.plaf.ASColorUIResource(15198183,0.8),"ScrollBar.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.08,0.20,0.50,2,new org.aswing.plaf.UIStyleTune(0.08,-0.3,0.08,0.20,2)),"ScrollBar.opaque",true,"ScrollBar.focusable",true,"ScrollBar.barWidth",14,"ScrollBar.minimumThumbLength",24,"ScrollBar.font",table.getFont("controlFont"),"ScrollBar.bg",org.aswing.plaf.basic.background.ScrollBarBackground,"ScrollBar.thumbDecorator",org.aswing.plaf.basic.background.ScrollBarThumb];
		table.putDefaults(comDefaults);
		comDefaults = ["ScrollPane.background",table.get("window"),"ScrollPane.foreground",table.get("windowText"),"ScrollPane.mideground",table.get("controlMide"),"ScrollPane.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"ScrollPane.opaque",false,"ScrollPane.focusable",false,"ScrollPane.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["ProgressBar.background",new org.aswing.plaf.ASColorUIResource(11908533,0.3),"ProgressBar.foreground",table.get("windowText"),"ProgressBar.mideground",new org.aswing.plaf.ASColorUIResource(13563487),"ProgressBar.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.50,4,new org.aswing.plaf.UIStyleTune(0.34,-0.4,0.01,0.50,4)),"ProgressBar.opaque",true,"ProgressBar.focusable",false,"ProgressBar.barWidth",11,"ProgressBar.font",new org.aswing.plaf.ASFontUIResource("Tahoma",9),"ProgressBar.bg",org.aswing.plaf.basic.background.ProgressBarBackground,"ProgressBar.fg",org.aswing.plaf.basic.background.ProgressBarIcon,"ProgressBar.progressColor",new org.aswing.plaf.ASColorUIResource(3368652),"ProgressBar.indeterminateDelay",40];
		table.putDefaults(comDefaults);
		comDefaults = ["Viewport.background",table.get("window"),"Viewport.foreground",table.get("windowText"),"Viewport.mideground",table.get("controlMide"),"Viewport.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"Viewport.opaque",false,"Viewport.focusable",true,"Viewport.font",table.getFont("windowFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["Label.background",table.get("control"),"Label.foreground",table.get("controlText"),"Label.mideground",table.get("controlMide"),"Label.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"Label.opaque",false,"Label.focusable",false,"Label.font",table.getFont("controlFont")];
		table.putDefaults(comDefaults);
		comDefaults = ["TextArea.background",textBG,"TextArea.foreground",table.get("controlText"),"TextArea.mideground",new org.aswing.plaf.ASColorUIResource(9026304),"TextArea.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,-0.30,0.0,0.30,3),"TextArea.opaque",true,"TextArea.focusable",true,"TextArea.font",table.getFont("controlFont"),"TextArea.bg",org.aswing.plaf.basic.background.TextComponentBackBround,"TextArea.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["Frame.background",new org.aswing.plaf.ASColorUIResource(15132390),"Frame.foreground",new org.aswing.plaf.ASColorUIResource(6710886),"Frame.mideground",new org.aswing.plaf.ASColorUIResource(11195674),"Frame.colorAdjust",new org.aswing.plaf.UIStyleTune(0.10,0.0,0.0,0.30,10,new org.aswing.plaf.UIStyleTune(0.10,0.0,0.0,0.60,10)),"Frame.opaque",true,"Frame.focusable",true,"Frame.dragDirectly",true,"Frame.resizeArrow",new org.aswing.plaf.ASColorUIResource(2977161),"Frame.resizeArrowLight",new org.aswing.plaf.ASColorUIResource(14869214),"Frame.resizeArrowDark",new org.aswing.plaf.ASColorUIResource(3042698),"Frame.resizer",org.aswing.resizer.DefaultResizer,"Frame.font",table.get("windowFont"),"Frame.resizerMargin",new org.aswing.plaf.InsetsUIResource(2,1,6,6),"Frame.bg",org.aswing.plaf.basic.background.FrameBackground,"Frame.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(0,6,12,12)),"Frame.icon",org.aswing.plaf.basic.icon.TitleIcon,"Frame.iconifiedIcon",org.aswing.plaf.basic.icon.FrameIconifiedIcon,"Frame.normalIcon",org.aswing.plaf.basic.icon.FrameNormalIcon,"Frame.maximizeIcon",org.aswing.plaf.basic.icon.FrameMaximizeIcon,"Frame.closeIcon",org.aswing.plaf.basic.icon.FrameCloseIcon];
		table.putDefaults(comDefaults);
		comDefaults = ["FrameTitleBar.background",new org.aswing.plaf.ASColorUIResource(12902502),"FrameTitleBar.foreground",new org.aswing.plaf.ASColorUIResource(33965),"FrameTitleBar.mideground",new org.aswing.plaf.ASColorUIResource(12507997),"FrameTitleBar.colorAdjust",new org.aswing.plaf.UIStyleTune(0.24,0.01,0.18,0.50,0,new org.aswing.plaf.UIStyleTune(0.2,-0.28,0.08,0.10,1)),"FrameTitleBar.opaque",true,"FrameTitleBar.focusable",false,"FrameTitleBar.titleBarHeight",25,"FrameTitleBar.buttonGap",2,"FrameTitleBar.font",table.get("windowFont"),"FrameTitleBar.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(7,0,0,0)),"FrameTitleBar.icon",org.aswing.plaf.basic.icon.TitleIcon,"FrameTitleBar.iconifiedIcon",org.aswing.plaf.basic.icon.FrameIconifiedIcon,"FrameTitleBar.normalIcon",org.aswing.plaf.basic.icon.FrameNormalIcon,"FrameTitleBar.maximizeIcon",org.aswing.plaf.basic.icon.FrameMaximizeIcon,"FrameTitleBar.closeIcon",org.aswing.plaf.basic.icon.FrameCloseIcon];
		table.putDefaults(comDefaults);
		f = new Array();
		f.push(new openfl.filters.DropShadowFilter(4.0,45,0,0.3,2.0,2.0,0.5));
		comDefaults = ["ToolTip.background",new org.aswing.plaf.ASColorUIResource(15531260),"ToolTip.foreground",new org.aswing.plaf.ASColorUIResource(13124),"ToolTip.mideground",new org.aswing.plaf.ASColorUIResource(2975875),"ToolTip.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20,2),"ToolTip.opaque",true,"ToolTip.focusable",false,"ToolTip.font",table.getFont("controlFont"),"ToolTip.filters",f,"ToolTip.bg",org.aswing.plaf.basic.background.ToolTipBackground,"ToolTip.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(1,3,1,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["List.font",table.getFont("controlFont"),"List.background",new org.aswing.plaf.ASColorUIResource(3376538,0),"List.foreground",table.get("controlText"),"List.mideground",new org.aswing.plaf.ASColorUIResource(3376794),"List.colorAdjust",new org.aswing.plaf.UIStyleTune(0.08,0.05,0.20,0.20,0),"List.opaque",false,"List.focusable",true,"List.bg",org.aswing.plaf.basic.background.ListBackground,"List.selectionBackground",table.get("selectionBackground"),"List.selectionForeground",table.get("selectionForeground")];
		table.putDefaults(comDefaults);
		comDefaults = ["SplitPane.background",new org.aswing.plaf.ASColorUIResource(2515580),"SplitPane.foreground",new org.aswing.plaf.ASColorUIResource(5287642),"SplitPane.mideground",table.get("controlMide"),"SplitPane.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"SplitPane.opaque",false,"SplitPane.focusable",true,"SplitPane.defaultDividerSize",10,"SplitPane.font",table.getFont("windowFont"),"SplitPane.border",null,"SplitPane.presentDragColor",new org.aswing.plaf.ASColorUIResource(4560312,0.4)];
		table.putDefaults(comDefaults);
		comDefaults = ["Spacer.background",table.get("window"),"Spacer.foreground",table.get("window"),"Spacer.mideground",table.get("controlMide"),"Spacer.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"Spacer.opaque",false,"Spacer.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["ComboBox.font",table.getFont("controlFont"),"ComboBox.background",textBG,"ComboBox.foreground",table.get("controlText"),"ComboBox.mideground",new org.aswing.plaf.ASColorUIResource(9026304),"ComboBox.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,-0.30,0.0,0.32,3,new org.aswing.plaf.UIStyleTune(0.04,0.05,0.20,0.1)),"ComboBox.opaque",true,"ComboBox.focusable",true,"ComboBox.popupBorder",org.aswing.plaf.basic.border.ComboBoxPopupBorder,"ComboBox.bg",org.aswing.plaf.basic.background.InputBackground,"ComboBox.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["Slider.font",table.getFont("controlFont"),"Slider.background",new org.aswing.plaf.ASColorUIResource(7334137,0.34),"Slider.foreground",table.get("controlText"),"Slider.mideground",table.get("controlMide"),"Slider.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.50,6,new org.aswing.plaf.UIStyleTune(0.2,0.00,0.4,0.00,0)),"Slider.opaque",false,"Slider.focusable",true,"Slider.thumbIcon",org.aswing.plaf.basic.icon.SliderThumbIcon];
		table.putDefaults(comDefaults);
		comDefaults = ["Adjuster.background",textBG,"Adjuster.foreground",table.get("controlText"),"Adjuster.mideground",new org.aswing.plaf.ASColorUIResource(9026304),"Adjuster.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,-0.30,0.0,0.32,3,new org.aswing.plaf.UIStyleTune(0.04,0.05,0.20,0.1)),"Adjuster.opaque",true,"Adjuster.focusable",true,"Adjuster.font",table.getFont("controlFont"),"Adjuster.thumbIcon",org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon,"Adjuster.bg",org.aswing.plaf.basic.background.InputBackground,"Adjuster.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["Stepper.font",table.getFont("controlFont"),"Stepper.background",textBG,"Stepper.foreground",table.get("controlText"),"Stepper.mideground",new org.aswing.plaf.ASColorUIResource(9026304),"Stepper.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,-0.30,0.0,0.32,3,new org.aswing.plaf.UIStyleTune(0.04,0.05,0.20,0.1)),"Stepper.opaque",true,"Stepper.focusable",true,"Stepper.bg",org.aswing.plaf.basic.background.InputBackground,"Stepper.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(1,3,2,3))];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorSwatches.background",new org.aswing.plaf.ASColorUIResource(15658734),"ColorSwatches.foreground",table.get("controlText"),"ColorSwatches.mideground",table.get("controlMide"),"ColorSwatches.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"ColorSwatches.opaque",false,"ColorSwatches.focusable",false,"ColorSwatches.font",table.getFont("controlFont"),"ColorSwatches.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorMixer.background",new org.aswing.plaf.ASColorUIResource(15658734),"ColorMixer.foreground",table.get("controlText"),"ColorMixer.mideground",table.get("controlMide"),"ColorMixer.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"ColorMixer.opaque",false,"ColorMixer.focusable",false,"ColorMixer.font",table.getFont("controlFont"),"ColorMixer.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ColorChooser.background",table.get("window"),"ColorChooser.foreground",table.get("controlText"),"ColorChooser.mideground",table.get("controlMide"),"ColorChooser.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"ColorChooser.opaque",false,"ColorChooser.focusable",false,"ColorChooser.font",table.getFont("controlFont"),"ColorChooser.border",org.aswing.plaf.basic.border.ColorChooserBorder];
		table.putDefaults(comDefaults);
		comDefaults = ["Accordion.font",table.getFont("controlFont"),"Accordion.background",table.get("window"),"Accordion.foreground",new org.aswing.plaf.ASColorUIResource(16777214),"Accordion.mideground",table.get("controlMide"),"Accordion.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"Accordion.opaque",false,"Accordion.focusable",true,"Accordion.motionSpeed",50,"Accordion.tabMargin",new org.aswing.plaf.InsetsUIResource(2,3,3,2)];
		table.putDefaults(comDefaults);
		comDefaults = ["TabbedPane.background",table.get("window"),"TabbedPane.foreground",table.get("controlText"),"TabbedPane.mideground",new org.aswing.plaf.ASColorUIResource(13290443),"TabbedPane.colorAdjust",new org.aswing.plaf.UIStyleTune(0.01,-0.14,0.01,0.50,4,new org.aswing.plaf.UIStyleTune(0.05,-0.23,0.01,0.50,4)),"TabbedPane.opaque",false,"TabbedPane.focusable",true,"TabbedPane.arrowShadowColor",new org.aswing.plaf.ASColorUIResource(0),"TabbedPane.arrowLightColor",new org.aswing.plaf.ASColorUIResource(4473924),"TabbedPane.font",table.getFont("controlFont"),"TabbedPane.tabMargin",new org.aswing.plaf.InsetsUIResource(3,8,2,8),"TabbedPane.contentMargin",new org.aswing.plaf.InsetsUIResource(10,2,2,2),"TabbedPane.selectedTabExpandInsets",new org.aswing.plaf.InsetsUIResource(0,0,0,0),"TabbedPane.tabBorderInsets",new org.aswing.plaf.InsetsUIResource(0,0,0,0),"TabbedPane.contentRoundLineThickness",0,"TabbedPane.tabGap",2,"TabbedPane.topBlankSpace",0,"TabbedPane.maxTabWidth",1000];
		table.putDefaults(comDefaults);
		comDefaults = ["ClosableTabbedPane.background",new org.aswing.plaf.ASColorUIResource(15198181),"ClosableTabbedPane.foreground",table.get("controlText"),"ClosableTabbedPane.mideground",new org.aswing.plaf.ASColorUIResource(5095888),"ClosableTabbedPane.colorAdjust",new org.aswing.plaf.UIStyleTune(0.01,-0.24,0.01,0.50,4),"ClosableTabbedPane.opaque",false,"ClosableTabbedPane.focusable",true,"ClosableTabbedPane.shadow",new org.aswing.plaf.ASColorUIResource(8947848),"ClosableTabbedPane.darkShadow",new org.aswing.plaf.ASColorUIResource(4473924),"ClosableTabbedPane.light",table.getColor("controlHighlight"),"ClosableTabbedPane.highlight",new org.aswing.plaf.ASColorUIResource(16777215),"ClosableTabbedPane.arrowShadowColor",new org.aswing.plaf.ASColorUIResource(0),"ClosableTabbedPane.arrowLightColor",new org.aswing.plaf.ASColorUIResource(4473924),"ClosableTabbedPane.font",table.getFont("controlFont"),"ClosableTabbedPane.tabMargin",new org.aswing.plaf.InsetsUIResource(2,3,1,3),"ClosableTabbedPane.contentMargin",new org.aswing.plaf.InsetsUIResource(8,2,2,2),"ClosableTabbedPane.contentRoundLineThickness",2,"ClosableTabbedPane.topBlankSpace",4,"ClosableTabbedPane.maxTabWidth",1000];
		table.putDefaults(comDefaults);
		comDefaults = ["Table.background",new org.aswing.plaf.ASColorUIResource(3182497,0.0),"Table.foreground",table.get("controlText"),"Table.mideground",new org.aswing.plaf.ASColorUIResource(15461355),"Table.colorAdjust",new org.aswing.plaf.UIStyleTune(0.10,-0.2,0.10,0.20,0),"Table.opaque",true,"Table.focusable",true,"Table.font",table.getFont("controlFont"),"Table.selectionBackground",table.get("selectionBackground"),"Table.selectionForeground",table.get("selectionForeground"),"Table.gridColor",new org.aswing.plaf.ASColorUIResource(14079702),"Table.bg",org.aswing.plaf.basic.background.TableBackground,"Table.border",new org.aswing.plaf.basic.border.EmptyBorderResource(null,new org.aswing.Insets(2,2,2,2))];
		table.putDefaults(comDefaults);
		comDefaults = ["TableHeader.font",table.getFont("controlFont"),"TableHeader.background",new org.aswing.plaf.ASColorUIResource(14408667),"TableHeader.foreground",table.get("controlText"),"TableHeader.mideground",new org.aswing.plaf.ASColorUIResource(10329501),"TableHeader.colorAdjust",new org.aswing.plaf.UIStyleTune(0.06,0.2,0.10,0.5,0,new org.aswing.plaf.UIStyleTune(0.04,0.05,0.20,0.1)),"TableHeader.opaque",true,"TableHeader.focusable",true,"TableHeader.gridColor",new org.aswing.plaf.ASColorUIResource(14079702),"TableHeader.bg",org.aswing.plaf.basic.background.TableHeaderBackground,"TableHeader.border",null,"TableHeader.cellBorder",org.aswing.plaf.basic.border.TableHeaderCellBorder,"TableHeader.sortableCellBorder",org.aswing.plaf.basic.border.TableHeaderCellBorder];
		table.putDefaults(comDefaults);
		comDefaults = ["Tree.background",new org.aswing.plaf.ASColorUIResource(3376538,0),"Tree.foreground",table.get("controlText"),"Tree.mideground",table.get("controlMide"),"Tree.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"Tree.opaque",false,"Tree.focusable",true,"Tree.font",table.getFont("controlFont"),"Tree.selectionBackground",table.get("selectionBackground"),"Tree.selectionForeground",table.get("selectionForeground"),"Tree.leafIcon",org.aswing.tree.TreeLeafIcon,"Tree.folderExpandedIcon",org.aswing.tree.TreeFolderIcon,"Tree.folderCollapsedIcon",org.aswing.tree.TreeFolderIcon,"Tree.leftChildIndent",10,"Tree.rightChildIndent",0,"Tree.rowHeight",16,"Tree.expandControl",org.aswing.plaf.basic.tree.BasicExpandControl,"Tree.border",null];
		table.putDefaults(comDefaults);
		comDefaults = ["ToolBar.background",new org.aswing.plaf.ASColorUIResource(10866204),"ToolBar.foreground",table.get("windowText"),"ToolBar.mideground",table.get("controlMide"),"ToolBar.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"ToolBar.opaque",true,"ToolBar.focusable",false];
		table.putDefaults(comDefaults);
		comDefaults = ["MenuItem.background",table.get("menu"),"MenuItem.foreground",table.get("menuText"),"MenuItem.mideground",table.get("controlMide"),"MenuItem.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,0.0,0.0,0.0,2),"MenuItem.opaque",false,"MenuItem.focusable",false,"MenuItem.font",table.getFont("menuFont"),"MenuItem.selectionBackground",table.get("selectionBackground"),"MenuItem.selectionForeground",table.get("selectionForeground"),"MenuItem.disabledForeground",new org.aswing.plaf.ASColorUIResource(8947848),"MenuItem.acceleratorFont",table.getFont("menuFont"),"MenuItem.acceleratorForeground",table.get("menuText"),"MenuItem.acceleratorSelectionForeground",table.get("menu"),"MenuItem.border",null,"MenuItem.arrowIcon",org.aswing.plaf.basic.icon.MenuItemArrowIcon,"MenuItem.checkIcon",org.aswing.plaf.basic.icon.MenuItemCheckIcon,"MenuItem.margin",new org.aswing.plaf.InsetsUIResource(0,0,0,0)];
		table.putDefaults(comDefaults);
		comDefaults = ["CheckBoxMenuItem.background",table.get("menu"),"CheckBoxMenuItem.foreground",table.get("menuText"),"CheckBoxMenuItem.mideground",new org.aswing.plaf.ASColorUIResource(6118749),"CheckBoxMenuItem.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,0.0,0.0,0.0,2),"CheckBoxMenuItem.opaque",false,"CheckBoxMenuItem.focusable",false,"CheckBoxMenuItem.font",table.getFont("menuFont"),"CheckBoxMenuItem.selectionBackground",table.get("selectionBackground"),"CheckBoxMenuItem.selectionForeground",table.get("selectionForeground"),"CheckBoxMenuItem.disabledForeground",new org.aswing.plaf.ASColorUIResource(8947848),"CheckBoxMenuItem.acceleratorFont",table.getFont("menuFont"),"CheckBoxMenuItem.acceleratorForeground",table.get("menuText"),"CheckBoxMenuItem.acceleratorSelectionForeground",table.get("menu"),"CheckBoxMenuItem.border",null,"CheckBoxMenuItem.arrowIcon",org.aswing.plaf.basic.icon.MenuItemArrowIcon,"CheckBoxMenuItem.checkIcon",org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon,"CheckBoxMenuItem.margin",new org.aswing.plaf.InsetsUIResource(0,0,0,0)];
		table.putDefaults(comDefaults);
		comDefaults = ["RadioButtonMenuItem.background",table.get("menu"),"RadioButtonMenuItem.foreground",table.get("menuText"),"RadioButtonMenuItem.mideground",new org.aswing.plaf.ASColorUIResource(6118749),"RadioButtonMenuItem.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,0.0,0.0,0.0,2),"RadioButtonMenuItem.opaque",false,"RadioButtonMenuItem.focusable",false,"RadioButtonMenuItem.font",table.getFont("menuFont"),"RadioButtonMenuItem.selectionBackground",table.get("selectionBackground"),"RadioButtonMenuItem.selectionForeground",table.get("selectionForeground"),"RadioButtonMenuItem.disabledForeground",new org.aswing.plaf.ASColorUIResource(8947848),"RadioButtonMenuItem.acceleratorFont",table.getFont("menuFont"),"RadioButtonMenuItem.acceleratorForeground",table.get("menuText"),"RadioButtonMenuItem.acceleratorSelectionForeground",table.get("menu"),"RadioButtonMenuItem.border",null,"RadioButtonMenuItem.arrowIcon",org.aswing.plaf.basic.icon.MenuItemArrowIcon,"RadioButtonMenuItem.checkIcon",org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon,"RadioButtonMenuItem.margin",new org.aswing.plaf.InsetsUIResource(0,0,0,0)];
		table.putDefaults(comDefaults);
		comDefaults = ["Menu.background",table.get("menu"),"Menu.foreground",table.get("menuText"),"Menu.mideground",new org.aswing.plaf.ASColorUIResource(6118749),"Menu.colorAdjust",new org.aswing.plaf.UIStyleTune(0.0,0.0,0.0,0.0,2),"Menu.opaque",false,"Menu.focusable",false,"Menu.font",table.getFont("menuFont"),"Menu.selectionBackground",table.get("selectionBackground"),"Menu.selectionForeground",table.get("selectionForeground"),"Menu.disabledForeground",new org.aswing.plaf.ASColorUIResource(8947848),"Menu.acceleratorFont",table.getFont("menuFont"),"Menu.acceleratorForeground",table.get("menuText"),"Menu.acceleratorSelectionForeground",table.get("menu"),"Menu.border",null,"Menu.arrowIcon",org.aswing.plaf.basic.icon.MenuArrowIcon,"Menu.checkIcon",org.aswing.plaf.basic.icon.MenuCheckIcon,"Menu.margin",new org.aswing.plaf.InsetsUIResource(0,0,0,0),"Menu.useMenuBarBackgroundForTopLevel",true,"Menu.menuPopupOffsetX",0,"Menu.menuPopupOffsetY",0,"Menu.submenuPopupOffsetX",-4,"Menu.submenuPopupOffsetY",0];
		table.putDefaults(comDefaults);
		comDefaults = ["PopupMenu.background",new org.aswing.plaf.ASColorUIResource(15790320,0.95),"PopupMenu.foreground",table.get("menuText"),"PopupMenu.mideground",table.get("controlMide"),"PopupMenu.colorAdjust",new org.aswing.plaf.UIStyleTune(0.14,-0.14,0.06,0.20,0),"PopupMenu.opaque",true,"PopupMenu.focusable",false,"PopupMenu.font",table.getFont("menuFont"),"PopupMenu.borderColor",table.get("controlDkShadow"),"PopupMenu.border",org.aswing.plaf.basic.border.PopupMenuBorder];
		table.putDefaults(comDefaults);
		comDefaults = ["MenuBar.background",table.get("menu"),"MenuBar.foreground",table.get("menuText"),"MenuBar.mideground",table.get("controlMide"),"MenuBar.colorAdjust",new org.aswing.plaf.UIStyleTune(0.18,0.05,0.20,0.20),"MenuBar.opaque",false,"MenuBar.focusable",true,"MenuBar.font",table.getFont("menuFont"),"MenuBar.border",null];
		table.putDefaults(comDefaults);
	}
	,__class__: org.aswing.plaf.basic.BasicLookAndFeel
});
org.aswing.plaf.basic.BasicMenuBarUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicMenuBarUI"] = org.aswing.plaf.basic.BasicMenuBarUI;
org.aswing.plaf.basic.BasicMenuBarUI.__name__ = ["org","aswing","plaf","basic","BasicMenuBarUI"];
org.aswing.plaf.basic.BasicMenuBarUI.__interfaces__ = [org.aswing.plaf.MenuElementUI];
org.aswing.plaf.basic.BasicMenuBarUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicMenuBarUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JMenuBar)) this.menuBar = c; else this.menuBar = null;
		this.installDefaults();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JMenuBar)) this.menuBar = c; else this.menuBar = null;
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "MenuBar.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.menuBar,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.menuBar,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.menuBar,pp);
		var layout = this.menuBar.getLayout();
		if(layout == null || js.Boot.__instanceof(layout,org.aswing.plaf.UIResource)) this.menuBar.setLayout(new org.aswing.plaf.basic.DefaultMenuLayout(0));
	}
	,installListeners: function() {
		var _g1 = 0;
		var _g = this.menuBar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var menu = this.menuBar.getMenu(i);
			if(menu != null) menu.addSelectionListener($bind(this,this.__menuSelectionChanged));
		}
		this.menuBar.addEventListener("comAdded",$bind(this,this.__childAdded));
		this.menuBar.addEventListener("comRemoved",$bind(this,this.__childRemoved));
		this.menuBar.addEventListener("focusGained",$bind(this,this.__barFocusGained));
		this.menuBar.addEventListener("focusKeyDown",$bind(this,this.__barKeyDown));
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.menuBar);
	}
	,uninstallListeners: function() {
		var _g1 = 0;
		var _g = this.menuBar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var menu = this.menuBar.getMenu(i);
			if(menu != null) menu.removeSelectionListener($bind(this,this.__menuSelectionChanged));
		}
		this.menuBar.removeEventListener("comAdded",$bind(this,this.__childAdded));
		this.menuBar.removeEventListener("comRemoved",$bind(this,this.__childRemoved));
		this.menuBar.removeEventListener("focusGained",$bind(this,this.__barFocusGained));
		this.menuBar.removeEventListener("focusKeyDown",$bind(this,this.__barKeyDown));
	}
	,processKeyEvent: function(code) {
		var manager = org.aswing.MenuSelectionManager.defaultManager();
		if(manager.isNavigatingKey(code)) {
			var subs = this.menuBar.getSubElements();
			var path = [this.menuBar];
			if(subs.length > 0) {
				if(manager.isNextItemKey(code) || manager.isNextPageKey(code)) path.push(subs[0]); else path.push(subs[subs.length - 1]);
				var smu = org.aswing.AsWingUtils["as"](path[1],org.aswing.MenuElement);
				if(smu.getSubElements().length > 0) path.push(smu.getSubElements()[0]);
				manager.setSelectedPath(this.menuBar.get_stage(),path,false);
			}
		}
	}
	,__barKeyDown: function(e) {
		if(org.aswing.MenuSelectionManager.defaultManager().getSelectedPath().length == 0) this.processKeyEvent(e.keyCode);
	}
	,__menuSelectionChanged: function(e) {
		var _g1 = 0;
		var _g = this.menuBar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var menu = this.menuBar.getMenu(i);
			if(menu != null && menu.isSelected()) {
				this.menuBar.getSelectionModel().setSelectedIndex(i,e.isProgrammatic());
				break;
			}
		}
	}
	,__barFocusGained: function(e) {
		org.aswing.MenuSelectionManager.defaultManager().setSelectedPath(this.menuBar.get_stage(),[this.menuBar],false);
	}
	,__childAdded: function(e) {
		if(Std["is"](e.getChild(),org.aswing.JMenu)) org.aswing.AsWingUtils["as"](e.getChild(),org.aswing.JMenu).addSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,__childRemoved: function(e) {
		if(Std["is"](e.getChild(),org.aswing.JMenu)) org.aswing.AsWingUtils["as"](e.getChild(),org.aswing.JMenu).removeSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,__class__: org.aswing.plaf.basic.BasicMenuBarUI
});
org.aswing.plaf.basic.BasicMenuUI = function() {
	org.aswing.plaf.basic.BasicMenuItemUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicMenuUI"] = org.aswing.plaf.basic.BasicMenuUI;
org.aswing.plaf.basic.BasicMenuUI.__name__ = ["org","aswing","plaf","basic","BasicMenuUI"];
org.aswing.plaf.basic.BasicMenuUI.__super__ = org.aswing.plaf.basic.BasicMenuItemUI;
org.aswing.plaf.basic.BasicMenuUI.prototype = $extend(org.aswing.plaf.basic.BasicMenuItemUI.prototype,{
	getPropertyPrefix: function() {
		return "Menu.";
	}
	,installDefaults: function() {
		org.aswing.plaf.basic.BasicMenuItemUI.prototype.installDefaults.call(this);
		this.updateDefaultBackgroundColor();
	}
	,uninstallDefaults: function() {
		this.menuItem.getModel().setRollOver(false);
		this.menuItem.setSelected(false);
		org.aswing.plaf.basic.BasicMenuItemUI.prototype.uninstallDefaults.call(this);
	}
	,installListeners: function() {
		org.aswing.plaf.basic.BasicMenuItemUI.prototype.installListeners.call(this);
		this.menuItem.addSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,uninstallListeners: function() {
		org.aswing.plaf.basic.BasicMenuItemUI.prototype.uninstallListeners.call(this);
		this.menuItem.removeSelectionListener($bind(this,this.__menuSelectionChanged));
	}
	,getMenu: function() {
		return org.aswing.AsWingUtils["as"](this.menuItem,org.aswing.JMenu);
	}
	,updateDefaultBackgroundColor: function() {
		if(!this.getBoolean("Menu.useMenuBarBackgroundForTopLevel")) return;
		var menu = this.getMenu();
		if(Std["is"](menu.getBackground(),org.aswing.plaf.UIResource)) {
			if(menu.isTopLevelMenu()) menu.setBackground(this.getColor("MenuBar.background")); else menu.setBackground(this.getColor(this.getPropertyPrefix() + ".background"));
		}
	}
	,isMenu: function() {
		return true;
	}
	,isTopMenu: function() {
		return this.getMenu().isTopLevelMenu();
	}
	,shouldPaintSelected: function() {
		return this.menuItem.getModel().isRollOver() || this.menuItem.isSelected();
	}
	,processKeyEvent: function(code) {
		var manager = org.aswing.MenuSelectionManager.defaultManager();
		if(manager.isNextPageKey(code)) {
			var path = manager.getSelectedPath();
			if(path[path.length - 1] == this.menuItem) {
				var popElement = this.getMenu().getPopupMenu();
				path.push(popElement);
				if(popElement.getSubElements().length > 0) path.push(popElement.getSubElements()[0]);
				manager.setSelectedPath(this.menuItem.get_stage(),path,false);
			}
		} else org.aswing.plaf.basic.BasicMenuItemUI.prototype.processKeyEvent.call(this,code);
	}
	,__menuSelectionChanged: function(e) {
		this.menuItem.repaint();
	}
	,__menuItemRollOver: function(e) {
		var menu = this.getMenu();
		var manager = org.aswing.MenuSelectionManager.defaultManager();
		var selectedPath = manager.getSelectedPath();
		if(!menu.isTopLevelMenu()) {
			if(!(selectedPath.length > 0 && selectedPath[selectedPath.length - 1] == menu.getPopupMenu())) {
				if(menu.getDelay() <= 0) this.appendPath(this.getPath(),menu.getPopupMenu()); else {
					manager.setSelectedPath(this.menuItem.get_stage(),this.getPath(),false);
					this.setupPostTimer(menu);
				}
			}
		} else if(selectedPath.length > 0 && selectedPath[0] == menu.getParent()) manager.setSelectedPath(this.menuItem.get_stage(),[menu.getParent(),menu,menu.getPopupMenu()],false);
		this.menuItem.repaint();
	}
	,__menuItemAct: function(e) {
		var menu = this.getMenu();
		var cnt = menu.getParent();
		if(cnt != null && js.Boot.__instanceof(cnt,org.aswing.JMenuBar)) {
			var me = [cnt,menu,menu.getPopupMenu()];
			org.aswing.MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.get_stage(),me,false);
		}
		this.menuItem.repaint();
	}
	,__postTimerAct: function(e) {
		var menu = this.getMenu();
		var path = org.aswing.MenuSelectionManager.defaultManager().getSelectedPath();
		if(path.length > 0 && js.Boot.__instanceof(path[path.length - 1],org.aswing.JMenu) && path[path.length - 1] == menu) this.appendPath(path,menu.getPopupMenu());
	}
	,appendPath: function(path,end) {
		path.push(end);
		org.aswing.MenuSelectionManager.defaultManager().setSelectedPath(this.menuItem.get_stage(),path,false);
	}
	,setupPostTimer: function(menu) {
		if(this.postTimer == null) {
			this.postTimer = new org.aswing.util.Timer(menu.getDelay(),1);
			this.postTimer.addEventListener("act",$bind(this,this.__postTimerAct));
		}
		this.postTimer.restart();
	}
	,__class__: org.aswing.plaf.basic.BasicMenuUI
});
org.aswing.plaf.basic.BasicPanelUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicPanelUI"] = org.aswing.plaf.basic.BasicPanelUI;
org.aswing.plaf.basic.BasicPanelUI.__name__ = ["org","aswing","plaf","basic","BasicPanelUI"];
org.aswing.plaf.basic.BasicPanelUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicPanelUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		var p;
		if(js.Boot.__instanceof(c,org.aswing.JPanel)) p = c; else p = null;
		this.installDefaults(p);
	}
	,uninstallUI: function(c) {
		var p;
		if(js.Boot.__instanceof(c,org.aswing.JPanel)) p = c; else p = null;
		this.uninstallDefaults(p);
	}
	,installDefaults: function(p) {
		var pp = "Panel.";
		org.aswing.LookAndFeel.installColorsAndFont(p,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(p,pp);
		org.aswing.LookAndFeel.installBasicProperties(p,pp);
	}
	,uninstallDefaults: function(p) {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(p);
	}
	,paintBackGround: function(c,g,b) {
	}
	,__class__: org.aswing.plaf.basic.BasicPanelUI
});
org.aswing.plaf.basic.BasicPopupMenuUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicPopupMenuUI"] = org.aswing.plaf.basic.BasicPopupMenuUI;
org.aswing.plaf.basic.BasicPopupMenuUI.__name__ = ["org","aswing","plaf","basic","BasicPopupMenuUI"];
org.aswing.plaf.basic.BasicPopupMenuUI.__interfaces__ = [org.aswing.plaf.MenuElementUI];
org.aswing.plaf.basic.BasicPopupMenuUI.getFirstPopup = function() {
	var msm = org.aswing.MenuSelectionManager.defaultManager();
	var p = msm.getSelectedPath();
	var me = null;
	var _g1 = 0;
	var _g = p.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(js.Boot.__instanceof(p[i],org.aswing.JPopupMenu)) me = p[i];
	}
	return me;
};
org.aswing.plaf.basic.BasicPopupMenuUI.getLastPopup = function() {
	var msm = org.aswing.MenuSelectionManager.defaultManager();
	var p = msm.getSelectedPath();
	var me = null;
	var i = p.length - 1;
	while(i >= 0) {
		if(js.Boot.__instanceof(p[i],org.aswing.JPopupMenu)) me = p[i];
		i--;
	}
	return me;
};
org.aswing.plaf.basic.BasicPopupMenuUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicPopupMenuUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JPopupMenu)) this.popupMenu = c; else this.popupMenu = null;
		this.installDefaults();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JPopupMenu)) this.popupMenu = c; else this.popupMenu = null;
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "PopupMenu.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.popupMenu,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.popupMenu,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.popupMenu,pp);
		var layout = this.popupMenu.getLayout();
		if(layout == null || js.Boot.__instanceof(layout,org.aswing.plaf.UIResource)) this.popupMenu.setLayout(new org.aswing.plaf.basic.DefaultMenuLayout(1));
	}
	,installListeners: function() {
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.popupMenu);
	}
	,uninstallListeners: function() {
	}
	,paintBackGround: function(c,g,b) {
	}
	,processKeyEvent: function(code) {
		var manager = org.aswing.MenuSelectionManager.defaultManager();
		var path = manager.getSelectedPath();
		if(path[path.length - 1] != this.popupMenu) return;
		var root;
		var prev;
		var subs;
		if(manager.isPrevPageKey(code)) {
			if(path.length > 2) path.pop();
			if(path.length == 2 && !js.Boot.__instanceof(path[0],org.aswing.JPopupMenu)) {
				root = org.aswing.AsWingUtils["as"](path[0],org.aswing.MenuElement);
				prev = manager.prevSubElement(root,org.aswing.AsWingUtils["as"](path[1],org.aswing.MenuElement));
				path.pop();
				path.push(prev);
				if(prev.getSubElements().length > 0) {
					var prevPop = org.aswing.AsWingUtils["as"](prev.getSubElements()[0],org.aswing.MenuElement);
					path.push(prevPop);
					if(prevPop.getSubElements().length > 0) path.push(prevPop.getSubElements()[0]);
				}
			} else {
				subs = this.popupMenu.getSubElements();
				if(subs.length > 0) path.push(subs[subs.length - 1]);
			}
			manager.setSelectedPath(this.popupMenu.get_stage(),path,false);
		} else if(manager.isNextPageKey(code)) {
			root = org.aswing.AsWingUtils["as"](path[0],org.aswing.MenuElement);
			if(root.getSubElements().length > 1 && !js.Boot.__instanceof(root,org.aswing.JPopupMenu)) {
				var next = manager.nextSubElement(root,org.aswing.AsWingUtils["as"](path[1],org.aswing.MenuElement));
				path = [root];
				path.push(next);
				if(next.getSubElements().length > 0) {
					var nextPop = org.aswing.AsWingUtils["as"](next.getSubElements()[0],org.aswing.MenuElement);
					path.push(nextPop);
					if(nextPop.getSubElements().length > 0) path.push(nextPop.getSubElements()[0]);
				}
			} else {
				subs = this.popupMenu.getSubElements();
				if(subs.length > 0) path.push(subs[0]);
			}
			manager.setSelectedPath(this.popupMenu.get_stage(),path,false);
		} else if(manager.isNextItemKey(code)) {
			subs = this.popupMenu.getSubElements();
			if(subs.length > 0) {
				if(manager.isPrevItemKey(code)) path.push(subs[subs.length - 1]); else path.push(subs[0]);
			}
			manager.setSelectedPath(this.popupMenu.get_stage(),path,false);
		}
	}
	,__class__: org.aswing.plaf.basic.BasicPopupMenuUI
});
org.aswing.plaf.basic.BasicProgressBarUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
	this.barSize = 12;
};
$hxClasses["org.aswing.plaf.basic.BasicProgressBarUI"] = org.aswing.plaf.basic.BasicProgressBarUI;
org.aswing.plaf.basic.BasicProgressBarUI.__name__ = ["org","aswing","plaf","basic","BasicProgressBarUI"];
org.aswing.plaf.basic.BasicProgressBarUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicProgressBarUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "ProgressBar.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JProgressBar)) this.progressBar = c; else this.progressBar = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JProgressBar)) this.progressBar = c; else this.progressBar = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.progressBar,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.progressBar,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.progressBar,pp);
		this.barSize = this.getInt(pp + "barWidth");
		if(this.barSize == -1) this.barSize = 1000;
		if(!this.progressBar.isIndeterminateDelaySet()) {
			this.progressBar.setIndeterminateDelay(this.getUint(pp + "indeterminateDelay"));
			this.progressBar.setIndeterminateDelaySet(false);
		}
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.progressBar);
	}
	,installComponents: function() {
		this.stringText = new openfl.text.TextField();
		this.stringText.mouseEnabled = false;
		this.stringText.selectable = false;
		this.progressBar.addChild(this.stringText);
	}
	,uninstallComponents: function() {
		if(this.stringText.parent != null) this.stringText.parent.removeChild(this.stringText);
		this.stringText = null;
		this.iconDecorator = null;
	}
	,installListeners: function() {
		this.progressBar.addEventListener("stateChanged",$bind(this,this.__stateChanged));
	}
	,uninstallListeners: function() {
		this.progressBar.removeEventListener("stateChanged",$bind(this,this.__stateChanged));
	}
	,__stateChanged: function(source) {
		source.repaint();
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		var sp;
		if(js.Boot.__instanceof(c,org.aswing.JProgressBar)) sp = c; else sp = null;
		if(sp.getString() != null && sp.getString().length > 0) {
			this.stringText.set_text(sp.getString());
			org.aswing.AsWingUtils.applyTextFontAndColor(this.stringText,sp.getFont(),sp.getForeground());
			if(sp.getOrientation() == 1) {
				this.stringText.set_rotation(-90);
				this.stringText.set_x(Math.round(b.x + (b.width - this.stringText.get_width()) / 2));
				this.stringText.set_y(Math.round(b.y + (b.height - this.stringText.get_height()) / 2 + this.stringText.get_height()));
			} else {
				this.stringText.set_rotation(0);
				this.stringText.set_x(Math.round(b.x + (b.width - this.stringText.get_width()) / 2));
				this.stringText.set_y(Math.round(b.y + (b.height - this.stringText.get_height()) / 2));
			}
			org.aswing.util.DepthManager.bringToTop(this.stringText);
		} else this.stringText.set_text("");
	}
	,paintBackGround: function(c,g,b) {
	}
	,getPreferredSize: function(c) {
		var sp;
		if(js.Boot.__instanceof(c,org.aswing.JProgressBar)) sp = c; else sp = null;
		var size;
		if(sp.getOrientation() == 1) size = this.getPreferredInnerVertical(); else size = this.getPreferredInnerHorizontal();
		if(sp.getString() != null) {
			var textSize = c.getFont().computeTextSize(sp.getString(),false);
			if(sp.getOrientation() == 1) {
				size.width = Std["int"](Math.max(size.width,textSize.height));
				size.height = Std["int"](Math.max(size.height,textSize.width));
			} else {
				size.width = Std["int"](Math.max(size.width,textSize.width));
				size.height = Std["int"](Math.max(size.height,textSize.height));
			}
		}
		return sp.getInsets().getOutsideSize(size);
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(1,1));
	}
	,getPreferredInnerHorizontal: function() {
		return new org.aswing.geom.IntDimension(80,this.barSize);
	}
	,getPreferredInnerVertical: function() {
		return new org.aswing.geom.IntDimension(this.barSize,80);
	}
	,__class__: org.aswing.plaf.basic.BasicProgressBarUI
});
org.aswing.plaf.basic.BasicRadioButtonMenuItemUI = function() {
	org.aswing.plaf.basic.BasicMenuItemUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicRadioButtonMenuItemUI"] = org.aswing.plaf.basic.BasicRadioButtonMenuItemUI;
org.aswing.plaf.basic.BasicRadioButtonMenuItemUI.__name__ = ["org","aswing","plaf","basic","BasicRadioButtonMenuItemUI"];
org.aswing.plaf.basic.BasicRadioButtonMenuItemUI.__super__ = org.aswing.plaf.basic.BasicMenuItemUI;
org.aswing.plaf.basic.BasicRadioButtonMenuItemUI.prototype = $extend(org.aswing.plaf.basic.BasicMenuItemUI.prototype,{
	getPropertyPrefix: function() {
		return "RadioButtonMenuItem.";
	}
	,__class__: org.aswing.plaf.basic.BasicRadioButtonMenuItemUI
});
org.aswing.plaf.basic.BasicScrollBarUI = function() {
	this.scrollBarWidth = 16;
	this.minimumThumbLength = 9;
	this.thumbRect = new org.aswing.geom.IntRectangle();
	this.isDragging = false;
	this.offset = 0;
	this.scrollIncrement = 0;
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicScrollBarUI"] = org.aswing.plaf.basic.BasicScrollBarUI;
org.aswing.plaf.basic.BasicScrollBarUI.__name__ = ["org","aswing","plaf","basic","BasicScrollBarUI"];
org.aswing.plaf.basic.BasicScrollBarUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicScrollBarUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "ScrollBar.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JScrollBar)) this.scrollbar = c; else this.scrollbar = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JScrollBar)) this.scrollbar = c; else this.scrollbar = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		this.configureScrollBarColors();
		var pp = this.getPropertyPrefix();
		if(this.containsKey(pp + "barWidth")) this.scrollBarWidth = this.getInt(pp + "barWidth");
		if(this.containsKey(pp + "minimumThumbLength")) this.minimumThumbLength = this.getInt(pp + "minimumThumbLength");
		org.aswing.LookAndFeel.installBasicProperties(this.scrollbar,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.scrollbar,pp);
	}
	,configureScrollBarColors: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.scrollbar,pp);
		this.arrowShadowColor = this.getColor(pp + "arrowShadowColor");
		this.arrowLightColor = this.getColor(pp + "arrowLightColor");
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.scrollbar);
	}
	,installComponents: function() {
		this.thumMC = new org.aswing.AWSprite();
		var pp = this.getPropertyPrefix();
		this.thumbDecorator = this.getGroundDecorator(pp + "thumbDecorator");
		if(this.thumbDecorator != null) {
			if(this.thumbDecorator.getDisplay(this.scrollbar) != null) this.thumMC.addChild(this.thumbDecorator.getDisplay(this.scrollbar));
		}
		this.scrollbar.addChild(this.thumMC);
		this.thumMC.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__startDragThumb));
		this.thumMC.addEventListener("release",$bind(this,this.__stopDragThumb));
		this.createIcons();
		this.incrButton = this.createArrowButton();
		this.incrButton.setName("JScrollbar_incrButton");
		this.decrButton = this.createArrowButton();
		this.decrButton.setName("JScrollbar_decrButton");
		this.setButtonIcons();
		this.incrButton.setUIElement(true);
		this.decrButton.setUIElement(true);
		this.scrollbar.addChild(this.incrButton);
		this.scrollbar.addChild(this.decrButton);
		this.scrollbar.setEnabled(this.scrollbar.isEnabled());
	}
	,uninstallComponents: function() {
		this.scrollbar.removeChild(this.incrButton);
		this.scrollbar.removeChild(this.decrButton);
		this.scrollbar.removeChild(this.thumMC);
		this.thumMC.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__startDragThumb));
		this.thumMC.removeEventListener("release",$bind(this,this.__stopDragThumb));
		this.thumbDecorator = null;
	}
	,installListeners: function() {
		this.scrollbar.addStateListener($bind(this,this.__adjustChanged));
		this.incrButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__incrButtonPress));
		this.incrButton.addEventListener("release",$bind(this,this.__incrButtonReleased));
		this.decrButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__decrButtonPress));
		this.decrButton.addEventListener("release",$bind(this,this.__decrButtonReleased));
		this.scrollbar.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__trackPress));
		this.scrollbar.addEventListener("release",$bind(this,this.__trackReleased));
		this.scrollbar.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.scrollbar.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.scrollbar.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__destroy));
		this.scrollTimer = new org.aswing.util.Timer(org.aswing.plaf.basic.BasicScrollBarUI.scrollSpeedThrottle);
		this.scrollTimer.setInitialDelay(org.aswing.plaf.basic.BasicScrollBarUI.initialScrollSpeedThrottle);
		this.scrollTimer.addActionListener($bind(this,this.__scrollTimerPerformed));
	}
	,uninstallListeners: function() {
		this.scrollbar.removeStateListener($bind(this,this.__adjustChanged));
		this.incrButton.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__incrButtonPress));
		this.incrButton.removeEventListener("release",$bind(this,this.__incrButtonReleased));
		this.decrButton.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__decrButtonPress));
		this.decrButton.removeEventListener("release",$bind(this,this.__decrButtonReleased));
		this.scrollbar.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__trackPress));
		this.scrollbar.removeEventListener("release",$bind(this,this.__trackReleased));
		this.scrollbar.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.scrollbar.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.scrollbar.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__destroy));
		this.scrollTimer.stop();
		this.scrollTimer = null;
	}
	,isVertical: function() {
		return this.scrollbar.getOrientation() == 1;
	}
	,getThumbRect: function() {
		return this.thumbRect.clone();
	}
	,__destroy: function(e) {
		this.scrollTimer.stop();
		if(this.isDragging) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb));
	}
	,__onMouseWheel: function(e) {
		if(!this.scrollbar.isEnabled()) return;
		this.scrollByIncrement(-e.delta * this.scrollbar.getUnitIncrement());
	}
	,__onKeyDown: function(e) {
		if(!(this.scrollbar.isEnabled() && this.scrollbar.isShowing())) return;
		var code = e.keyCode;
		if(code == org.aswing.AWKeyboard.UP || code == org.aswing.AWKeyboard.LEFT) this.scrollByIncrement(-this.scrollbar.getUnitIncrement()); else if(code == org.aswing.AWKeyboard.DOWN || code == org.aswing.AWKeyboard.RIGHT) this.scrollByIncrement(this.scrollbar.getUnitIncrement()); else if(code == org.aswing.AWKeyboard.PAGE_UP) this.scrollByIncrement(-this.scrollbar.getBlockIncrement()); else if(code == org.aswing.AWKeyboard.PAGE_DOWN) this.scrollByIncrement(this.scrollbar.getBlockIncrement()); else if(code == org.aswing.AWKeyboard.HOME) this.scrollbar.setValue(this.scrollbar.getMinimum()); else if(code == org.aswing.AWKeyboard.END) this.scrollbar.setValue(this.scrollbar.getMaximum() - this.scrollbar.getVisibleAmount());
	}
	,__scrollTimerPerformed: function(e) {
		var value = this.scrollbar.getValue() + this.scrollIncrement;
		var finished = false;
		if(this.scrollIncrement > 0) {
			if(value >= this.scrollContinueDestination) finished = true;
		} else if(value <= this.scrollContinueDestination) finished = true;
		if(finished) {
			this.scrollbar.setValue(this.scrollContinueDestination,false);
			this.scrollTimer.stop();
		} else this.scrollByIncrement(this.scrollIncrement);
	}
	,__adjustChanged: function(e) {
		if(this.scrollbar.isVisible() && !this.isDragging) this.paintAndLocateThumb(this.scrollbar.getPaintBounds());
	}
	,__incrButtonPress: function(e) {
		this.scrollIncrement = this.scrollbar.getUnitIncrement();
		this.scrollByIncrement(this.scrollIncrement);
		this.scrollContinueDestination = this.scrollbar.getMaximum() - this.scrollbar.getVisibleAmount();
		this.scrollTimer.restart();
	}
	,__incrButtonReleased: function(e) {
		this.scrollTimer.stop();
	}
	,__decrButtonPress: function(e) {
		this.scrollIncrement = -this.scrollbar.getUnitIncrement();
		this.scrollByIncrement(this.scrollIncrement);
		this.scrollContinueDestination = this.scrollbar.getMinimum();
		this.scrollTimer.restart();
	}
	,__decrButtonReleased: function(e) {
		this.scrollTimer.stop();
	}
	,__trackPress: function(e) {
		var aimPoint = this.scrollbar.getMousePosition();
		var isPressedInRange = false;
		var tr = this.getThumbRect();
		var mousePos;
		if(this.isVertical()) {
			mousePos = aimPoint.y;
			aimPoint.y -= tr.height / 2 | 0;
			if(mousePos < tr.y && mousePos > this.decrButton.get_y() + this.decrButton.get_height()) isPressedInRange = true; else if(mousePos > tr.y + tr.height && mousePos < this.incrButton.get_y()) isPressedInRange = true;
		} else {
			mousePos = aimPoint.x;
			aimPoint.x -= tr.width / 2 | 0;
			if(mousePos < tr.x && mousePos > this.decrButton.get_x() + this.decrButton.get_width()) isPressedInRange = true; else if(mousePos > tr.x + tr.width && mousePos < this.incrButton.get_x()) isPressedInRange = true;
		}
		if(isPressedInRange) {
			this.scrollContinueDestination = this.getValueWithPosition(aimPoint);
			if(this.scrollContinueDestination > this.scrollbar.getValue()) this.scrollIncrement = this.scrollbar.getBlockIncrement(); else this.scrollIncrement = -this.scrollbar.getBlockIncrement();
			this.scrollByIncrement(this.scrollIncrement);
			this.scrollTimer.restart();
		}
	}
	,__trackReleased: function(e) {
		this.scrollTimer.stop();
	}
	,scrollByIncrement: function(increment) {
		this.scrollbar.setValue(this.scrollbar.getValue() + increment,false);
	}
	,__startDragThumb: function(e) {
		if(!this.scrollbar.isEnabled()) return;
		this.scrollbar.setValueIsAdjusting(true);
		var mp = this.scrollbar.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var tr = this.getThumbRect();
		if(this.isVertical()) this.offset = my - tr.y; else this.offset = mx - tr.x;
		this.isDragging = true;
		this.__startHandleDrag();
	}
	,__stopDragThumb: function(e) {
		this.__stopHandleDrag();
		if(!this.scrollbar.isEnabled()) return;
		if(this.isDragging) this.scrollThumbToCurrentMousePosition();
		this.offset = 0;
		this.isDragging = false;
		this.scrollbar.setValueIsAdjusting(false);
	}
	,__startHandleDrag: function() {
		org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb),false,0,false);
	}
	,__stopHandleDrag: function() {
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb));
	}
	,__onMoveThumb: function(e) {
		if(!this.scrollbar.isEnabled()) return;
		this.scrollThumbToCurrentMousePosition();
		e.updateAfterEvent();
	}
	,scrollThumbToCurrentMousePosition: function() {
		var mp = this.scrollbar.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var thumbR = this.getThumbRect();
		var thumbMin;
		var thumbMax;
		var thumbPos;
		if(this.isVertical()) {
			thumbMin = this.decrButton.getY() + this.decrButton.getHeight();
			thumbMax = this.incrButton.getY() - thumbR.height;
			thumbPos = Std["int"](Math.min(thumbMax,Math.max(thumbMin,my - this.offset)));
			this.setThumbRect(thumbR.x,thumbPos,thumbR.width,thumbR.height);
		} else {
			thumbMin = this.decrButton.getX() + this.decrButton.getWidth();
			thumbMax = this.incrButton.getX() - thumbR.width;
			thumbPos = Std["int"](Math.min(thumbMax,Math.max(thumbMin,mx - this.offset)));
			this.setThumbRect(thumbPos,thumbR.y,thumbR.width,thumbR.height);
		}
		var scrollBarValue = this.getValueWithThumbMaxMinPos(thumbMin,thumbMax,thumbPos);
		this.scrollbar.setValue(scrollBarValue,false);
	}
	,getValueWithPosition: function(point) {
		var mx = point.x;
		var my = point.y;
		var thumbR = this.getThumbRect();
		var thumbMin;
		var thumbMax;
		var thumbPos;
		if(this.isVertical()) {
			thumbMin = this.decrButton.getY() + this.decrButton.getHeight();
			thumbMax = this.incrButton.getY() - thumbR.height;
			thumbPos = my;
		} else {
			thumbMin = this.decrButton.getX() + this.decrButton.getWidth();
			thumbMax = this.incrButton.getX() - thumbR.width;
			thumbPos = mx;
		}
		return this.getValueWithThumbMaxMinPos(thumbMin,thumbMax,thumbPos);
	}
	,getValueWithThumbMaxMinPos: function(thumbMin,thumbMax,thumbPos) {
		var model = this.scrollbar.getModel();
		var scrollBarValue;
		if(thumbPos >= thumbMax) scrollBarValue = model.getMaximum() - model.getExtent(); else {
			var valueMax = model.getMaximum() - model.getExtent();
			var valueRange = valueMax - model.getMinimum();
			var thumbValue = thumbPos - thumbMin;
			var thumbRange = thumbMax - thumbMin;
			var value = Math.round(thumbValue / thumbRange * valueRange);
			scrollBarValue = value + model.getMinimum();
		}
		return scrollBarValue;
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.layoutScrollBar();
		this.paintAndLocateThumb(b);
	}
	,paintBackGround: function(c,g,b) {
	}
	,paintAndLocateThumb: function(b) {
		if(!this.scrollbar.isEnabled()) {
			if(this.isVertical()) {
				if(this.scrollbar.mouseChildren) console.log("Logic Wrong : Scrollbar is not enabled, but its children enabled ");
			}
			this.thumMC.set_visible(false);
			return;
		}
		this.thumMC.set_visible(true);
		var min = this.scrollbar.getMinimum();
		var extent = this.scrollbar.getVisibleAmount();
		var range = this.scrollbar.getMaximum() - min;
		var value = this.scrollbar.getValue();
		if(range <= 0) {
			if(range < 0) console.log("Logic Wrong : Scrollbar range = " + range + ", max=" + this.scrollbar.getMaximum() + ", min=" + min);
			this.thumMC.set_visible(false);
			return;
		}
		var trackLength;
		var thumbLength;
		if(this.isVertical()) {
			trackLength = b.height - this.incrButton.getHeight() - this.decrButton.getHeight();
			thumbLength = Math.floor(trackLength * (extent / range));
		} else {
			trackLength = b.width - this.incrButton.getWidth() - this.decrButton.getWidth();
			thumbLength = Math.floor(trackLength * (extent / range));
		}
		if(trackLength > this.minimumThumbLength) thumbLength = Std["int"](Math.max(thumbLength,this.minimumThumbLength)); else {
			this.thumMC.set_visible(false);
			return;
		}
		var thumbRange = trackLength - thumbLength;
		var thumbPos;
		if(range - extent == 0) thumbPos = 0; else thumbPos = Math.round(thumbRange * ((value - min) / (range - extent)));
		if(this.isVertical()) this.setThumbRect(b.x,thumbPos + b.y + this.decrButton.getHeight(),this.scrollBarWidth,thumbLength); else this.setThumbRect(thumbPos + b.x + this.decrButton.getWidth(),b.y,thumbLength,this.scrollBarWidth);
	}
	,setThumbRect: function(x,y,w,h) {
		var oldW = this.thumbRect.width;
		var oldH = this.thumbRect.height;
		this.thumbRect.setRectXYWH(x,y,w,h);
		if(w != oldW || h != oldH) this.paintThumb(this.thumMC,this.thumbRect.getSize(),this.isDragging);
		this.thumMC.set_x(x);
		this.thumMC.set_y(y);
	}
	,paintThumb: function(thumMC,size,isPressed) {
		thumMC.get_graphics().clear();
		var g = new org.aswing.graphics.Graphics2D(thumMC.get_graphics());
		if(this.thumbDecorator != null) this.thumbDecorator.updateDecorator(this.scrollbar,g,size.getBounds());
	}
	,createArrowIcon: function(direction) {
		var icon = new org.aswing.plaf.basic.icon.ScrollBarArrowIcon(direction,this.scrollBarWidth,this.scrollBarWidth);
		return icon;
	}
	,createArrowButton: function() {
		var b = new org.aswing.JButton();
		b.setFocusable(false);
		b.setBackground(null);
		b.setForeground(null);
		b.setMideground(null);
		b.setStyleTune(null);
		b.setStyleProxy(this.scrollbar);
		b.setPreferredSize(new org.aswing.geom.IntDimension(this.scrollBarWidth,this.scrollBarWidth));
		return b;
	}
	,createIcons: function() {
		this.leftIcon = this.createArrowIcon(Math.PI);
		this.rightIcon = this.createArrowIcon(0);
		this.upIcon = this.createArrowIcon(-Math.PI / 2);
		this.downIcon = this.createArrowIcon(Math.PI / 2);
	}
	,setButtonIcons: function() {
		if(this.isVertical()) {
			this.incrButton.setIcon(this.downIcon);
			this.decrButton.setIcon(this.upIcon);
		} else {
			this.incrButton.setIcon(this.rightIcon);
			this.decrButton.setIcon(this.leftIcon);
		}
	}
	,getPreferredSize: function(c) {
		var w;
		var h;
		if(this.isVertical()) {
			w = this.scrollBarWidth;
			h = this.scrollBarWidth * 2;
		} else {
			w = this.scrollBarWidth * 2;
			h = this.scrollBarWidth;
		}
		return this.scrollbar.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(w,h));
	}
	,getMaximumSize: function(c) {
		var w;
		var h;
		if(this.isVertical()) {
			w = this.scrollBarWidth;
			h = 100000;
		} else {
			w = 100000;
			h = this.scrollBarWidth;
		}
		return this.scrollbar.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(w,h));
	}
	,getMinimumSize: function(c) {
		return this.getPreferredSize(c);
	}
	,layoutVScrollbar: function(sb) {
		var rd = sb.getPaintBounds();
		var bd = this.decrButton.getPreferredSize();
		var w = bd.width;
		var h = bd.height;
		var x = rd.x;
		var y = rd.y;
		var sbw = this.scrollBarWidth;
		this.decrButton.setComBoundsXYWH(x + (sbw - w) / 2 | 0,y,w,h);
		this.incrButton.setComBoundsXYWH(x + (sbw - w) / 2 | 0,y + rd.height - h,w,h);
	}
	,layoutHScrollbar: function(sb) {
		var rd = sb.getPaintBounds();
		var bd = this.decrButton.getPreferredSize();
		var w = bd.width;
		var h = bd.height;
		var x = rd.x;
		var y = rd.y;
		var sbw = this.scrollBarWidth;
		this.decrButton.setComBoundsXYWH(x,y + (sbw - h) / 2 | 0,w,h);
		this.incrButton.setComBoundsXYWH(x + rd.width - w | 0,y + (sbw - h) / 2 | 0,w,h);
	}
	,layoutScrollBar: function() {
		if(this.isDragging) return;
		this.setButtonIcons();
		if(this.isVertical()) this.layoutVScrollbar(this.scrollbar); else this.layoutHScrollbar(this.scrollbar);
	}
	,__class__: org.aswing.plaf.basic.BasicScrollBarUI
});
org.aswing.plaf.basic.BasicScrollPaneUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicScrollPaneUI"] = org.aswing.plaf.basic.BasicScrollPaneUI;
org.aswing.plaf.basic.BasicScrollPaneUI.__name__ = ["org","aswing","plaf","basic","BasicScrollPaneUI"];
org.aswing.plaf.basic.BasicScrollPaneUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicScrollPaneUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JScrollPane)) this.scrollPane = c; else this.scrollPane = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JScrollPane)) this.scrollPane = c; else this.scrollPane = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "ScrollPane.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.scrollPane,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.scrollPane,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.scrollPane,pp);
		if(!this.scrollPane.getVerticalScrollBar().isFocusableSet()) {
			this.scrollPane.getVerticalScrollBar().setFocusable(false);
			this.scrollPane.getVerticalScrollBar().setFocusableSet(false);
		}
		if(!this.scrollPane.getHorizontalScrollBar().isFocusableSet()) {
			this.scrollPane.getHorizontalScrollBar().setFocusable(false);
			this.scrollPane.getHorizontalScrollBar().setFocusableSet(false);
		}
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.scrollPane);
	}
	,installComponents: function() {
	}
	,uninstallComponents: function() {
	}
	,installListeners: function() {
		this.scrollPane.addAdjustmentListener($bind(this,this.__adjustChanged));
		this.scrollPane.addEventListener("viewportChanged",$bind(this,this.__viewportChanged));
		this.__viewportChanged(null);
	}
	,uninstallListeners: function() {
		this.scrollPane.removeAdjustmentListener($bind(this,this.__adjustChanged));
		this.scrollPane.removeEventListener("viewportChanged",$bind(this,this.__viewportChanged));
		if(this.lastViewport != null) this.lastViewport.removeStateListener($bind(this,this.__viewportStateChanged));
	}
	,syncScrollPaneWithViewport: function() {
		var viewport = this.scrollPane.getViewport();
		var vsb = this.scrollPane.getVerticalScrollBar();
		var hsb = this.scrollPane.getHorizontalScrollBar();
		if(viewport != null) {
			var extentSize = viewport.getExtentSize();
			if(extentSize.width <= 0 || extentSize.height <= 0) return;
			var viewSize = viewport.getViewSize();
			var viewPosition = viewport.getViewPosition();
			var extent;
			var max;
			var value;
			if(vsb != null) {
				extent = extentSize.height;
				max = viewSize.height;
				value = Std["int"](Math.max(0,Math.min(viewPosition.y,max - extent)));
				vsb.setValues(value,extent,0,max);
				vsb.setUnitIncrement(viewport.getVerticalUnitIncrement());
				vsb.setBlockIncrement(viewport.getVerticalBlockIncrement());
			}
			if(hsb != null) {
				extent = extentSize.width;
				max = viewSize.width;
				value = Std["int"](Math.max(0,Math.min(viewPosition.x,max - extent)));
				hsb.setValues(value,extent,0,max);
				hsb.setUnitIncrement(viewport.getHorizontalUnitIncrement());
				hsb.setBlockIncrement(viewport.getHorizontalBlockIncrement());
			}
		}
	}
	,__viewportChanged: function(e) {
		if(this.lastViewport != null) this.lastViewport.removeStateListener($bind(this,this.__viewportStateChanged));
		this.lastViewport = this.scrollPane.getViewport();
		this.lastViewport.addStateListener($bind(this,this.__viewportStateChanged));
	}
	,__viewportStateChanged: function(e) {
		this.syncScrollPaneWithViewport();
	}
	,__adjustChanged: function(e) {
		var viewport = this.scrollPane.getViewport();
		viewport.scrollRectToVisible(this.scrollPane.getVisibleRect(),e.isProgrammatic());
	}
	,__class__: org.aswing.plaf.basic.BasicScrollPaneUI
});
org.aswing.plaf.basic.BasicSeparatorUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicSeparatorUI"] = org.aswing.plaf.basic.BasicSeparatorUI;
org.aswing.plaf.basic.BasicSeparatorUI.__name__ = ["org","aswing","plaf","basic","BasicSeparatorUI"];
org.aswing.plaf.basic.BasicSeparatorUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicSeparatorUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Separator.";
	}
	,installUI: function(c) {
		this.installDefaults(js.Boot.__instanceof(c,org.aswing.JSeparator)?c:null);
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults(js.Boot.__instanceof(c,org.aswing.JSeparator)?c:null);
	}
	,installDefaults: function(s) {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColors(s,pp);
		org.aswing.LookAndFeel.installBasicProperties(s,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(s,pp);
		s.setAlignmentX(0.5);
		s.setAlignmentY(0.5);
	}
	,uninstallDefaults: function(s) {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(s);
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		var sp;
		if(js.Boot.__instanceof(c,org.aswing.JSeparator)) sp = c; else sp = null;
		var dark = c.getBackground();
		var matrix = new openfl.geom.Matrix();
		var brush;
		if(sp.getOrientation() == 1) {
			var halfH = b.height / 2 | 0;
			var gradientH = Std["int"](Math.min(30,halfH));
			matrix.createGradientBox(1,gradientH,Math.PI / 2,b.x,b.y);
			brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,dark.getAlpha()],[0,255],matrix);
			g.fillRectangle(brush,b.x,b.y,1,halfH);
			matrix.createGradientBox(1,gradientH,-Math.PI / 2,b.x,b.y + b.height - gradientH);
			g.fillRectangle(brush,b.x,b.y + halfH,1,b.height - halfH);
		} else {
			var halfW = b.width / 2 | 0;
			var gradientW = Std["int"](Math.min(30,halfW));
			matrix.createGradientBox(gradientW,1,0,b.x,b.y);
			brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,dark.getAlpha()],[0,255],matrix);
			g.fillRectangle(brush,b.x,b.y,halfW,1);
			matrix.createGradientBox(gradientW,1,Math.PI,b.x + b.width - gradientW,b.y);
			g.fillRectangle(brush,b.x + halfW,b.y,b.width - halfW,1);
		}
	}
	,getPreferredSize: function(c) {
		var sp;
		if(js.Boot.__instanceof(c,org.aswing.JSeparator)) sp = c; else sp = null;
		var insets = sp.getInsets();
		if(sp.getOrientation() == 1) return insets.getOutsideSize(new org.aswing.geom.IntDimension(1,0)); else return insets.getOutsideSize(new org.aswing.geom.IntDimension(0,1));
	}
	,getMaximumSize: function(c) {
		var sp;
		if(js.Boot.__instanceof(c,org.aswing.JSeparator)) sp = c; else sp = null;
		var insets = sp.getInsets();
		var size = insets.getOutsideSize();
		if(sp.getOrientation() == 1) return new org.aswing.geom.IntDimension(1 + size.width,100000); else return new org.aswing.geom.IntDimension(100000,1 + size.height);
	}
	,getMinimumSize: function(c) {
		return this.getPreferredSize(c);
	}
	,__class__: org.aswing.plaf.basic.BasicSeparatorUI
});
org.aswing.plaf.basic.BasicSliderUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
	this.trackRect = new org.aswing.geom.IntRectangle();
	this.tickRect = new org.aswing.geom.IntRectangle();
	this.thumbRect = new org.aswing.geom.IntRectangle();
	this.trackDrawRect = new org.aswing.geom.IntRectangle();
	this.offset = 0;
	this.isDragging = false;
};
$hxClasses["org.aswing.plaf.basic.BasicSliderUI"] = org.aswing.plaf.basic.BasicSliderUI;
org.aswing.plaf.basic.BasicSliderUI.__name__ = ["org","aswing","plaf","basic","BasicSliderUI"];
org.aswing.plaf.basic.BasicSliderUI.__interfaces__ = [org.aswing.plaf.SliderUI];
org.aswing.plaf.basic.BasicSliderUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicSliderUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Slider.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JSlider)) this.slider = c; else this.slider = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JSlider)) this.slider = c; else this.slider = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.slider,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.slider,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.slider,pp);
		this.configureSliderColors();
	}
	,configureSliderColors: function() {
		var pp = this.getPropertyPrefix();
		this.progressColor = this.getColor(pp + "progressColor");
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.slider);
	}
	,installComponents: function() {
		var pp = this.getPropertyPrefix();
		this.thumbIcon = this.getIcon(pp + "thumbIcon");
		if(this.thumbIcon.getDisplay(this.slider) == null) throw new org.aswing.error.Error("Slider thumb icon must has its own display object(getDisplay()!=null)!");
		this.trackCanvas = new openfl.display.Shape();
		this.progressCanvas = new openfl.display.Shape();
		this.slider.addChild(this.trackCanvas);
		this.slider.addChild(this.progressCanvas);
		this.slider.addChild(this.thumbIcon.getDisplay(this.slider));
	}
	,uninstallComponents: function() {
		this.slider.removeChild(this.trackCanvas);
		this.slider.removeChild(this.progressCanvas);
		this.slider.removeChild(this.thumbIcon.getDisplay(this.slider));
		this.thumbIcon = null;
		this.progressCanvas = null;
		this.trackCanvas = null;
	}
	,installListeners: function() {
		this.slider.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onSliderPress));
		this.slider.addEventListener("release",$bind(this,this.__onSliderReleased));
		this.slider.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onSliderMouseWheel));
		this.slider.addStateListener($bind(this,this.__onSliderStateChanged));
		this.slider.addEventListener("focusKeyDown",$bind(this,this.__onSliderKeyDown));
		this.scrollTimer = new org.aswing.util.Timer(org.aswing.plaf.basic.BasicSliderUI.scrollSpeedThrottle | 0);
		this.scrollTimer.setInitialDelay(org.aswing.plaf.basic.BasicSliderUI.initialScrollSpeedThrottle | 0);
		this.scrollTimer.addActionListener($bind(this,this.__scrollTimerPerformed));
	}
	,uninstallListeners: function() {
		this.slider.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onSliderPress));
		this.slider.removeEventListener("release",$bind(this,this.__onSliderReleased));
		this.slider.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onSliderMouseWheel));
		this.slider.removeStateListener($bind(this,this.__onSliderStateChanged));
		this.slider.removeEventListener("focusKeyDown",$bind(this,this.__onSliderKeyDown));
		this.scrollTimer.stop();
		this.scrollTimer = null;
	}
	,isVertical: function() {
		return this.slider.getOrientation() == 1;
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.countTrackRect(b);
		this.countThumbRect();
		this.countTickRect(b);
		this.paintTrack(g,this.trackDrawRect);
		this.paintThumb(g,this.thumbRect);
		this.paintTick(g,this.tickRect);
	}
	,countTrackRect: function(b) {
		var thumbSize = this.getThumbSize();
		var h_margin;
		var v_margin;
		if(this.isVertical()) {
			v_margin = Math.ceil(thumbSize.height / 2.0);
			h_margin = 2;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,thumbSize.width - h_margin * 2,b.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x,b.y + v_margin,thumbSize.width,b.height - v_margin * 2);
		} else {
			h_margin = Math.ceil(thumbSize.width / 2.0);
			v_margin = 2;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,b.width - h_margin * 2,thumbSize.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x + h_margin,b.y,b.width - h_margin * 2,thumbSize.height);
		}
	}
	,countTickRect: function(b) {
		if(this.isVertical()) {
			this.tickRect.y = this.trackRect.y;
			this.tickRect.x = this.trackRect.x + this.trackRect.width + this.getTickTrackGap();
			this.tickRect.height = this.trackRect.height;
			this.tickRect.width = b.width - this.trackRect.width - this.getTickTrackGap();
		} else {
			this.tickRect.x = this.trackRect.x;
			this.tickRect.y = this.trackRect.y + this.trackRect.height + this.getTickTrackGap();
			this.tickRect.width = this.trackRect.width;
			this.tickRect.height = b.height - this.trackRect.height - this.getTickTrackGap();
		}
	}
	,countThumbRect: function() {
		this.thumbRect.setSize(this.getThumbSize());
		if(this.slider.getSnapToTicks()) {
			var sliderValue = this.slider.getValue();
			var snappedValue = sliderValue;
			var majorTickSpacing = this.slider.getMajorTickSpacing();
			var minorTickSpacing = this.slider.getMinorTickSpacing();
			var tickSpacing = 0;
			if(minorTickSpacing > 0) tickSpacing = minorTickSpacing; else if(majorTickSpacing > 0) tickSpacing = majorTickSpacing;
			if(tickSpacing != 0) {
				if((sliderValue - this.slider.getMinimum()) % tickSpacing != 0) {
					var temp = (sliderValue - this.slider.getMinimum()) / tickSpacing;
					var whichTick = Math.round(temp);
					snappedValue = this.slider.getMinimum() + whichTick * tickSpacing;
				}
				if(snappedValue != sliderValue) this.slider.setValue(snappedValue);
			}
		}
		var valuePosition;
		if(this.isVertical()) {
			valuePosition = this.yPositionForValue(this.slider.getValue());
			this.thumbRect.x = this.trackRect.x;
			this.thumbRect.y = valuePosition - this.thumbRect.height / 2 | 0;
		} else {
			valuePosition = Std["int"](this.xPositionForValue(this.slider.getValue()));
			this.thumbRect.x = valuePosition - this.thumbRect.width / 2 | 0;
			this.thumbRect.y = this.trackRect.y;
		}
	}
	,getThumbSize: function() {
		if(this.isVertical()) return new org.aswing.geom.IntDimension(this.thumbIcon.getIconHeight(this.slider),this.thumbIcon.getIconWidth(this.slider)); else return new org.aswing.geom.IntDimension(this.thumbIcon.getIconWidth(this.slider),this.thumbIcon.getIconHeight(this.slider));
	}
	,countTickSize: function(sliderRect) {
		if(this.isVertical()) return new org.aswing.geom.IntDimension(Std["int"](this.getTickLength()),sliderRect.height); else return new org.aswing.geom.IntDimension(sliderRect.width,Std["int"](this.getTickLength()));
	}
	,getTickLength: function() {
		return 10;
	}
	,countTrackAndThumbSize: function(sliderRect) {
		if(this.isVertical()) return new org.aswing.geom.IntDimension(this.getThumbSize().width,sliderRect.height); else return new org.aswing.geom.IntDimension(sliderRect.width,this.getThumbSize().height);
	}
	,getTickTrackGap: function() {
		return 2;
	}
	,xPositionForValue: function(value) {
		var min = this.slider.getMinimum();
		var max = this.slider.getMaximum();
		var trackLength = this.trackRect.width;
		var valueRange = max - min;
		var pixelsPerValue = trackLength / valueRange;
		var trackLeft = this.trackRect.x;
		var trackRight = this.trackRect.x + this.trackRect.width;
		var xPosition;
		if(!this.slider.getInverted()) {
			xPosition = trackLeft;
			xPosition += Math.round(pixelsPerValue * (value - min));
		} else {
			xPosition = trackRight;
			xPosition -= Math.round(pixelsPerValue * (value - min));
		}
		xPosition = Std["int"](Math.max(trackLeft,xPosition));
		xPosition = Std["int"](Math.min(trackRight,xPosition));
		return xPosition;
	}
	,yPositionForValue: function(value) {
		var min = this.slider.getMinimum();
		var max = this.slider.getMaximum();
		var trackLength = this.trackRect.height;
		var valueRange = max - min;
		var pixelsPerValue = trackLength / valueRange;
		var trackTop = this.trackRect.y;
		var trackBottom = this.trackRect.y + (this.trackRect.height - 1);
		var yPosition;
		if(!this.slider.getInverted()) {
			yPosition = trackTop;
			yPosition += Math.round(pixelsPerValue * (max - value));
		} else {
			yPosition = trackTop;
			yPosition += Math.round(pixelsPerValue * (value - min));
		}
		yPosition = Std["int"](Math.max(trackTop,yPosition));
		yPosition = Std["int"](Math.min(trackBottom,yPosition));
		return yPosition;
	}
	,valueForYPosition: function(yPos) {
		var value;
		var minValue = this.slider.getMinimum();
		var maxValue = this.slider.getMaximum();
		var trackLength = this.trackRect.height;
		var trackTop = this.trackRect.y;
		var trackBottom = this.trackRect.y + (this.trackRect.height - 1);
		var inverted = this.slider.getInverted();
		if(yPos <= trackTop) if(inverted) value = minValue; else value = maxValue; else if(yPos >= trackBottom) if(inverted) value = maxValue; else value = minValue; else {
			var distanceFromTrackTop = yPos - trackTop;
			var valueRange = maxValue - minValue;
			var valuePerPixel = valueRange / trackLength;
			var valueFromTrackTop = Math.round(distanceFromTrackTop * valuePerPixel);
			if(inverted) value = minValue + valueFromTrackTop; else value = maxValue - valueFromTrackTop;
		}
		return value;
	}
	,valueForXPosition: function(xPos) {
		var value;
		var minValue = this.slider.getMinimum();
		var maxValue = this.slider.getMaximum();
		var trackLength = this.trackRect.width;
		var trackLeft = this.trackRect.x;
		var trackRight = this.trackRect.x + this.trackRect.width;
		var inverted = this.slider.getInverted();
		if(xPos <= trackLeft) if(inverted) value = maxValue; else value = minValue; else if(xPos >= trackRight) if(inverted) value = minValue; else value = maxValue; else {
			var distanceFromTrackLeft = xPos - trackLeft;
			var valueRange = maxValue - minValue;
			var valuePerPixel = valueRange / trackLength;
			var valueFromTrackLeft = Math.round(distanceFromTrackLeft * valuePerPixel);
			if(inverted) value = maxValue - valueFromTrackLeft; else value = minValue + valueFromTrackLeft;
		}
		return value;
	}
	,paintTrack: function(g,drawRect) {
		this.trackCanvas.get_graphics().clear();
		if(!this.slider.getPaintTrack()) return;
		g = new org.aswing.graphics.Graphics2D(this.trackCanvas.get_graphics());
		var verticle = this.slider.getOrientation() == 1;
		var style = this.slider.getStyleTune();
		var b = drawRect.clone();
		var radius = 0;
		if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
		if(radius > style.round) radius = style.round;
		g.fillRoundRect(new org.aswing.graphics.SolidBrush(this.slider.getBackground()),b.x,b.y,b.width,b.height,radius);
		var trackCanvas_f = new Array();
		trackCanvas_f.push(new openfl.filters.GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
		this.trackCanvas.set_filters(trackCanvas_f);
	}
	,paintTrackProgress: function(g,trackDrawRect) {
		if(!this.slider.getPaintTrack()) return;
		return;
		var rect = trackDrawRect.clone();
		var width;
		var height;
		var x;
		var y;
		var inverted = this.slider.getInverted();
		if(this.isVertical()) {
			width = rect.width - 5;
			height = this.thumbRect.y + this.thumbRect.height / 2 - rect.y - 5 | 0;
			x = rect.x + 2;
			if(inverted) y = rect.y + 2; else {
				height = rect.y + rect.height - this.thumbRect.y - this.thumbRect.height / 2 - 2 | 0;
				y = this.thumbRect.y + this.thumbRect.height / 2 | 0;
			}
		} else {
			height = rect.height - 5;
			if(inverted) {
				width = rect.x + rect.width - this.thumbRect.x - this.thumbRect.width / 2 - 2 | 0;
				x = this.thumbRect.x + this.thumbRect.width / 2 | 0;
			} else {
				width = this.thumbRect.x + this.thumbRect.width / 2 - rect.x - 5 | 0;
				x = rect.x + 2;
			}
			y = rect.y + 2;
		}
		g.fillRectangle(new org.aswing.graphics.SolidBrush(this.progressColor),x,y,width,height);
	}
	,paintThumb: function(g,drawRect) {
		if(this.isVertical()) {
			this.thumbIcon.getDisplay(this.slider).set_rotation(90);
			this.thumbIcon.updateIcon(this.slider,g,drawRect.x + this.thumbIcon.getIconHeight(this.slider),drawRect.y);
		} else {
			this.thumbIcon.getDisplay(this.slider).set_rotation(0);
			this.thumbIcon.updateIcon(this.slider,g,drawRect.x,drawRect.y);
		}
	}
	,paintTick: function(g,drawRect) {
		if(!this.slider.getPaintTicks()) return;
		var tickBounds = drawRect;
		var majT = this.slider.getMajorTickSpacing();
		var minT = this.slider.getMinorTickSpacing();
		var max = this.slider.getMaximum();
		g.beginDraw(new org.aswing.graphics.Pen(this.slider.getForeground(),0));
		var yPos = 0;
		var value = 0;
		var xPos = 0;
		if(this.isVertical()) {
			xPos = tickBounds.x;
			value = this.slider.getMinimum();
			yPos = 0;
			if(minT > 0) while(value <= max) {
				yPos = this.yPositionForValue(value);
				this.paintMinorTickForVertSlider(g,tickBounds,xPos,yPos);
				value += minT;
			}
			if(majT > 0) {
				value = this.slider.getMinimum();
				while(value <= max) {
					yPos = this.yPositionForValue(value);
					this.paintMajorTickForVertSlider(g,tickBounds,xPos,yPos);
					value += majT;
				}
			}
		} else {
			yPos = tickBounds.y;
			value = this.slider.getMinimum();
			xPos = 0;
			if(minT > 0) while(value <= max) {
				xPos = Std["int"](this.xPositionForValue(value));
				this.paintMinorTickForHorizSlider(g,tickBounds,xPos,yPos);
				value += minT;
			}
			if(majT > 0) {
				value = this.slider.getMinimum();
				while(value <= max) {
					xPos = Std["int"](this.xPositionForValue(value));
					this.paintMajorTickForHorizSlider(g,tickBounds,xPos,yPos);
					value += majT;
				}
			}
		}
		g.endDraw();
	}
	,paintMinorTickForHorizSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x,y + tickBounds.height / 2 - 1);
	}
	,paintMajorTickForHorizSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x,y + tickBounds.height - 2);
	}
	,paintMinorTickForVertSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x + tickBounds.width / 2 - 1,y);
	}
	,paintMajorTickForVertSlider: function(g,tickBounds,x,y) {
		g.line(x,y,x + tickBounds.width - 2,y);
	}
	,__onSliderStateChanged: function(e) {
		if(this.isDragging != true) {
			this.countThumbRect();
			this.paintThumb(null,this.thumbRect);
			this.progressCanvas.get_graphics().clear();
			this.paintTrackProgress(new org.aswing.graphics.Graphics2D(this.progressCanvas.get_graphics()),this.trackDrawRect);
		}
	}
	,__onSliderKeyDown: function(e) {
		if(!this.slider.isEnabled()) return;
		var code = e.keyCode;
		var unit = this.getUnitIncrement();
		var block;
		if(this.slider.getMajorTickSpacing() > 0) block = this.slider.getMajorTickSpacing(); else block = unit * 5;
		if(this.isVertical()) {
			unit = -unit;
			block = -block;
		}
		if(this.slider.getInverted()) {
			unit = -unit;
			block = -block;
		}
		if(code == org.aswing.AWKeyboard.UP || code == org.aswing.AWKeyboard.LEFT) this.scrollByIncrement(-unit); else if(code == org.aswing.AWKeyboard.DOWN || code == org.aswing.AWKeyboard.RIGHT) this.scrollByIncrement(unit); else if(code == org.aswing.AWKeyboard.PAGE_UP) this.scrollByIncrement(-block); else if(code == org.aswing.AWKeyboard.PAGE_DOWN) this.scrollByIncrement(block); else if(code == org.aswing.AWKeyboard.HOME) this.slider.setValue(this.slider.getMinimum()); else if(code == org.aswing.AWKeyboard.END) this.slider.setValue(this.slider.getMaximum() - this.slider.getExtent());
	}
	,__onSliderPress: function(e) {
		var mousePoint = this.slider.getMousePosition();
		if(this.thumbRect.containsPoint(mousePoint)) this.__startDragThumb(); else {
			var inverted = this.slider.getInverted();
			var thumbCenterPos;
			if(this.isVertical()) {
				thumbCenterPos = this.thumbRect.y + this.thumbRect.height / 2;
				if(mousePoint.y > thumbCenterPos) if(inverted) this.scrollIncrement = this.getUnitIncrement(); else this.scrollIncrement = -this.getUnitIncrement(); else if(inverted) this.scrollIncrement = -this.getUnitIncrement(); else this.scrollIncrement = this.getUnitIncrement();
				this.scrollContinueDestination = this.valueForYPosition(mousePoint.y);
			} else {
				thumbCenterPos = this.thumbRect.x + this.thumbRect.width / 2;
				if(mousePoint.x > thumbCenterPos) if(inverted) this.scrollIncrement = -this.getUnitIncrement(); else this.scrollIncrement = this.getUnitIncrement(); else if(inverted) this.scrollIncrement = this.getUnitIncrement(); else this.scrollIncrement = -this.getUnitIncrement();
				this.scrollContinueDestination = this.valueForXPosition(mousePoint.x);
			}
			this.scrollTimer.restart();
			this.__scrollTimerPerformed(null);
		}
	}
	,__onSliderReleased: function(e) {
		if(this.isDragging) this.__stopDragThumb();
		if(this.scrollTimer.isRunning()) this.scrollTimer.stop();
	}
	,__onSliderMouseWheel: function(e) {
		if(!this.slider.isEnabled()) return;
		var delta = e.delta;
		if(this.slider.getInverted()) delta = -delta;
		this.scrollByIncrement(delta * this.getUnitIncrement());
	}
	,__scrollTimerPerformed: function(e) {
		var value = this.slider.getValue() + this.scrollIncrement;
		var finished = false;
		if(this.scrollIncrement > 0) {
			if(value >= this.scrollContinueDestination) finished = true;
		} else if(value <= this.scrollContinueDestination) finished = true;
		if(finished) {
			this.slider.setValue(this.scrollContinueDestination);
			this.scrollTimer.stop();
		} else this.scrollByIncrement(this.scrollIncrement);
	}
	,scrollByIncrement: function(increment) {
		this.slider.setValue(this.slider.getValue() + increment);
	}
	,getUnitIncrement: function() {
		var unit = 0;
		if(this.slider.getMinorTickSpacing() > 0) unit = this.slider.getMinorTickSpacing(); else if(this.slider.getMajorTickSpacing() > 0) unit = this.slider.getMajorTickSpacing(); else {
			var range = this.slider.getMaximum() - this.slider.getMinimum();
			if(range > 2) unit = Std["int"](Math.max(1,Math.round(range / 500))); else unit = range / 100 | 0;
		}
		return unit;
	}
	,__startDragThumb: function() {
		this.isDragging = true;
		this.slider.setValueIsAdjusting(true);
		var mp = this.slider.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var tr = this.thumbRect;
		if(this.isVertical()) this.offset = my - tr.y; else this.offset = mx - tr.x;
		this.__startHandleDrag();
	}
	,__stopDragThumb: function() {
		this.__stopHandleDrag();
		if(this.isDragging) {
			this.isDragging = false;
			this.countThumbRect();
		}
		this.slider.setValueIsAdjusting(false);
		this.offset = 0;
	}
	,__startHandleDrag: function() {
		if(org.aswing.AsWingManager.getStage() != null) {
			org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb),false,0,false);
			this.slider.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__onMoveThumbRFS),false,0,false);
			this.showValueTip();
		}
	}
	,__onMoveThumbRFS: function(e) {
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMoveThumb));
		this.slider.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__onMoveThumbRFS));
	}
	,__stopHandleDrag: function() {
		if(this.slider.get_stage() != null) this.__onMoveThumbRFS(null);
		this.disposValueTip();
	}
	,__onMoveThumb: function(e) {
		this.scrollThumbToCurrentMousePosition();
		this.showValueTip();
		e.updateAfterEvent();
	}
	,showValueTip: function() {
		if(this.slider.getShowValueTip()) {
			var tip = this.slider.getValueTip();
			tip.setWaitThenPopupEnabled(false);
			tip.setTipText(this.slider.getValue() + "");
			if(!tip.isShowing()) tip.showToolTip();
			tip.moveLocationRelatedTo(this.slider.componentToGlobal(this.slider.getMousePosition()));
		}
	}
	,disposValueTip: function() {
		if(this.slider.getValueTip() != null) this.slider.getValueTip().disposeToolTip();
	}
	,scrollThumbToCurrentMousePosition: function() {
		var mp = this.slider.getMousePosition();
		var mx = mp.x;
		var my = mp.y;
		var thumbPos;
		var minPos;
		var maxPos;
		var halfThumbLength;
		var sliderValue;
		var paintThumbRect = this.thumbRect.clone();
		if(this.isVertical()) {
			halfThumbLength = this.thumbRect.height / 2 | 0;
			thumbPos = my - this.offset;
			if(!this.slider.getInverted()) {
				maxPos = this.yPositionForValue(this.slider.getMinimum()) - halfThumbLength;
				minPos = this.yPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength;
			} else {
				minPos = this.yPositionForValue(this.slider.getMinimum()) - halfThumbLength;
				maxPos = this.yPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength;
			}
			thumbPos = Std["int"](Math.max(minPos,Math.min(maxPos,thumbPos)));
			sliderValue = this.valueForYPosition(thumbPos + halfThumbLength);
			this.slider.setValue(sliderValue);
			this.thumbRect.y = this.yPositionForValue(this.slider.getValue()) - halfThumbLength;
			paintThumbRect.y = thumbPos;
		} else {
			halfThumbLength = this.thumbRect.width / 2 | 0;
			thumbPos = mx - this.offset;
			if(this.slider.getInverted()) {
				maxPos = Std["int"](this.xPositionForValue(this.slider.getMinimum()) - halfThumbLength);
				minPos = Std["int"](this.xPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength);
			} else {
				minPos = Std["int"](this.xPositionForValue(this.slider.getMinimum()) - halfThumbLength);
				maxPos = Std["int"](this.xPositionForValue(this.slider.getMaximum() - this.slider.getExtent()) - halfThumbLength);
			}
			thumbPos = Std["int"](Math.max(minPos,Math.min(maxPos,thumbPos)));
			sliderValue = this.valueForXPosition(thumbPos + halfThumbLength);
			this.slider.setValue(sliderValue);
			this.thumbRect.x = Std["int"](this.xPositionForValue(this.slider.getValue()) - halfThumbLength);
			paintThumbRect.x = thumbPos;
		}
		this.paintThumb(null,paintThumbRect);
		this.progressCanvas.get_graphics().clear();
		this.paintTrackProgress(new org.aswing.graphics.Graphics2D(this.progressCanvas.get_graphics()),this.trackDrawRect);
	}
	,getTrackMargin: function() {
		var b = this.slider.getPaintBounds();
		this.countTrackRect(b);
		var insets = new org.aswing.Insets();
		insets.top = this.trackRect.y - b.y;
		insets.bottom = b.y + b.height - this.trackRect.y - this.trackRect.height;
		insets.left = this.trackRect.x - b.x;
		insets.right = b.x + b.width - this.trackRect.x - this.trackRect.width;
		return insets;
	}
	,getPrefferedLength: function() {
		return 200;
	}
	,getPreferredSize: function(c) {
		var size;
		var thumbSize = this.getThumbSize();
		var tickLength = Std["int"](this.getTickLength());
		var gap = this.getTickTrackGap();
		var wide;
		if(this.slider.getPaintTicks()) wide = gap + tickLength; else wide = 0;
		if(this.isVertical()) {
			wide += thumbSize.width;
			size = new org.aswing.geom.IntDimension(wide,Std["int"](Math.max(wide,this.getPrefferedLength())));
		} else {
			wide += thumbSize.height;
			size = new org.aswing.geom.IntDimension(Std["int"](Math.max(wide,this.getPrefferedLength())),wide);
		}
		return c.getInsets().getOutsideSize(size);
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,getMinimumSize: function(c) {
		var size;
		var thumbSize = this.getThumbSize();
		var tickLength = Std["int"](this.getTickLength());
		var gap = this.getTickTrackGap();
		var wide;
		if(this.slider.getPaintTicks()) wide = gap + tickLength; else wide = 0;
		if(this.isVertical()) {
			wide += thumbSize.width;
			size = new org.aswing.geom.IntDimension(wide,thumbSize.height);
		} else {
			wide += thumbSize.height;
			size = new org.aswing.geom.IntDimension(thumbSize.width,wide);
		}
		return c.getInsets().getOutsideSize(size);
	}
	,__class__: org.aswing.plaf.basic.BasicSliderUI
});
org.aswing.plaf.basic.BasicSpacerUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicSpacerUI"] = org.aswing.plaf.basic.BasicSpacerUI;
org.aswing.plaf.basic.BasicSpacerUI.__name__ = ["org","aswing","plaf","basic","BasicSpacerUI"];
org.aswing.plaf.basic.BasicSpacerUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicSpacerUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "Spacer.";
	}
	,installUI: function(c) {
		this.installDefaults(js.Boot.__instanceof(c,org.aswing.JSpacer)?c:null);
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults(js.Boot.__instanceof(c,org.aswing.JSpacer)?c:null);
	}
	,installDefaults: function(s) {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColors(s,pp);
		org.aswing.LookAndFeel.installBasicProperties(s,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(s,pp);
	}
	,uninstallDefaults: function(s) {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(s);
	}
	,getPreferredSize: function(c) {
		return c.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(0,0));
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,getMinimumSize: function(c) {
		return new org.aswing.geom.IntDimension(0,0);
	}
	,__class__: org.aswing.plaf.basic.BasicSpacerUI
});
org.aswing.plaf.basic.BasicSplitPaneUI = function() {
	org.aswing.plaf.SplitPaneUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicSplitPaneUI"] = org.aswing.plaf.basic.BasicSplitPaneUI;
org.aswing.plaf.basic.BasicSplitPaneUI.__name__ = ["org","aswing","plaf","basic","BasicSplitPaneUI"];
org.aswing.plaf.basic.BasicSplitPaneUI.__interfaces__ = [org.aswing.LayoutManager];
org.aswing.plaf.basic.BasicSplitPaneUI.__super__ = org.aswing.plaf.SplitPaneUI;
org.aswing.plaf.basic.BasicSplitPaneUI.prototype = $extend(org.aswing.plaf.SplitPaneUI.prototype,{
	getPropertyPrefix: function() {
		return "SplitPane.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JSplitPane)) this.sp = c; else this.sp = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JSplitPane)) this.sp = c; else this.sp = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.sp,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.sp,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.sp,pp);
		this.presentDragColor = this.getColor(pp + "presentDragColor");
		this.defaultDividerSize = this.getInt(pp + "defaultDividerSize");
		this.lastContentSize = new org.aswing.geom.IntDimension();
		this.sp.setLayout(this);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.sp);
		this.sp.setDividerLocation(0,true);
	}
	,installComponents: function() {
		this.vSplitCursor = this.createSplitCursor(true);
		this.hSplitCursor = this.createSplitCursor(false);
		this.divider = this.createDivider();
		this.divider.setUIElement(true);
		this.sp.append(this.divider,"divider");
		this.divider.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__div_pressed));
		this.divider.addEventListener("release",$bind(this,this.__div_released));
		this.divider.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__div_rollover));
		this.divider.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__div_rollout));
		this.divider.getCollapseLeftButton().addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__div_rollout));
		this.divider.getCollapseRightButton().addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__div_rollout));
		this.divider.getCollapseLeftButton().addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__div_rollover));
		this.divider.getCollapseRightButton().addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__div_rollover));
		this.divider.getCollapseLeftButton().addActionListener($bind(this,this.__collapseLeft));
		this.divider.getCollapseRightButton().addActionListener($bind(this,this.__collapseRight));
	}
	,uninstallComponents: function() {
		this.sp.remove(this.divider);
		this.divider.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__div_pressed));
		this.divider.removeEventListener("release",$bind(this,this.__div_released));
		this.divider.removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__div_rollover));
		this.divider.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__div_rollout));
		this.divider.getCollapseLeftButton().removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__div_rollout));
		this.divider.getCollapseRightButton().removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__div_rollout));
		this.divider.getCollapseLeftButton().removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__div_rollover));
		this.divider.getCollapseRightButton().removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__div_rollover));
		this.divider.getCollapseLeftButton().removeActionListener($bind(this,this.__collapseLeft));
		this.divider.getCollapseRightButton().removeActionListener($bind(this,this.__collapseRight));
		this.divider = null;
	}
	,installListeners: function() {
		this.sp.addEventListener("focusKeyDown",$bind(this,this.__on_splitpane_key_down));
		this.sp.addEventListener("stateChanged",$bind(this,this.__div_location_changed));
	}
	,uninstallListeners: function() {
		this.sp.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.__on_splitpane_key_down));
		this.sp.removeEventListener("stateChanged",$bind(this,this.__div_location_changed));
	}
	,createSplitCursor: function(vertical) {
		var result;
		if(vertical) result = org.aswing.Cursor.createCursor("System.vMoveCursor"); else result = org.aswing.Cursor.createCursor("System.hMoveCursor");
		return result;
	}
	,createDivider: function() {
		return new org.aswing.plaf.basic.splitpane.Divider(this.sp);
	}
	,getDefaultDividerSize: function() {
		return this.defaultDividerSize;
	}
	,paintDividerDragingRepresention: function(g) {
		g.fillRectangle(new org.aswing.graphics.SolidBrush(this.presentDragColor.changeAlpha(0.4)),0,0,1,1);
	}
	,resetToPreferredSizes: function(jc) {
		var loc = jc.getDividerLocation();
		if(this.isVertical()) {
			if(jc.getLeftComponent() == null) loc = 0; else loc = jc.getLeftComponent().getPreferredHeight();
		} else if(jc.getLeftComponent() == null) loc = 0; else loc = jc.getLeftComponent().getPreferredWidth();
		loc = Std["int"](Math.max(this.getMinimumDividerLocation(),Math.min(loc,this.getMaximumDividerLocation())));
		jc.setDividerLocation(loc);
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.SplitPaneUI.prototype.paint.call(this,c,g,b);
		this.divider.paintImmediately();
	}
	,layoutWithLocation: function(location) {
		var rect = this.sp.getSize().getBounds(0,0);
		rect = this.sp.getInsets().getInsideBounds(rect);
		var lc = this.sp.getLeftComponent();
		var rc = this.sp.getRightComponent();
		var dvSize = this.getDividerSize();
		location = Math.floor(location);
		if(location < 0) {
			if(this.isVertical()) {
				this.divider.setComBoundsXYWH(rect.x,rect.y,rect.width,dvSize);
				if(rc != null) rc.setComBoundsXYWH(rect.x,rect.y + dvSize,rect.width,rect.height - dvSize);
			} else {
				this.divider.setComBoundsXYWH(rect.x,rect.y,dvSize,rect.height);
				if(rc != null) rc.setComBoundsXYWH(rect.x + dvSize,rect.y,rect.width - dvSize,rect.height);
			}
			if(lc != null) lc.setVisible(false);
			if(rc != null) rc.setVisible(true);
		} else if(location == 2147483647) {
			if(this.isVertical()) {
				this.divider.setComBoundsXYWH(rect.x,rect.y + rect.height - dvSize,rect.width,dvSize);
				if(lc != null) lc.setComBoundsXYWH(rect.x,rect.y,rect.width,rect.height - dvSize);
			} else {
				this.divider.setComBoundsXYWH(rect.x + rect.width - dvSize,rect.y,dvSize,rect.height);
				if(lc != null) lc.setComBoundsXYWH(rect.x,rect.y,rect.width - dvSize,rect.height);
			}
			if(lc != null) lc.setVisible(true);
			if(rc != null) rc.setVisible(false);
		} else {
			if(this.isVertical()) {
				this.divider.setComBoundsXYWH(rect.x,rect.y + location,rect.width,dvSize);
				if(lc != null) lc.setComBoundsXYWH(rect.x,rect.y,rect.width,location);
				if(rc != null) rc.setComBoundsXYWH(rect.x,rect.y + location + dvSize,rect.width,rect.height - location - dvSize);
			} else {
				this.divider.setComBoundsXYWH(rect.x + location,rect.y,dvSize,rect.height);
				if(lc != null) lc.setComBoundsXYWH(rect.x,rect.y,location,rect.height);
				if(rc != null) rc.setComBoundsXYWH(rect.x + location + dvSize,rect.y,rect.width - location - dvSize,rect.height);
			}
			if(lc != null) lc.setVisible(true);
			if(rc != null) rc.setVisible(true);
		}
		if(lc != null) lc.revalidateIfNecessary();
		if(rc != null) rc.revalidateIfNecessary();
		this.divider.revalidateIfNecessary();
	}
	,getMinimumDividerLocation: function() {
		var leftCom = this.sp.getLeftComponent();
		if(leftCom == null) return 0; else if(this.isVertical()) return leftCom.getMinimumHeight(); else return leftCom.getMinimumWidth();
	}
	,getMaximumDividerLocation: function() {
		var rightCom = this.sp.getRightComponent();
		var insets = this.sp.getInsets();
		var rightComSize = 0;
		if(rightCom != null) if(this.isVertical()) rightComSize = rightCom.getMinimumHeight(); else rightComSize = rightCom.getMinimumWidth();
		if(this.isVertical()) return this.sp.getHeight() - insets.top - insets.bottom - this.getDividerSize() - rightComSize; else return this.sp.getWidth() - insets.left - insets.right - this.getDividerSize() - rightComSize;
	}
	,isVertical: function() {
		return this.sp.getOrientation() == 1;
	}
	,getDividerSize: function() {
		var si = this.sp.getDividerSize();
		if(si < 0) return this.getDefaultDividerSize(); else return si;
	}
	,restrictDividerLocation: function(loc) {
		return Std["int"](Math.max(this.getMinimumDividerLocation(),Math.min(loc,this.getMaximumDividerLocation())));
	}
	,__collapseLeft: function(e) {
		this.pressFlag = true;
		if(this.sp.getDividerLocation() == 2147483647) {
			this.sp.setDividerLocation(this.sp.getLastDividerLocation());
			this.divider.getCollapseLeftButton().setEnabled(true);
			this.divider.getCollapseRightButton().setEnabled(true);
		} else if(this.sp.getDividerLocation() >= 0) {
			this.sp.setDividerLocation(-1);
			this.divider.getCollapseLeftButton().setEnabled(false);
		} else this.divider.getCollapseLeftButton().setEnabled(true);
	}
	,__collapseRight: function(e) {
		this.pressFlag = true;
		if(this.sp.getDividerLocation() < 0) {
			this.sp.setDividerLocation(this.sp.getLastDividerLocation());
			this.divider.getCollapseRightButton().setEnabled(true);
			this.divider.getCollapseLeftButton().setEnabled(true);
		} else if(this.sp.getDividerLocation() != 2147483647) {
			this.sp.setDividerLocation(2147483647);
			this.divider.getCollapseRightButton().setEnabled(false);
		} else this.divider.getCollapseRightButton().setEnabled(false);
	}
	,__on_splitpane_key_down: function(e) {
		var code = e.keyCode;
		var dir = 0;
		if(code == org.aswing.KeyStroke.VK_HOME.getCode()) {
			if(this.sp.getDividerLocation() < 0) this.sp.setDividerLocation(this.sp.getLastDividerLocation()); else this.sp.setDividerLocation(-1);
			return;
		} else if(code == org.aswing.KeyStroke.VK_END.getCode()) {
			if(this.sp.getDividerLocation() == 2147483647) this.sp.setDividerLocation(this.sp.getLastDividerLocation()); else this.sp.setDividerLocation(2147483647);
			return;
		}
		if(code == org.aswing.KeyStroke.VK_LEFT.getCode() || code == org.aswing.KeyStroke.VK_UP.getCode()) dir = -1; else if(code == org.aswing.KeyStroke.VK_RIGHT.getCode() || code == org.aswing.KeyStroke.VK_DOWN.getCode()) dir = 1;
		if(e.shiftKey) dir *= 10;
		this.sp.setDividerLocation(this.restrictDividerLocation(Std["int"](this.sp.getDividerLocation() + dir)));
	}
	,__div_location_changed: function(e) {
		this.layoutWithLocation(this.sp.getDividerLocation());
		if(this.sp.getDividerLocation() >= 0 && this.sp.getDividerLocation() != 2147483647) this.divider.setEnabled(true); else this.divider.setEnabled(false);
	}
	,__div_pressed: function(e) {
		if(e.target != this.divider) {
			this.pressFlag = true;
			return;
		}
		this.spliting = true;
		this.showMoveCursor();
		this.startDragPos = this.sp.getMousePosition();
		this.startLocation = this.sp.getDividerLocation();
		this.startDividerPos = this.divider.getGlobalLocation();
		this.sp.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__div_mouse_moving));
		this.sp.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__div_mouse_moving));
	}
	,__div_released: function(e) {
		if(e.getPressTarget() != this.divider) return;
		if(this.pressFlag) {
			this.pressFlag = false;
			return;
		}
		if(this.dragRepresentationMC != null && this.sp.contains(this.dragRepresentationMC)) this.sp.removeChild(this.dragRepresentationMC);
		this.validateDivMoveWithCurrentMousePos();
		this.sp.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__div_mouse_moving));
		this.spliting = false;
		if(this.mouseInDividerFlag != true) this.hideMoveCursor();
	}
	,__div_mouse_moving: function(e) {
		if(!this.sp.isContinuousLayout()) {
			if(this.dragRepresentationMC == null) {
				this.dragRepresentationMC = new openfl.display.Shape();
				var g = new org.aswing.graphics.Graphics2D(this.dragRepresentationMC.get_graphics());
				this.paintDividerDragingRepresention(g);
			}
			if(!this.sp.contains(this.dragRepresentationMC)) this.sp.addChild(this.dragRepresentationMC);
			var newGlobalPos = this.startDividerPos.clone();
			if(this.isVertical()) newGlobalPos.y += this.getCurrentMovedDistance(); else newGlobalPos.x += this.getCurrentMovedDistance();
			var newPoint = newGlobalPos.toPoint();
			newPoint = this.dragRepresentationMC.parent.globalToLocal(newPoint);
			this.dragRepresentationMC.set_x(Math.round(newPoint.x));
			this.dragRepresentationMC.set_y(Math.round(newPoint.y));
			this.dragRepresentationMC.set_width(this.divider.get_width());
			this.dragRepresentationMC.set_height(this.divider.get_height());
		} else this.validateDivMoveWithCurrentMousePos();
	}
	,validateDivMoveWithCurrentMousePos: function() {
		var newLocation = this.startLocation + this.getCurrentMovedDistance();
		this.sp.setDividerLocation(newLocation);
	}
	,getCurrentMovedDistance: function() {
		var mouseP = this.sp.getMousePosition();
		var delta = 0;
		if(this.isVertical()) delta = mouseP.y - this.startDragPos.y; else delta = mouseP.x - this.startDragPos.x;
		var newLocation = this.startLocation + delta;
		newLocation = Std["int"](Math.max(this.getMinimumDividerLocation(),Math.min(newLocation,this.getMaximumDividerLocation())));
		return newLocation - this.startLocation;
	}
	,__div_rollover: function(e) {
		this.mouseInDividerFlag = true;
		if(!e.buttonDown && !this.spliting) this.showMoveCursor();
	}
	,__div_rollout: function(e) {
		this.mouseInDividerFlag = false;
		if(this.spliting != true) this.hideMoveCursor();
	}
	,showMoveCursor: function() {
		this.cursorManager = org.aswing.CursorManager.getManager(this.sp.get_stage());
		if(this.isVertical()) {
			this.cursorManager.hideCustomCursor(this.hSplitCursor);
			this.cursorManager.showCustomCursor(this.vSplitCursor);
		} else {
			this.cursorManager.hideCustomCursor(this.vSplitCursor);
			this.cursorManager.showCustomCursor(this.hSplitCursor);
		}
	}
	,hideMoveCursor: function() {
		if(this.cursorManager == null) return;
		this.cursorManager.hideCustomCursor(this.vSplitCursor);
		this.cursorManager.hideCustomCursor(this.hSplitCursor);
		this.cursorManager = null;
	}
	,addLayoutComponent: function(comp,constraints) {
	}
	,removeLayoutComponent: function(comp) {
	}
	,preferredLayoutSize: function(target) {
		var insets = this.sp.getInsets();
		var lc = this.sp.getLeftComponent();
		var rc = this.sp.getRightComponent();
		var lcSize;
		if(lc == null) lcSize = new org.aswing.geom.IntDimension(); else lcSize = lc.getPreferredSize();
		var rcSize;
		if(rc == null) rcSize = new org.aswing.geom.IntDimension(); else rcSize = rc.getPreferredSize();
		var size;
		if(this.isVertical()) size = new org.aswing.geom.IntDimension(Std["int"](Math.max(lcSize.width,rcSize.width)),lcSize.height + rcSize.height + this.getDividerSize()); else size = new org.aswing.geom.IntDimension(lcSize.width + rcSize.width + this.getDividerSize(),Std["int"](Math.max(lcSize.height,rcSize.height)));
		return insets.getOutsideSize(size);
	}
	,minimumLayoutSize: function(target) {
		return target.getInsets().getOutsideSize();
	}
	,maximumLayoutSize: function(target) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
		var size = this.sp.getSize();
		size = this.sp.getInsets().getInsideSize(size);
		var layouted = false;
		if(!size.equals(this.lastContentSize)) {
			var deltaSize = 0;
			if(this.isVertical()) deltaSize = size.height - this.lastContentSize.height; else deltaSize = size.width - this.lastContentSize.width;
			this.lastContentSize = size.clone();
			var locationDelta = Std["int"](deltaSize * this.sp.getResizeWeight());
			layouted = locationDelta != 0;
			var newLocation = this.sp.getDividerLocation() + locationDelta;
			newLocation = Std["int"](Math.max(this.getMinimumDividerLocation(),Math.min(newLocation,this.getMaximumDividerLocation())));
			this.sp.setDividerLocation(newLocation,true);
		}
		if(layouted != true) this.layoutWithLocation(this.sp.getDividerLocation());
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,invalidateLayout: function(target) {
	}
	,__class__: org.aswing.plaf.basic.BasicSplitPaneUI
});
org.aswing.plaf.basic.BasicStepperUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
	this.inputText = new org.aswing.JTextField("",3);
};
$hxClasses["org.aswing.plaf.basic.BasicStepperUI"] = org.aswing.plaf.basic.BasicStepperUI;
org.aswing.plaf.basic.BasicStepperUI.__name__ = ["org","aswing","plaf","basic","BasicStepperUI"];
org.aswing.plaf.basic.BasicStepperUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicStepperUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JStepper)) this.stepper = c; else this.stepper = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JStepper)) this.stepper = c; else this.stepper = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Stepper.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.stepper,pp);
		org.aswing.LookAndFeel.installColorsAndFont(this.stepper,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.stepper,pp);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.stepper);
	}
	,installComponents: function() {
		this.upButton = this.createButton(-Math.PI / 2);
		this.downButton = this.createButton(Math.PI / 2);
		this.inputText.setBackgroundDecorator(null);
		this.inputText.setBorder(null);
		this.inputText.setForeground(null);
		this.inputText.setBackground(null);
		this.inputText.setMideground(null);
		this.inputText.setStyleTune(null);
		this.upButton.setUIElement(true);
		this.downButton.setUIElement(true);
		this.inputText.setUIElement(true);
		this.upButton.setFocusable(false);
		this.downButton.setFocusable(false);
		this.inputText.setFocusable(false);
		this.stepper.addChild(this.inputText);
		this.stepper.addChild(this.upButton);
		this.stepper.addChild(this.downButton);
	}
	,uninstallComponents: function() {
		this.stepper.removeChild(this.inputText);
		this.stepper.removeChild(this.upButton);
		this.stepper.removeChild(this.downButton);
	}
	,installListeners: function() {
		this.stepper.addStateListener($bind(this,this.__onValueChanged));
		this.stepper.addEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.stepper.addEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.stepper.addEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.inputText.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.inputText.getTextField().addEventListener(openfl.events.Event.CHANGE,$bind(this,this.__textChanged));
		this.upButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onUpButtonPressed));
		this.upButton.addEventListener("release",$bind(this,this.__onUpButtonReleased));
		this.downButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onDownButtonPressed));
		this.downButton.addEventListener("release",$bind(this,this.__onDownButtonReleased));
		this.continueTimer = new org.aswing.util.Timer(org.aswing.plaf.basic.BasicStepperUI.continueSpeedThrottle);
		this.continueTimer.setInitialDelay(org.aswing.plaf.basic.BasicStepperUI.initialContinueSpeedThrottle);
		this.continueTimer.addActionListener($bind(this,this.__continueTimerPerformed));
	}
	,uninstallListeners: function() {
		this.stepper.removeStateListener($bind(this,this.__onValueChanged));
		this.stepper.removeEventListener("focusKeyDown",$bind(this,this.__onInputTextKeyDown));
		this.stepper.removeEventListener("focusGained",$bind(this,this.__onFocusGained));
		this.stepper.removeEventListener("focusLost",$bind(this,this.__onFocusLost));
		this.inputText.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onInputTextMouseWheel));
		this.inputText.getTextField().removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.__textChanged));
		this.upButton.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onUpButtonPressed));
		this.upButton.removeEventListener("release",$bind(this,this.__onUpButtonReleased));
		this.downButton.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onDownButtonPressed));
		this.downButton.removeEventListener("release",$bind(this,this.__onDownButtonReleased));
		this.continueTimer.stop();
		this.continueTimer = null;
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.layoutStepper();
		this.upButton.setEnabled(this.stepper.isEnabled());
		this.downButton.setEnabled(this.stepper.isEnabled());
		this.inputText.setFont(this.stepper.getFont());
		this.inputText.setForeground(this.stepper.getForeground());
		this.inputText.setEditable(this.stepper.isEditable());
		this.inputText.setEnabled(this.stepper.isEnabled());
		this.fillInputTextWithCurrentValue();
	}
	,paintBackGround: function(c,g,b) {
	}
	,createButton: function(direction) {
		var btn = new org.aswing.JButton("",new org.aswing.plaf.basic.icon.ArrowIcon(direction,15));
		btn.setFocusable(false);
		btn.setPreferredSize(new org.aswing.geom.IntDimension(15,15));
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org.aswing.Insets());
		btn.setBorder(null);
		btn.setMideground(null);
		btn.setStyleTune(null);
		return btn;
	}
	,getInternalFocusObject: function(c) {
		return this.inputText.getTextField();
	}
	,fillInputTextWithCurrentValue: function() {
		this.inputText.setText(this.getShouldFilledText());
	}
	,getShouldFilledText: function() {
		var value = this.stepper.getValue();
		var text = (this.stepper.getValueTranslator())(value);
		return text;
	}
	,__onValueChanged: function(e) {
		if(this.textInputing != true) this.fillInputTextWithCurrentValue();
	}
	,__onInputTextMouseWheel: function(e) {
		this.stepper.setValue(this.stepper.getValue() + e.delta * this.stepper.getUnitIncrement(),false);
	}
	,__textChanged: function(e) {
		this.textInputing = true;
		var text = this.inputText.getText();
		var value = Std["int"]((this.stepper.getValueParser())(text));
		this.stepper.setValue(value,false);
		this.textInputing = false;
	}
	,__inputTextAction: function(fireActOnlyIfChanged) {
		if(fireActOnlyIfChanged == null) fireActOnlyIfChanged = false;
		var text = this.inputText.getText();
		var value = Std["int"]((this.stepper.getValueParser())(text));
		this.stepper.setValue(value,false);
		if(fireActOnlyIfChanged != true) this.fireActionEvent(); else if(value != this.startEditingValue) this.fireActionEvent();
	}
	,fireActionEvent: function() {
		this.startEditingValue = this.stepper.getValue();
		this.fillInputTextWithCurrentValue();
		this.stepper.dispatchEvent(new org.aswing.event.AWEvent("act"));
	}
	,__onFocusGained: function(e) {
		this.startEditingValue = this.stepper.getValue();
	}
	,__onFocusLost: function(e) {
		this.__inputTextAction(true);
	}
	,__onInputTextKeyDown: function(e) {
		var code = e.keyCode;
		var unit = this.stepper.getUnitIncrement();
		var delta = 0;
		if(code == org.aswing.AWKeyboard.ENTER) {
			this.__inputTextAction(false);
			return;
		}
		if(code == org.aswing.AWKeyboard.HOME) {
			this.stepper.setValue(this.stepper.getMinimum(),false);
			return;
		} else if(code == org.aswing.AWKeyboard.END) {
			this.stepper.setValue(this.stepper.getMaximum() - this.stepper.getExtent(),false);
			return;
		}
		if(code == org.aswing.AWKeyboard.UP) delta = unit; else if(code == org.aswing.AWKeyboard.DOWN) delta = -unit; else if(code == org.aswing.AWKeyboard.PAGE_UP) delta = unit; else if(code == org.aswing.AWKeyboard.PAGE_DOWN) delta = -unit;
		this.makeStepper(delta);
	}
	,makeStepper: function(step) {
		this.stepper.setValue(this.stepper.getValue() + step,false);
	}
	,__onUpButtonPressed: function(e) {
		this.timerIncrement = this.stepper.getUnitIncrement();
		this.makeStepper(this.timerIncrement);
		this.continueTimer.restart();
		this.timerContinued = 0;
	}
	,__onUpButtonReleased: function(e) {
		this.continueTimer.stop();
		this.fireActionEvent();
	}
	,__onDownButtonPressed: function(e) {
		this.timerIncrement = -this.stepper.getUnitIncrement();
		this.makeStepper(this.timerIncrement);
		this.continueTimer.restart();
		this.timerContinued = 0;
	}
	,__onDownButtonReleased: function(e) {
		this.continueTimer.stop();
		this.fireActionEvent();
	}
	,__continueTimerPerformed: function(e) {
		this.makeStepper(this.timerIncrement);
		this.timerContinued++;
		if(this.timerContinued >= 5) {
			this.timerContinued = 0;
			this.timerIncrement *= 2;
		}
	}
	,layoutStepper: function() {
		var td = this.stepper.getSize();
		var insets = this.stepper.getInsets();
		var top = insets.top;
		var left = insets.left;
		var right = td.width - insets.right;
		var height = td.height - insets.top - insets.bottom;
		var buttonSize = this.upButton.getPreferredSize();
		this.upButton.setSizeWH(buttonSize.width,height / 2 | 0);
		this.upButton.setLocationXY(right - buttonSize.width,top);
		this.downButton.setSizeWH(buttonSize.width,height / 2 | 0);
		this.downButton.setLocationXY(right - buttonSize.width,top + height / 2 | 0);
		this.inputText.setLocationXY(left,top);
		this.inputText.setSizeWH(td.width - insets.left - insets.right - buttonSize.width,height);
	}
	,getPreferredSize: function(c) {
		var insets = this.stepper.getInsets();
		this.inputText.setColumns(this.stepper.getColumns());
		var inputSize = this.inputText.getPreferredSize();
		var buttonSize = this.upButton.getPreferredSize();
		inputSize.width += buttonSize.width;
		return insets.getOutsideSize(inputSize);
	}
	,getMinimumSize: function(c) {
		var buttonSize = this.upButton.getPreferredSize();
		buttonSize.height *= 2;
		return this.stepper.getInsets().getOutsideSize(buttonSize);
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,__class__: org.aswing.plaf.basic.BasicStepperUI
});
org.aswing.plaf.basic.BasicTabbedPaneUI = function() {
	this.topBlankSpace = 4;
	this.contentMargin = null;
	this.maxTabWidth = -1;
	this.tabGap = 1;
	org.aswing.plaf.BaseComponentUI.call(this);
	this.tabBorderInsets = new org.aswing.Insets(2,2,0,2);
	this.selectedTabExpandInsets = new org.aswing.Insets(2,2,0,2);
	this.tabs = new Array();
	this.firstIndex = 0;
	this.lastIndex = 0;
};
$hxClasses["org.aswing.plaf.basic.BasicTabbedPaneUI"] = org.aswing.plaf.basic.BasicTabbedPaneUI;
org.aswing.plaf.basic.BasicTabbedPaneUI.__name__ = ["org","aswing","plaf","basic","BasicTabbedPaneUI"];
org.aswing.plaf.basic.BasicTabbedPaneUI.__interfaces__ = [org.aswing.LayoutManager];
org.aswing.plaf.basic.BasicTabbedPaneUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicTabbedPaneUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JTabbedPane)) this.tabbedPane = c; else this.tabbedPane = null;
		this.tabbedPane.setLayout(this);
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JTabbedPane)) this.tabbedPane = c; else this.tabbedPane = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "TabbedPane.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.tabbedPane,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.tabbedPane,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.tabbedPane,pp);
		this.contentMargin = this.getInsets(pp + "contentMargin");
		if(this.contentMargin == null) this.contentMargin = new org.aswing.Insets(8,2,2,2);
		this.maxTabWidth = this.getInt(pp + "maxTabWidth");
		if(this.maxTabWidth == -1) this.maxTabWidth = 1000;
		this.contentRoundLineThickness = this.getInt(this.getPropertyPrefix() + "contentRoundLineThickness");
		var tabMargin = this.getInsets(pp + "tabMargin");
		if(tabMargin == null) tabMargin = new org.aswing.plaf.InsetsUIResource(1,1,1,1);
		if(this.containsKey(pp + "topBlankSpace")) this.topBlankSpace = this.getInt(pp + "topBlankSpace");
		if(this.containsKey(pp + "tabGap")) this.tabGap = this.getInt(pp + "tabGap");
		if(this.containsKey(pp + "tabBorderInsets")) this.tabBorderInsets = this.getInsets(pp + "tabBorderInsets");
		if(this.containsKey(pp + "selectedTabExpandInsets")) this.selectedTabExpandInsets = this.getInsets(pp + "selectedTabExpandInsets");
		var i = this.tabbedPane.getMargin();
		if(js.Boot.__instanceof(i,org.aswing.plaf.UIResource)) this.tabbedPane.setMargin(tabMargin);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.tabbedPane);
	}
	,installComponents: function() {
		this.prevButton = this.createPrevButton();
		this.nextButton = this.createNextButton();
		this.prevButton.setFocusable(false);
		this.nextButton.setFocusable(false);
		this.prevButton.setUIElement(true);
		this.nextButton.setUIElement(true);
		this.prevButton.addActionListener($bind(this,this.__prevButtonReleased));
		this.nextButton.addActionListener($bind(this,this.__nextButtonReleased));
		this.createUIAssets();
		this.synTabs();
	}
	,uninstallComponents: function() {
		this.prevButton.removeActionListener($bind(this,this.__prevButtonReleased));
		this.nextButton.removeActionListener($bind(this,this.__nextButtonReleased));
		this.removeUIAssets();
	}
	,installListeners: function() {
		this.tabbedPane.addStateListener($bind(this,this.__onSelectionChanged));
		this.tabbedPane.addEventListener("focusKeyDown",$bind(this,this.__onNavKeyDown));
		this.tabbedPane.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onTabPanePressed));
	}
	,uninstallListeners: function() {
		this.tabbedPane.removeStateListener($bind(this,this.__onSelectionChanged));
		this.tabbedPane.removeEventListener("focusKeyDown",$bind(this,this.__onNavKeyDown));
		this.tabbedPane.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onTabPanePressed));
	}
	,getMousedOnTabIndex: function() {
		var p = this.tabbedPane.getMousePosition();
		var n = this.tabbedPane.getComponentCount();
		var i = this.firstIndex;
		while(i < n && i <= this.lastIndex + 1) {
			var b = this.getDrawnTabBounds(i);
			if(b != null && b.containsPoint(p)) return i;
			i++;
		}
		return -1;
	}
	,__onSelectionChanged: function(e) {
		this.tabbedPane.revalidate();
		this.tabbedPane.repaint();
	}
	,__onTabPanePressed: function(e) {
		if((this.prevButton.hitTestMouse() || this.nextButton.hitTestMouse()) && (this.prevButton.isShowing() && this.nextButton.isShowing())) return;
		var index = this.getMousedOnTabIndex();
		if(index >= 0 && this.tabbedPane.isEnabledAt(index)) this.tabbedPane.setSelectedIndex(index,false);
	}
	,__onNavKeyDown: function(e) {
		if(!this.tabbedPane.isEnabled()) return;
		var n = this.tabbedPane.getComponentCount();
		if(n > 0) {
			var index = this.tabbedPane.getSelectedIndex();
			var code = e.keyCode;
			var count = 1;
			if(code == org.aswing.AWKeyboard.DOWN || code == org.aswing.AWKeyboard.RIGHT) {
				this.setTraversingTrue();
				index++;
				while((!this.tabbedPane.isEnabledAt(index) || !this.tabbedPane.isVisibleAt(index)) && index < n) {
					index++;
					count++;
					if(index >= n) return;
				}
				if(index >= n) return;
				if(this.lastIndex < n - 1) this.firstIndex = Std["int"](Math.min(this.firstIndex + count,n - 1));
			} else if(code == org.aswing.AWKeyboard.UP || code == org.aswing.AWKeyboard.LEFT) {
				this.setTraversingTrue();
				index--;
				while((!this.tabbedPane.isEnabledAt(index) || !this.tabbedPane.isVisibleAt(index)) && index >= 0) {
					index--;
					count++;
					if(index < 0) return;
				}
				if(index < 0) return;
				if(this.firstIndex > 0) this.firstIndex = Std["int"](Math.max(0,this.firstIndex - count));
			}
			this.tabbedPane.setSelectedIndex(index,false);
		}
	}
	,setTraversingTrue: function() {
		var fm = org.aswing.FocusManager.getManager(this.tabbedPane.get_stage());
		if(fm != null) fm.setTraversing(true);
	}
	,__prevButtonReleased: function(e) {
		if(this.firstIndex > 0) {
			this.firstIndex--;
			this.tabbedPane.repaint();
		}
	}
	,__nextButtonReleased: function(e) {
		if(this.lastIndex < this.tabbedPane.getComponentCount() - 1) {
			this.firstIndex++;
			this.tabbedPane.repaint();
		}
	}
	,isTabHorizontalPlacing: function() {
		return this.tabbedPane.getTabPlacement() == 1 || this.tabbedPane.getTabPlacement() == 3;
	}
	,getTabBorderInsets: function() {
		return this.tabBorderInsets;
	}
	,createPrevButton: function() {
		return this.createArrowButton(Math.PI);
	}
	,createArrowButton: function(direction) {
		var btn = new org.aswing.JButton("",this.createArrowIcon(direction,true));
		btn.setFocusable(false);
		btn.setPreferredSize(new org.aswing.geom.IntDimension(16,16));
		btn.setBackgroundDecorator(null);
		btn.setMargin(new org.aswing.Insets());
		btn.setBorder(null);
		btn.setStyleProxy(this.tabbedPane);
		btn.setMideground(null);
		btn.setStyleTune(null);
		return btn;
	}
	,createNextButton: function() {
		return this.createArrowButton(0);
	}
	,createArrowIcon: function(direction,enable) {
		return new org.aswing.plaf.basic.icon.ArrowIcon(direction,16);
	}
	,getTabBarSize: function() {
		if(this.tabBarSize != null) return this.tabBarSize;
		var isHorizontalPlacing = this.isTabHorizontalPlacing();
		this.tabBarSize = new org.aswing.geom.IntDimension(0,0);
		var n = this.tabbedPane.getComponentCount();
		this.tabBoundArray = new Array();
		var x = 0;
		var y = 0;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var ts = this.countPreferredTabSizeAt(i);
			var tbounds = new org.aswing.geom.IntRectangle(x,y,ts.width,ts.height);
			this.tabBoundArray[i] = tbounds;
			var offset;
			if(i < n + 1) offset = this.tabGap; else offset = 0;
			if(isHorizontalPlacing) {
				this.tabBarSize.height = Std["int"](Math.max(this.tabBarSize.height,ts.height));
				this.tabBarSize.width += ts.width + offset;
				x += ts.width + offset;
			} else {
				this.tabBarSize.width = Std["int"](Math.max(this.tabBarSize.width,ts.width));
				this.tabBarSize.height += ts.height + offset;
				y += ts.height + offset;
			}
		}
		var leadOffset = this.tabbedPane.getLeadingOffset();
		this.maxTabSize = this.tabBarSize.clone();
		if(isHorizontalPlacing) {
			this.tabBarSize.height += this.topBlankSpace + this.contentMargin.top;
			this.tabBarSize.width += this.tabBorderInsets.left + this.tabBorderInsets.right + leadOffset;
		} else {
			this.tabBarSize.width += this.topBlankSpace + this.contentMargin.top;
			this.tabBarSize.height += this.tabBorderInsets.left + this.tabBorderInsets.right + leadOffset;
		}
		return this.tabBarSize;
	}
	,getTabBoundArray: function() {
		if(this.tabBoundArray != null && this.tabBoundArray.length == this.tabbedPane.getComponentCount()) return this.tabBoundArray; else {
			this.invalidateLayout(this.tabbedPane);
			this.getTabBarSize();
			if(this.tabBoundArray == null) console.log("Debug : Error tabBoundArray == null but tabBarSize = " + Std.string(this.tabBarSize));
			return this.tabBoundArray;
		}
	}
	,countPreferredTabSizeAt: function(index) {
		var tab = this.getTab(index);
		var size = tab.getTabComponent().getPreferredSize();
		size.width = Std["int"](Math.min(size.width,this.maxTabWidth));
		return size;
	}
	,setDrawnTabBounds: function(index,b,paneBounds) {
		b = b.clone();
		if(b.x < paneBounds.x) b.x = paneBounds.x;
		if(b.y < paneBounds.y) b.y = paneBounds.y;
		if(b.x + b.width > paneBounds.x + paneBounds.width) b.width = paneBounds.x + paneBounds.width - b.x;
		if(b.y + b.height > paneBounds.y + paneBounds.height) b.height = paneBounds.y + paneBounds.height - b.y;
		this.drawnTabBoundArray[index] = b;
	}
	,getDrawnTabBounds: function(index) {
		return this.drawnTabBoundArray[index];
	}
	,createUIAssets: function() {
		this.uiRootMC = org.aswing.AsWingUtils.createSprite(this.tabbedPane,"uiRootMC");
		this.tabBarMC = org.aswing.AsWingUtils.createSprite(this.uiRootMC,"tabBarMC");
		this.tabBarMaskMC = org.aswing.AsWingUtils.createShape(this.uiRootMC,"tabBarMaskMC");
		this.buttonHolderMC = org.aswing.AsWingUtils.createSprite(this.uiRootMC,"buttonHolderMC");
		this.tabBarMC.set_mask(this.tabBarMaskMC);
		var g = new org.aswing.graphics.Graphics2D(this.tabBarMaskMC.get_graphics());
		g.fillRectangle(new org.aswing.graphics.SolidBrush(org.aswing.ASColor.WHITE),0,0,1,1);
		var p = new org.aswing.JPanel(new org.aswing.SoftBoxLayout(0,0));
		p.setOpaque(false);
		p.setFocusable(false);
		p.setSizeWH(100,100);
		p.setUIElement(true);
		this.buttonHolderMC.addChild(p);
		this.buttonMCPane = p;
		var insets = new org.aswing.Insets(this.topBlankSpace,this.topBlankSpace,this.topBlankSpace,this.topBlankSpace);
		p.setBorder(new org.aswing.border.EmptyBorder(null,insets));
		p.append(this.prevButton);
		p.append(this.nextButton);
	}
	,removeUIAssets: function() {
		this.tabbedPane.removeChild(this.uiRootMC);
		this.tabs = new Array();
	}
	,createTabBarGraphics: function() {
		this.tabBarMC.get_graphics().clear();
		var g = new org.aswing.graphics.Graphics2D(this.tabBarMC.get_graphics());
		return g;
	}
	,getTab: function(i) {
		return org.aswing.AsWingUtils["as"](this.tabs[i],org.aswing.plaf.basic.tabbedpane.Tab);
	}
	,getSelectedTab: function() {
		if(this.tabbedPane.getSelectedIndex() >= 0) return this.getTab(this.tabbedPane.getSelectedIndex()); else return null;
	}
	,indexOfTabComponent: function(tab) {
		var _g1 = 0;
		var _g = this.tabs.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.getTab(i).getTabComponent() == tab) return i;
		}
		return -1;
	}
	,paintFocus: function(c,g,b) {
		var header = this.getSelectedTab();
		if(header != null) header.getTabComponent().paintFocusRect(true); else org.aswing.plaf.BaseComponentUI.prototype.paintFocus.call(this,c,g,b);
	}
	,createNewTab: function() {
		var tab = org.aswing.AsWingUtils["as"](this.getInstance(this.getPropertyPrefix() + "tab"),org.aswing.plaf.basic.tabbedpane.Tab);
		if(tab == null) tab = new org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab();
		tab.initTab(this.tabbedPane);
		this.topTabCom = tab.getTabComponent();
		this.topTabCom.setFocusable(false);
		this.topTabCom.setStyleProxy(this.tabbedPane);
		this.topTabCom.setStyleTune(null);
		this.topTabCom.setForeground(null);
		this.topTabCom.setBackground(null);
		this.topTabCom.setMideground(null);
		this.topTabCom.setFont(null);
		return tab;
	}
	,synTabs: function() {
		var comCount = this.tabbedPane.getComponentCount();
		if(comCount != this.tabs.length) {
			var i;
			var header;
			if(comCount > this.tabs.length) {
				var _g = this.tabs.length;
				while(_g < comCount) {
					var i1 = _g++;
					header = this.createNewTab();
					this.setTabProperties(header,i1);
					this.tabBarMC.addChild(header.getTabComponent());
					this.tabs.push(header);
				}
			} else {
				var it = this.tabs.length - comCount;
				while(it > 0) {
					header = org.aswing.AsWingUtils["as"](this.tabs.shift(),org.aswing.plaf.basic.tabbedpane.Tab);
					this.tabBarMC.removeChild(header.getTabComponent());
					it--;
				}
			}
		}
	}
	,synTabProperties: function() {
		var _g1 = 0;
		var _g = this.tabs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var header = this.getTab(i);
			this.setTabProperties(header,i);
		}
	}
	,setTabProperties: function(header,i) {
		header.setTextAndIcon(this.tabbedPane.getTitleAt(i),this.tabbedPane.getIconAt(i));
		header.getTabComponent().setUIElement(true);
		header.getTabComponent().setEnabled(this.tabbedPane.isEnabledAt(i));
		header.getTabComponent().setVisible(this.tabbedPane.isVisibleAt(i));
		header.getTabComponent().setToolTipText(this.tabbedPane.getTipAt(i));
		header.setHorizontalAlignment(this.tabbedPane.getHorizontalAlignment());
		header.setHorizontalTextPosition(this.tabbedPane.getHorizontalTextPosition());
		header.setIconTextGap(this.tabbedPane.getIconTextGap());
		this.setTabMarginProperty(header,this.getTransformedMargin());
		header.setVerticalAlignment(this.tabbedPane.getVerticalAlignment());
		header.setVerticalTextPosition(this.tabbedPane.getVerticalTextPosition());
		header.setFont(this.tabbedPane.getFont());
		header.setForeground(this.tabbedPane.getForeground());
	}
	,setTabMarginProperty: function(tab,margin) {
		tab.setMargin(margin);
	}
	,getTransformedMargin: function() {
		return this.transformMargin(this.tabbedPane.getMargin());
	}
	,transformMargin: function(margin) {
		var placement = this.tabbedPane.getTabPlacement();
		var transformedMargin = margin.clone();
		if(placement == 2) {
			transformedMargin.left = margin.top;
			transformedMargin.right = margin.bottom;
			transformedMargin.top = margin.right;
			transformedMargin.bottom = margin.left;
		} else if(placement == 4) {
			transformedMargin.left = margin.bottom;
			transformedMargin.right = margin.top;
			transformedMargin.top = margin.left;
			transformedMargin.bottom = margin.right;
		} else if(placement == 3) {
			transformedMargin.top = margin.bottom;
			transformedMargin.bottom = margin.top;
		}
		return transformedMargin;
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		this.synTabProperties();
		this.tabBarMaskMC.set_x(b.x);
		this.tabBarMaskMC.set_y(b.y);
		this.tabBarMaskMC.set_width(b.width);
		this.tabBarMaskMC.set_height(b.height);
		g = this.createTabBarGraphics();
		var horizontalPlacing = this.isTabHorizontalPlacing();
		var contentBounds = b.clone();
		var tabBarBounds = this.getTabBarSize().getBounds(0,0);
		tabBarBounds.x = b.x;
		tabBarBounds.y = b.y;
		tabBarBounds.width = Std["int"](Math.min(tabBarBounds.width,contentBounds.width));
		tabBarBounds.height = Std["int"](Math.min(tabBarBounds.height,contentBounds.height));
		var transformedTabMargin = this.getTransformedMargin();
		var placement = this.tabbedPane.getTabPlacement();
		var leadingOffset = this.tabbedPane.getLeadingOffset();
		if(placement == 2) {
			tabBarBounds.y += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.height -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		} else if(placement == 4) {
			tabBarBounds.x = contentBounds.x + contentBounds.width - tabBarBounds.width;
			tabBarBounds.y += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.height -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		} else if(placement == 3) {
			tabBarBounds.y = contentBounds.y + contentBounds.height - tabBarBounds.height;
			tabBarBounds.x += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.width -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		} else {
			tabBarBounds.x += this.tabBorderInsets.left + leadingOffset;
			tabBarBounds.width -= this.tabBorderInsets.getMarginWidth() + leadingOffset;
		}
		var i = 0;
		var n = this.tabbedPane.getComponentCount();
		var tba = this.getTabBoundArray();
		this.drawnTabBoundArray = new Array();
		var selectedIndex = this.tabbedPane.getSelectedIndex();
		var offsetPoint = new org.aswing.geom.IntPoint();
		var _g1 = 0;
		var _g = this.firstIndex;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(horizontalPlacing) offsetPoint.x -= tba[i1].width | 0; else offsetPoint.y -= tba[i1].height | 0;
			this.getTab(i1).getTabComponent().setVisible(false);
		}
		var _g2 = this.firstIndex;
		while(_g2 < n) {
			var i2 = _g2++;
			if(i2 != selectedIndex) {
				var viewedFlag = this.drawTabWithFullInfosAt(i2,b,tba[i2],g,tabBarBounds,offsetPoint,transformedTabMargin);
				if(viewedFlag < 0) this.lastIndex = i2;
				if(viewedFlag >= 0) break;
			}
		}
		if(selectedIndex >= 0) {
			if(this.drawTabWithFullInfosAt(selectedIndex,b,tba[selectedIndex],g,tabBarBounds,offsetPoint,transformedTabMargin) < 0) this.lastIndex = Std["int"](Math.max(this.lastIndex,selectedIndex));
		}
		var selBounds = null;
		if(selectedIndex >= 0) selBounds = this.getDrawnTabBounds(selectedIndex);
		this.drawBaseLine(tabBarBounds,g,b,selBounds);
		var _g3 = this.lastIndex + 2;
		while(_g3 < n) {
			var i3 = _g3++;
			this.getTab(i3).getTabComponent().setVisible(false);
		}
		if(this.firstIndex > 0 || this.lastIndex < n - 1) {
			this.buttonMCPane.setVisible(true);
			this.prevButton.setEnabled(this.firstIndex > 0);
			this.nextButton.setEnabled(this.lastIndex < n - 1);
			var bps = this.buttonMCPane.getPreferredSize();
			this.buttonMCPane.setSize(bps);
			var bpl = new org.aswing.geom.IntPoint();
			if(placement == 2) {
				bpl.x = contentBounds.x;
				bpl.y = contentBounds.y + contentBounds.height - bps.height;
			} else if(placement == 4) {
				bpl.x = contentBounds.x + contentBounds.width - bps.width;
				bpl.y = contentBounds.y + contentBounds.height - bps.height;
			} else if(placement == 3) {
				bpl.x = contentBounds.x + contentBounds.width - bps.width;
				bpl.y = contentBounds.y + contentBounds.height - bps.height;
			} else {
				bpl.x = contentBounds.x + contentBounds.width - bps.width;
				bpl.y = contentBounds.y;
			}
			this.buttonMCPane.setLocation(bpl);
			this.buttonMCPane.revalidate();
		} else this.buttonMCPane.setVisible(false);
		this.tabbedPane.bringToTop(this.uiRootMC);
	}
	,drawTabWithFullInfosAt: function(index,paneBounds,bounds,g,tabBarBounds,offsetPoint,transformedTabMargin) {
		var tb = bounds.clone();
		tb.x += tabBarBounds.x + offsetPoint.x;
		tb.y += tabBarBounds.y + offsetPoint.y;
		var placement = this.tabbedPane.getTabPlacement();
		if(placement == 2) {
			tb.width = this.maxTabSize.width;
			tb.x += this.topBlankSpace;
		} else if(placement == 4) {
			tb.width = this.maxTabSize.width;
			tb.x += this.contentMargin.top;
		} else if(placement == 3) {
			tb.y += this.contentMargin.top;
			tb.height = this.maxTabSize.height;
		} else {
			tb.height = this.maxTabSize.height;
			tb.y += this.topBlankSpace;
		}
		if(this.isTabHorizontalPlacing()) {
			if(tb.x > paneBounds.x + paneBounds.width) return 1;
		} else if(tb.y > paneBounds.y + paneBounds.height) return 1;
		this.drawTabAt(index,tb,paneBounds,g,transformedTabMargin);
		if(this.isTabHorizontalPlacing()) {
			if(tb.x + tb.width > paneBounds.x + paneBounds.width) return 0;
		} else if(tb.y + tb.height > paneBounds.y + paneBounds.height) return 0;
		return -1;
	}
	,drawBaseLine: function(tabBarBounds,g,fullB,selTabB) {
		return;
		var b = tabBarBounds.clone();
		var placement = this.tabbedPane.getTabPlacement();
		var pen;
		var lineT = 2;
		if(selTabB == null) selTabB = new org.aswing.geom.IntRectangle(fullB.x + fullB.width / 2 | 0,fullB.y + fullB.height / 2 | 0,0,0);
		selTabB = selTabB.clone();
		var cl = this.tabbedPane.getMideground();
		var adjuster = this.tabbedPane.getStyleTune();
		var style = new org.aswing.StyleResult(cl,adjuster);
		var matrix = new openfl.geom.Matrix();
		var dark = style.bdark;
		var light = style.bdark.offsetHLS(0,0.15,-0.1);
		var leadingOffset = this.tabbedPane.getLeadingOffset();
		if(this.isTabHorizontalPlacing()) {
			var isTop = placement == 1;
			if(isTop) b.y = b.y + b.height - this.contentMargin.top; else b.y += this.contentMargin.top - lineT / 2 | 0;
			b.width += this.tabBorderInsets.getMarginWidth();
			b.x -= this.tabBorderInsets.left;
			var leftPart = new org.aswing.geom.IntRectangle(b.x,b.y,selTabB.x - b.x,2);
			var rightPart = new org.aswing.geom.IntRectangle(selTabB.x + selTabB.width,b.y,b.x + b.width - (selTabB.x + selTabB.width),2);
			matrix.createGradientBox(this.tabBorderInsets.left,1,0,leftPart.x,leftPart.y);
			g.fillRectangle(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),leftPart.x,leftPart.y,leftPart.width,1);
			matrix.createGradientBox(this.tabBorderInsets.right,1,Math.PI,rightPart.x + rightPart.width - this.tabBorderInsets.right,rightPart.y);
			g.fillRectangle(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),rightPart.x,rightPart.y,rightPart.width,1);
		} else {
			var isLeft = placement == 2;
			if(isLeft) b.x = b.x + b.width - this.contentMargin.top; else b.x += this.contentMargin.top - lineT / 2 | 0;
			b.height += this.tabBorderInsets.getMarginWidth();
			b.y -= this.tabBorderInsets.left;
			var topPart = new org.aswing.geom.IntRectangle(b.x,b.y,2,selTabB.y - b.y);
			var botPart = new org.aswing.geom.IntRectangle(b.x,selTabB.y + selTabB.height,2,b.y + b.height - (selTabB.y + selTabB.height));
			matrix.createGradientBox(1,this.tabBorderInsets.left,Math.PI / 2,topPart.x,topPart.y);
			g.fillRectangle(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),topPart.x,topPart.y,1,topPart.height);
			matrix.createGradientBox(1,this.tabBorderInsets.right,-Math.PI / 2,botPart.x,botPart.y + botPart.height - this.tabBorderInsets.right);
			g.fillRectangle(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB()],[0,1],[0,255],matrix),botPart.x,botPart.y,1,botPart.height);
		}
	}
	,drawTabBorderAt: function(index,b,paneBounds,g) {
		var placement = this.tabbedPane.getTabPlacement();
		b = b.clone();
		if(index == this.tabbedPane.getSelectedIndex()) {
			if(this.isTabHorizontalPlacing()) {
				b.x -= this.selectedTabExpandInsets.left;
				b.width += this.selectedTabExpandInsets.left + this.selectedTabExpandInsets.right;
				b.height += Math.round(this.topBlankSpace / 2 + this.contentRoundLineThickness);
				if(placement == 3) b.y -= this.contentRoundLineThickness; else b.y -= Math.round(this.topBlankSpace / 2);
			} else {
				b.y -= this.selectedTabExpandInsets.left;
				b.height += this.selectedTabExpandInsets.left + this.selectedTabExpandInsets.right;
				b.width += Math.round(this.topBlankSpace / 2 + this.contentRoundLineThickness);
				if(placement == 4) b.x -= this.contentRoundLineThickness; else b.x -= Math.round(this.topBlankSpace / 2);
			}
		}
		this.setDrawnTabBounds(index,b,paneBounds);
		this.getTab(index).setTabPlacement(placement);
	}
	,drawTabAt: function(index,bounds,paneBounds,g,transformedTabMargin) {
		this.drawTabBorderAt(index,bounds,paneBounds,g);
		var tab = this.getTab(index);
		tab.setSelected(index == this.tabbedPane.getSelectedIndex());
		var tc = tab.getTabComponent();
		tc.setComBounds(this.getDrawnTabBounds(index));
		if(index == this.tabbedPane.getSelectedIndex()) {
			if(null != this.topTabCom && tc.parent.contains(this.topTabCom)) tc.parent.swapChildren(tc,this.topTabCom);
			this.topTabCom = tc;
		}
	}
	,getTabColor: function(index) {
		return this.tabbedPane.getBackground();
	}
	,addLayoutComponent: function(comp,constraints) {
		this.tabbedPane.repaint();
		this.synTabs();
		this.synTabProperties();
	}
	,removeLayoutComponent: function(comp) {
		this.tabbedPane.repaint();
		this.synTabs();
		this.synTabProperties();
	}
	,preferredLayoutSize: function(target) {
		if(target != this.tabbedPane) {
			console.log("Error : BasicTabbedPaneUI Can't layout " + Std.string(target));
			return null;
		}
		if(this.prefferedSize != null) return this.prefferedSize;
		var insets = this.tabbedPane.getInsets();
		var w = 0;
		var h = 0;
		var _g1 = 0;
		var _g = this.tabbedPane.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var size = this.tabbedPane.getComponent(i).getPreferredSize();
			w = Std["int"](Math.max(w,size.width));
			h = Std["int"](Math.max(h,size.height));
		}
		var cm = this.contentMargin.clone();
		cm.top = 0;
		cm = this.transformMargin(cm);
		var csize = cm.getOutsideSize(new org.aswing.geom.IntDimension(w,h));
		w = csize.width;
		h = csize.height;
		var tbs = this.getTabBarSize();
		if(this.isTabHorizontalPlacing()) {
			w = Std["int"](Math.max(w,tbs.width));
			h += tbs.height;
		} else {
			h = Std["int"](Math.max(h,tbs.height));
			w += tbs.width;
		}
		this.prefferedSize = insets.getOutsideSize(new org.aswing.geom.IntDimension(w,h));
		return this.prefferedSize;
	}
	,minimumLayoutSize: function(target) {
		if(target != this.tabbedPane) {
			console.log("Error : BasicTabbedPaneUI Can't layout " + Std.string(target));
			return null;
		}
		if(this.minimumSize != null) return this.minimumSize;
		var insets = this.tabbedPane.getInsets();
		var w = 0;
		var h = 0;
		var _g1 = 0;
		var _g = this.tabbedPane.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			var size = this.tabbedPane.getComponent(i).getMinimumSize();
			w = Std["int"](Math.max(w,size.width));
			h = Std["int"](Math.max(h,size.height));
		}
		var cm = this.contentMargin.clone();
		cm.top = 0;
		cm = this.transformMargin(cm);
		var csize = cm.getOutsideSize(new org.aswing.geom.IntDimension(w,h));
		w = csize.width;
		h = csize.height;
		var tbs = this.getTabBarSize();
		if(this.isTabHorizontalPlacing()) h += tbs.height; else w += tbs.width;
		this.minimumSize = insets.getOutsideSize(new org.aswing.geom.IntDimension(w,h));
		return this.minimumSize;
	}
	,maximumLayoutSize: function(target) {
		if(target != this.tabbedPane) {
			console.log("Error : BasicTabbedPaneUI Can't layout " + Std.string(target));
			return null;
		}
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,layoutContainer: function(target) {
		if(target != this.tabbedPane) {
			console.log("Error : BasicTabbedPaneUI Can't layout " + Std.string(target));
			return;
		}
		var n = this.tabbedPane.getComponentCount();
		var selectedIndex = this.tabbedPane.getSelectedIndex();
		var insets = this.tabbedPane.getInsets();
		var paneBounds = insets.getInsideBounds(new org.aswing.geom.IntRectangle(0,0,this.tabbedPane.getWidth(),this.tabbedPane.getHeight()));
		var tbs = this.getTabBarSize();
		if(this.isTabHorizontalPlacing()) {
			paneBounds.height -= tbs.height + this.contentMargin.bottom;
			paneBounds.x += this.contentMargin.left;
			paneBounds.width -= this.contentMargin.left + this.contentMargin.right;
		} else {
			paneBounds.width -= tbs.width + this.contentMargin.bottom;
			paneBounds.y += this.contentMargin.right;
			paneBounds.height -= this.contentMargin.left + this.contentMargin.right;
		}
		var placement = this.tabbedPane.getTabPlacement();
		if(placement == 2) paneBounds.x += tbs.width; else if(placement == 4) paneBounds.x += this.contentMargin.bottom; else if(placement == 3) paneBounds.y += this.contentMargin.bottom; else paneBounds.y += tbs.height;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.tabbedPane.getComponent(i).setBounds(paneBounds);
			this.tabbedPane.getComponent(i).setVisible(i == selectedIndex);
		}
	}
	,invalidateLayout: function(target) {
		if(target != this.tabbedPane) {
			console.log("Error : BasicTabbedPaneUI Can't layout " + Std.string(target));
			return;
		}
		this.prefferedSize = null;
		this.minimumSize = null;
		this.tabBarSize = null;
		this.tabBoundArray = null;
		this.synTabProperties();
	}
	,getLayoutAlignmentX: function(target) {
		return 0;
	}
	,getLayoutAlignmentY: function(target) {
		return 0;
	}
	,__class__: org.aswing.plaf.basic.BasicTabbedPaneUI
});
org.aswing.plaf.basic.BasicTableHeaderUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
	this.mouseXOffset = 0;
	this.resizing = false;
	this.resizeCursor = org.aswing.Cursor.createCursor("System.hMoveCursor");
};
$hxClasses["org.aswing.plaf.basic.BasicTableHeaderUI"] = org.aswing.plaf.basic.BasicTableHeaderUI;
org.aswing.plaf.basic.BasicTableHeaderUI.__name__ = ["org","aswing","plaf","basic","BasicTableHeaderUI"];
org.aswing.plaf.basic.BasicTableHeaderUI.setCellComponentProperties = function(com) {
	com.setFocusable(false);
	if(js.Boot.__instanceof(com,org.aswing.Container)) {
		var con;
		if(js.Boot.__instanceof(com,org.aswing.Container)) con = com; else con = null;
		var _g1 = 0;
		var _g = con.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			org.aswing.plaf.basic.BasicTableHeaderUI.setCellComponentProperties(con.getComponent(i));
		}
	}
};
org.aswing.plaf.basic.BasicTableHeaderUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicTableHeaderUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "TableHeader.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.table.JTableHeader)) this.header = c; else this.header = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.header,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.header,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.header,pp);
		this.header.setOpaque(true);
	}
	,installComponents: function() {
		this.cells = new Array();
	}
	,installListeners: function() {
		this.header.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__onHeaderRollover));
		this.header.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__onHeaderRollout));
		this.header.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onHeaderPressed));
		this.header.addEventListener("release",$bind(this,this.__onHeaderReleased));
		this.header.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__headerRemovedFromStage));
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.header);
	}
	,uninstallComponents: function() {
		this.removeAllCells();
		this.cells = null;
	}
	,uninstallListeners: function() {
		this.header.removeEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__onHeaderRollover));
		this.header.removeEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__onHeaderRollout));
		this.header.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onHeaderPressed));
		this.header.removeEventListener("release",$bind(this,this.__onHeaderReleased));
		this.header.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__headerRemovedFromStage));
	}
	,__headerRemovedFromStage: function(e) {
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onRollOverMouseMoving));
		org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoving));
	}
	,__onHeaderRollover: function(e) {
		if(e.buttonDown != true) {
			if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onRollOverMouseMoving),false,0,false);
		}
	}
	,__onHeaderRollout: function(e) {
		if(e == null || !e.buttonDown) {
			org.aswing.CursorManager.getManager(org.aswing.AsWingManager.getStage()).hideCustomCursor(this.resizeCursor);
			if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onRollOverMouseMoving));
		}
	}
	,__onRollOverMouseMoving: function(e) {
		if(this.resizing) return;
		var p = this.header.getMousePosition();
		if(this.header.getTable().hitTestMouse() && this.canResize(this.getResizingColumn(p,this.header.columnAtPoint(p)))) org.aswing.CursorManager.getManager(org.aswing.AsWingManager.getStage()).showCustomCursor(this.resizeCursor,true); else org.aswing.CursorManager.getManager(org.aswing.AsWingManager.getStage()).hideCustomCursor(this.resizeCursor);
	}
	,__onHeaderPressed: function(e) {
		this.header.setResizingColumn(null);
		if(this.header.getTable().getCellEditor() != null) this.header.getTable().getCellEditor().cancelCellEditing();
		var p = this.header.getMousePosition();
		var index = this.header.columnAtPoint(p);
		if(index >= 0) {
			var resizingColumn = this.getResizingColumn(p,index);
			if(this.canResize(resizingColumn)) {
				this.header.setResizingColumn(resizingColumn);
				this.mouseXOffset = p.x - resizingColumn.getWidth();
				if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoving),false,0,false);
				this.resizing = true;
			}
		}
	}
	,__onHeaderReleased: function(e) {
		if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onMouseMoving));
		this.header.setResizingColumn(null);
		this.resizing = false;
		this.__onRollOverMouseMoving(null);
	}
	,__onMouseMoving: function(e) {
		var mouseX = this.header.getMousePosition().x;
		var resizingColumn = this.header.getResizingColumn();
		if(resizingColumn != null) {
			var newWidth;
			newWidth = mouseX - this.mouseXOffset;
			resizingColumn.setWidth(newWidth);
			e.updateAfterEvent();
		}
	}
	,canResize: function(column) {
		return column != null && this.header.getResizingAllowed() && column.getResizable();
	}
	,getResizingColumn: function(p,column) {
		if(column < 0) return null;
		var r = this.header.getHeaderRect(column);
		r.grow(-3,0);
		if(p.x > r.x && p.x < r.x + r.width) return null;
		var midPoint = r.x + r.width / 2 | 0;
		var columnIndex;
		if(p.x < midPoint) columnIndex = column - 1; else columnIndex = column;
		if(columnIndex == -1) return null;
		return this.header.getColumnModel().getColumn(columnIndex);
	}
	,getHeaderRenderer: function(columnIndex) {
		var aColumn = this.header.getColumnModel().getColumn(columnIndex);
		var renderer = aColumn.getHeaderCellFactory();
		if(renderer == null) renderer = this.header.getDefaultRenderer();
		return renderer;
	}
	,paintBackGround: function(c,g,b) {
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		if(this.header.getColumnModel().getColumnCount() <= 0) return;
		this.synCreateCellInstances();
		var cm = this.header.getColumnModel();
		var cMin = 0;
		var cMax = cm.getColumnCount() - 1;
		var columnWidth;
		var cellRect = this.header.getHeaderRect(cMin);
		cellRect.x += Std["int"](this.header.getTable().getColumnModel().getColumnMargin() / 2);
		var aColumn;
		var _g1 = cMin;
		var _g = cMax + 1;
		while(_g1 < _g) {
			var column = _g1++;
			aColumn = cm.getColumn(column);
			columnWidth = aColumn.getWidth();
			cellRect.width = columnWidth | 0;
			var cell = this.cells[column];
			cell.setCellValue(aColumn.getHeaderValue());
			cell.setTableCellStatus(this.header.getTable(),false,-1,column);
			cell.getCellComponent().setBounds(cellRect);
			cell.getCellComponent().setVisible(true);
			cell.getCellComponent().validate();
			cellRect.x += columnWidth | 0;
		}
	}
	,synCreateCellInstances: function() {
		var columnCount = this.header.getColumnModel().getColumnCount();
		var i;
		if(this.lastColumnCellFactories == null || this.lastColumnCellFactories.length != columnCount) this.removeAllCells(); else {
			var _g = 0;
			while(_g < columnCount) {
				var i1 = _g++;
				if(this.lastColumnCellFactories[i1] != this.getHeaderRenderer(i1)) {
					this.removeAllCells();
					break;
				}
			}
		}
		if(this.cells.length == 0) {
			this.lastColumnCellFactories = new Array();
			var _g1 = 0;
			while(_g1 < columnCount) {
				var i2 = _g1++;
				var factory = this.getHeaderRenderer(i2);
				this.lastColumnCellFactories[i2] = factory;
				var cell = factory.createNewCell(false);
				this.header.append(cell.getCellComponent());
				org.aswing.plaf.basic.BasicTableHeaderUI.setCellComponentProperties(cell.getCellComponent());
				this.cells.push(cell);
			}
		}
	}
	,removeAllCells: function() {
		var _g1 = 0;
		var _g = this.cells.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cell = org.aswing.AsWingUtils["as"](this.cells[i],org.aswing.table.TableCell);
			cell.getCellComponent().removeFromContainer();
		}
		this.cells = new Array();
	}
	,createHeaderSize: function(width) {
		return this.header.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(width,this.header.getRowHeight()));
	}
	,getMinimumSize: function(c) {
		var width = 0;
		return this.createHeaderSize(width);
	}
	,getPreferredSize: function(c) {
		var width = 0;
		var enumeration = this.header.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = org.aswing.AsWingUtils["as"](enumeration[i],org.aswing.table.TableColumn);
			width = width + aColumn.getPreferredWidth();
		}
		return this.createHeaderSize(width);
	}
	,getMaximumSize: function(c) {
		var width = 100000;
		return this.createHeaderSize(width);
	}
	,toString: function() {
		return "BasicTableHeaderUI[]";
	}
	,__class__: org.aswing.plaf.basic.BasicTableHeaderUI
});
org.aswing.plaf.basic.BasicTableUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
	this.focusRow = 0;
	this.focusColumn = 0;
};
$hxClasses["org.aswing.plaf.basic.BasicTableUI"] = org.aswing.plaf.basic.BasicTableUI;
org.aswing.plaf.basic.BasicTableUI.__name__ = ["org","aswing","plaf","basic","BasicTableUI"];
org.aswing.plaf.basic.BasicTableUI.__interfaces__ = [org.aswing.plaf.TableUI];
org.aswing.plaf.basic.BasicTableUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicTableUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JTable)) this.table = c; else this.table = null;
		this.installDefaults();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "Table.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.table,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.table,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.table,pp);
		var sbg = this.table.getSelectionBackground();
		if(sbg == null || js.Boot.__instanceof(sbg,org.aswing.plaf.UIResource)) this.table.setSelectionBackground(this.getColor(pp + "selectionBackground"));
		var sfg = this.table.getSelectionForeground();
		if(sfg == null || js.Boot.__instanceof(sfg,org.aswing.plaf.UIResource)) this.table.setSelectionForeground(this.getColor(pp + "selectionForeground"));
		var gridColor = this.table.getGridColor();
		if(gridColor == null || js.Boot.__instanceof(gridColor,org.aswing.plaf.UIResource)) this.table.setGridColor(this.getColor(pp + "gridColor"));
	}
	,installListeners: function() {
		this.table.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onTablePress));
		this.table.addEventListener("release",$bind(this,this.__onTableRelease));
		this.table.addEventListener("clickCount",$bind(this,this.__onTableClicked));
		this.table.addEventListener("focusKeyDown",$bind(this,this.__onTableKeyDown));
		this.table.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onTableMouseWheel));
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.table);
	}
	,uninstallListeners: function() {
		this.table.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onTablePress));
		this.table.removeEventListener("release",$bind(this,this.__onTableRelease));
		this.table.removeEventListener("clickCount",$bind(this,this.__onTableClicked));
		this.table.removeEventListener("focusKeyDown",$bind(this,this.__onTableKeyDown));
		this.table.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onTableMouseWheel));
		this.table.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onTableMouseMove));
	}
	,__onTablePress: function(e) {
		if(!this.table.getCellPane().hitTestMouse()) return;
		this.selectMousePointed(e);
		this.table.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onTableMouseMove));
		var editor = this.table.getCellEditor();
		if(editor != null && editor.isCellEditing()) this.table.getCellEditor().stopCellEditing();
	}
	,__onTableClicked: function(e) {
		if(!this.table.getCellPane().hitTestMouse()) return;
		var p = this.getMousePosOnTable();
		var row = this.table.rowAtPoint(p);
		var column = this.table.columnAtPoint(p);
		if(this.table.editCellAt(row,column,e.getCount())) {
		}
	}
	,__onTableRelease: function(e) {
		this.table.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onTableMouseMove));
	}
	,__onTableMouseMove: function(e) {
		this.addSelectMousePointed();
	}
	,__onTableMouseWheel: function(e) {
		if(!this.table.isEnabled()) return;
		if(!this.table.getCellPane().hitTestMouse()) return;
		var viewPos = this.table.getViewPosition();
		viewPos.y -= e.delta * this.table.getVerticalUnitIncrement();
		this.table.setViewPosition(viewPos);
	}
	,selectMousePointed: function(e) {
		var p = this.getMousePosOnTable();
		var row = this.table.rowAtPoint(p);
		var column = this.table.columnAtPoint(p);
		if(column == -1 || row == -1) return;
		this.makeSelectionChange(row,column,e);
	}
	,addSelectMousePointed: function() {
		var p = this.getMousePosOnTable();
		var row = this.table.rowAtPoint(p);
		var column = this.table.columnAtPoint(p);
		if(column == -1 || row == -1) return;
		this.changeSelection(row,column,false,true);
	}
	,makeSelectionChange: function(row,column,e) {
		this.recordFocusIndecis(row,column);
		var ctrl = e.ctrlKey;
		var shift = e.shiftKey;
		if(ctrl && shift) {
			var rm = this.table.getSelectionModel();
			var cm = this.table.getColumnModel().getSelectionModel();
			var anchorRow = rm.getAnchorSelectionIndex();
			var anchorCol = cm.getAnchorSelectionIndex();
			if(this.table.isCellSelected(anchorRow,anchorCol)) {
				rm.addSelectionInterval(anchorRow,row,false);
				cm.addSelectionInterval(anchorCol,column,false);
			} else {
				rm.removeSelectionInterval(anchorRow,row,false);
				rm.addSelectionInterval(row,row,false);
				rm.setAnchorSelectionIndex(anchorRow);
				cm.removeSelectionInterval(anchorCol,column,false);
				cm.addSelectionInterval(column,column,false);
				cm.setAnchorSelectionIndex(anchorCol);
			}
		} else this.changeSelection(row,column,ctrl,!ctrl && shift);
	}
	,changeSelection: function(rowIndex,columnIndex,toggle,extend) {
		this.recordFocusIndecis(rowIndex,columnIndex);
		this.table.changeSelection(rowIndex,columnIndex,toggle,extend,false);
	}
	,getMousePosOnTable: function() {
		var p = this.table.getMousePosition();
		return this.table.getLogicLocationFromPixelLocation(p);
	}
	,getEditionKey: function() {
		return org.aswing.AWKeyboard.ENTER;
	}
	,getSelectionKey: function() {
		return org.aswing.AWKeyboard.SPACE;
	}
	,createGridGraphics: function() {
		if(this.gridShape == null) {
			this.gridShape = new openfl.display.Shape();
			this.table.getCellPane().addChild(this.gridShape);
		}
		this.gridShape.get_graphics().clear();
		return new org.aswing.graphics.Graphics2D(this.gridShape.get_graphics());
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		g = this.createGridGraphics();
		var rowCount = this.table.getRowCount();
		var columnCount = this.table.getColumnCount();
		if(rowCount <= 0 || columnCount <= 0) return;
		var extentSize = this.table.getExtentSize();
		var viewPos = this.table.getViewPosition();
		var startX = -viewPos.x;
		var startY = -viewPos.y;
		var vb = new org.aswing.geom.IntRectangle();
		vb.setSize(extentSize);
		vb.setLocation(viewPos);
		var upperLeft = vb.getLocation();
		var lowerRight = vb.rightBottom();
		var rMin = this.table.rowAtPoint(upperLeft);
		var rMax = this.table.rowAtPoint(lowerRight);
		if(rMin == -1) rMin = 0;
		if(rMax == -1) rMax = rowCount - 1;
		var cMin = this.table.columnAtPoint(upperLeft);
		var cMax = this.table.columnAtPoint(lowerRight);
		if(cMin == -1) cMin = 0;
		if(cMax == -1) cMax = columnCount - 1;
		var minCell = this.table.getCellRect(rMin,cMin,true);
		var maxCell = this.table.getCellRect(rMax,cMax,true);
		var damagedArea = minCell.union(maxCell);
		damagedArea.setLocation(damagedArea.getLocation().move(startX,startY));
		var pen = new org.aswing.graphics.Pen(this.table.getGridColor(),1);
		if(this.table.getShowHorizontalLines()) {
			var x1 = damagedArea.x + 0.5;
			var x2 = damagedArea.x + damagedArea.width - 1;
			var y = damagedArea.y + 0.5;
			var rh = this.table.getRowHeight();
			var _g1 = rMin;
			var _g = rMax + 2;
			while(_g1 < _g) {
				var row = _g1++;
				if(row == rowCount) y -= 1;
				g.drawLine(pen,x1,y,x2,y);
				y += rh;
			}
		}
		if(this.table.getShowVerticalLines()) {
			var cm = this.table.getColumnModel();
			var x = damagedArea.x + 0.5;
			var y1 = damagedArea.y + 0.5;
			var y2 = y1 + damagedArea.height - 1;
			var _g11 = cMin;
			var _g2 = cMax + 2;
			while(_g11 < _g2) {
				var column = _g11++;
				if(column == columnCount) x -= 1;
				g.drawLine(pen,x,y1,x,y2);
				if(column < columnCount) x += cm.getColumn(column).getWidth();
			}
		}
	}
	,__onTableKeyDown: function(e) {
		if(!this.table.isEnabled()) return;
		var rDir = 0;
		var cDir = 0;
		var code = e.keyCode;
		if(code == org.aswing.AWKeyboard.LEFT) cDir = -1; else if(code == org.aswing.AWKeyboard.RIGHT) cDir = 1; else if(code == org.aswing.AWKeyboard.UP) rDir = -1; else if(code == org.aswing.AWKeyboard.DOWN) rDir = 1;
		if(cDir != 0 || rDir != 0) {
			this.moveFocus(rDir,cDir,e);
			var fm = org.aswing.FocusManager.getManager(this.table.get_stage());
			if(fm != null) fm.setTraversing(true);
			this.table.paintFocusRect();
			return;
		}
		if(code == this.getSelectionKey()) this.table.changeSelection(this.focusRow,this.focusColumn,true,false); else if(code == this.getEditionKey()) this.table.editCellAt(this.focusRow,this.focusColumn,-1);
	}
	,recordFocusIndecis: function(row,column) {
		this.focusRow = row;
		this.focusColumn = column;
	}
	,restrictRow: function(row) {
		return Std["int"](Math.max(0,Math.min(this.table.getRowCount() - 1,row)));
	}
	,restrictColumn: function(column) {
		return Std["int"](Math.max(0,Math.min(this.table.getColumnCount() - 1,column)));
	}
	,moveFocus: function(rDir,cDir,e) {
		var ctrl = e.ctrlKey;
		var shift = e.shiftKey;
		this.focusRow += rDir | 0;
		this.focusRow = this.restrictRow(this.focusRow);
		this.focusColumn += cDir | 0;
		this.focusColumn = this.restrictColumn(this.focusColumn);
		if(ctrl != true) this.changeSelection(this.focusRow,this.focusColumn,ctrl,!ctrl && shift);
		this.table.ensureCellIsVisible(this.focusRow,this.focusColumn);
	}
	,paintFocus: function(c,g,b) {
		this.paintCurrentCellFocus(g);
	}
	,paintCurrentCellFocus: function(g) {
		this.paintCellFocusWithRowColumn(g,this.focusRow,this.focusColumn);
	}
	,paintCellFocusWithRowColumn: function(g,row,column) {
		var rect = this.table.getCellRect(row,column,true);
		rect.setLocation(this.table.getPixelLocationFromLogicLocation(rect.getLocation()));
		g.drawRectangle(new org.aswing.graphics.Pen(this.getDefaultFocusColorOutter(),2),rect.x,rect.y,rect.width,rect.height);
	}
	,createTableSize: function(width) {
		var height = 0;
		var rowCount = this.table.getRowCount();
		if(rowCount > 0 && this.table.getColumnCount() > 0) {
			var r = this.table.getCellRect(rowCount - 1,0,true);
			height = r.y + r.height;
		}
		height += this.table.getTableHeader().getPreferredHeight();
		if(this.table.getFooter() != null) height += this.table.getFooter().getPreferredHeight();
		return new org.aswing.geom.IntDimension(width,height);
	}
	,getViewSize: function(table) {
		var width = 0;
		var enumeration = table.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = enumeration[i];
			width += aColumn.getPreferredWidth();
		}
		var d = this.createTableSize(width);
		if(table.getAutoResizeMode() != 0) d.width = table.getExtentSize().width; else d.width = table.getColumnModel().getTotalColumnWidth();
		d.height -= table.getTableHeader().getHeight();
		if(table.getFooter() != null) d.height -= table.getFooter().getHeight();
		return d;
	}
	,getMinimumSize: function(c) {
		var width = 0;
		var enumeration = this.table.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = enumeration[i];
			width += aColumn.getMinWidth();
		}
		return this.table.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(width,0));
	}
	,getPreferredSize: function(c) {
		var width = 0;
		var enumeration = this.table.getColumnModel().getColumns();
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var aColumn = enumeration[i];
			width += aColumn.getPreferredWidth();
		}
		return this.table.getInsets().getOutsideSize(this.createTableSize(width));
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,toString: function() {
		return "BasicTableUI[]";
	}
	,__class__: org.aswing.plaf.basic.BasicTableUI
});
org.aswing.plaf.basic.BasicTextComponentUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicTextComponentUI"] = org.aswing.plaf.basic.BasicTextComponentUI;
org.aswing.plaf.basic.BasicTextComponentUI.__name__ = ["org","aswing","plaf","basic","BasicTextComponentUI"];
org.aswing.plaf.basic.BasicTextComponentUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicTextComponentUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		throw new org.aswing.error.ImpMissError();
		return "";
	}
	,paint: function(c,g,r) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,r);
	}
	,paintBackGround: function(c,g,b) {
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JTextComponent)) this.textComponent = c; else this.textComponent = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JTextComponent)) this.textComponent = c; else this.textComponent = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.textComponent,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.textComponent,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.textComponent,pp);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.textComponent);
	}
	,installComponents: function() {
	}
	,uninstallComponents: function() {
	}
	,installListeners: function() {
	}
	,uninstallListeners: function() {
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize();
	}
	,__class__: org.aswing.plaf.basic.BasicTextComponentUI
});
org.aswing.plaf.basic.BasicTextAreaUI = function() {
	org.aswing.plaf.basic.BasicTextComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicTextAreaUI"] = org.aswing.plaf.basic.BasicTextAreaUI;
org.aswing.plaf.basic.BasicTextAreaUI.__name__ = ["org","aswing","plaf","basic","BasicTextAreaUI"];
org.aswing.plaf.basic.BasicTextAreaUI.__super__ = org.aswing.plaf.basic.BasicTextComponentUI;
org.aswing.plaf.basic.BasicTextAreaUI.prototype = $extend(org.aswing.plaf.basic.BasicTextComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "TextArea.";
	}
	,__class__: org.aswing.plaf.basic.BasicTextAreaUI
});
org.aswing.plaf.basic.BasicTextFieldUI = function() {
	org.aswing.plaf.basic.BasicTextComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicTextFieldUI"] = org.aswing.plaf.basic.BasicTextFieldUI;
org.aswing.plaf.basic.BasicTextFieldUI.__name__ = ["org","aswing","plaf","basic","BasicTextFieldUI"];
org.aswing.plaf.basic.BasicTextFieldUI.__super__ = org.aswing.plaf.basic.BasicTextComponentUI;
org.aswing.plaf.basic.BasicTextFieldUI.prototype = $extend(org.aswing.plaf.basic.BasicTextComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "TextField.";
	}
	,__class__: org.aswing.plaf.basic.BasicTextFieldUI
});
org.aswing.plaf.basic.BasicToolBarUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicToolBarUI"] = org.aswing.plaf.basic.BasicToolBarUI;
org.aswing.plaf.basic.BasicToolBarUI.__name__ = ["org","aswing","plaf","basic","BasicToolBarUI"];
org.aswing.plaf.basic.BasicToolBarUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicToolBarUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	getPropertyPrefix: function() {
		return "ToolBar.";
	}
	,installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.Container)) this.bar = c; else this.bar = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.Container)) this.bar = c; else this.bar = null;
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.bar,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.bar,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.bar,pp);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.bar);
	}
	,installComponents: function() {
		var _g1 = 0;
		var _g = this.bar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			this.adaptChild(this.bar.getComponent(i));
		}
	}
	,uninstallComponents: function() {
		var _g1 = 0;
		var _g = this.bar.getComponentCount();
		while(_g1 < _g) {
			var i = _g1++;
			this.unadaptChild(this.bar.getComponent(i));
		}
	}
	,installListeners: function() {
		this.bar.addEventListener("comAdded",$bind(this,this.__onComAdded));
		this.bar.addEventListener("comRemoved",$bind(this,this.__onComRemoved));
	}
	,uninstallListeners: function() {
		this.bar.removeEventListener("comAdded",$bind(this,this.__onComAdded));
		this.bar.removeEventListener("comRemoved",$bind(this,this.__onComRemoved));
	}
	,adaptChild: function(c) {
		var btn;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) btn = c; else btn = null;
		if(btn != null) {
			var bg = btn.getBackgroundDecorator();
			if(bg != null) {
				var bgAdapter = new org.aswing.plaf.basic.ToolBarButtonBgAdapter(bg);
				btn.setBackgroundDecorator(bgAdapter);
			}
			btn.addEventListener("propertyChange",$bind(this,this.__propertyChanged));
		}
	}
	,unadaptChild: function(c) {
		var btn;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) btn = c; else btn = null;
		if(btn != null) {
			btn.removeEventListener("propertyChange",$bind(this,this.__propertyChanged));
			var bg = org.aswing.AsWingUtils["as"](btn.getBackgroundDecorator(),org.aswing.plaf.basic.ToolBarButtonBgAdapter);
			if(bg != null) btn.setBackgroundDecorator(bg.getOriginalBg());
		}
	}
	,__propertyChanged: function(e) {
		if(e.getPropertyName() == "backgroundDecorator") {
			var btn = org.aswing.AsWingUtils["as"](e.target,org.aswing.AbstractButton);
			var newG = e.getNewValue();
			if(!js.Boot.__instanceof(newG,org.aswing.plaf.basic.ToolBarButtonBgAdapter)) {
				var bgAdapter = new org.aswing.plaf.basic.ToolBarButtonBgAdapter(newG);
				btn.setBackgroundDecorator(bgAdapter);
			}
		}
	}
	,__onComAdded: function(e) {
		this.adaptChild(e.getChild());
	}
	,__onComRemoved: function(e) {
		this.unadaptChild(e.getChild());
	}
	,__class__: org.aswing.plaf.basic.BasicToolBarUI
});
org.aswing.plaf.basic.ToolBarButtonBgAdapter = function(originalBg) {
	this.originalBg = originalBg;
};
$hxClasses["org.aswing.plaf.basic.ToolBarButtonBgAdapter"] = org.aswing.plaf.basic.ToolBarButtonBgAdapter;
org.aswing.plaf.basic.ToolBarButtonBgAdapter.__name__ = ["org","aswing","plaf","basic","ToolBarButtonBgAdapter"];
org.aswing.plaf.basic.ToolBarButtonBgAdapter.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.ToolBarButtonBgAdapter.prototype = {
	getOriginalBg: function() {
		return this.originalBg;
	}
	,updateDecorator: function(c,g,bounds) {
		if(this.originalBg == null) return;
		var btn;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) btn = c; else btn = null;
		var needPaint = false;
		if(btn == null || btn.getModel().isArmed() || btn.isSelected() || btn.getModel().isRollOver() && !btn.getModel().isPressed()) needPaint = true;
		var dis = this.getDisplay(c);
		if(dis != null) dis.set_visible(needPaint);
		if(needPaint) this.originalBg.updateDecorator(c,g,bounds);
	}
	,getDisplay: function(c) {
		if(this.originalBg == null) return null;
		return this.originalBg.getDisplay(c);
	}
	,__class__: org.aswing.plaf.basic.ToolBarButtonBgAdapter
};
org.aswing.plaf.basic.BasicToolTipUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicToolTipUI"] = org.aswing.plaf.basic.BasicToolTipUI;
org.aswing.plaf.basic.BasicToolTipUI.__name__ = ["org","aswing","plaf","basic","BasicToolTipUI"];
org.aswing.plaf.basic.BasicToolTipUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicToolTipUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JToolTip)) this.tooltip = c; else this.tooltip = null;
		this.installDefaults();
		this.initallComponents();
		this.installListeners();
	}
	,getPropertyPrefix: function() {
		return "ToolTip.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.tooltip,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.tooltip,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.tooltip,pp);
		var filters = this.getInstance(this.getPropertyPrefix() + "filters");
		this.tooltip.set_filters(filters);
	}
	,initallComponents: function() {
		var b = this.tooltip;
		b.setLayout(new org.aswing.BorderLayout());
		this.label = new org.aswing.JLabel(b.getTipText());
		this.label.setOpaque(false);
		this.label.setFont(null);
		this.label.setForeground(null);
		this.label.setUIElement(true);
		b.append(this.label,"Center");
	}
	,installListeners: function() {
		this.tooltip.addEventListener("tipTextChanged",$bind(this,this.__tipTextChanged));
	}
	,paintBackGround: function(c,g,b) {
	}
	,__tipTextChanged: function(e) {
		this.label.setText(this.tooltip.getTipText());
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallListeners();
		this.uninstallComponents();
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.tooltip);
		this.tooltip.set_filters([]);
	}
	,uninstallComponents: function() {
		this.tooltip.remove(this.label);
		this.label = null;
	}
	,uninstallListeners: function() {
		this.tooltip.removeEventListener("tipTextChanged",$bind(this,this.__tipTextChanged));
	}
	,__class__: org.aswing.plaf.basic.BasicToolTipUI
});
org.aswing.tree.NodeDimensions = function() { };
$hxClasses["org.aswing.tree.NodeDimensions"] = org.aswing.tree.NodeDimensions;
org.aswing.tree.NodeDimensions.__name__ = ["org","aswing","tree","NodeDimensions"];
org.aswing.tree.NodeDimensions.prototype = {
	__class__: org.aswing.tree.NodeDimensions
};
org.aswing.plaf.basic.BasicTreeUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
	if(org.aswing.plaf.basic.BasicTreeUI.EMPTY_INSETS == null) org.aswing.plaf.basic.BasicTreeUI.EMPTY_INSETS = new org.aswing.Insets(0,0,0,0);
	this.totalChildIndent = 0;
	this.depthOffset = 0;
	this.leftChildIndent = 0;
	this.rightChildIndent = 0;
	this.paintFocusedIndex = -1;
	this.cells = new org.aswing.util.ArrayList();
	this.lastViewPosition = new org.aswing.geom.IntPoint();
	this.viewSize = new org.aswing.geom.IntDimension();
	this.validCachedViewSize = false;
};
$hxClasses["org.aswing.plaf.basic.BasicTreeUI"] = org.aswing.plaf.basic.BasicTreeUI;
org.aswing.plaf.basic.BasicTreeUI.__name__ = ["org","aswing","plaf","basic","BasicTreeUI"];
org.aswing.plaf.basic.BasicTreeUI.__interfaces__ = [org.aswing.event.TreeModelListener,org.aswing.tree.NodeDimensions,org.aswing.plaf.TreeUI];
org.aswing.plaf.basic.BasicTreeUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicTreeUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JTree)) this.tree = c; else this.tree = null;
		this.installDefaults();
		this.installComponents();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		this.uninstallDefaults();
		this.uninstallComponents();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Tree.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.tree,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.tree,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.tree,pp);
		var sbg = this.tree.getSelectionBackground();
		if(sbg == null || js.Boot.__instanceof(sbg,org.aswing.plaf.UIResource)) this.tree.setSelectionBackground(this.getColor(pp + "selectionBackground"));
		var sfg = this.tree.getSelectionForeground();
		if(sfg == null || js.Boot.__instanceof(sfg,org.aswing.plaf.UIResource)) this.tree.setSelectionForeground(this.getColor(pp + "selectionForeground"));
		this.tree.setRowHeight(this.getInt(pp + "rowHeight"));
		this.tree.setRowHeightSet(false);
		this.setLeftChildIndent(this.getInt(pp + "leftChildIndent"));
		this.setRightChildIndent(this.getInt(pp + "rightChildIndent"));
		this.updateDepthOffset();
		this.treeState = new org.aswing.tree.FixedHeightLayoutCache();
		this.treeState.setModel(this.tree.getModel());
		this.treeState.setSelectionModel(this.tree.getSelectionModel());
		this.treeState.setNodeDimensions(this);
		this.treeState.setRowHeight(this.tree.getRowHeight());
		this.editor = this.tree.getCellEditor();
		this.setRootVisible(this.tree.isRootVisible());
		this.expandControl = org.aswing.AsWingUtils["as"](this.getInstance(pp + "expandControl"),org.aswing.plaf.basic.tree.ExpandControl);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.tree);
	}
	,installComponents: function() {
		this.rendererPane = new org.aswing.CellPane();
		this.rendererPane.setLayout(new org.aswing.EmptyLayout());
		this.tree.append(this.rendererPane);
	}
	,uninstallComponents: function() {
		this.tree.remove(this.rendererPane);
		this.cells.clear();
		this.rendererPane = null;
	}
	,installListeners: function() {
		this.tree.addEventListener("treeExpanded",$bind(this,this.__treeExpanded));
		this.tree.addEventListener("treeCollapsed",$bind(this,this.__treeCollapsed));
		this.tree.addStateListener($bind(this,this.__viewportStateChanged));
		this.tree.addEventListener("propertyChange",$bind(this,this.__propertyChanged));
		this.tree.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onPressed));
		this.tree.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__onReleased));
		this.tree.addEventListener("clickCount",$bind(this,this.__onClicked));
		this.tree.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.tree.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.setModel(this.tree.getModel());
		this.setSelectionModel(this.tree.getSelectionModel());
	}
	,uninstallListeners: function() {
		this.tree.removeEventListener("treeExpanded",$bind(this,this.__treeExpanded));
		this.tree.removeEventListener("treeCollapsed",$bind(this,this.__treeCollapsed));
		this.tree.removeStateListener($bind(this,this.__viewportStateChanged));
		this.tree.removeEventListener("propertyChange",$bind(this,this.__propertyChanged));
		this.tree.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onPressed));
		this.tree.removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__onReleased));
		this.tree.removeEventListener("clickCount",$bind(this,this.__onClicked));
		this.tree.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
		this.tree.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.setModel(null);
		this.setSelectionModel(null);
	}
	,setModel: function(tm) {
		this.cancelEditing(this.tree);
		if(this.treeModel != null) this.treeModel.removeTreeModelListener(this);
		this.treeModel = tm;
		if(this.treeModel != null) this.treeModel.addTreeModelListener(this);
		if(this.treeState != null) {
			this.treeState.setModel(tm);
			this.updateLayoutCacheExpandedNodes();
			this.updateSize();
		}
	}
	,setSelectionModel: function(sm) {
		if(this.selectionModel != null) {
			this.selectionModel.removePropertyChangeListener($bind(this,this.__selectionModelPropertyChanged));
			this.selectionModel.removeTreeSelectionListener($bind(this,this.__selectionChanged));
		}
		this.selectionModel = sm;
		if(this.selectionModel != null) {
			this.selectionModel.addPropertyChangeListener($bind(this,this.__selectionModelPropertyChanged));
			this.selectionModel.addTreeSelectionListener($bind(this,this.__selectionChanged));
		}
		if(this.treeState != null) this.treeState.setSelectionModel(this.selectionModel);
		this.tree.repaint();
	}
	,setRootVisible: function(newValue) {
		this.cancelEditing(this.tree);
		this.updateDepthOffset();
		if(this.treeState != null) {
			this.treeState.setRootVisible(newValue);
			this.treeState.invalidateSizes();
			this.updateSize();
		}
	}
	,setRowHeight: function(rowHeight) {
		this.cancelEditing(this.tree);
		if(this.treeState != null) {
			this.treeState.setRowHeight(rowHeight);
			this.updateSize();
		}
	}
	,setCellEditor: function(editor) {
		this.cancelEditing(this.tree);
		this.editor = editor;
	}
	,setEditable: function(newValue) {
		this.cancelEditing(this.tree);
		if(newValue) this.editor = this.tree.getCellEditor(); else this.editor = null;
	}
	,repaintPath: function(path) {
	}
	,cellFactoryChanged: function() {
		var _g1 = 0;
		var _g = this.cells.size();
		while(_g1 < _g) {
			var i = _g1++;
			var cell = org.aswing.AsWingUtils["as"](this.cells.get(i),org.aswing.tree.TreeCell);
			cell.getCellComponent().removeFromContainer();
		}
		this.cells.clear();
		this.treeState.invalidateSizes();
		this.updateSize();
	}
	,updateLayoutCacheExpandedNodes: function() {
		if(this.treeModel != null && this.treeModel.getRoot() != null) this.updateExpandedDescendants(new org.aswing.tree.TreePath([this.treeModel.getRoot()]));
	}
	,isLocationInExpandControl: function(path,mouseX,mouseY) {
		if(path != null && !this.treeModel.isLeaf(path.getLastPathComponent())) {
			var boxWidth;
			boxWidth = this.leftChildIndent;
			var boxLeftX = this.getRowX(this.tree.getRowForPath(path),path.getPathCount() - 1) - boxWidth;
			var boxRightX = boxLeftX + boxWidth;
			return mouseX >= boxLeftX && mouseX <= boxRightX;
		}
		return false;
	}
	,toggleExpandState: function(path) {
		if(!this.tree.isExpanded(path)) {
			var row = this.getRowForPath(this.tree,path);
			this.tree.expandPath(path);
			this.updateSize();
			if(row != -1) {
				if(this.tree.isScrollsOnExpand()) this.ensureRowsAreVisible(row,row + this.treeState.getVisibleChildCount(path)); else this.ensureRowsAreVisible(row,row);
			}
		} else {
			this.tree.collapsePath(path);
			this.updateSize();
		}
	}
	,ensureRowsAreVisible: function(beginRow,endRow) {
		if(this.tree != null && beginRow >= 0 && endRow < this.getRowCount(this.tree)) {
			this.tree.scrollRowToVisible(endRow);
			this.tree.scrollRowToVisible(beginRow);
		}
	}
	,handleExpandControlClick: function(path,mouseX,mouseY) {
		this.toggleExpandState(path);
	}
	,selectPathForEvent: function(path,e) {
		this.doSelectWhenRelease = false;
		this.pressedPath = path;
		if(this.tree.isPathSelected(path)) this.doSelectWhenRelease = true; else this.doSelectPathForEvent(e);
		this.paintFocusedIndex = this.tree.getRowForPath(path);
	}
	,doSelectPathForEvent: function(e) {
		var path = this.pressedPath;
		var ctrl = false;
		var shift = false;
		ctrl = e.ctrlKey;
		shift = e.shiftKey;
		if(shift) {
			var anchor = this.tree.getAnchorSelectionPath();
			var anchorRow;
			if(anchor == null) anchorRow = -1; else anchorRow = this.getRowForPath(this.tree,anchor);
			if(anchorRow == -1 || this.selectionModel.getSelectionMode() == 1) this.tree.setSelectionPath(path,false); else {
				var row = this.getRowForPath(this.tree,path);
				var lastAnchorPath = anchor;
				if(ctrl) {
					if(this.tree.isRowSelected(anchorRow)) this.tree.addSelectionInterval(anchorRow,row,false); else {
						this.tree.removeSelectionInterval(anchorRow,row,false);
						this.tree.addSelectionInterval(row,row,false);
					}
				} else if(row < anchorRow) this.tree.setSelectionInterval(row,anchorRow,false); else this.tree.setSelectionInterval(anchorRow,row,false);
				this.ignoreLAChange = true;
				this.tree.setAnchorSelectionPath(lastAnchorPath);
				this.tree.setLeadSelectionPath(path);
				this.ignoreLAChange = false;
			}
		} else if(ctrl) {
			if(this.tree.isPathSelected(path)) this.tree.removeSelectionPath(path,false); else this.tree.addSelectionPath(path,false);
			this.ignoreLAChange = true;
			this.tree.setAnchorSelectionPath(path);
			this.tree.setLeadSelectionPath(path);
			this.ignoreLAChange = false;
		} else this.tree.setSelectionPath(path,false);
	}
	,__selectionModelPropertyChanged: function(e) {
		this.selectionModel.resetRowSelection();
	}
	,__selectionChanged: function(event) {
		this.stopEditing(this.tree);
		if(this.tree.isExpandsSelectedPaths() && this.selectionModel != null) {
			var paths = this.selectionModel.getSelectionPaths();
			if(paths != null) {
				var _g1 = 0;
				var _g = paths.length;
				while(_g1 < _g) {
					var counter = _g1++;
					var path = paths[counter].getParentPath();
					var expand = true;
					while(path != null) if(this.treeModel.isLeaf(path.getLastPathComponent())) {
						expand = false;
						path = null;
					} else path = path.getParentPath();
					if(expand) this.tree.makePathVisible(paths[counter]);
				}
			}
		}
		this.paintFocusedIndex = this.tree.getMinSelectionRow();
		var lead = this.tree.getSelectionModel().getLeadSelectionPath();
		this.ignoreLAChange = true;
		this.tree.setAnchorSelectionPath(lead);
		this.tree.setLeadSelectionPath(lead);
		this.ignoreLAChange = false;
		this.tree.repaint();
	}
	,__onClicked: function(e) {
		var edit = this.tree.isEditable() && this.editor != null && this.editor.isCellEditable(e.getCount());
		var toggle = e.getCount() == this.tree.getToggleClickCount();
		if(!(edit || toggle)) return;
		var p = this.rendererPane.getMousePosition();
		p.y += this.tree.getViewPosition().y;
		var path = this.getClosestPathForLocation(this.tree,p.x,p.y);
		if(path != null) {
			var bounds = this.getPathBounds(this.tree,path);
			if(p.x > bounds.x && p.x <= bounds.x + bounds.width) {
				if(edit) this.tree.startEditingAtPath(path); else this.toggleExpandState(path);
			}
		}
	}
	,__onPressed: function(e) {
		var p = this.rendererPane.getMousePosition();
		p.y += this.tree.getViewPosition().y;
		var path = this.getClosestPathForLocation(this.tree,p.x,p.y);
		if(path != null) {
			if(this.isLocationInExpandControl(path,p.x,p.y)) this.handleExpandControlClick(path,p.x,p.y);
			var bounds = this.getPathBounds(this.tree,path);
			if(p.x > bounds.x && p.x <= bounds.x + bounds.width) this.selectPathForEvent(path,e);
		}
	}
	,__onReleased: function(e) {
		if(this.doSelectWhenRelease) {
			this.doSelectPathForEvent(e);
			this.doSelectWhenRelease = false;
		}
	}
	,__onMouseWheel: function(e) {
		var pos = this.tree.getViewPosition();
		if(e.shiftKey) pos.x -= this.tree.getHorizontalUnitIncrement() * e.delta; else pos.y -= this.tree.getVerticalUnitIncrement() * e.delta;
		this.tree.setViewPosition(pos);
	}
	,__onKeyDown: function(e) {
		if(!this.tree.isEnabled()) return;
		var code = e.keyCode;
		var dir = 0;
		if(this.isControlKey(code)) {
			var fm = org.aswing.FocusManager.getManager(this.tree.get_stage());
			if(fm != null) fm.setTraversing(true);
		} else return;
		if(code == org.aswing.AWKeyboard.UP) dir = -1; else if(code == org.aswing.AWKeyboard.DOWN) dir = 1;
		if(this.paintFocusedIndex == -1) this.paintFocusedIndex = this.tree.getSelectionModel().getMinSelectionRow();
		if(this.paintFocusedIndex < -1) this.paintFocusedIndex = -1; else if(this.paintFocusedIndex > this.tree.getRowCount()) this.paintFocusedIndex = this.tree.getRowCount();
		var index = this.paintFocusedIndex + dir;
		if(code == org.aswing.AWKeyboard.HOME) index = 0; else if(code == org.aswing.AWKeyboard.END) index = this.tree.getRowCount() - 1;
		if(index < 0 || index >= this.tree.getRowCount()) return;
		var path = this.tree.getPathForRow(index);
		if(code == org.aswing.AWKeyboard.LEFT) this.tree.collapseRow(index); else if(code == org.aswing.AWKeyboard.RIGHT) this.tree.expandRow(index); else if(dir != 0 || (code == org.aswing.AWKeyboard.HOME || code == org.aswing.AWKeyboard.END)) {
			if(e.shiftKey) {
				var anchor = this.tree.getAnchorSelectionPath();
				var anchorRow;
				if(anchor == null) anchorRow = -1; else anchorRow = this.getRowForPath(this.tree,anchor);
				var lastAnchorPath = anchor;
				if(index < anchorRow) this.tree.setSelectionInterval(index,anchorRow); else this.tree.setSelectionInterval(anchorRow,index);
				this.ignoreLAChange = true;
				this.tree.setAnchorSelectionPath(lastAnchorPath);
				this.tree.setLeadSelectionPath(path);
				this.ignoreLAChange = false;
				this.paintFocusedIndex = index;
			} else if(e.ctrlKey) this.paintFocusedIndex = index; else this.tree.setSelectionInterval(index,index);
			this.tree.scrollRowToVisible(index);
		} else if(code == org.aswing.AWKeyboard.SPACE) {
			this.tree.addSelectionInterval(index,index);
			this.tree.scrollRowToVisible(index);
			this.ignoreLAChange = true;
			this.tree.setAnchorSelectionPath(path);
			this.tree.setLeadSelectionPath(path);
			this.ignoreLAChange = false;
		} else if(code == this.getEditionKey()) {
			var edit = this.tree.isEditable() && this.editor != null;
			if(edit) this.tree.startEditingAtPath(path);
			return;
		}
		this.tree.repaint();
	}
	,isControlKey: function(code) {
		return code == org.aswing.AWKeyboard.UP || code == org.aswing.AWKeyboard.DOWN || code == org.aswing.AWKeyboard.SPACE || code == org.aswing.AWKeyboard.LEFT || code == org.aswing.AWKeyboard.RIGHT || code == org.aswing.AWKeyboard.HOME || code == org.aswing.AWKeyboard.END || code == this.getEditionKey();
	}
	,getEditionKey: function() {
		return org.aswing.AWKeyboard.ENTER;
	}
	,__viewportStateChanged: function(e) {
		var viewPosition = this.tree.getViewPosition();
		if(!this.lastViewPosition.equals(viewPosition)) {
			if(this.lastViewPosition.y == viewPosition.y) {
				this.positRendererPaneX(viewPosition.x);
				this.lastViewPosition.setLocation(viewPosition);
				return;
			}
			this.tree.repaint();
		}
	}
	,__propertyChanged: function(e) {
		var changeName = e.getPropertyName();
		var ov = e.getOldValue();
		var nv = e.getNewValue();
		if(changeName == "leadSelectionPath") {
			if(this.ignoreLAChange != true) {
				this.updateLeadRow();
				this.repaintPath(js.Boot.__instanceof(ov,org.aswing.tree.TreePath)?ov:null);
				this.repaintPath(js.Boot.__instanceof(nv,org.aswing.tree.TreePath)?nv:null);
			}
		} else if(changeName == "anchorSelectionPath") {
			if(this.ignoreLAChange != true) {
				this.repaintPath(js.Boot.__instanceof(ov,org.aswing.tree.TreePath)?ov:null);
				this.repaintPath(js.Boot.__instanceof(nv,org.aswing.tree.TreePath)?nv:null);
			}
		} else if(changeName == "cellFactory") this.cellFactoryChanged(); else if(changeName == "model") this.setModel(js.Boot.__instanceof(nv,org.aswing.tree.TreeModel)?nv:null); else if(changeName == "rootVisible") this.setRootVisible(nv == true); else if(changeName == "rowHeight") this.setRowHeight(nv); else if(changeName == "cellEditor") this.setCellEditor(js.Boot.__instanceof(nv,org.aswing.tree.TreeCellEditor)?nv:null); else if(changeName == "editable") this.setEditable(nv == true); else if(changeName == "selectionModel") this.setSelectionModel(this.tree.getSelectionModel()); else if(changeName == "font") {
			this.cancelEditing(this.tree);
			if(this.treeState != null) this.treeState.invalidateSizes();
			this.updateSize();
		}
	}
	,positRendererPaneX: function(viewX) {
		this.rendererPane.setX(this.tree.getInsets().left - viewX);
		this.rendererPane.validate();
	}
	,setLeftChildIndent: function(newAmount) {
		this.leftChildIndent = newAmount;
		this.totalChildIndent = this.leftChildIndent + this.rightChildIndent;
		if(this.treeState != null) this.treeState.invalidateSizes();
		this.updateSize();
	}
	,getLeftChildIndent: function() {
		return this.leftChildIndent;
	}
	,setRightChildIndent: function(newAmount) {
		this.rightChildIndent = newAmount;
		this.totalChildIndent = this.leftChildIndent + this.rightChildIndent;
		if(this.treeState != null) this.treeState.invalidateSizes();
		this.updateSize();
	}
	,getRightChildIndent: function() {
		return this.rightChildIndent;
	}
	,updateDepthOffset: function() {
		if(this.tree.isRootVisible()) this.depthOffset = 1; else this.depthOffset = 0;
	}
	,updateSize: function() {
		this.validCachedViewSize = false;
		this.tree.treeDidChange();
	}
	,paintFocus: function(c,g,b) {
		var ib = this.treeState.getBounds(this.tree.getPathForRow(this.paintFocusedIndex),null);
		if(ib != null) {
			b = ib;
			b.setLocation(this.tree.getPixelLocationFromLogicLocation(b.getLocation()));
		}
		g.drawRectangle(new org.aswing.graphics.Pen(this.getDefaultFocusColorInner(),1),b.x + 0.5,b.y + 0.5,b.width - 1,b.height - 1);
		g.drawRectangle(new org.aswing.graphics.Pen(this.getDefaultFocusColorOutter(),1),b.x + 1.5,b.y + 1.5,b.width - 3,b.height - 3);
	}
	,createRendererPaneGraphics: function() {
		if(this.rendererShape == null) {
			this.rendererShape = new openfl.display.Shape();
			this.rendererPane.addChild(this.rendererShape);
		}
		this.rendererShape.get_graphics().clear();
		return new org.aswing.graphics.Graphics2D(this.rendererShape.get_graphics());
	}
	,paint: function(c,g,b) {
		org.aswing.plaf.BaseComponentUI.prototype.paint.call(this,c,g,b);
		var viewSize = this.getViewSize(this.tree);
		this.rendererPane.setComBoundsXYWH(0,b.y,viewSize.width,b.height);
		this.rendererPane.validate();
		this.checkCreateCells();
		var viewPosition = this.tree.getViewPosition();
		this.lastViewPosition.setLocation(viewPosition);
		var x = viewPosition.x;
		var y = viewPosition.y;
		var ih = this.tree.getRowHeight();
		var startIndex = y / ih | 0;
		var startY = startIndex * ih - y;
		var rowCount = this.getRowCount(this.tree);
		this.positRendererPaneX(x);
		var cy = startY;
		var showBounds = b.clone();
		showBounds.y = y;
		showBounds.x = x;
		var showRowCount = Std["int"](Math.min(this.cells.size(),rowCount));
		var initialPath = this.getClosestPathForLocation(this.tree,0,showBounds.y);
		var paintingEnumerator = this.treeState.getVisiblePathsFrom(initialPath,showRowCount);
		if(paintingEnumerator == null) paintingEnumerator = [];
		var row = this.treeState.getRowContainingYLocation(showBounds.y);
		var expanded;
		var leaf;
		var selected;
		var bounds = new org.aswing.geom.IntRectangle();
		var boundsBuffer = new org.aswing.geom.IntRectangle();
		var treeModel = this.tree.getModel();
		g = this.createRendererPaneGraphics();
		var n = this.cells.getSize();
		var paintingN = paintingEnumerator.length;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			var cell = this.cells.get(i);
			var path = paintingEnumerator[i];
			var cellCom = cell.getCellComponent();
			if(i < paintingN) {
				leaf = treeModel.isLeaf(path.getLastPathComponent());
				if(leaf) expanded = false; else expanded = this.treeState.getExpandedState(path);
				selected = this.tree.getSelectionModel().isPathSelected(path);
				bounds = this.treeState.getBounds(path,bounds);
				if(bounds == null) bounds = new org.aswing.geom.IntRectangle();
				cell.setCellValue(path.getLastPathComponent());
				cellCom.setVisible(true);
				cell.setTreeCellStatus(this.tree,selected,expanded,leaf,row);
				boundsBuffer.setRectXYWH(bounds.x,cy,bounds.width,ih);
				cellCom.setBounds(boundsBuffer);
				cellCom.validate();
				cellCom.paintImmediately();
				boundsBuffer.x += b.x;
				boundsBuffer.y += b.y;
				this.paintExpandControl(g,boundsBuffer,path,row,expanded,leaf);
				cy += ih;
				row++;
			} else {
				cellCom.setVisible(false);
				cellCom.validate();
			}
		}
	}
	,paintExpandControl: function(g,bounds,path,row,expanded,leaf) {
		if(this.expandControl != null) this.expandControl.paintExpandControl(this.tree,g,bounds,this.totalChildIndent,path,row,expanded,leaf);
	}
	,checkCreateCells: function() {
		var ih = this.tree.getRowHeight();
		var needNum = Math.floor(this.tree.getExtentSize().height / ih) + 2;
		if(this.cells.getSize() == needNum) return;
		var i;
		var cell;
		if(this.cells.getSize() < needNum) {
			var addNum = needNum - this.cells.getSize();
			var _g = 0;
			while(_g < addNum) {
				var i1 = _g++;
				cell = this.tree.getCellFactory().createNewCell();
				this.rendererPane.append(cell.getCellComponent());
				this.cells.append(cell);
			}
		} else if(this.cells.getSize() > needNum) {
			var removeIndex = needNum;
			var removed = this.cells.removeRange(removeIndex,this.cells.getSize() - 1);
			var _g1 = 0;
			var _g2 = removed.length;
			while(_g1 < _g2) {
				var i2 = _g1++;
				cell = org.aswing.AsWingUtils["as"](removed[i2],org.aswing.tree.TreeCell);
				this.rendererPane.remove(cell.getCellComponent());
			}
		}
	}
	,updateLeadRow: function() {
		this.paintFocusedIndex = this.getRowForPath(this.tree,this.tree.getLeadSelectionPath());
	}
	,getRowX: function(row,depth) {
		return this.totalChildIndent * (depth + this.depthOffset);
	}
	,updateExpandedDescendants: function(path) {
		if(this.treeState != null) {
			this.treeState.setExpandedState(path,true);
			var descendants = this.tree.getExpandedDescendants(path);
			if(descendants != null) {
				var _g1 = 0;
				var _g = descendants.length;
				while(_g1 < _g) {
					var i = _g1++;
					this.treeState.setExpandedState(org.aswing.AsWingUtils["as"](descendants[i],org.aswing.tree.TreePath),true);
				}
			}
			this.updateLeadRow();
			this.updateSize();
		}
	}
	,countNodeDimensions: function(value,row,depth,expanded,size) {
		var prefSize;
		if(this.tree.getFixedCellWidth() >= 0) prefSize = new org.aswing.geom.IntDimension(this.tree.getFixedCellWidth(),this.tree.getRowHeight()); else {
			if(this.currentCellRenderer == null) this.currentCellRenderer = this.tree.getCellFactory().createNewCell();
			this.currentCellRenderer.setCellValue(value);
			this.currentCellRenderer.setTreeCellStatus(this.tree,false,expanded,this.tree.getModel().isLeaf(value),row);
			prefSize = this.currentCellRenderer.getCellComponent().getPreferredSize();
		}
		if(size != null) {
			size.x = this.getRowX(row,depth);
			size.width = prefSize.width;
			size.height = prefSize.height;
		} else size = new org.aswing.geom.IntRectangle(this.getRowX(row,depth),0,prefSize.width,prefSize.height);
		return size;
	}
	,getPathBounds: function(tree,path) {
		if(tree != null && this.treeState != null) {
			var i = tree.getInsets();
			var bounds = this.treeState.getBounds(path,null);
			if(bounds != null && i != null) {
				bounds.x += i.left;
				bounds.y += i.top;
			}
			return bounds;
		}
		return null;
	}
	,getPathForRow: function(tree,row) {
		if(this.treeState != null) return this.treeState.getPathForRow(row); else return null;
	}
	,getRowForPath: function(tree,path) {
		if(this.treeState != null) return this.treeState.getRowForPath(path); else return -1;
	}
	,getRowCount: function(tree) {
		if(this.treeState != null) return this.treeState.getRowCount(); else return 0;
	}
	,getClosestPathForLocation: function(tree,x,y) {
		if(tree != null && this.treeState != null) {
			var i = tree.getInsets();
			if(i == null) i = org.aswing.plaf.basic.BasicTreeUI.EMPTY_INSETS;
			return this.treeState.getPathClosestTo(x - i.left,y - i.top);
		}
		return null;
	}
	,getMousePointedPath: function() {
		var p = this.rendererPane.getMousePosition();
		p.y += this.tree.getViewPosition().y;
		var path = this.getClosestPathForLocation(this.tree,p.x,p.y);
		return path;
	}
	,isEditing: function(tree) {
		return this.editor.isCellEditing();
	}
	,stopEditing: function(tree) {
		if(this.editor != null && this.editor.isCellEditing()) return this.editor.stopCellEditing();
		return false;
	}
	,cancelEditing: function(tree) {
		if(this.editor != null && this.editor.isCellEditing()) this.editor.cancelCellEditing();
	}
	,startEditingAtPath: function(tree,path) {
		if(this.editor == null) return false;
		tree.scrollPathToVisible(path);
		if(path != null && tree.isPathVisible(path)) {
			var editor = tree.getCellEditor();
			if(editor.isCellEditing()) {
				if(!editor.stopCellEditing()) return false;
			}
			this.editingPath = path;
			var bounds = tree.getPathBounds(path);
			bounds.setLocation(tree.getPixelLocationFromLogicLocation(bounds.getLocation()));
			editor.startCellEditing(tree,path.getLastPathComponent(),bounds);
			return true;
		}
		return false;
	}
	,getEditingPath: function(tree) {
		return this.editingPath;
	}
	,updateCachedViewSize: function() {
		if(this.treeState != null) {
			this.viewSize.width = this.treeState.getPreferredWidth(null);
			this.viewSize.height = this.treeState.getPreferredHeight();
		}
		this.validCachedViewSize = true;
	}
	,getMinimumSize: function(c) {
		return c.getInsets().getOutsideSize();
	}
	,getPreferredSize: function(c) {
		var height = this.tree.getVisibleRowCount() * this.tree.getRowHeight();
		var width = this.getViewSize(this.tree).width;
		return c.getInsets().getOutsideSize(new org.aswing.geom.IntDimension(width,height));
	}
	,getViewSize: function(theTree) {
		if(this.validCachedViewSize != true) this.updateCachedViewSize();
		if(this.tree != null) return new org.aswing.geom.IntDimension(this.viewSize.width,this.viewSize.height); else return new org.aswing.geom.IntDimension(0,0);
	}
	,getMaximumSize: function(c) {
		return org.aswing.geom.IntDimension.createBigDimension();
	}
	,__treeExpanded: function(e) {
		if(e.getPath() != null) this.updateExpandedDescendants(e.getPath());
	}
	,__treeCollapsed: function(e) {
		if(e.getPath() != null) {
			if(e.getPath() != null && this.tree.isPathVisible(e.getPath())) {
				this.treeState.setExpandedState(e.getPath(),false);
				this.updateLeadRow();
				this.updateSize();
			}
		}
	}
	,treeNodesChanged: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeNodesChanged(e);
			var pPath = e.getTreePath().getParentPath();
			if(pPath == null || this.treeState.isExpanded(pPath)) this.updateSize();
		}
	}
	,treeNodesInserted: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeNodesInserted(e);
			this.updateLeadRow();
			var path = e.getTreePath();
			if(this.treeState.isExpanded(path)) this.updateSize(); else {
				var indices = e.getChildIndices();
				var childCount = this.tree.getModel().getChildCount(path.getLastPathComponent());
				if(indices != null && childCount - indices.length == 0) this.updateSize();
			}
		}
	}
	,treeNodesRemoved: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeNodesRemoved(e);
			this.updateLeadRow();
			var path = e.getTreePath();
			if(this.treeState.isExpanded(path) || this.tree.getModel().getChildCount(path.getLastPathComponent()) == 0) this.updateSize();
		}
	}
	,treeStructureChanged: function(e) {
		if(this.treeState != null && e != null) {
			this.treeState.treeStructureChanged(e);
			this.updateLeadRow();
			var pPath = e.getTreePath();
			if(pPath != null) pPath = pPath.getParentPath();
			if(pPath == null || this.treeState.isExpanded(pPath)) this.updateSize();
		}
	}
	,toString: function() {
		return "BasicTreeUI[]";
	}
	,__class__: org.aswing.plaf.basic.BasicTreeUI
});
org.aswing.plaf.basic.BasicViewportUI = function() {
	org.aswing.plaf.BaseComponentUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.BasicViewportUI"] = org.aswing.plaf.basic.BasicViewportUI;
org.aswing.plaf.basic.BasicViewportUI.__name__ = ["org","aswing","plaf","basic","BasicViewportUI"];
org.aswing.plaf.basic.BasicViewportUI.__super__ = org.aswing.plaf.BaseComponentUI;
org.aswing.plaf.basic.BasicViewportUI.prototype = $extend(org.aswing.plaf.BaseComponentUI.prototype,{
	installUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JViewport)) this.viewport = c; else this.viewport = null;
		this.installDefaults();
		this.installListeners();
	}
	,uninstallUI: function(c) {
		if(js.Boot.__instanceof(c,org.aswing.JViewport)) this.viewport = c; else this.viewport = null;
		this.uninstallDefaults();
		this.uninstallListeners();
	}
	,getPropertyPrefix: function() {
		return "Viewport.";
	}
	,installDefaults: function() {
		var pp = this.getPropertyPrefix();
		org.aswing.LookAndFeel.installColorsAndFont(this.viewport,pp);
		org.aswing.LookAndFeel.installBorderAndBFDecorators(this.viewport,pp);
		org.aswing.LookAndFeel.installBasicProperties(this.viewport,pp);
	}
	,uninstallDefaults: function() {
		org.aswing.LookAndFeel.uninstallBorderAndBFDecorators(this.viewport);
	}
	,installListeners: function() {
		this.viewport.addEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.viewport.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
	}
	,uninstallListeners: function() {
		this.viewport.removeEventListener("focusKeyDown",$bind(this,this.__onKeyDown));
		this.viewport.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.__onMouseWheel));
	}
	,__onMouseWheel: function(e) {
		if(!(this.viewport.isEnabled() && this.viewport.isShowing())) return;
		var viewPos = this.viewport.getViewPosition();
		if(e.shiftKey) viewPos.x -= e.delta * this.viewport.getHorizontalUnitIncrement(); else viewPos.y -= e.delta * this.viewport.getVerticalUnitIncrement();
		this.viewport.setViewPosition(viewPos);
	}
	,__onKeyDown: function(e) {
		if(!(this.viewport.isEnabled() && this.viewport.isShowing())) return;
		var code = e.keyCode;
		var viewpos = this.viewport.getViewPosition();
		switch(code) {
		case org.aswing.AWKeyboard.UP:
			viewpos.move(0,-this.viewport.getVerticalUnitIncrement());
			break;
		case org.aswing.AWKeyboard.DOWN:
			viewpos.move(0,this.viewport.getVerticalUnitIncrement());
			break;
		case org.aswing.AWKeyboard.LEFT:
			viewpos.move(-this.viewport.getHorizontalUnitIncrement(),0);
			break;
		case org.aswing.AWKeyboard.RIGHT:
			viewpos.move(this.viewport.getHorizontalUnitIncrement(),0);
			break;
		case org.aswing.AWKeyboard.PAGE_UP:
			if(e.shiftKey) viewpos.move(-this.viewport.getHorizontalBlockIncrement(),0); else viewpos.move(0,-this.viewport.getVerticalBlockIncrement());
			break;
		case org.aswing.AWKeyboard.PAGE_DOWN:
			if(e.shiftKey) viewpos.move(this.viewport.getHorizontalBlockIncrement(),0); else viewpos.move(0,this.viewport.getVerticalBlockIncrement());
			break;
		case org.aswing.AWKeyboard.HOME:
			viewpos.setLocationXY(0,0);
			break;
		case org.aswing.AWKeyboard.END:
			viewpos.setLocationXY(2147483647,2147483647);
			break;
		}
		this.viewport.setViewPosition(viewpos);
	}
	,__class__: org.aswing.plaf.basic.BasicViewportUI
});
org.aswing.plaf.basic.DefaultMenuLayout = function(axis,gap,align) {
	if(align == null) align = 2;
	if(gap == null) gap = 0;
	org.aswing.SoftBoxLayout.call(this,axis,gap,align);
};
$hxClasses["org.aswing.plaf.basic.DefaultMenuLayout"] = org.aswing.plaf.basic.DefaultMenuLayout;
org.aswing.plaf.basic.DefaultMenuLayout.__name__ = ["org","aswing","plaf","basic","DefaultMenuLayout"];
org.aswing.plaf.basic.DefaultMenuLayout.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.basic.DefaultMenuLayout.__super__ = org.aswing.SoftBoxLayout;
org.aswing.plaf.basic.DefaultMenuLayout.prototype = $extend(org.aswing.SoftBoxLayout.prototype,{
	__class__: org.aswing.plaf.basic.DefaultMenuLayout
});
org.aswing.plaf.basic.tabbedpane = {};
org.aswing.plaf.basic.tabbedpane.Tab = function() { };
$hxClasses["org.aswing.plaf.basic.tabbedpane.Tab"] = org.aswing.plaf.basic.tabbedpane.Tab;
org.aswing.plaf.basic.tabbedpane.Tab.__name__ = ["org","aswing","plaf","basic","tabbedpane","Tab"];
org.aswing.plaf.basic.tabbedpane.Tab.prototype = {
	__class__: org.aswing.plaf.basic.tabbedpane.Tab
};
org.aswing.plaf.basic.accordion = {};
org.aswing.plaf.basic.accordion.BasicAccordionHeader = function() {
};
$hxClasses["org.aswing.plaf.basic.accordion.BasicAccordionHeader"] = org.aswing.plaf.basic.accordion.BasicAccordionHeader;
org.aswing.plaf.basic.accordion.BasicAccordionHeader.__name__ = ["org","aswing","plaf","basic","accordion","BasicAccordionHeader"];
org.aswing.plaf.basic.accordion.BasicAccordionHeader.__interfaces__ = [org.aswing.plaf.basic.tabbedpane.Tab];
org.aswing.plaf.basic.accordion.BasicAccordionHeader.prototype = {
	initTab: function(owner) {
		this.owner = owner;
		this.button = this.createHeaderButton();
	}
	,setTabPlacement: function(tp) {
		this.placement = tp;
	}
	,getTabPlacement: function() {
		return this.placement;
	}
	,createHeaderButton: function() {
		return new org.aswing.JButton();
	}
	,setTextAndIcon: function(text,icon) {
		this.button.setText(text);
		this.button.setIcon(icon);
	}
	,setFont: function(font) {
		this.button.setFont(font);
	}
	,setForeground: function(color) {
		this.button.setForeground(color);
	}
	,setSelected: function(b) {
	}
	,setVerticalAlignment: function(alignment) {
		this.button.setVerticalAlignment(alignment);
	}
	,setHorizontalAlignment: function(alignment) {
		this.button.setHorizontalAlignment(alignment);
	}
	,setVerticalTextPosition: function(textPosition) {
		this.button.setVerticalTextPosition(textPosition);
	}
	,setHorizontalTextPosition: function(textPosition) {
		this.button.setHorizontalTextPosition(textPosition);
	}
	,setIconTextGap: function(iconTextGap) {
		this.button.setIconTextGap(iconTextGap);
	}
	,setMargin: function(m) {
		this.button.setMargin(m);
	}
	,getTabComponent: function() {
		return this.button;
	}
	,__class__: org.aswing.plaf.basic.accordion.BasicAccordionHeader
};
org.aswing.plaf.basic.icon = {};
org.aswing.plaf.basic.icon.SliderThumbIcon = function() {
	this.thumb = new openfl.display.Sprite();
};
$hxClasses["org.aswing.plaf.basic.icon.SliderThumbIcon"] = org.aswing.plaf.basic.icon.SliderThumbIcon;
org.aswing.plaf.basic.icon.SliderThumbIcon.__name__ = ["org","aswing","plaf","basic","icon","SliderThumbIcon"];
org.aswing.plaf.basic.icon.SliderThumbIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.SliderThumbIcon.prototype = {
	getPropertyPrefix: function() {
		return "Slider.";
	}
	,initThumb: function(c) {
		var upState = new openfl.display.Shape();
		var g = new org.aswing.graphics.Graphics2D(upState.get_graphics());
		this.paintThumb(g,c,true,false);
		var overState = new openfl.display.Shape();
		g = new org.aswing.graphics.Graphics2D(overState.get_graphics());
		this.paintThumb(g,c,true,true);
		this.enabledButton = new org.aswing.SimpleButton();
		this.enabledButton.upState = upState;
		this.enabledButton.overState = overState;
		this.enabledButton.downState = overState;
		this.enabledButton.hitTestState = upState;
		this.enabledButton.set_useHandCursor(false);
		this.enabledButton.show();
		this.thumb.addChild(this.enabledButton);
		upState = new openfl.display.Shape();
		g = new org.aswing.graphics.Graphics2D(upState.get_graphics());
		this.paintThumb(g,c,false,false);
		this.disabledButton = new org.aswing.SimpleButton();
		this.disabledButton.upState = upState;
		this.disabledButton.overState = upState;
		this.disabledButton.downState = upState;
		this.disabledButton.hitTestState = upState;
		this.disabledButton.set_useHandCursor(false);
		this.disabledButton.show();
		this.thumb.addChild(this.disabledButton);
		this.disabledButton.set_visible(false);
	}
	,paintThumb: function(g,c,enabled,over) {
		var tune = c.getStyleTune().get_mide();
		var cl = c.getMideground();
		if(enabled != true) {
			cl = cl.offsetHLS(0,-0.1,-0.1);
			tune = tune.sharpen(0.2);
		} else if(over) cl = cl.offsetHLS(-0.20,0,0);
		var style = new org.aswing.StyleResult(cl,tune);
		var w = this.getIconWidth(null);
		var h = this.getIconHeight(null);
		var matrix = new openfl.geom.Matrix();
		matrix.createGradientBox(w,h,Math.PI / 2,0,0);
		var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[style.blight.getRGB(),style.bdark.getRGB()],[style.blight.getAlpha(),style.bdark.getAlpha()],[0,255],matrix);
		g.fillEllipse(brush,0,0,w,h);
		matrix.createGradientBox(w,h,-Math.PI / 2,0,0);
		brush.setColors([style.clight.getRGB(),style.cdark.getRGB()]);
		brush.setAlphas([style.clight.getAlpha(),style.cdark.getAlpha()]);
		g.fillEllipse(brush,1,1,w - 2,h - 2);
	}
	,updateIcon: function(c,g,x,y) {
		if(this.enabledButton == null) this.initThumb(c);
		this.thumb.set_x(x);
		this.thumb.set_y(y);
		this.disabledButton.set_visible(!c.isEnabled());
		this.enabledButton.set_visible(c.isEnabled());
	}
	,getIconHeight: function(c) {
		return 14;
	}
	,getIconWidth: function(c) {
		return 14;
	}
	,getDisplay: function(c) {
		return this.thumb;
	}
	,__class__: org.aswing.plaf.basic.icon.SliderThumbIcon
};
org.aswing.plaf.basic.adjuster = {};
org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon = function() {
	org.aswing.plaf.basic.icon.SliderThumbIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon"] = org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon;
org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon.__name__ = ["org","aswing","plaf","basic","adjuster","PopupSliderThumbIcon"];
org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon.__super__ = org.aswing.plaf.basic.icon.SliderThumbIcon;
org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon.prototype = $extend(org.aswing.plaf.basic.icon.SliderThumbIcon.prototype,{
	getPropertyPrefix: function() {
		return "Adjuster.";
	}
	,getIconHeight: function(c) {
		return 12;
	}
	,getIconWidth: function(c) {
		return 12;
	}
	,__class__: org.aswing.plaf.basic.adjuster.PopupSliderThumbIcon
});
org.aswing.plaf.basic.adjuster.PopupSliderUI = function() {
	org.aswing.plaf.basic.BasicSliderUI.call(this);
};
$hxClasses["org.aswing.plaf.basic.adjuster.PopupSliderUI"] = org.aswing.plaf.basic.adjuster.PopupSliderUI;
org.aswing.plaf.basic.adjuster.PopupSliderUI.__name__ = ["org","aswing","plaf","basic","adjuster","PopupSliderUI"];
org.aswing.plaf.basic.adjuster.PopupSliderUI.__super__ = org.aswing.plaf.basic.BasicSliderUI;
org.aswing.plaf.basic.adjuster.PopupSliderUI.prototype = $extend(org.aswing.plaf.basic.BasicSliderUI.prototype,{
	getPropertyPrefix: function() {
		return "Adjuster.";
	}
	,countTrackRect: function(b) {
		var thumbSize = this.getThumbSize();
		var h_margin;
		var v_margin;
		if(this.isVertical()) {
			v_margin = Math.ceil(thumbSize.height / 2.0);
			h_margin = (thumbSize.width - 4) / 2 | 0;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,thumbSize.width - h_margin * 2,b.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x,b.y + v_margin,thumbSize.width,b.height - v_margin * 2);
		} else {
			h_margin = Math.ceil(thumbSize.width / 2.0);
			v_margin = (thumbSize.height - 4) / 2 | 0;
			this.trackDrawRect.setRectXYWH(b.x + h_margin,b.y + v_margin,b.width - h_margin * 2,thumbSize.height - v_margin * 2);
			this.trackRect.setRectXYWH(b.x + h_margin,b.y,b.width - h_margin * 2,thumbSize.height);
		}
	}
	,paintTrack: function(g,drawRect) {
		this.trackCanvas.get_graphics().clear();
		if(!this.slider.getPaintTrack()) return;
		g = new org.aswing.graphics.Graphics2D(this.trackCanvas.get_graphics());
		var verticle = this.slider.getOrientation() == 1;
		var style = this.slider.getStyleTune();
		var b = drawRect.clone();
		var radius = 0;
		if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
		if(radius > style.round) radius = style.round;
		g.fillRoundRect(new org.aswing.graphics.SolidBrush(this.slider.getBackground()),b.x,b.y,b.width,b.height,radius);
		var f = new Array();
		f.push(new openfl.filters.GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
		f.push(new openfl.filters.DropShadowFilter(1,45,16777215,0.3,1,1,1,1));
		this.trackCanvas.set_filters(f);
	}
	,getPrefferedLength: function() {
		return 100;
	}
	,__class__: org.aswing.plaf.basic.adjuster.PopupSliderUI
});
org.aswing.plaf.basic.background = {};
org.aswing.plaf.basic.background.ButtonBackground = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ButtonBackground"] = org.aswing.plaf.basic.background.ButtonBackground;
org.aswing.plaf.basic.background.ButtonBackground.__name__ = ["org","aswing","plaf","basic","background","ButtonBackground"];
org.aswing.plaf.basic.background.ButtonBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		if(b == null) return;
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		bounds = bounds.clone();
		bounds.width -= 2;
		bounds.height -= 2;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		if(c.isOpaque()) {
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var shadowScale = 1;
			var bo = bounds.clone();
			var matrix = new openfl.geom.Matrix();
			var cDir = Math.PI / 2;
			var paintDefault = false;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0.2,-0.06);
				adjuster = adjuster.sharpen(0.4);
			} else if(isPressing) cDir = -Math.PI / 2; else if(model.isRollOver()) cl = cl.offsetHLS(0,0.1,0); else if(js.Boot.__instanceof(b,org.aswing.JButton)) {
				var _b;
				if(js.Boot.__instanceof(b,org.aswing.JButton)) _b = b; else _b = null;
				if(_b.isDefaultButton()) paintDefault = true;
			}
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style,cDir);
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 2,bo.x,bo.y);
			g.beginFill(new org.aswing.graphics.GradientBrush(openfl.display.GradientType.LINEAR,[style.bdark.getRGB(),style.bdark.getRGB()],[1,0.6],[0,255],matrix));
			org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round,1);
			g.endFill();
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 6,bo.x,bo.y);
			g.beginFill(new org.aswing.graphics.GradientBrush(openfl.display.GradientType.LINEAR,[style.blight.getRGB(),style.blight.getRGB()],[1,0.5],[0,255],matrix));
			bo.grow(-1,-1);
			org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round - 1,1);
			g.endFill();
			if(paintDefault) {
				cl = cl.offsetHLS(0,-0.05,0);
				var db = bounds.clone();
				db.grow(-2,-2);
				org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,db,new org.aswing.StyleResult(cl,adjuster));
			}
			var shape_f = new Array();
			shape_f.push(new openfl.filters.DropShadowFilter(1,45,0,style.shadow * shadowScale,2,2,1,1));
			this.shape.set_filters(shape_f);
		} else this.shape.set_filters([]);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.background.ButtonBackground
};
org.aswing.plaf.basic.background.FrameBackground = function() {
	this.shape = new openfl.display.Sprite();
	this.bar = new openfl.display.Shape();
	this.shape.mouseChildren = false;
	this.shape.mouseEnabled = false;
	this.shape.addChild(this.bar);
};
$hxClasses["org.aswing.plaf.basic.background.FrameBackground"] = org.aswing.plaf.basic.background.FrameBackground;
org.aswing.plaf.basic.background.FrameBackground.__name__ = ["org","aswing","plaf","basic","background","FrameBackground"];
org.aswing.plaf.basic.background.FrameBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.FrameBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		this.bar.get_graphics().clear();
		if(c.isOpaque()) {
			var shadowW = 6;
			var shadowH = 6;
			var cl = c.getMideground();
			var style;
			var adjuster = c.getStyleTune().get_mide();
			var shadowScale = 1;
			b = new org.aswing.geom.IntRectangle(1,2,Std["int"](c.getWidth() - shadowW - 1),Std["int"](c.getHeight() - shadowH - 2));
			g = new org.aswing.graphics.Graphics2D(this.bar.get_graphics());
			var barHeight = 24;
			if(js.Boot.__instanceof(c,org.aswing.JFrame)) {
				var cf;
				if(js.Boot.__instanceof(c,org.aswing.JFrame)) cf = c; else cf = null;
				barHeight = cf.getTitleBar().getSelf().getHeight();
			}
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRectBottomRightAngle(g,new org.aswing.geom.IntRectangle(b.x,b.y,b.width,Std["int"](Math.min(barHeight - 2,b.height))),style,Math.PI / 2);
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var ui = org.aswing.AsWingUtils["as"](c.getUI(),org.aswing.plaf.FrameUI);
			if(ui != null) {
				if(!ui.isPaintActivedFrame()) shadowScale = 0.5;
			}
			cl = c.getBackground();
			adjuster = c.getStyleTune();
			style = new org.aswing.StyleResult(cl,adjuster);
			var ratioScale = Math.min(1,barHeight * 2.2 / b.height);
			var ratios = [255 * (1 - ratioScale),255];
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,-Math.PI / 2,false,null,ratios);
			var shape_f = new Array();
			shape_f.push(new openfl.filters.DropShadowFilter(2,45,0,style.shadow * shadowScale,shadowW,shadowH,1,1));
			this.shape.set_filters(shape_f);
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: org.aswing.plaf.basic.background.FrameBackground
};
org.aswing.plaf.basic.background.TextComponentBackBround = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.TextComponentBackBround"] = org.aswing.plaf.basic.background.TextComponentBackBround;
org.aswing.plaf.basic.background.TextComponentBackBround.__name__ = ["org","aswing","plaf","basic","background","TextComponentBackBround"];
org.aswing.plaf.basic.background.TextComponentBackBround.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.TextComponentBackBround.prototype = {
	updateDecorator: function(c,g,r) {
		this.shape.set_visible(c.isOpaque());
		if(c.isOpaque()) {
			this.shape.get_graphics().clear();
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var cl = c.getBackground();
			var tune = c.getStyleTune();
			var result = new org.aswing.StyleResult(cl,tune);
			var ml = result.bdark;
			var ed;
			if(js.Boot.__instanceof(c,org.aswing.EditableComponent)) ed = c; else ed = null;
			var editable = true;
			if(ed != null) editable = ed.isEditable();
			if(!c.isEnabled() || !editable) {
				ml = ml.changeAlpha(ml.getAlpha() * this.getChangeSharpen(c.isEnabled(),editable));
				cl = cl.changeAlpha(cl.getAlpha() * this.getChangeAlpha(c.isEnabled(),editable));
			}
			var tf;
			if(js.Boot.__instanceof(c,org.aswing.JTextField)) tf = c; else tf = null;
			r = new org.aswing.geom.IntRectangle(0,0,Std["int"](c.getWidth() - 1),Std["int"](c.getHeight() - 1));
			var round = tune.round;
			if(round >= 1) {
				g.fillRoundRect(new org.aswing.graphics.SolidBrush(cl),r.x,r.y,r.width,r.height,round);
				g.fillRoundRectRingWithThickness(new org.aswing.graphics.SolidBrush(ml),r.x,r.y,r.width,r.height,round,1,round - 1);
			} else {
				g.fillRectangle(new org.aswing.graphics.SolidBrush(cl),r.x,r.y,r.width,r.height);
				g.fillRectangleRingWithThickness(new org.aswing.graphics.SolidBrush(ml),r.x,r.y,r.width,r.height,1);
			}
			var f = new Array();
			f.push(new openfl.filters.DropShadowFilter(1,45,cl.getRGB(),tune.shadowAlpha * cl.getAlpha(),0,0,1,1));
			this.shape.set_filters(f);
		}
	}
	,getChangeSharpen: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 1; else return 1;
	}
	,getChangeAlpha: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 0.3; else return 1;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.background.TextComponentBackBround
};
org.aswing.plaf.basic.background.InputBackground = function() {
	org.aswing.plaf.basic.background.TextComponentBackBround.call(this);
};
$hxClasses["org.aswing.plaf.basic.background.InputBackground"] = org.aswing.plaf.basic.background.InputBackground;
org.aswing.plaf.basic.background.InputBackground.__name__ = ["org","aswing","plaf","basic","background","InputBackground"];
org.aswing.plaf.basic.background.InputBackground.__super__ = org.aswing.plaf.basic.background.TextComponentBackBround;
org.aswing.plaf.basic.background.InputBackground.prototype = $extend(org.aswing.plaf.basic.background.TextComponentBackBround.prototype,{
	getChangeSharpen: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 1; else return 1;
	}
	,getChangeAlpha: function(enabled,editable) {
		if(enabled != true) return 0.2; else if(editable != true) return 0.5; else return 1;
	}
	,__class__: org.aswing.plaf.basic.background.InputBackground
});
org.aswing.plaf.basic.background.ListBackground = function() {
};
$hxClasses["org.aswing.plaf.basic.background.ListBackground"] = org.aswing.plaf.basic.background.ListBackground;
org.aswing.plaf.basic.background.ListBackground.__name__ = ["org","aswing","plaf","basic","background","ListBackground"];
org.aswing.plaf.basic.background.ListBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ListBackground.prototype = {
	getDisplay: function(c) {
		return null;
	}
	,updateDecorator: function(c,g,b) {
		if(c.isOpaque()) {
			var cl = c.getMideground();
			var style;
			var adjuster = c.getStyleTune();
			if(!c.isEnabled()) {
				adjuster = adjuster.sharpen(0.5);
				cl = cl.changeAlpha(0.6);
			}
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,-Math.PI / 2);
		}
	}
	,__class__: org.aswing.plaf.basic.background.ListBackground
};
org.aswing.plaf.basic.background.PanelBackground = function() {
};
$hxClasses["org.aswing.plaf.basic.background.PanelBackground"] = org.aswing.plaf.basic.background.PanelBackground;
org.aswing.plaf.basic.background.PanelBackground.__name__ = ["org","aswing","plaf","basic","background","PanelBackground"];
org.aswing.plaf.basic.background.PanelBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.PanelBackground.prototype = {
	getDisplay: function(c) {
		return null;
	}
	,updateDecorator: function(c,g,b) {
		if(c.isOpaque()) g.fillRectangle(new org.aswing.graphics.SolidBrush(c.getBackground()),b.x,b.y,b.width,b.height);
	}
	,__class__: org.aswing.plaf.basic.background.PanelBackground
};
org.aswing.plaf.basic.background.ProgressBarBackground = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ProgressBarBackground"] = org.aswing.plaf.basic.background.ProgressBarBackground;
org.aswing.plaf.basic.background.ProgressBarBackground.__name__ = ["org","aswing","plaf","basic","background","ProgressBarBackground"];
org.aswing.plaf.basic.background.ProgressBarBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ProgressBarBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js.Boot.__instanceof(c,org.aswing.Orientable) && c.isOpaque()) {
			var bar;
			if(js.Boot.__instanceof(c,org.aswing.Orientable)) bar = c; else bar = null;
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune();
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			b = b.clone();
			var radius = 0;
			if(verticle) radius = Math.floor(b.width / 2); else radius = Math.floor(b.height / 2);
			if(radius > style.round) radius = style.round;
			g.fillRoundRect(new org.aswing.graphics.SolidBrush(c.getBackground().changeAlpha(1)),b.x,b.y,b.width,b.height,radius);
			var f = new Array();
			f.push(new openfl.filters.GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
			this.shape.set_filters(f);
			this.shape.set_alpha(c.getBackground().getAlpha());
		}
	}
	,__class__: org.aswing.plaf.basic.background.ProgressBarBackground
};
org.aswing.plaf.basic.background.ProgressBarIcon = function() {
	this.shape = new openfl.display.Shape();
	this.indeterminatePercent = 0;
};
$hxClasses["org.aswing.plaf.basic.background.ProgressBarIcon"] = org.aswing.plaf.basic.background.ProgressBarIcon;
org.aswing.plaf.basic.background.ProgressBarIcon.__name__ = ["org","aswing","plaf","basic","background","ProgressBarIcon"];
org.aswing.plaf.basic.background.ProgressBarIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ProgressBarIcon.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js.Boot.__instanceof(c,org.aswing.JProgressBar)) {
			var bar;
			if(js.Boot.__instanceof(c,org.aswing.JProgressBar)) bar = c; else bar = null;
			b = b.clone();
			var percent;
			if(bar.isIndeterminate()) {
				percent = this.indeterminatePercent;
				this.indeterminatePercent += 0.1;
				if(this.indeterminatePercent > 1) this.indeterminatePercent = 0;
			} else percent = bar.getPercentComplete();
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune().get_mide();
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var radius = 0;
			var direction;
			if(verticle) {
				radius = Math.floor(b.width / 2);
				direction = 0;
				b.height = b.height * percent | 0;
			} else {
				radius = Math.floor(b.height / 2);
				direction = Math.PI / 2;
				b.width = b.width * percent | 0;
			}
			if(radius > style.round) radius = style.round;
			if(b.width > 1) {
				var result = new org.aswing.StyleResult(c.getMideground(),style);
				org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,result,direction);
				org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,result,direction);
				if(b.width - radius * 2 > 0) g.fillRectangle(new org.aswing.graphics.SolidBrush(c.getMideground().changeAlpha(0.3)),radius,b.height - 2.5,b.width - radius * 2,1.5);
			}
		}
	}
	,__class__: org.aswing.plaf.basic.background.ProgressBarIcon
};
org.aswing.plaf.basic.background.ScrollBarBackground = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ScrollBarBackground"] = org.aswing.plaf.basic.background.ScrollBarBackground;
org.aswing.plaf.basic.background.ScrollBarBackground.__name__ = ["org","aswing","plaf","basic","background","ScrollBarBackground"];
org.aswing.plaf.basic.background.ScrollBarBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ScrollBarBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		if(js.Boot.__instanceof(c,org.aswing.Orientable) && c.isOpaque()) {
			var bar;
			if(js.Boot.__instanceof(c,org.aswing.Orientable)) bar = c; else bar = null;
			var verticle = bar.getOrientation() == 1;
			this.shape.get_graphics().clear();
			var style = c.getStyleTune();
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			b = b.clone();
			g.fillRoundRect(new org.aswing.graphics.SolidBrush(c.getBackground().changeAlpha(1)),b.x,b.y,b.width,b.height,style.round);
			var f = new Array();
			f.push(new openfl.filters.GlowFilter(0,style.shadowAlpha,5,5,1,1,true));
			this.shape.set_filters(f);
			this.shape.set_alpha(c.getBackground().getAlpha());
		}
	}
	,__class__: org.aswing.plaf.basic.background.ScrollBarBackground
};
org.aswing.plaf.basic.background.ScrollBarThumb = function() {
	this.thumb = new org.aswing.AWSprite();
	this.rollover = false;
	this.pressed = false;
	this.initSelfHandlers();
};
$hxClasses["org.aswing.plaf.basic.background.ScrollBarThumb"] = org.aswing.plaf.basic.background.ScrollBarThumb;
org.aswing.plaf.basic.background.ScrollBarThumb.__name__ = ["org","aswing","plaf","basic","background","ScrollBarThumb"];
org.aswing.plaf.basic.background.ScrollBarThumb.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ScrollBarThumb.prototype = {
	updateDecorator: function(c,g,bounds) {
		this.thumb.set_x(bounds.x);
		this.thumb.set_y(bounds.y);
		this.size = bounds.getSize();
		if(js.Boot.__instanceof(c,org.aswing.JScrollBar)) this.bar = c; else this.bar = null;
		this.verticle = this.bar.getOrientation() == 1;
		this.paint();
	}
	,paint: function() {
		var x = 0;
		var y = 0;
		var w = this.size.width;
		var h = this.size.height;
		this.thumb.get_graphics().clear();
		var g = new org.aswing.graphics.Graphics2D(this.thumb.get_graphics());
		var b;
		var direction;
		var notchSize;
		if(this.verticle) {
			direction = Math.PI / 2;
			notchSize = w - 6 | 0;
		} else {
			direction = 0;
			notchSize = h - 6 | 0;
		}
		b = new org.aswing.geom.IntRectangle(x | 0,y | 0,w | 0,h | 0);
		var tune = this.bar.getStyleTune().get_mide();
		var style;
		var cl = this.bar.getMideground().changeAlpha(1);
		if(!this.bar.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			tune = tune.sharpen(0.4);
		} else if(this.pressed) tune = tune.sharpen(0.8); else if(this.rollover) cl = cl.offsetHLS(0,0.06,0);
		style = new org.aswing.StyleResult(cl,tune);
		org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction);
		org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction);
		b = b.clone();
		b.grow(-1,-1);
		var innerStyle = new org.aswing.StyleResult(cl,tune);
		innerStyle.bdark = innerStyle.cdark.offsetHLS(0,0.06,0);
		innerStyle.blight = innerStyle.clight.offsetHLS(0,0.06,0);
		org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,innerStyle,direction);
		var snotchX = 0;
		var snotchY = 0;
		var lightPen = new org.aswing.graphics.Pen(innerStyle.blight,1,true,openfl.display.LineScaleMode.NORMAL,openfl.display.CapsStyle.SQUARE);
		var darkPen = new org.aswing.graphics.Pen(style.blight,1,true,openfl.display.LineScaleMode.NORMAL,openfl.display.CapsStyle.SQUARE);
		if(this.verticle) {
			snotchX = x + 3 | 0;
			snotchY = y + h / 2 - 3 | 0;
			g.drawLine(lightPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX + notchSize,snotchY);
			snotchY += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX + notchSize,snotchY);
		} else {
			snotchX = x + w / 2 - 3 | 0;
			snotchY = y + 3 | 0;
			g.drawLine(lightPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(lightPen,snotchX,snotchY,snotchX,snotchY + notchSize);
			snotchX += 1;
			g.drawLine(darkPen,snotchX,snotchY,snotchX,snotchY + notchSize);
		}
		this.thumb.set_alpha(this.bar.getMideground().getAlpha());
	}
	,getDisplay: function(c) {
		return this.thumb;
	}
	,initSelfHandlers: function() {
		this.thumb.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__rollOutListener));
		this.thumb.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__rollOverListener));
		this.thumb.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__mouseDownListener));
		this.thumb.addEventListener("release",$bind(this,this.__mouseUpListener));
	}
	,__rollOverListener: function(e) {
		this.rollover = true;
		this.paint();
	}
	,__rollOutListener: function(e) {
		this.rollover = false;
		if(this.pressed != true) this.paint();
	}
	,__mouseDownListener: function(e) {
		this.pressed = true;
		this.paint();
	}
	,__mouseUpListener: function(e) {
		if(this.pressed) {
			this.pressed = false;
			this.paint();
		}
	}
	,__class__: org.aswing.plaf.basic.background.ScrollBarThumb
};
org.aswing.plaf.basic.background.TableBackground = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.TableBackground"] = org.aswing.plaf.basic.background.TableBackground;
org.aswing.plaf.basic.background.TableBackground.__name__ = ["org","aswing","plaf","basic","background","TableBackground"];
org.aswing.plaf.basic.background.TableBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.TableBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var tune = c.getStyleTune().get_mide();
			var cl = c.getMideground();
			var style = new org.aswing.StyleResult(cl,tune);
			b = b.clone();
			style.cdark = style.cdark.changeAlpha(1);
			style.clight = style.clight.changeAlpha(1);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,-Math.PI / 2);
			var bd = style.bdark;
			var f = new Array();
			f.push(new openfl.filters.GlowFilter(16777215,0.5,2,2,20,1,true));
			f.push(new openfl.filters.GlowFilter(bd.getRGB(),1,2,2,20,1));
			this.shape.set_filters(f);
			this.shape.set_alpha(cl.getAlpha());
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: org.aswing.plaf.basic.background.TableBackground
};
org.aswing.plaf.basic.background.TableHeaderBackground = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.TableHeaderBackground"] = org.aswing.plaf.basic.background.TableHeaderBackground;
org.aswing.plaf.basic.background.TableHeaderBackground.__name__ = ["org","aswing","plaf","basic","background","TableHeaderBackground"];
org.aswing.plaf.basic.background.TableHeaderBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.TableHeaderBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var cl = c.getBackground();
			var turn = c.getStyleTune();
			var style = new org.aswing.StyleResult(cl,turn);
			var matrixB = b.clone();
			var graphicB = b.clone();
			graphicB.height += style.round * 2 | 0;
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,graphicB,style,Math.PI / 2,false,matrixB);
			var matrix = new openfl.geom.Matrix();
			matrix.createGradientBox(b.width,b.height,Math.PI / 2,b.x,b.y);
			g.fillRoundRect(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[16777215,16777215],[0.2,0.04],[0,255],matrix),b.x,b.y,b.width,b.height / 2 - 1,style.round,style.round,0,0);
		}
		this.shape.set_visible(c.isOpaque());
	}
	,__class__: org.aswing.plaf.basic.background.TableHeaderBackground
};
org.aswing.plaf.basic.background.ToggleButtonBackground = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ToggleButtonBackground"] = org.aswing.plaf.basic.background.ToggleButtonBackground;
org.aswing.plaf.basic.background.ToggleButtonBackground.__name__ = ["org","aswing","plaf","basic","background","ToggleButtonBackground"];
org.aswing.plaf.basic.background.ToggleButtonBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ToggleButtonBackground.prototype = {
	updateDecorator: function(c,g,bounds) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		if(b == null) return;
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		bounds = bounds.clone();
		bounds.width -= 2;
		bounds.height -= 2;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		if(c.isOpaque()) {
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var shadowScale = 1;
			var bo = bounds.clone();
			var matrix = new openfl.geom.Matrix();
			var cDir = Math.PI / 2;
			var paintDefault = false;
			if(isPressing) {
				if(!b.isEnabled()) {
					cl = cl.offsetHLS(0,0.2,-0.06);
					adjuster = adjuster.sharpen(0.4);
					shadowScale = 2;
				} else if(model.isRollOver()) cl = cl.offsetHLS(0,0.025,0);
				bounds.width += b.getShiftOffset();
				bounds.height += b.getShiftOffset();
				shadowScale *= 2.5;
				cDir = -Math.PI / 2;
			} else if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0.2,-0.06);
				adjuster = adjuster.sharpen(0.4);
			} else if(model.isRollOver()) cl = cl.offsetHLS(0,0.06,0); else {
			}
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style,cDir);
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 2,bo.x,bo.y);
			g.beginFill(new org.aswing.graphics.GradientBrush(openfl.display.GradientType.LINEAR,[style.bdark.getRGB(),style.bdark.getRGB()],[1,0.6],[0,255],matrix));
			org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round,1);
			g.endFill();
			matrix.createGradientBox(bo.width,bo.height,Math.PI / 6,bo.x,bo.y);
			g.beginFill(new org.aswing.graphics.GradientBrush(openfl.display.GradientType.LINEAR,[style.blight.getRGB(),style.blight.getRGB()],[1,0.5],[0,255],matrix));
			bo.grow(-1,-1);
			org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRectLine(g,bo.x,bo.y,bo.width,bo.height,style.round - 1,1);
			g.endFill();
			var f = new Array();
			f.push(new openfl.filters.DropShadowFilter(isPressing?2:1,45,0,style.shadow * shadowScale,2,2,1,1,isPressing));
			this.shape.set_filters(f);
		}
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.background.ToggleButtonBackground
};
org.aswing.plaf.basic.background.ToolTipBackground = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.background.ToolTipBackground"] = org.aswing.plaf.basic.background.ToolTipBackground;
org.aswing.plaf.basic.background.ToolTipBackground.__name__ = ["org","aswing","plaf","basic","background","ToolTipBackground"];
org.aswing.plaf.basic.background.ToolTipBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.background.ToolTipBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.set_visible(c.isOpaque());
		if(c.isOpaque()) {
			this.shape.get_graphics().clear();
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var cc = c.getBackground();
			var bc = c.getMideground();
			var tune = c.getStyleTune();
			g.beginFill(new org.aswing.graphics.SolidBrush(bc));
			var r = tune.round;
			b = new org.aswing.geom.IntRectangle(0,0,c.getWidth(),c.getHeight());
			if(r < 1) g.rectangle(b.x,b.y,b.width,b.height); else org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRect(g,b.x,b.y,b.width,b.height,r);
			g.endFill();
			g.beginFill(new org.aswing.graphics.SolidBrush(cc));
			r -= 0.5;
			b.grow(-1,-1);
			if(r < 1) g.rectangle(b.x,b.y,b.width,b.height); else org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRect(g,b.x,b.y,b.width,b.height,r);
			g.endFill();
		}
	}
	,__class__: org.aswing.plaf.basic.background.ToolTipBackground
};
org.aswing.plaf.basic.border = {};
org.aswing.plaf.basic.border.ColorChooserBorder = function() {
	org.aswing.border.EmptyBorder.call(this,null,new org.aswing.Insets(6,6,6,6));
};
$hxClasses["org.aswing.plaf.basic.border.ColorChooserBorder"] = org.aswing.plaf.basic.border.ColorChooserBorder;
org.aswing.plaf.basic.border.ColorChooserBorder.__name__ = ["org","aswing","plaf","basic","border","ColorChooserBorder"];
org.aswing.plaf.basic.border.ColorChooserBorder.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.basic.border.ColorChooserBorder.__super__ = org.aswing.border.EmptyBorder;
org.aswing.plaf.basic.border.ColorChooserBorder.prototype = $extend(org.aswing.border.EmptyBorder.prototype,{
	__class__: org.aswing.plaf.basic.border.ColorChooserBorder
});
org.aswing.plaf.basic.border.ComboBoxPopupBorder = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.border.ComboBoxPopupBorder"] = org.aswing.plaf.basic.border.ComboBoxPopupBorder;
org.aswing.plaf.basic.border.ComboBoxPopupBorder.__name__ = ["org","aswing","plaf","basic","border","ComboBoxPopupBorder"];
org.aswing.plaf.basic.border.ComboBoxPopupBorder.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Border];
org.aswing.plaf.basic.border.ComboBoxPopupBorder.prototype = {
	updateBorder: function(c,g,b) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var cl = c.getBackground();
		cl = cl.changeAlpha(1);
		var tune = c.getStyleTune();
		var result = new org.aswing.StyleResult(cl,tune);
		var ml = result.bdark;
		var round = result.round;
		var clTop = cl.changeLuminance(cl.getLuminance() - 0.07);
		var light = cl.changeLuminance(cl.getLuminance() + 0.01);
		b = b.clone();
		b.width -= 4;
		b.height -= 4;
		var brush = new org.aswing.graphics.SolidBrush(cl);
		g.fillRoundRect(new org.aswing.graphics.SolidBrush(ml),b.x,b.y,b.width,b.height,round);
		b.grow(-1,-1);
		round--;
		if(round < 0) round = 0;
		g.fillRoundRect(new org.aswing.graphics.SolidBrush(light),b.x,b.y,b.width,b.height,round);
		b.grow(-1,-1);
		var matrix = new openfl.geom.Matrix();
		matrix.createGradientBox(b.width,b.height,Math.PI / 2,b.x,b.y);
		if(round < 0) round = 0;
		g.fillRoundRect(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[clTop.getRGB(),cl.getRGB()],[1,1],[0,100],matrix),b.x,b.y,b.width,b.height,round);
		var f = new Array();
		f.push(new openfl.filters.DropShadowFilter(1,45,0,0.3,4,4));
		this.shape.set_filters(f);
	}
	,getBorderInsets: function(c,b) {
		return new org.aswing.Insets(2,2,6,6);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.border.ComboBoxPopupBorder
};
org.aswing.plaf.basic.border.EmptyBorderResource = function(interior,margin) {
	org.aswing.border.EmptyBorder.call(this,interior,margin);
};
$hxClasses["org.aswing.plaf.basic.border.EmptyBorderResource"] = org.aswing.plaf.basic.border.EmptyBorderResource;
org.aswing.plaf.basic.border.EmptyBorderResource.__name__ = ["org","aswing","plaf","basic","border","EmptyBorderResource"];
org.aswing.plaf.basic.border.EmptyBorderResource.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.basic.border.EmptyBorderResource.__super__ = org.aswing.border.EmptyBorder;
org.aswing.plaf.basic.border.EmptyBorderResource.prototype = $extend(org.aswing.border.EmptyBorder.prototype,{
	__class__: org.aswing.plaf.basic.border.EmptyBorderResource
});
org.aswing.plaf.basic.border.PopupMenuBorder = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.border.PopupMenuBorder"] = org.aswing.plaf.basic.border.PopupMenuBorder;
org.aswing.plaf.basic.border.PopupMenuBorder.__name__ = ["org","aswing","plaf","basic","border","PopupMenuBorder"];
org.aswing.plaf.basic.border.PopupMenuBorder.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Border];
org.aswing.plaf.basic.border.PopupMenuBorder.prototype = {
	updateBorder: function(c,g,b) {
		this.shape.get_graphics().clear();
		if(c.isOpaque()) {
			b = b.clone();
			b.height -= 4;
			b.width -= 4;
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var tune = c.getStyleTune();
			var cl = c.getBackground();
			var style = new org.aswing.StyleResult(cl.changeAlpha(1),tune);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,Math.PI / 2);
			org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,Math.PI / 2);
			var f = new Array();
			f.push(new openfl.filters.DropShadowFilter(1,45,0,style.shadow,4,4,1,1));
			this.shape.set_filters(f);
			this.shape.set_alpha(cl.getAlpha());
		}
		this.shape.set_visible(c.isOpaque());
	}
	,getBorderInsets: function(com,bounds) {
		return new org.aswing.Insets(2,2,6,6);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.border.PopupMenuBorder
};
org.aswing.plaf.basic.border.TableHeaderCellBorder = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.border.TableHeaderCellBorder"] = org.aswing.plaf.basic.border.TableHeaderCellBorder;
org.aswing.plaf.basic.border.TableHeaderCellBorder.__name__ = ["org","aswing","plaf","basic","border","TableHeaderCellBorder"];
org.aswing.plaf.basic.border.TableHeaderCellBorder.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Border];
org.aswing.plaf.basic.border.TableHeaderCellBorder.prototype = {
	updateBorder: function(c,g,b) {
		b = b.clone();
		b.height -= 4;
		b.y += 2;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) console.log("header AbstractButton");
		if(b.height > 0) {
			var cl = c.getBackground();
			var dark = cl.offsetHLS(0,-0.2,0);
			var light = cl.offsetHLS(0,0.06,0);
			this.shape.get_graphics().clear();
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var height = b.height;
			var matrix = new openfl.geom.Matrix();
			matrix.createGradientBox(b.width,b.height,Math.PI / 2,b.x,b.y);
			g.fillRectangle(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[dark.getRGB(),dark.getRGB(),dark.getRGB()],[0,1,0],[0,122,255],matrix),b.x + b.width - 2,b.y,1,b.height);
			g.fillRectangle(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[light.getRGB(),light.getRGB(),light.getRGB()],[0,1,0],[0,122,255],matrix),b.x + b.width - 1,b.y,1,b.height);
		}
	}
	,getBorderInsets: function(com,bounds) {
		return new org.aswing.Insets(0,0,1,1);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.border.TableHeaderCellBorder
};
org.aswing.plaf.basic.cursor = {};
org.aswing.plaf.basic.cursor.HV_ResizeCursor = function() {
	openfl.display.Shape.call(this);
	this.resizeArrowColor = org.aswing.UIManager.getColor("Frame.resizeArrow");
	this.resizeArrowLightColor = org.aswing.UIManager.getColor("Frame.resizeArrowLight");
	this.resizeArrowDarkColor = org.aswing.UIManager.getColor("Frame.resizeArrowDark");
	var w = 1;
	var r = 4;
	var arrowPoints;
	arrowPoints = [{ y : -r * 2, x : 0},{ y : -r, x : -r},{ y : -r, x : -w},{ y : -w, x : -w},{ y : -w, x : -r},{ y : -r, x : -r},{ y : 0, x : -2 * r},{ y : r, x : -r},{ y : w, x : -r},{ y : w, x : -w},{ y : r, x : -w},{ y : r, x : -r},{ y : r * 2, x : 0},{ y : r, x : r},{ y : r, x : w},{ y : w, x : w},{ y : w, x : r},{ y : r, x : r},{ y : 0, x : 2 * r},{ y : -r, x : r},{ y : -w, x : r},{ y : -w, x : w},{ y : -r, x : w},{ y : -r, x : r}];
	var gdi = new org.aswing.graphics.Graphics2D(this.get_graphics());
	gdi.drawPolygon(new org.aswing.graphics.Pen(this.resizeArrowColor.changeAlpha(0.4),4),arrowPoints);
	gdi.fillPolygon(new org.aswing.graphics.SolidBrush(this.resizeArrowLightColor),arrowPoints);
	gdi.drawPolygon(new org.aswing.graphics.Pen(this.resizeArrowDarkColor,1),arrowPoints);
};
$hxClasses["org.aswing.plaf.basic.cursor.HV_ResizeCursor"] = org.aswing.plaf.basic.cursor.HV_ResizeCursor;
org.aswing.plaf.basic.cursor.HV_ResizeCursor.__name__ = ["org","aswing","plaf","basic","cursor","HV_ResizeCursor"];
org.aswing.plaf.basic.cursor.HV_ResizeCursor.__super__ = openfl.display.Shape;
org.aswing.plaf.basic.cursor.HV_ResizeCursor.prototype = $extend(openfl.display.Shape.prototype,{
	__class__: org.aswing.plaf.basic.cursor.HV_ResizeCursor
});
org.aswing.plaf.basic.cursor.H_ResizeCursor = function() {
	openfl.display.Shape.call(this);
	this.resizeArrowColor = org.aswing.UIManager.getColor("Frame.resizeArrow");
	this.resizeArrowLightColor = org.aswing.UIManager.getColor("Frame.resizeArrowLight");
	this.resizeArrowDarkColor = org.aswing.UIManager.getColor("Frame.resizeArrowDark");
	var w = 1;
	var r = 4;
	var arrowPoints;
	arrowPoints = [{ x : -r * 2, y : 0},{ x : -r, y : -r},{ x : -r, y : -w},{ x : r, y : -w},{ x : r, y : -r},{ x : r * 2, y : 0},{ x : r, y : r},{ x : r, y : w},{ x : -r, y : w},{ x : -r, y : r}];
	var gdi = new org.aswing.graphics.Graphics2D(this.get_graphics());
	gdi.drawPolygon(new org.aswing.graphics.Pen(this.resizeArrowColor.changeAlpha(0.4),4),arrowPoints);
	gdi.fillPolygon(new org.aswing.graphics.SolidBrush(this.resizeArrowLightColor),arrowPoints);
	gdi.drawPolygon(new org.aswing.graphics.Pen(this.resizeArrowDarkColor,1),arrowPoints);
};
$hxClasses["org.aswing.plaf.basic.cursor.H_ResizeCursor"] = org.aswing.plaf.basic.cursor.H_ResizeCursor;
org.aswing.plaf.basic.cursor.H_ResizeCursor.__name__ = ["org","aswing","plaf","basic","cursor","H_ResizeCursor"];
org.aswing.plaf.basic.cursor.H_ResizeCursor.__super__ = openfl.display.Shape;
org.aswing.plaf.basic.cursor.H_ResizeCursor.prototype = $extend(openfl.display.Shape.prototype,{
	__class__: org.aswing.plaf.basic.cursor.H_ResizeCursor
});
org.aswing.plaf.basic.cursor.V_ResizeCursor = function() {
	openfl.display.Shape.call(this);
	this.resizeArrowColor = org.aswing.UIManager.getColor("Frame.resizeArrow");
	this.resizeArrowLightColor = org.aswing.UIManager.getColor("Frame.resizeArrowLight");
	this.resizeArrowDarkColor = org.aswing.UIManager.getColor("Frame.resizeArrowDark");
	var w = 1;
	var r = 4;
	var arrowPoints;
	arrowPoints = [{ y : -r * 2, x : 0},{ y : -r, x : -r},{ y : -r, x : -w},{ y : r, x : -w},{ y : r, x : -r},{ y : r * 2, x : 0},{ y : r, x : r},{ y : r, x : w},{ y : -r, x : w},{ y : -r, x : r}];
	var gdi = new org.aswing.graphics.Graphics2D(this.get_graphics());
	gdi.drawPolygon(new org.aswing.graphics.Pen(this.resizeArrowColor.changeAlpha(0.4),4),arrowPoints);
	gdi.fillPolygon(new org.aswing.graphics.SolidBrush(this.resizeArrowLightColor),arrowPoints);
	gdi.drawPolygon(new org.aswing.graphics.Pen(this.resizeArrowDarkColor,1),arrowPoints);
};
$hxClasses["org.aswing.plaf.basic.cursor.V_ResizeCursor"] = org.aswing.plaf.basic.cursor.V_ResizeCursor;
org.aswing.plaf.basic.cursor.V_ResizeCursor.__name__ = ["org","aswing","plaf","basic","cursor","V_ResizeCursor"];
org.aswing.plaf.basic.cursor.V_ResizeCursor.__super__ = openfl.display.Shape;
org.aswing.plaf.basic.cursor.V_ResizeCursor.prototype = $extend(openfl.display.Shape.prototype,{
	__class__: org.aswing.plaf.basic.cursor.V_ResizeCursor
});
org.aswing.plaf.basic.icon.ArrowIcon = function(arrow,size) {
	this.arrow = arrow;
	this.width = size;
	this.height = size;
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.ArrowIcon"] = org.aswing.plaf.basic.icon.ArrowIcon;
org.aswing.plaf.basic.icon.ArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","ArrowIcon"];
org.aswing.plaf.basic.icon.ArrowIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.ArrowIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var center = new openfl.geom.Point(c.getWidth() / 2,c.getHeight() / 2);
		var w = this.width - 6;
		var ps1 = new Array();
		ps1.push(this.nextPoint(center,this.arrow,w / 2 / 2));
		var back = this.nextPoint(center,this.arrow + Math.PI,w / 2 / 2);
		ps1.push(this.nextPoint(back,this.arrow - Math.PI / 2,w / 2));
		ps1.push(this.nextPoint(back,this.arrow + Math.PI / 2,w / 2));
		var cl = c.getMideground();
		var style;
		var adjuster = c.getStyleTune().get_mide();
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) {
			var b;
			if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var hue = cl.getHue();
			var offHue = hue + 0.21;
			if(offHue > 1) offHue = offHue - 1;
			if(offHue < 0) offHue = offHue + 1;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,-0.06,-0.03);
				adjuster = adjuster.sharpen(0.4);
				cl = cl.offsetHLS(0,-0.10,-0.10);
			} else if(isPressing) {
				adjuster = adjuster.sharpen(0.8);
				cl = cl.offsetHLS(offHue - hue,-0.06,0);
			} else if(model.isRollOver()) cl = cl.offsetHLS(offHue - hue,0.1,0.3);
		}
		style = new org.aswing.StyleResult(cl,adjuster);
		var matrix = new openfl.geom.Matrix();
		matrix.createGradientBox(w + 1,w + 1,0.333333333333333315 * Math.PI,x + w / 8 - 0.5,y + w / 8 - 0.5);
		var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.RADIAL,[style.clight.getRGB(),style.cdark.getRGB()],[style.clight.getAlpha(),style.cdark.getAlpha()],[0,255],matrix);
		g.fillPolygon(brush,ps1);
		var f = new Array();
		f.push(new openfl.filters.DropShadowFilter(1,45,0,style.shadow,0,0,1,1));
		this.shape.set_filters(f);
	}
	,nextPoint: function(p,dir,dis) {
		return new openfl.geom.Point(p.x + Math.cos(dir) * dis,p.y + Math.sin(dir) * dis);
	}
	,getIconHeight: function(c) {
		return this.width;
	}
	,getIconWidth: function(c) {
		return this.height;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.icon.ArrowIcon
};
org.aswing.plaf.basic.icon.CheckBoxIcon = function() {
	this.sprite = new openfl.display.Sprite();
	this.sprite.mouseChildren = false;
	this.sprite.mouseEnabled = false;
	this.box = new openfl.display.Sprite();
	this.dot = new openfl.display.Sprite();
	this.sprite.addChild(this.box);
	this.sprite.addChild(this.dot);
};
$hxClasses["org.aswing.plaf.basic.icon.CheckBoxIcon"] = org.aswing.plaf.basic.icon.CheckBoxIcon;
org.aswing.plaf.basic.icon.CheckBoxIcon.__name__ = ["org","aswing","plaf","basic","icon","CheckBoxIcon"];
org.aswing.plaf.basic.icon.CheckBoxIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.CheckBoxIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		var model = b.getModel();
		var drawDot = model.isSelected();
		this.box.get_graphics().clear();
		var g1 = new org.aswing.graphics.Graphics2D(this.box.get_graphics());
		var w = this.getIconWidth(c) - 5;
		var h = this.getIconHeight(c) - 5;
		x += 1;
		y += 3;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		var isPressing = model.isArmed() || model.isSelected();
		var shadowScale = 1;
		var innerDis = 2;
		var alpha = 1;
		if(isPressing) {
			innerDis = 3;
			adjuster = adjuster.clone();
			adjuster.bGradient *= 0.8;
			adjuster.cGradient *= 0.8;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0,-0.03);
				adjuster = adjuster.sharpen(0.6);
				alpha = 0.5;
			} else if(model.isRollOver()) {
				cl = cl.offsetHLS(0,0.06,0.06);
				adjuster = adjuster.sharpen(0.8);
				innerDis = 4;
			} else if(model.isArmed()) adjuster = adjuster.sharpen(0.8);
		} else if(!b.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			adjuster = adjuster.sharpen(0.6);
			alpha = 0.5;
		} else if(model.isRollOver()) {
			cl = cl.offsetHLS(0,0.06,0.06);
			innerDis = 4;
		} else {
		}
		style = new org.aswing.StyleResult(cl,adjuster);
		g1.beginFill(new org.aswing.graphics.SolidBrush(style.bdark));
		org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRect(g1,x,y,w,h,style.round);
		g1.endFill();
		g1.beginFill(new org.aswing.graphics.SolidBrush(style.clight));
		var r2 = style.round - 1;
		r2 = Math.max(0,r2);
		org.aswing.plaf.basic.BasicGraphicsUtils.drawRoundRect(g1,x + 1,y + 1,w - 2,h - 2,r2);
		g1.endFill();
		this.dot.get_graphics().clear();
		if(drawDot) {
			g1 = new org.aswing.graphics.Graphics2D(this.dot.get_graphics());
			cl = c.getMideground();
			adjuster = c.getStyleTune().get_mide();
			if(model.isArmed()) cl = cl.offsetHLS(0,-0.04,0.03); else if(model.isRollOver()) {
				cl = cl.offsetHLS(0,0.06,0.00);
				adjuster = adjuster.sharpen(0.8);
			} else if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0.0,-0.3);
				adjuster = adjuster.sharpen(0.6);
			} else {
			}
			var mcls = new org.aswing.StyleResult(cl,adjuster);
			var matrix = new openfl.geom.Matrix();
			matrix.createGradientBox(w / 2 - 3,h * 3 / 4 - 5,Math.PI * 3 / 4,x + 3,y + 5);
			g1.beginDraw(new org.aswing.graphics.Pen(cl,1.5));
			g1.moveTo(x + 4,y + 5);
			g1.lineTo(x + w / 2 + 1,y + h * 3 / 4 - 1);
			matrix.createGradientBox(w / 2,h * 3 / 4 - 2,Math.PI / 4,x + w / 2,y + 2);
			g1.lineTo(x + w + 2.5,y);
			g1.endDraw();
			var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,[mcls.clight.getRGB(),mcls.cdark.getRGB()],[mcls.clight.getAlpha(),mcls.cdark.getAlpha()],[0,255],matrix);
			var f = new Array();
			f.push(new openfl.filters.DropShadowFilter(0,45,mcls.bdark.getRGB(),mcls.shadow,2,2,4,1,false));
			this.dot.set_filters(f);
		}
		this.dot.set_visible(drawDot);
		this.box.set_alpha(alpha);
		var box_f = new Array();
		box_f.push(new openfl.filters.DropShadowFilter(innerDis,45,0,style.shadow * shadowScale,5,5,1,1,true));
		this.box.set_filters(box_f);
	}
	,getIconHeight: function(c) {
		return 17;
	}
	,getIconWidth: function(c) {
		return 17;
	}
	,getDisplay: function(c) {
		return this.sprite;
	}
	,__class__: org.aswing.plaf.basic.icon.CheckBoxIcon
};
org.aswing.plaf.basic.icon.MenuCheckIcon = function() {
};
$hxClasses["org.aswing.plaf.basic.icon.MenuCheckIcon"] = org.aswing.plaf.basic.icon.MenuCheckIcon;
org.aswing.plaf.basic.icon.MenuCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuCheckIcon"];
org.aswing.plaf.basic.icon.MenuCheckIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.MenuCheckIcon.prototype = {
	updateIcon: function(c,g,x,y) {
	}
	,getIconHeight: function(c) {
		return 8;
	}
	,getIconWidth: function(c) {
		return 8;
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: org.aswing.plaf.basic.icon.MenuCheckIcon
};
org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon = function() {
	this.shape = new openfl.display.Shape();
	org.aswing.plaf.basic.icon.MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon"] = org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon;
org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","CheckBoxMenuItemCheckIcon"];
org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon.__super__ = org.aswing.plaf.basic.icon.MenuCheckIcon;
org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon.prototype = $extend(org.aswing.plaf.basic.icon.MenuCheckIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var menu;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) menu = c; else menu = null;
		if(menu.isSelected()) {
			g.beginDraw(new org.aswing.graphics.Pen(c.getMideground(),2));
			g.moveTo(x,y + 4);
			g.lineTo(x + 3,y + 7);
			g.lineTo(x + 8,y + 2);
			g.endDraw();
		}
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.icon.CheckBoxMenuItemCheckIcon
});
org.aswing.plaf.basic.icon.FrameIcon = function(width) {
	if(width == null) width = 16;
	this.width = width;
	this.height = width;
	this.sprite = new openfl.display.Sprite();
	this.sprite.mouseChildren = false;
	this.sprite.mouseEnabled = false;
	this.box = new openfl.display.Shape();
	this.dot = new openfl.display.Shape();
	this.sprite.addChild(this.box);
	this.sprite.addChild(this.dot);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameIcon"] = org.aswing.plaf.basic.icon.FrameIcon;
org.aswing.plaf.basic.icon.FrameIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameIcon"];
org.aswing.plaf.basic.icon.FrameIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.FrameIcon.prototype = {
	getColor: function(c) {
		return c.getMideground();
	}
	,updateIcon: function(c,g,x,y) {
		this.box.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.box.get_graphics());
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		if(b == null) return;
		var bounds = new org.aswing.geom.IntRectangle(x,y,this.width,this.height);
		bounds.width -= 1;
		bounds.height -= 1;
		var cl = c.getMideground();
		var style;
		var adjuster = c.getStyleTune().get_mide();
		var model = b.getModel();
		var isPressing = model.isArmed() || model.isSelected();
		var shadowScale = 1;
		if(!b.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			adjuster = adjuster.sharpen(0.4);
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style);
		} else if(isPressing) {
			adjuster = adjuster.sharpen(0.8);
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style,-Math.PI / 2);
		} else if(model.isRollOver()) {
			cl = cl.offsetHLS(0,0.06,0);
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style);
		} else {
			style = new org.aswing.StyleResult(cl,adjuster);
			org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,bounds,style);
		}
		org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,bounds,1,style);
		var box_f = new Array();
		box_f.push(new openfl.filters.DropShadowFilter(1,45,16777215,style.shadow * shadowScale,1,1,1,1));
		this.box.set_filters(box_f);
		this.dot.get_graphics().clear();
		this.updateIconImp(style,new org.aswing.graphics.Graphics2D(this.dot.get_graphics()),x,y);
	}
	,updateIconImp: function(style,g,x,y) {
	}
	,getSize: function() {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.width;
	}
	,getIconWidth: function(c) {
		return this.height;
	}
	,getDisplay: function(c) {
		return this.sprite;
	}
	,__class__: org.aswing.plaf.basic.icon.FrameIcon
};
org.aswing.plaf.basic.icon.FrameCloseIcon = function() {
	org.aswing.plaf.basic.icon.FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameCloseIcon"] = org.aswing.plaf.basic.icon.FrameCloseIcon;
org.aswing.plaf.basic.icon.FrameCloseIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameCloseIcon"];
org.aswing.plaf.basic.icon.FrameCloseIcon.__super__ = org.aswing.plaf.basic.icon.FrameIcon;
org.aswing.plaf.basic.icon.FrameCloseIcon.prototype = $extend(org.aswing.plaf.basic.icon.FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var gap = 5;
		var w = this.width - 1 - gap * 2;
		var h = this.height - 1 - gap * 2;
		var x1 = x + gap;
		var y1 = y + gap;
		var cl = c.bdark;
		var lightPane = new org.aswing.graphics.Pen(cl,2,true,openfl.display.LineScaleMode.NORMAL,openfl.display.CapsStyle.ROUND);
		g.drawLine(lightPane,x1,y1,x1 + w,y1 + h);
		g.drawLine(lightPane,x1 + w,y1,x1,y1 + h);
	}
	,__class__: org.aswing.plaf.basic.icon.FrameCloseIcon
});
org.aswing.plaf.basic.icon.FrameIconifiedIcon = function() {
	org.aswing.plaf.basic.icon.FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameIconifiedIcon"] = org.aswing.plaf.basic.icon.FrameIconifiedIcon;
org.aswing.plaf.basic.icon.FrameIconifiedIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameIconifiedIcon"];
org.aswing.plaf.basic.icon.FrameIconifiedIcon.__super__ = org.aswing.plaf.basic.icon.FrameIcon;
org.aswing.plaf.basic.icon.FrameIconifiedIcon.prototype = $extend(org.aswing.plaf.basic.icon.FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var w = this.width - 8 - 1;
		var h = 2;
		y = Math.round(y + Math.floor((this.height - 2) * 3 / 4 - 2));
		x = x + 4;
		g.fillRectangle(new org.aswing.graphics.SolidBrush(c.bdark),x,y,w,h);
	}
	,__class__: org.aswing.plaf.basic.icon.FrameIconifiedIcon
});
org.aswing.plaf.basic.icon.FrameMaximizeIcon = function() {
	org.aswing.plaf.basic.icon.FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameMaximizeIcon"] = org.aswing.plaf.basic.icon.FrameMaximizeIcon;
org.aswing.plaf.basic.icon.FrameMaximizeIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameMaximizeIcon"];
org.aswing.plaf.basic.icon.FrameMaximizeIcon.__super__ = org.aswing.plaf.basic.icon.FrameIcon;
org.aswing.plaf.basic.icon.FrameMaximizeIcon.prototype = $extend(org.aswing.plaf.basic.icon.FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var gap = 4;
		x = x + gap;
		y = y + gap;
		var w = this.width - 1 - gap * 2;
		var h = this.height - 1 - gap * 2 - 2;
		g.fillRectangle(new org.aswing.graphics.SolidBrush(c.bdark),x,y,w,1);
		var darkBrush = new org.aswing.graphics.SolidBrush(c.bdark);
		g.fillRectangle(darkBrush,x,y + 1,w,1);
		g.fillRectangleRingWithThickness(darkBrush,x,y + 2,w,h,1);
	}
	,__class__: org.aswing.plaf.basic.icon.FrameMaximizeIcon
});
org.aswing.plaf.basic.icon.FrameNormalIcon = function() {
	org.aswing.plaf.basic.icon.FrameIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.FrameNormalIcon"] = org.aswing.plaf.basic.icon.FrameNormalIcon;
org.aswing.plaf.basic.icon.FrameNormalIcon.__name__ = ["org","aswing","plaf","basic","icon","FrameNormalIcon"];
org.aswing.plaf.basic.icon.FrameNormalIcon.__super__ = org.aswing.plaf.basic.icon.FrameIcon;
org.aswing.plaf.basic.icon.FrameNormalIcon.prototype = $extend(org.aswing.plaf.basic.icon.FrameIcon.prototype,{
	updateIconImp: function(c,g,x,y) {
		var gap = 4;
		var w = 5;
		var h = 4;
		var x1 = x + gap;
		var y2 = y + gap;
		var x2 = x1 + 3;
		var y1 = y2 + 3;
		var lightBrush = new org.aswing.graphics.SolidBrush(c.bdark);
		var darkBrush = new org.aswing.graphics.SolidBrush(c.bdark);
		g.fillRectangle(lightBrush,x2,y2,w,1);
		g.fillRectangle(darkBrush,x2,y2 + 1,w,1);
		g.fillRectangle(darkBrush,x2 + w - 1,y2 + 2,1,h - 1);
		g.fillRectangle(darkBrush,x2 + w - 2,y2 + h,1,1);
		g.fillRectangle(lightBrush,x1,y1,w,1);
		g.fillRectangleRingWithThickness(darkBrush,x1,y1 + 1,w,h,1);
	}
	,__class__: org.aswing.plaf.basic.icon.FrameNormalIcon
});
org.aswing.plaf.basic.icon.SolidArrowIcon = function(arrow,size,color) {
	this.arrow = arrow;
	this.width = size;
	this.height = size;
	this.shape = new openfl.display.Shape();
	this.paintIconWithColor(color);
};
$hxClasses["org.aswing.plaf.basic.icon.SolidArrowIcon"] = org.aswing.plaf.basic.icon.SolidArrowIcon;
org.aswing.plaf.basic.icon.SolidArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","SolidArrowIcon"];
org.aswing.plaf.basic.icon.SolidArrowIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.SolidArrowIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		this.shape.set_x(x);
		this.shape.set_y(y);
	}
	,paintIconWithColor: function(cl) {
		var x = 0;
		var y = 0;
		this.shape.get_graphics().clear();
		var g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var center = new openfl.geom.Point(x + this.width / 2,y + this.height / 2);
		var w = this.width;
		var ps1 = new Array();
		ps1.push(this.nextPoint(center,this.arrow,w / 2 / 2));
		var back = this.nextPoint(center,this.arrow + Math.PI,w / 2 / 2);
		ps1.push(this.nextPoint(back,this.arrow - Math.PI / 2,w / 2));
		ps1.push(this.nextPoint(back,this.arrow + Math.PI / 2,w / 2));
		g.fillPolygon(new org.aswing.graphics.SolidBrush(cl),ps1);
	}
	,nextPoint: function(op,direction,distance) {
		return new openfl.geom.Point(op.x + Math.cos(direction) * distance,op.y + Math.sin(direction) * distance);
	}
	,getIconHeight: function(c) {
		return this.height | 0;
	}
	,getIconWidth: function(c) {
		return this.width | 0;
	}
	,setArrow: function(arrow) {
		this.arrow = arrow;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.icon.SolidArrowIcon
};
org.aswing.plaf.basic.icon.MenuArrowIcon = function() {
	org.aswing.plaf.basic.icon.SolidArrowIcon.call(this,0,8,org.aswing.ASColor.BLACK);
};
$hxClasses["org.aswing.plaf.basic.icon.MenuArrowIcon"] = org.aswing.plaf.basic.icon.MenuArrowIcon;
org.aswing.plaf.basic.icon.MenuArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuArrowIcon"];
org.aswing.plaf.basic.icon.MenuArrowIcon.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.plaf.basic.icon.MenuArrowIcon.__super__ = org.aswing.plaf.basic.icon.SolidArrowIcon;
org.aswing.plaf.basic.icon.MenuArrowIcon.prototype = $extend(org.aswing.plaf.basic.icon.SolidArrowIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		org.aswing.plaf.basic.icon.SolidArrowIcon.prototype.updateIcon.call(this,c,g,x,y);
		this.paintIconWithColor(c.getMideground());
	}
	,__class__: org.aswing.plaf.basic.icon.MenuArrowIcon
});
org.aswing.plaf.basic.icon.MenuItemArrowIcon = function() {
	org.aswing.plaf.basic.icon.MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.MenuItemArrowIcon"] = org.aswing.plaf.basic.icon.MenuItemArrowIcon;
org.aswing.plaf.basic.icon.MenuItemArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuItemArrowIcon"];
org.aswing.plaf.basic.icon.MenuItemArrowIcon.__super__ = org.aswing.plaf.basic.icon.MenuCheckIcon;
org.aswing.plaf.basic.icon.MenuItemArrowIcon.prototype = $extend(org.aswing.plaf.basic.icon.MenuCheckIcon.prototype,{
	__class__: org.aswing.plaf.basic.icon.MenuItemArrowIcon
});
org.aswing.plaf.basic.icon.MenuItemCheckIcon = function() {
	org.aswing.plaf.basic.icon.MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.MenuItemCheckIcon"] = org.aswing.plaf.basic.icon.MenuItemCheckIcon;
org.aswing.plaf.basic.icon.MenuItemCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","MenuItemCheckIcon"];
org.aswing.plaf.basic.icon.MenuItemCheckIcon.__super__ = org.aswing.plaf.basic.icon.MenuCheckIcon;
org.aswing.plaf.basic.icon.MenuItemCheckIcon.prototype = $extend(org.aswing.plaf.basic.icon.MenuCheckIcon.prototype,{
	__class__: org.aswing.plaf.basic.icon.MenuItemCheckIcon
});
org.aswing.plaf.basic.icon.RadioButtonIcon = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.RadioButtonIcon"] = org.aswing.plaf.basic.icon.RadioButtonIcon;
org.aswing.plaf.basic.icon.RadioButtonIcon.__name__ = ["org","aswing","plaf","basic","icon","RadioButtonIcon"];
org.aswing.plaf.basic.icon.RadioButtonIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.RadioButtonIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		var b;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
		var model = b.getModel();
		var drawDot = model.isSelected();
		this.shape.get_graphics().clear();
		var g1 = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var w = this.getIconWidth(c) - 2;
		var h = this.getIconHeight(c) - 4;
		x += 1;
		y += 3;
		var cl = c.getBackground();
		var style;
		var adjuster = c.getStyleTune();
		var isPressing = model.isArmed() || model.isSelected();
		var shadowScale = 1;
		var innerDis = 2;
		var alpha = 1;
		if(isPressing) {
			innerDis = 3;
			adjuster = adjuster.clone();
			adjuster.bGradient *= 0.8;
			adjuster.cGradient *= 0.8;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0,-0.03);
				adjuster = adjuster.sharpen(0.6);
				alpha = 0.5;
			} else if(model.isRollOver()) {
				cl = cl.offsetHLS(0,0.06,0.06);
				adjuster = adjuster.sharpen(0.8);
				innerDis = 4;
			} else if(model.isArmed()) adjuster = adjuster.sharpen(0.8);
		} else if(!b.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			adjuster = adjuster.sharpen(0.6);
			alpha = 0.5;
		} else if(model.isRollOver()) {
			cl = cl.offsetHLS(0,0.06,0.06);
			innerDis = 4;
		} else {
		}
		style = new org.aswing.StyleResult(cl,adjuster);
		g1.fillEllipse(new org.aswing.graphics.SolidBrush(style.bdark),x,y,w,h);
		g1.fillEllipse(new org.aswing.graphics.SolidBrush(style.clight),x + 1,y + 1,w - 2,h - 2);
		if(drawDot) {
			cl = c.getMideground();
			adjuster = c.getStyleTune().get_mide();
			if(model.isArmed()) cl = cl.offsetHLS(0,-0.06,0.03); else if(model.isRollOver()) cl = cl.offsetHLS(0,0.06,0.06); else if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,0,-0.03);
				adjuster = adjuster.sharpen(0.4);
			} else {
			}
			var mcls = new org.aswing.StyleResult(cl,adjuster);
			var matrix = new openfl.geom.Matrix();
			var r = w / 4;
			matrix.createGradientBox(r * 2,r * 2,Math.PI / 5,x + r - r / 2,y + r - r / 2);
			g1.fillCircle(new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.RADIAL,[mcls.clight.getRGB(),mcls.cdark.getRGB()],[mcls.clight.getAlpha(),mcls.cdark.getAlpha()],[0,200],matrix),x + w / 2,y + h / 2,r);
		}
		this.shape.set_alpha(alpha);
		var f = new Array();
		f.push(new openfl.filters.DropShadowFilter(innerDis,45,0,style.shadow * shadowScale,5,5,1,1,true));
		this.shape.set_filters(f);
	}
	,getIconHeight: function(c) {
		return 16;
	}
	,getIconWidth: function(c) {
		return 14;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.icon.RadioButtonIcon
};
org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon = function() {
	this.shape = new openfl.display.Shape();
	org.aswing.plaf.basic.icon.MenuCheckIcon.call(this);
};
$hxClasses["org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon"] = org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon;
org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon.__name__ = ["org","aswing","plaf","basic","icon","RadioButtonMenuItemCheckIcon"];
org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon.__super__ = org.aswing.plaf.basic.icon.MenuCheckIcon;
org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon.prototype = $extend(org.aswing.plaf.basic.icon.MenuCheckIcon.prototype,{
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var menu;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) menu = c; else menu = null;
		if(menu.isSelected()) g.fillCircle(new org.aswing.graphics.SolidBrush(c.getMideground()),x + 4,y + 5,3);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.icon.RadioButtonMenuItemCheckIcon
});
org.aswing.plaf.basic.icon.ScrollBarArrowIcon = function(direction,width,height) {
	this.direction = direction;
	this.width = width;
	this.height = height;
	if(Math.abs(direction % Math.PI) < 0.2) this.verticle = false; else this.verticle = true;
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.ScrollBarArrowIcon"] = org.aswing.plaf.basic.icon.ScrollBarArrowIcon;
org.aswing.plaf.basic.icon.ScrollBarArrowIcon.__name__ = ["org","aswing","plaf","basic","icon","ScrollBarArrowIcon"];
org.aswing.plaf.basic.icon.ScrollBarArrowIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.ScrollBarArrowIcon.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,getIconWidth: function(c) {
		return this.width | 0;
	}
	,getIconHeight: function(c) {
		return this.height | 0;
	}
	,updateIcon: function(c,g,x,y) {
		x = 0;
		y = 0;
		var w = this.width;
		var h = this.height;
		this.shape.get_graphics().clear();
		var bar;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) bar = c; else bar = null;
		var g1 = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var b = new org.aswing.geom.IntRectangle(x,y,w | 0,h | 0);
		var gradientDir = 0;
		if(this.verticle) gradientDir = Math.PI / 2; else gradientDir = 0;
		var tune = c.getStyleTune().get_mide();
		var style;
		var cl = c.getMideground().changeAlpha(1);
		var model = bar.getModel();
		var isPressing = model.isArmed() || model.isSelected();
		if(!bar.isEnabled()) {
			cl = cl.offsetHLS(0,-0.06,-0.03);
			tune = tune.sharpen(0.4);
		} else if(isPressing) tune = tune.sharpen(0.8); else if(model.isRollOver()) cl = cl.offsetHLS(0,0.06,0);
		style = new org.aswing.StyleResult(cl,tune);
		org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g1,b,style,gradientDir);
		org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g1,b,1,style,gradientDir);
		b = b.clone();
		b.grow(-1,-1);
		var innerStyle = new org.aswing.StyleResult(cl,tune);
		innerStyle.bdark = innerStyle.cdark.offsetHLS(0,0.06,0);
		innerStyle.blight = innerStyle.clight.offsetHLS(0,0.06,0);
		org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g1,b,1,innerStyle,gradientDir);
		var light = new org.aswing.graphics.SolidBrush(innerStyle.blight);
		var dark = new org.aswing.graphics.SolidBrush(style.blight);
		var cx = w / 2;
		var cy = h / 2;
		var arrowW = Math.round(w / 2);
		if(this.verticle) {
			cy += 1;
			g1.fillPolygon(light,org.aswing.plaf.basic.BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
			cy -= 1;
			g1.fillPolygon(dark,org.aswing.plaf.basic.BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
		} else {
			cx += 1;
			g1.fillPolygon(light,org.aswing.plaf.basic.BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
			cx -= 1;
			g1.fillPolygon(dark,org.aswing.plaf.basic.BasicGraphicsUtils.getArrowPath(arrowW,this.direction,cx,cy));
		}
	}
	,__class__: org.aswing.plaf.basic.icon.ScrollBarArrowIcon
};
org.aswing.plaf.basic.icon.TitleIcon = function() {
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.icon.TitleIcon"] = org.aswing.plaf.basic.icon.TitleIcon;
org.aswing.plaf.basic.icon.TitleIcon.__name__ = ["org","aswing","plaf","basic","icon","TitleIcon"];
org.aswing.plaf.basic.icon.TitleIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.plaf.basic.icon.TitleIcon.prototype = {
	updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		return;
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var outterRect = c.getUI().getColor("Frame.activeCaptionBorder");
		var innerRect = new org.aswing.ASColor(16777215);
		x = x + 2;
		var width = org.aswing.plaf.basic.icon.TitleIcon.WIDTH;
		var height = org.aswing.plaf.basic.icon.TitleIcon.HEIGHT;
		var w4 = width / 4;
		var h23 = 2 * height / 3;
		var w2 = width / 2;
		var h = height;
		var w = width;
		var points = new Array();
		points.push(new openfl.geom.Point(x,y));
		points.push(new openfl.geom.Point(x + w4,y + h));
		points.push(new openfl.geom.Point(x + w2,y + h23));
		points.push(new openfl.geom.Point(x + w4 * 3,y + h));
		points.push(new openfl.geom.Point(x + w,y));
		points.push(new openfl.geom.Point(x + w2,y + h23));
		g.drawPolygon(new org.aswing.graphics.Pen(outterRect,2),points);
		g.fillPolygon(new org.aswing.graphics.SolidBrush(innerRect),points);
	}
	,getIconHeight: function(c) {
		return 0;
	}
	,getIconWidth: function(c) {
		return 0;
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.plaf.basic.icon.TitleIcon
};
org.aswing.plaf.basic.splitpane = {};
org.aswing.plaf.basic.splitpane.Divider = function(sp) {
	org.aswing.Container.call(this);
	this.sp = sp;
	this.setOpaque(false);
	this.setFocusable(false);
	this.setBackground(sp.getBackground());
	this.leftButton = this.createCollapseLeftButton();
	this.rightButton = this.createCollapseRightButton();
	this.leftButton.setSize(this.leftButton.getPreferredSize());
	this.rightButton.setSize(this.rightButton.getPreferredSize());
	this.icon = new org.aswing.plaf.basic.splitpane.DividerIcon();
	this.append(this.leftButton);
	this.append(this.rightButton);
};
$hxClasses["org.aswing.plaf.basic.splitpane.Divider"] = org.aswing.plaf.basic.splitpane.Divider;
org.aswing.plaf.basic.splitpane.Divider.__name__ = ["org","aswing","plaf","basic","splitpane","Divider"];
org.aswing.plaf.basic.splitpane.Divider.__super__ = org.aswing.Container;
org.aswing.plaf.basic.splitpane.Divider.prototype = $extend(org.aswing.Container.prototype,{
	getOwner: function() {
		return this.sp;
	}
	,layoutButtons: function() {
		if(this.sp.isOneTouchExpandable()) {
			if(this.sp.getOrientation() == 1) {
				this.leftIcon.setArrow(-Math.PI / 2);
				this.rightIcon.setArrow(Math.PI / 2);
				this.leftButton.setLocationXY(4,0);
				this.rightButton.setLocationXY(14,this.getHeight() - this.rightButton.getHeight());
			} else {
				this.leftIcon.setArrow(Math.PI);
				this.rightIcon.setArrow(0);
				this.leftButton.setLocationXY(0,4);
				this.rightButton.setLocationXY(this.getWidth() - this.rightButton.getWidth(),14);
			}
			this.leftButton.setVisible(true);
			this.rightButton.setVisible(true);
			this.leftButton.validate();
			this.rightButton.validate();
			this.leftButton.repaint();
			this.rightButton.repaint();
		} else {
			this.leftButton.setVisible(false);
			this.rightButton.setVisible(false);
		}
	}
	,paint: function(b) {
		org.aswing.Container.prototype.paint.call(this,b);
		var g = new org.aswing.graphics.Graphics2D(this.get_graphics());
		if(this.icon != null) this.icon.updateIcon(this,g,b.x,b.y);
		this.layoutButtons();
	}
	,createCollapseLeftButton: function() {
		this.leftIcon = new org.aswing.plaf.basic.icon.SolidArrowIcon(Math.PI,8,this.sp.getForeground());
		return this.createButton(this.leftIcon);
	}
	,createCollapseRightButton: function() {
		this.rightIcon = new org.aswing.plaf.basic.icon.SolidArrowIcon(0,8,this.sp.getForeground());
		return this.createButton(this.rightIcon);
	}
	,createButton: function(icon) {
		var btn = new org.aswing.JButton();
		btn.setOpaque(false);
		btn.setFocusable(false);
		btn.setBorder(null);
		btn.setMargin(new org.aswing.Insets());
		btn.setIcon(icon);
		return btn;
	}
	,getCollapseLeftButton: function() {
		return this.leftButton;
	}
	,getCollapseRightButton: function() {
		return this.rightButton;
	}
	,__class__: org.aswing.plaf.basic.splitpane.Divider
});
org.aswing.plaf.basic.splitpane.DividerIcon = function() {
};
$hxClasses["org.aswing.plaf.basic.splitpane.DividerIcon"] = org.aswing.plaf.basic.splitpane.DividerIcon;
org.aswing.plaf.basic.splitpane.DividerIcon.__name__ = ["org","aswing","plaf","basic","splitpane","DividerIcon"];
org.aswing.plaf.basic.splitpane.DividerIcon.__interfaces__ = [org.aswing.Icon];
org.aswing.plaf.basic.splitpane.DividerIcon.prototype = {
	updateIcon: function(com,g,x,y) {
		var w = com.getWidth();
		var h = com.getHeight();
		var ch = h / 2;
		var cw = w / 2;
		var divider;
		if(js.Boot.__instanceof(com,org.aswing.plaf.basic.splitpane.Divider)) divider = com; else divider = null;
		var p = new org.aswing.graphics.Pen(divider.getOwner().getForeground(),0);
		if(divider.getOwner().getOrientation() == 1) {
			var hl = Math.min(5,w - 1);
			g.drawLine(p,cw - hl,ch,cw + hl,ch);
			if(ch + 2 < h) g.drawLine(p,cw - hl,ch + 2,cw + hl,ch + 2);
			if(ch - 2 > 0) g.drawLine(p,cw - hl,ch - 2,cw + hl,ch - 2);
		} else {
			var h2 = Math.min(5,h - 1);
			g.drawLine(p,cw,ch - h2,cw,ch + h2);
			if(cw + 2 < h) g.drawLine(p,cw + 2,ch - h2,cw + 2,ch + h2);
			if(cw - 2 > 0) g.drawLine(p,cw - 2,ch - h2,cw - 2,ch + h2);
		}
	}
	,getIconHeight: function(c) {
		return 0;
	}
	,getIconWidth: function(c) {
		return 0;
	}
	,getDisplay: function(c) {
		return null;
	}
	,__class__: org.aswing.plaf.basic.splitpane.DividerIcon
};
org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab = function() {
	this.placement = 0;
};
$hxClasses["org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab"] = org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab;
org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab.__name__ = ["org","aswing","plaf","basic","tabbedpane","BasicTabbedPaneTab"];
org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab.__interfaces__ = [org.aswing.plaf.basic.tabbedpane.Tab];
org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab.prototype = {
	initTab: function(owner) {
		this.owner = owner;
		this.button = this.createHeaderButton();
	}
	,setTabPlacement: function(tp) {
		this.placement = tp;
	}
	,getTabPlacement: function() {
		return this.placement;
	}
	,createHeaderButton: function() {
		var btn = new org.aswing.JButton();
		btn.setBackgroundDecorator(new org.aswing.plaf.basic.tabbedpane.TabBackground(this));
		btn.setTextFilters([]);
		return btn;
	}
	,setTextAndIcon: function(text,icon) {
		this.button.setText(text);
		this.button.setIcon(icon);
	}
	,setFont: function(font) {
		this.button.setFont(font);
	}
	,setForeground: function(color) {
		this.button.setForeground(color);
	}
	,setSelected: function(b) {
		this.button.setSelected(b);
	}
	,setVerticalAlignment: function(alignment) {
		this.button.setVerticalAlignment(alignment);
	}
	,setHorizontalAlignment: function(alignment) {
		this.button.setHorizontalAlignment(alignment);
	}
	,setVerticalTextPosition: function(textPosition) {
		this.button.setVerticalTextPosition(textPosition);
	}
	,setHorizontalTextPosition: function(textPosition) {
		this.button.setHorizontalTextPosition(textPosition);
	}
	,setIconTextGap: function(iconTextGap) {
		this.button.setIconTextGap(iconTextGap);
	}
	,setMargin: function(m) {
		this.button.setMargin(m);
	}
	,getTabComponent: function() {
		return this.button;
	}
	,__class__: org.aswing.plaf.basic.tabbedpane.BasicTabbedPaneTab
};
org.aswing.plaf.basic.tabbedpane.TabBackground = function(tab) {
	this.tab = tab;
	this.shape = new openfl.display.Shape();
};
$hxClasses["org.aswing.plaf.basic.tabbedpane.TabBackground"] = org.aswing.plaf.basic.tabbedpane.TabBackground;
org.aswing.plaf.basic.tabbedpane.TabBackground.__name__ = ["org","aswing","plaf","basic","tabbedpane","TabBackground"];
org.aswing.plaf.basic.tabbedpane.TabBackground.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.GroundDecorator];
org.aswing.plaf.basic.tabbedpane.TabBackground.prototype = {
	getDisplay: function(c) {
		return this.shape;
	}
	,updateDecorator: function(c,g,b) {
		this.shape.get_graphics().clear();
		var btn;
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) btn = c; else btn = null;
		if(btn != null) {
			var model = btn.getModel();
			var isPressing = model.isPressed() || model.isSelected();
			g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
			var cl = c.getMideground();
			var style;
			var adjuster = c.getStyleTune().get_mide().clone();
			if(!c.isEnabled()) adjuster = adjuster.sharpen(0.4); else if(isPressing) cl = cl.offsetHLS(0,0.08,0); else if(model.isRollOver()) cl = cl.offsetHLS(-0.2,0,0.37);
			style = new org.aswing.StyleResult(cl,adjuster);
			if(isPressing) style.cdark = style.cdark.changeAlpha(0);
			var direction = Math.PI / 2;
			var matrixB = b.clone();
			b = b.clone();
			var placement = this.tab.getTabPlacement();
			var highlightBrush = new org.aswing.graphics.SolidBrush(style.clight.offsetHLS(0,0.14,0.1));
			if(placement == 1) {
				direction = Math.PI / 2;
				b.height += style.round * 2 | 0;
				org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.width - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + style.round,b.y + 1,b.width - style.round * 2,1);
			} else if(placement == 3) {
				direction = -Math.PI / 2;
				b.height += style.round * 2 | 0;
				b.y -= style.round * 2 | 0;
				org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.width - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + style.round,b.y + b.height - 2,b.width - style.round * 2,1);
			} else if(placement == 2) {
				direction = 0;
				b.width += style.round * 2 | 0;
				org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.height - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + 1,b.y + style.round,1,b.height - style.round * 2);
			} else {
				direction = Math.PI;
				b.width += style.round * 2 | 0;
				b.x -= style.round * 2 | 0;
				org.aswing.plaf.basic.BasicGraphicsUtils.fillGradientRoundRect(g,b,style,direction,false,matrixB);
				org.aswing.plaf.basic.BasicGraphicsUtils.drawGradientRoundRectLine(g,b,1,style,direction,true,matrixB);
				if(b.height - style.round * 2 > 0) g.fillRectangle(highlightBrush,b.x + b.width - 2,b.y + style.round,1,b.height - style.round * 2);
			}
		}
	}
	,__class__: org.aswing.plaf.basic.tabbedpane.TabBackground
};
org.aswing.plaf.basic.tree = {};
org.aswing.plaf.basic.tree.ExpandControl = function() { };
$hxClasses["org.aswing.plaf.basic.tree.ExpandControl"] = org.aswing.plaf.basic.tree.ExpandControl;
org.aswing.plaf.basic.tree.ExpandControl.__name__ = ["org","aswing","plaf","basic","tree","ExpandControl"];
org.aswing.plaf.basic.tree.ExpandControl.prototype = {
	__class__: org.aswing.plaf.basic.tree.ExpandControl
};
org.aswing.plaf.basic.tree.BasicExpandControl = function() { };
$hxClasses["org.aswing.plaf.basic.tree.BasicExpandControl"] = org.aswing.plaf.basic.tree.BasicExpandControl;
org.aswing.plaf.basic.tree.BasicExpandControl.__name__ = ["org","aswing","plaf","basic","tree","BasicExpandControl"];
org.aswing.plaf.basic.tree.BasicExpandControl.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.plaf.basic.tree.ExpandControl];
org.aswing.plaf.basic.tree.BasicExpandControl.prototype = {
	paintExpandControl: function(c,g,bounds,totalChildIndent,path,row,expanded,leaf) {
		if(leaf) return;
		var w = totalChildIndent;
		var cx = bounds.x - w / 2;
		var cy = bounds.y + bounds.height / 2;
		var r = 4;
		var trig;
		if(expanded != true) {
			cx -= 2;
			trig = [new org.aswing.geom.IntPoint(cx | 0,cy - r | 0),new org.aswing.geom.IntPoint(cx | 0,cy + r | 0),new org.aswing.geom.IntPoint(cx + r | 0,cy | 0)];
		} else {
			cy -= 2;
			trig = [new org.aswing.geom.IntPoint(cx - r | 0,cy | 0),new org.aswing.geom.IntPoint(cx + r | 0,cy | 0),new org.aswing.geom.IntPoint(cx | 0,cy + r | 0)];
		}
		g.fillPolygon(new org.aswing.graphics.SolidBrush(org.aswing.ASColor.BLACK),trig);
	}
	,__class__: org.aswing.plaf.basic.tree.BasicExpandControl
};
org.aswing.resizer = {};
org.aswing.resizer.DefaultResizeBarHandler = function(resizer,barMC,arrowRotation,strategy) {
	this.resizer = resizer;
	this.mc = barMC;
	this.arrowRotation = arrowRotation;
	this.strategy = strategy;
	this.handle();
};
$hxClasses["org.aswing.resizer.DefaultResizeBarHandler"] = org.aswing.resizer.DefaultResizeBarHandler;
org.aswing.resizer.DefaultResizeBarHandler.__name__ = ["org","aswing","resizer","DefaultResizeBarHandler"];
org.aswing.resizer.DefaultResizeBarHandler.createHandler = function(resizer,barMC,arrowRotation,strategy) {
	return new org.aswing.resizer.DefaultResizeBarHandler(resizer,barMC,arrowRotation,strategy);
};
org.aswing.resizer.DefaultResizeBarHandler.prototype = {
	handle: function() {
		this.mc.addEventListener(openfl.events.MouseEvent.ROLL_OVER,$bind(this,this.__onRollOver));
		this.mc.addEventListener(openfl.events.MouseEvent.ROLL_OUT,$bind(this,this.__onRollOut));
		this.mc.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__onPress));
		this.mc.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__onUp));
		this.mc.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.__onRelease));
		this.mc.addEventListener("releaseOutSide",$bind(this,this.__onReleaseOutside));
		this.mc.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.__onDestroy));
	}
	,__onRollOver: function(e) {
		if(!this.resizer.isResizing() && (e == null || !e.buttonDown)) {
			this.resizer.startArrowCursor();
			this.__rotateArrow();
			if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow),false,0,true);
		}
	}
	,__onRollOut: function(e) {
		if(!this.resizer.isResizing() && !e.buttonDown) {
			if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow));
			this.resizer.stopArrowCursor();
		}
	}
	,__onPress: function(e) {
		this.resizer.setResizing(true);
		this.startResize(e);
		if(org.aswing.AsWingManager.getStage() != null) {
			org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow));
			org.aswing.AsWingManager.getStage().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.resizing),false,0,true);
		}
	}
	,__onUp: function(e) {
		this.__onRollOver(null);
	}
	,__onRelease: function(e) {
		this.resizer.setResizing(false);
		this.resizer.stopArrowCursor();
		if(org.aswing.AsWingManager.getStage() != null) org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.resizing));
		this.finishResize();
	}
	,__onReleaseOutside: function(e) {
		this.__onRelease(e);
	}
	,__onDestroy: function(e) {
		if(org.aswing.AsWingManager.getStage() != null) {
			org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.resizing));
			org.aswing.AsWingManager.getStage().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__rotateArrow));
		}
	}
	,__rotateArrow: function(e) {
		this.resizer.setArrowRotation(this.arrowRotation);
	}
	,startResize: function(e) {
		this.resizer.startResize(this.strategy,e);
	}
	,resizing: function(e) {
		this.resizer.resizing(this.strategy,e);
	}
	,finishResize: function() {
		this.resizer.finishResize(this.strategy);
	}
	,__class__: org.aswing.resizer.DefaultResizeBarHandler
};
org.aswing.resizer.Resizer = function() { };
$hxClasses["org.aswing.resizer.Resizer"] = org.aswing.resizer.Resizer;
org.aswing.resizer.Resizer.__name__ = ["org","aswing","resizer","Resizer"];
org.aswing.resizer.Resizer.prototype = {
	__class__: org.aswing.resizer.Resizer
};
org.aswing.resizer.DefaultResizer = function() {
	this.enabled = true;
	this.resizeDirectly = false;
	this.startX = 0;
	this.startY = 0;
	this.startBounds = new org.aswing.geom.IntRectangle();
	this.resizeArrowColor = org.aswing.UIManager.getColor("resizeArrow");
	this.resizeArrowLightColor = org.aswing.UIManager.getColor("resizeArrowLight");
	this.resizeArrowDarkColor = org.aswing.UIManager.getColor("resizeArrowDark");
};
$hxClasses["org.aswing.resizer.DefaultResizer"] = org.aswing.resizer.DefaultResizer;
org.aswing.resizer.DefaultResizer.__name__ = ["org","aswing","resizer","DefaultResizer"];
org.aswing.resizer.DefaultResizer.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.resizer.Resizer];
org.aswing.resizer.DefaultResizer.prototype = {
	setResizeArrowColor: function(c) {
		this.resizeArrowColor = c;
	}
	,setResizeArrowLightColor: function(c) {
		this.resizeArrowLightColor = c;
	}
	,setResizeArrowDarkColor: function(c) {
		this.resizeArrowDarkColor = c;
	}
	,setOwner: function(c) {
		if(this.owner != null) {
			this.owner.removeEventListener("paint",$bind(this,this.locate));
			if(this.resizeMC != null) this.owner.removeChild(this.resizeMC);
			this.hideBoundsMC();
		}
		this.owner = c;
		if(this.owner != null) {
			this.owner.addEventListener("paint",$bind(this,this.locate));
			if(this.resizeMC == null) this.createResizeMCs();
			this.owner.addChildAt(this.resizeMC,this.owner.__children.length);
		}
		this.locate();
	}
	,setResizeDirectly: function(r) {
		this.resizeDirectly = r;
	}
	,isResizeDirectly: function() {
		return this.resizeDirectly;
	}
	,setArrowRotation: function(r) {
		this.resizeArrowCursor.set_rotation(r);
	}
	,startArrowCursor: function() {
		if(this.resizeMC != null && this.resizeMC.get_stage() != null) org.aswing.CursorManager.getManager(this.resizeMC.get_stage()).showCustomCursor(this.resizeArrowCursor);
	}
	,stopArrowCursor: function() {
		if(this.resizeMC != null && this.resizeMC.get_stage() != null) org.aswing.CursorManager.getManager(this.resizeMC.get_stage()).hideCustomCursor(this.resizeArrowCursor);
	}
	,setResizing: function(b) {
		this.resizingNow = b;
	}
	,isResizing: function() {
		return this.resizingNow;
	}
	,startResize: function(strategy,e) {
		if(this.resizeDirectly != true) this.representRect(this.owner.getComBounds());
		this.startX = e.stageX;
		this.startY = e.stageY;
		this.startBounds = this.owner.getComBounds();
	}
	,resizing: function(strategy,e) {
		var bounds = strategy.getBounds(this.startBounds,this.owner.getMinimumSize(),this.owner.getMaximumSize(),e.stageX - this.startX | 0,e.stageY - this.startY | 0);
		if(this.resizeDirectly) {
			this.owner.setBounds(bounds);
			this.owner.revalidate();
			e.updateAfterEvent();
		} else this.representRect(bounds);
	}
	,finishResize: function(strategy) {
		if(this.resizeDirectly != true) {
			this.owner.setComBounds(this.lastRepresentedBounds);
			this.hideBoundsMC();
			this.owner.revalidate();
		}
	}
	,hideBoundsMC: function() {
		var par = this.owner.parent;
		if(this.boundsShape != null && par != null && par.contains(this.boundsShape)) par.removeChild(this.boundsShape);
	}
	,representRect: function(bounds) {
		if(this.resizeDirectly != true) {
			var par = this.owner.parent;
			if(!par.contains(this.boundsShape)) par.addChild(this.boundsShape);
			org.aswing.util.DepthManager.bringToTop(this.boundsShape);
			var margin = this.owner.getResizerMargin();
			var db = bounds.clone();
			db.x += margin.left;
			db.y += margin.top;
			db.width -= margin.getMarginWidth();
			db.height -= margin.getMarginHeight();
			var x = db.x;
			var y = db.y;
			var w = db.width;
			var h = db.height;
			var g = new org.aswing.graphics.Graphics2D(this.boundsShape.get_graphics());
			this.boundsShape.get_graphics().clear();
			g.drawRectangle(new org.aswing.graphics.Pen(this.resizeArrowLightColor),x - 1,y - 1,w + 2,h + 2);
			g.drawRectangle(new org.aswing.graphics.Pen(this.resizeArrowColor),x,y,w,h);
			g.drawRectangle(new org.aswing.graphics.Pen(this.resizeArrowDarkColor),x + 1,y + 1,w - 2,h - 2);
			this.lastRepresentedBounds = bounds;
		}
	}
	,createResizeMCs: function() {
		var r = org.aswing.resizer.DefaultResizer.RESIZE_MC_WIDTH;
		this.resizeMC = new openfl.display.Sprite();
		this.resizeMC.name = "resizer";
		this.resizeArrowCursor = org.aswing.Cursor.createCursor("System.hResizeCursor");
		this.resizeArrowCursor.name = "resizeCursor";
		this.boundsShape = new openfl.display.Shape();
		this.boundsShape.name = "bounds";
		this.topResizeMC = new org.aswing.AWSprite();
		this.leftResizeMC = new org.aswing.AWSprite();
		this.rightResizeMC = new org.aswing.AWSprite();
		this.bottomResizeMC = new org.aswing.AWSprite();
		this.topLeftResizeMC = new org.aswing.AWSprite();
		this.topRightResizeMC = new org.aswing.AWSprite();
		this.bottomLeftResizeMC = new org.aswing.AWSprite();
		this.bottomRightResizeMC = new org.aswing.AWSprite();
		this.resizeMC.addChild(this.topResizeMC);
		this.resizeMC.addChild(this.leftResizeMC);
		this.resizeMC.addChild(this.rightResizeMC);
		this.resizeMC.addChild(this.bottomResizeMC);
		this.resizeMC.addChild(this.topLeftResizeMC);
		this.resizeMC.addChild(this.topRightResizeMC);
		this.resizeMC.addChild(this.bottomLeftResizeMC);
		this.resizeMC.addChild(this.bottomRightResizeMC);
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.topResizeMC,90,this.createResizeStrategy(0,-1));
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.leftResizeMC,0,this.createResizeStrategy(-1,0));
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.rightResizeMC,0,this.createResizeStrategy(1,0));
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.bottomResizeMC,90,this.createResizeStrategy(0,1));
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.topLeftResizeMC,45,this.createResizeStrategy(-1,-1));
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.topRightResizeMC,-45,this.createResizeStrategy(1,-1));
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.bottomLeftResizeMC,-45,this.createResizeStrategy(-1,1));
		org.aswing.resizer.DefaultResizeBarHandler.createHandler(this,this.bottomRightResizeMC,45,this.createResizeStrategy(1,1));
		var brush = new org.aswing.graphics.SolidBrush(new org.aswing.ASColor(0,0));
		var gdi = new org.aswing.graphics.Graphics2D(this.topResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,0,r,r);
		gdi = new org.aswing.graphics.Graphics2D(this.leftResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,0,r,r);
		gdi = new org.aswing.graphics.Graphics2D(this.rightResizeMC.get_graphics());
		gdi.fillRectangle(brush,-r,0,r,r);
		gdi = new org.aswing.graphics.Graphics2D(this.bottomResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,-r,r,r);
		gdi = new org.aswing.graphics.Graphics2D(this.topLeftResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,0,r * 2,r);
		gdi.fillRectangle(brush,0,0,r,r * 2);
		gdi = new org.aswing.graphics.Graphics2D(this.topRightResizeMC.get_graphics());
		gdi.fillRectangle(brush,-r * 2,0,r * 2,r);
		gdi.fillRectangle(brush,-r,0,r,r * 2);
		gdi = new org.aswing.graphics.Graphics2D(this.bottomLeftResizeMC.get_graphics());
		gdi.fillRectangle(brush,0,-r,r * 2,r);
		gdi.fillRectangle(brush,0,-r * 2,r,r * 2);
		gdi = new org.aswing.graphics.Graphics2D(this.bottomRightResizeMC.get_graphics());
		gdi.fillRectangle(brush,-r * 2,-r,r * 2,r);
		gdi.fillRectangle(brush,-r,-r * 2,r,r * 2);
		this.resizeMC.set_visible(this.enabled);
	}
	,createResizeStrategy: function(wSign,hSign) {
		return new org.aswing.resizer.ResizeStrategyImp(wSign,hSign);
	}
	,setEnabled: function(e) {
		this.enabled = e;
		this.resizeMC.set_visible(this.enabled);
	}
	,isEnabled: function() {
		return this.enabled;
	}
	,locate: function(e) {
		if(this.owner == null) return;
		if(this.owner.getChildIndex(this.resizeMC) < this.owner.getHighestIndexUnderForeground() - 1) this.owner.bringToTop(this.resizeMC);
		var margin = this.owner.getResizerMargin();
		var x = margin.left;
		var y = margin.top;
		var w = this.owner.getWidth() - margin.right - margin.left;
		var h = this.owner.getHeight() - margin.bottom - margin.top;
		var r = org.aswing.resizer.DefaultResizer.RESIZE_MC_WIDTH;
		this.topResizeMC.set_width(Math.max(0,w - r * 2));
		this.topResizeMC.set_x(r);
		this.topResizeMC.set_y(y);
		this.leftResizeMC.set_height(Math.max(0,h - r * 2));
		this.leftResizeMC.set_x(x);
		this.leftResizeMC.set_y(r);
		this.rightResizeMC.set_height(Math.max(0,h - r * 2));
		this.rightResizeMC.set_x(x + w);
		this.rightResizeMC.set_y(r);
		this.bottomResizeMC.set_width(Math.max(0,w - r * 2));
		this.bottomResizeMC.set_x(r);
		this.bottomResizeMC.set_y(y + h);
		this.topLeftResizeMC.set_x(x);
		this.topLeftResizeMC.set_y(y);
		this.topRightResizeMC.set_x(x + w);
		this.topRightResizeMC.set_y(y);
		this.bottomLeftResizeMC.set_x(x);
		this.bottomLeftResizeMC.set_y(y + h);
		this.bottomRightResizeMC.set_x(x + w);
		this.bottomRightResizeMC.set_y(y + h);
	}
	,__class__: org.aswing.resizer.DefaultResizer
};
org.aswing.resizer.ResizeStrategy = function() { };
$hxClasses["org.aswing.resizer.ResizeStrategy"] = org.aswing.resizer.ResizeStrategy;
org.aswing.resizer.ResizeStrategy.__name__ = ["org","aswing","resizer","ResizeStrategy"];
org.aswing.resizer.ResizeStrategy.prototype = {
	__class__: org.aswing.resizer.ResizeStrategy
};
org.aswing.resizer.ResizeStrategyImp = function(wSign,hSign) {
	this.wSign = wSign;
	this.hSign = hSign;
};
$hxClasses["org.aswing.resizer.ResizeStrategyImp"] = org.aswing.resizer.ResizeStrategyImp;
org.aswing.resizer.ResizeStrategyImp.__name__ = ["org","aswing","resizer","ResizeStrategyImp"];
org.aswing.resizer.ResizeStrategyImp.__interfaces__ = [org.aswing.resizer.ResizeStrategy];
org.aswing.resizer.ResizeStrategyImp.prototype = {
	getBounds: function(origBounds,minSize,maxSize,movedX,movedY) {
		var currentBounds = origBounds.clone();
		if(minSize == null) minSize = new org.aswing.geom.IntDimension(0,0);
		if(maxSize == null) maxSize = org.aswing.geom.IntDimension.createBigDimension();
		var newX;
		var newY;
		var newW;
		var newH;
		if(this.wSign == 0) newW = currentBounds.width; else {
			newW = currentBounds.width + this.wSign * movedX;
			newW = Math.min(maxSize.width,Math.max(minSize.width,newW));
		}
		if(this.wSign < 0) newX = currentBounds.x + (currentBounds.width - newW); else newX = currentBounds.x;
		if(this.hSign == 0) newH = currentBounds.height; else {
			newH = currentBounds.height + this.hSign * movedY;
			newH = Math.min(maxSize.height,Math.max(minSize.height,newH));
		}
		if(this.hSign < 0) newY = currentBounds.y + (currentBounds.height - newH); else newY = currentBounds.y;
		newX = Math.round(newX);
		newY = Math.round(newY);
		newW = Math.round(newW);
		newH = Math.round(newH);
		return new org.aswing.geom.IntRectangle(newX | 0,newY | 0,newW | 0,newH | 0);
	}
	,__class__: org.aswing.resizer.ResizeStrategyImp
};
org.aswing.resizer.ResizerController = function(comp,resizer) {
	if(comp == null) throw new org.aswing.error.Error("illegal component when insert to ResizerContainer"); else this._registerComponent(comp,resizer);
};
$hxClasses["org.aswing.resizer.ResizerController"] = org.aswing.resizer.ResizerController;
org.aswing.resizer.ResizerController.__name__ = ["org","aswing","resizer","ResizerController"];
org.aswing.resizer.ResizerController.setDefaultResizerClass = function(cl) {
	org.aswing.resizer.ResizerController.defaultResizerClass = cl;
};
org.aswing.resizer.ResizerController.getDefaultResizerClass = function() {
	return org.aswing.resizer.ResizerController.defaultResizerClass;
};
org.aswing.resizer.ResizerController.create = function(comp,resizer) {
	return new org.aswing.resizer.ResizerController(comp,resizer);
};
org.aswing.resizer.ResizerController.prototype = {
	getComponent: function() {
		return this._component;
	}
	,isResizable: function() {
		return this._resizable;
	}
	,setResizable: function(b) {
		if(this._resizable != b) {
			this._resizable = b;
			this._resizer.setEnabled(this.isResizable());
		}
	}
	,getResizer: function() {
		return this._resizer;
	}
	,setResizer: function(r) {
		if(r != this._resizer) {
			this._destroyResizer();
			this._resizer = r;
			this._initResizer();
		}
	}
	,isResizeDirectly: function() {
		return this._resizableDirectly;
	}
	,setResizeDirectly: function(b) {
		this._resizableDirectly = b;
		this._resizer.setResizeDirectly(b);
	}
	,_registerComponent: function(comp,resizer) {
		this._component = comp;
		this._resizable = true;
		this._resizableDirectly = false;
		if(resizer == null) {
			if(org.aswing.resizer.ResizerController.getDefaultResizerClass() == null) org.aswing.resizer.ResizerController.setDefaultResizerClass(org.aswing.resizer.DefaultResizer);
			var cl = org.aswing.resizer.ResizerController.getDefaultResizerClass();
			resizer = Type.createInstance(cl,[]);
			if(resizer == null) throw new org.aswing.error.Error("The defaultResizerClass is set wrong!!");
		}
		this.setResizer(resizer);
	}
	,_initResizer: function() {
		this._resizer.setOwner(this.getComponent());
		this._resizer.setEnabled(this.isResizable());
		this._resizer.setResizeDirectly(this.isResizeDirectly());
	}
	,_destroyResizer: function() {
		if(this._resizer != null) {
			this._resizer.setOwner(null);
			this._resizer = null;
		}
	}
	,destroy: function() {
		this._destroyResizer();
		this._component = null;
	}
	,__class__: org.aswing.resizer.ResizerController
};
org.aswing.table.TableModel = function() { };
$hxClasses["org.aswing.table.TableModel"] = org.aswing.table.TableModel;
org.aswing.table.TableModel.__name__ = ["org","aswing","table","TableModel"];
org.aswing.table.TableModel.prototype = {
	__class__: org.aswing.table.TableModel
};
org.aswing.table.AbstractTableModel = function() {
	this.listenerList = new Array();
	this.columnClasses = new Array();
};
$hxClasses["org.aswing.table.AbstractTableModel"] = org.aswing.table.AbstractTableModel;
org.aswing.table.AbstractTableModel.__name__ = ["org","aswing","table","AbstractTableModel"];
org.aswing.table.AbstractTableModel.__interfaces__ = [org.aswing.table.TableModel];
org.aswing.table.AbstractTableModel.prototype = {
	getRowCount: function() {
		throw new org.aswing.error.ImpMissError();
		return -1;
	}
	,getColumnCount: function() {
		throw new org.aswing.error.ImpMissError();
		return -1;
	}
	,getValueAt: function(rowIndex,columnIndex) {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,getColumnName: function(column) {
		return String.fromCharCode(32 + column % 26);
	}
	,findColumn: function(columnName) {
		var _g1 = 0;
		var _g = this.getColumnCount();
		while(_g1 < _g) {
			var i = _g1++;
			if(columnName == this.getColumnName(i)) return i;
		}
		return -1;
	}
	,getColumnClass: function(columnIndex) {
		if(this.columnClasses[columnIndex] == null) return "Object"; else return this.columnClasses[columnIndex];
	}
	,setColumnClass: function(columnIndex,className) {
		this.columnClasses[columnIndex] = className;
	}
	,isCellEditable: function(rowIndex,columnIndex) {
		return false;
	}
	,setValueAt: function(aValue,rowIndex,columnIndex) {
	}
	,addTableModelListener: function(l) {
		this.listenerList.push(l);
	}
	,removeTableModelListener: function(l) {
		org.aswing.util.ArrayUtils.removeFromArray(this.listenerList,l);
	}
	,getTableModelListeners: function() {
		return this.listenerList.slice();
	}
	,fireTableDataChanged: function() {
		this.fireTableChanged(new org.aswing.event.TableModelEvent(this));
	}
	,fireTableStructureChanged: function() {
		this.fireTableChanged(new org.aswing.event.TableModelEvent(this,-1));
	}
	,fireTableRowsInserted: function(firstRow,lastRow) {
		this.fireTableChanged(new org.aswing.event.TableModelEvent(this,firstRow,lastRow,-1,"insert"));
	}
	,fireTableRowsUpdated: function(firstRow,lastRow) {
		this.fireTableChanged(new org.aswing.event.TableModelEvent(this,firstRow,lastRow,-1,"update"));
	}
	,fireTableRowsDeleted: function(firstRow,lastRow) {
		this.fireTableChanged(new org.aswing.event.TableModelEvent(this,firstRow,lastRow,-1,"delete"));
	}
	,fireTableCellUpdated: function(row,column) {
		this.fireTableChanged(new org.aswing.event.TableModelEvent(this,row,row,column));
	}
	,fireTableChanged: function(e) {
		var _g1 = 0;
		var _g = this.listenerList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](this.listenerList[i],org.aswing.event.TableModelListener);
			lis.tableChanged(e);
		}
	}
	,toString: function() {
		return "AbstractTableModel[]";
	}
	,__class__: org.aswing.table.AbstractTableModel
};
org.aswing.table.TableColumnModel = function() { };
$hxClasses["org.aswing.table.TableColumnModel"] = org.aswing.table.TableColumnModel;
org.aswing.table.TableColumnModel.__name__ = ["org","aswing","table","TableColumnModel"];
org.aswing.table.TableColumnModel.prototype = {
	__class__: org.aswing.table.TableColumnModel
};
org.aswing.table.DefaultTableColumnModel = function() {
	this.tableColumns = new Array();
	this.listenerList = new Array();
	this.setSelectionModel(this.createSelectionModel());
	this.setColumnMargin(1);
	this.invalidateWidthCache();
	this.setColumnSelectionAllowed(false);
};
$hxClasses["org.aswing.table.DefaultTableColumnModel"] = org.aswing.table.DefaultTableColumnModel;
org.aswing.table.DefaultTableColumnModel.__name__ = ["org","aswing","table","DefaultTableColumnModel"];
org.aswing.table.DefaultTableColumnModel.__interfaces__ = [org.aswing.table.TableColumnModel];
org.aswing.table.DefaultTableColumnModel.prototype = {
	addColumn: function(aColumn) {
		if(aColumn == null) {
			console.log("Adding null column ignored");
			return;
		}
		this.tableColumns.push(aColumn);
		aColumn.addPropertyChangeListener($bind(this,this.__propertyChanged));
		this.invalidateWidthCache();
		this.checkLeadAnchor();
		this.fireColumnAdded(new org.aswing.table.TableColumnModelEvent(this,0,this.getColumnCount() - 1));
	}
	,removeColumn: function(column) {
		var columnIndex = org.aswing.util.ArrayUtils.indexInArray(this.tableColumns,column);
		if(columnIndex != -1) {
			if(this.selectionModel != null) this.selectionModel.removeIndexInterval(columnIndex,columnIndex);
			this.checkLeadAnchor();
			column.removePropertyChangeListener($bind(this,this.__propertyChanged));
			this.tableColumns.splice(columnIndex,1);
			this.invalidateWidthCache();
			this.fireColumnRemoved(new org.aswing.table.TableColumnModelEvent(this,columnIndex,0));
		}
	}
	,moveColumn: function(columnIndex,newIndex) {
		if(columnIndex < 0 || columnIndex >= this.getColumnCount() || newIndex < 0 || newIndex >= this.getColumnCount()) {
			console.log("Error : moveColumn() - Index out of range");
			throw new org.aswing.error.Error("moveColumn() - Index out of range");
			return;
		}
		var aColumn;
		if(columnIndex == newIndex) {
			this.fireColumnMoved(new org.aswing.table.TableColumnModelEvent(this,columnIndex,newIndex));
			return;
		}
		aColumn = org.aswing.AsWingUtils["as"](this.tableColumns[columnIndex],org.aswing.table.TableColumn);
		this.tableColumns.splice(columnIndex,1);
		var selected = this.selectionModel.isSelectedIndex(columnIndex);
		this.selectionModel.removeIndexInterval(columnIndex,columnIndex);
		this.tableColumns.splice(newIndex,0,aColumn);
		this.selectionModel.insertIndexInterval(newIndex,1,true);
		if(selected) this.selectionModel.addSelectionInterval(newIndex,newIndex); else this.selectionModel.removeSelectionInterval(newIndex,newIndex);
		this.fireColumnMoved(new org.aswing.table.TableColumnModelEvent(this,columnIndex,newIndex));
	}
	,setColumnMargin: function(newMargin) {
		if(newMargin != this.columnMargin) {
			this.columnMargin = newMargin;
			this.fireColumnMarginChanged();
		}
	}
	,getColumnCount: function() {
		return this.tableColumns.length;
	}
	,getColumns: function() {
		return this.tableColumns.slice();
	}
	,getColumnIndex: function(identifier) {
		if(identifier == null) {
			console.log("Error : Identifier is null");
			throw new org.aswing.error.Error("Identifier is null");
		}
		var enumeration = this.getColumns();
		var aColumn;
		var index = 0;
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			aColumn = org.aswing.AsWingUtils["as"](enumeration[i],org.aswing.table.TableColumn);
			if(identifier == aColumn.getIdentifier()) return index;
			index++;
		}
		console.log("Error : Identifier is null");
		throw new org.aswing.error.Error("Identifier not found");
	}
	,getColumn: function(columnIndex) {
		return org.aswing.AsWingUtils["as"](this.tableColumns[columnIndex],org.aswing.table.TableColumn);
	}
	,getColumnMargin: function() {
		return this.columnMargin;
	}
	,getColumnIndexAtX: function(x) {
		if(x < 0) return -1;
		var cc = this.getColumnCount();
		var _g = 0;
		while(_g < cc) {
			var column = _g++;
			x = x - this.getColumn(column).getWidth();
			if(x < 0) return column;
		}
		return -1;
	}
	,getTotalColumnWidth: function() {
		if(this.totalColumnWidth == -1) this.recalcWidthCache();
		return this.totalColumnWidth;
	}
	,setSelectionModel: function(newModel) {
		if(newModel == null) {
			console.log("Setting null ListSelectionModel ignored");
			return;
		}
		var oldModel = this.selectionModel;
		if(newModel != oldModel) {
			if(oldModel != null) oldModel.removeListSelectionListener($bind(this,this.__selectionChanged));
			this.selectionModel = newModel;
			newModel.addListSelectionListener($bind(this,this.__selectionChanged));
			this.checkLeadAnchor();
		}
	}
	,getSelectionModel: function() {
		return this.selectionModel;
	}
	,checkLeadAnchor: function() {
		var lead = this.selectionModel.getLeadSelectionIndex();
		var count = this.tableColumns.length;
		if(count == 0) {
			if(lead != -1) {
				this.selectionModel.setAnchorSelectionIndex(-1);
				this.selectionModel.setLeadSelectionIndex(-1);
			}
		} else if(lead == -1) {
			if(this.selectionModel.isSelectedIndex(0)) this.selectionModel.addSelectionInterval(0,0); else this.selectionModel.removeSelectionInterval(0,0);
		}
	}
	,setColumnSelectionAllowed: function(flag) {
		this.columnSelectionAllowed = flag;
	}
	,getColumnSelectionAllowed: function() {
		return this.columnSelectionAllowed;
	}
	,getSelectedColumns: function() {
		if(this.selectionModel != null) {
			var iMin = this.selectionModel.getMinSelectionIndex();
			var iMax = this.selectionModel.getMaxSelectionIndex();
			if(iMin == -1 || iMax == -1) return new Array();
			var rv = new Array();
			var _g1 = iMin;
			var _g = iMax + 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.selectionModel.isSelectedIndex(i)) rv.push(i);
			}
			return rv;
		}
		return new Array();
	}
	,getSelectedColumnCount: function() {
		if(this.selectionModel != null) {
			var iMin = this.selectionModel.getMinSelectionIndex();
			var iMax = this.selectionModel.getMaxSelectionIndex();
			var count = 0;
			var _g1 = iMin;
			var _g = iMax + 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.selectionModel.isSelectedIndex(i)) count++;
			}
			return count;
		}
		return 0;
	}
	,addColumnModelListener: function(x) {
		this.listenerList.push(x);
	}
	,removeColumnModelListener: function(x) {
		org.aswing.util.ArrayUtils.removeFromArray(this.listenerList,x);
	}
	,getColumnModelListeners: function() {
		return this.listenerList.slice();
	}
	,fireColumnAdded: function(e) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.table.TableColumnModelListener);
			lis.columnAdded(e);
		}
	}
	,fireColumnRemoved: function(e) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.table.TableColumnModelListener);
			lis.columnRemoved(e);
		}
	}
	,fireColumnMoved: function(e) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.table.TableColumnModelListener);
			lis.columnMoved(e);
		}
	}
	,fireColumnSelectionChanged: function(firstIndex,lastIndex,programmatic) {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.table.TableColumnModelListener);
			lis.columnSelectionChanged(this,firstIndex,lastIndex,programmatic);
		}
	}
	,fireColumnMarginChanged: function() {
		var listeners = this.listenerList;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.table.TableColumnModelListener);
			lis.columnMarginChanged(this);
		}
	}
	,getListeners: function() {
		return this.listenerList.slice();
	}
	,__propertyChanged: function(e) {
		if(e.getPropertyName() == "width" || e.getPropertyName() == "preferredWidth") {
			this.invalidateWidthCache();
			this.fireColumnMarginChanged();
		}
	}
	,__selectionChanged: function(e) {
		this.fireColumnSelectionChanged(e.getFirstIndex(),e.getLastIndex(),e.isProgrammatic());
	}
	,createSelectionModel: function() {
		return new org.aswing.DefaultListSelectionModel();
	}
	,recalcWidthCache: function() {
		var enumeration = this.tableColumns;
		this.totalColumnWidth = 0;
		var _g1 = 0;
		var _g = enumeration.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = enumeration[i];
			this.totalColumnWidth += c.getWidth();
		}
	}
	,invalidateWidthCache: function() {
		this.totalColumnWidth = -1;
	}
	,toString: function() {
		return "DefaultTableColumnModel[]";
	}
	,__class__: org.aswing.table.DefaultTableColumnModel
};
org.aswing.table.DefaultTableModel = function() {
	org.aswing.table.AbstractTableModel.call(this);
	this.columnNames = new Array();
	this.columnsEditable = new Array();
};
$hxClasses["org.aswing.table.DefaultTableModel"] = org.aswing.table.DefaultTableModel;
org.aswing.table.DefaultTableModel.__name__ = ["org","aswing","table","DefaultTableModel"];
org.aswing.table.DefaultTableModel.nonNullArray = function(v) {
	if(v != null) return v; else return new Array();
};
org.aswing.table.DefaultTableModel.gcd = function(i,j) {
	if(j == 0) return i; else return org.aswing.table.DefaultTableModel.gcd(j,i % j);
};
org.aswing.table.DefaultTableModel.rotate = function(v,a,b,shift) {
	var size = b - a;
	var r = size - shift;
	var g = org.aswing.table.DefaultTableModel.gcd(size,r);
	var _g = 0;
	while(_g < g) {
		var i = _g++;
		var _to = i;
		var tmp = v[a + _to];
		var from = (_to + r) % size;
		while(from != i) {
			v[a + _to] = v[a + from];
			_to = from;
			from = (_to + r) % size;
		}
		v[a + _to] = tmp;
	}
};
org.aswing.table.DefaultTableModel.__super__ = org.aswing.table.AbstractTableModel;
org.aswing.table.DefaultTableModel.prototype = $extend(org.aswing.table.AbstractTableModel.prototype,{
	initWithRowcountColumncount: function(rowCount,columnCount) {
		return this.initWithNamesRowcount(new Array(),rowCount);
	}
	,initWithNamesRowcount: function(columnNames,rowCount) {
		this.setDataNames(new Array(),columnNames);
		return this;
	}
	,initWithDataNames: function(data,columnNames) {
		this.setDataNames(data,columnNames);
		return this;
	}
	,getData: function() {
		return this.dataArray;
	}
	,setData: function(dataArray) {
		this.setDataNames(dataArray,this.columnNames);
	}
	,setDataNames: function(dataArray,columnNames) {
		if(dataArray != null) this.dataArray = dataArray; else this.dataArray = new Array();
		this.columnNames = org.aswing.table.DefaultTableModel.nonNullArray(columnNames);
		this.justifyRows(0,this.getRowCount());
		this.fireTableStructureChanged();
	}
	,newDataAvailable: function(event) {
		this.fireTableChanged(event);
	}
	,justifyRows: function(from,_to) {
		org.aswing.util.ArrayUtils.setSize(this.dataArray,this.getRowCount());
		var _g = from;
		while(_g < _to) {
			var i = _g++;
			if(this.dataArray[i] == null) this.dataArray[i] = new Array();
		}
	}
	,newRowsAdded: function(e) {
		this.justifyRows(e.getFirstRow(),e.getLastRow() + 1);
		this.fireTableChanged(e);
	}
	,rowsRemoved: function(e) {
		this.fireTableChanged(e);
	}
	,setNumRows: function(rowCount) {
		var old = this.getRowCount();
		if(old == rowCount) return;
		org.aswing.util.ArrayUtils.setSize(this.dataArray,rowCount);
		if(rowCount <= old) this.fireTableRowsDeleted(rowCount,old - 1); else {
			this.justifyRows(old,rowCount);
			this.fireTableRowsInserted(old,rowCount - 1);
		}
	}
	,setRowCount: function(rowCount) {
		this.setNumRows(rowCount);
	}
	,addRow: function(rowData) {
		this.insertRow(this.getRowCount(),rowData);
	}
	,insertRow: function(row,rowData) {
		this.dataArray.splice(row,0,rowData);
		this.justifyRows(row,row + 1);
		this.fireTableRowsInserted(row,row);
	}
	,moveRow: function(start,end,_to) {
		var shift = _to - start;
		var first;
		var last;
		if(shift < 0) {
			first = _to;
			last = end;
		} else {
			first = start;
			last = _to + end - start;
		}
		org.aswing.table.DefaultTableModel.rotate(this.dataArray,first,last + 1,shift);
		this.fireTableRowsUpdated(first,last);
	}
	,removeRow: function(row) {
		if(row >= 0 && row < this.getRowCount()) {
			this.dataArray.splice(row,1);
			this.fireTableRowsDeleted(row,row);
		}
	}
	,clearRows: function() {
		var length = this.dataArray.length;
		if(length > 0) {
			this.dataArray.splice(0,length);
			this.fireTableRowsDeleted(0,length - 1);
		}
	}
	,setColumnNames: function(columnNames) {
		this.setDataNames(this.dataArray,columnNames);
	}
	,setColumnCount: function(columnCount) {
		org.aswing.util.ArrayUtils.setSize(this.columnNames,columnCount);
		this.justifyRows(0,this.getRowCount());
		this.fireTableStructureChanged();
	}
	,addColumn: function(columnName,columnData) {
		this.columnNames.push(columnName);
		if(columnData != null) {
			var columnSize = columnData.length;
			if(columnSize > this.getRowCount()) org.aswing.util.ArrayUtils.setSize(this.dataArray,columnSize);
			this.justifyRows(0,this.getRowCount());
			var newColumn = this.getColumnCount() - 1;
			var _g = 0;
			while(_g < columnSize) {
				var i = _g++;
				var row = this.dataArray[i];
				row[newColumn] = columnData[i];
			}
		} else this.justifyRows(0,this.getRowCount());
		this.fireTableStructureChanged();
	}
	,getRowCount: function() {
		if(this.dataArray != null) return this.dataArray.length; else return 0;
	}
	,getColumnCount: function() {
		return this.columnNames.length;
	}
	,getColumnName: function(column) {
		var id = null;
		if(column < this.columnNames.length) id = this.columnNames[column];
		if(id == null) return org.aswing.table.AbstractTableModel.prototype.getColumnName.call(this,column); else return id.toString();
	}
	,isCellEditable: function(row,column) {
		if(this.columnsEditable[column] == null) return true; else return this.columnsEditable[column] == true;
	}
	,isColumnEditable: function(column) {
		return this.isCellEditable(0,column);
	}
	,setColumnEditable: function(column,editable) {
		this.columnsEditable[column] = editable;
	}
	,setAllCellEditable: function(editable) {
		var _g1 = 0;
		var _g = this.getColumnCount();
		while(_g1 < _g) {
			var i = _g1++;
			this.columnsEditable[i] = editable;
		}
	}
	,getValueAt: function(row,column) {
		return this.dataArray[row][column];
	}
	,setValueAt: function(aValue,row,column) {
		this.dataArray[row][column] = aValue;
		this.fireTableCellUpdated(row,column);
	}
	,toString: function() {
		return "DefaultTableModel[dataArray:" + Std.string(this.dataArray) + ",\n names:" + Std.string(this.columnNames) + "]";
	}
	,__class__: org.aswing.table.DefaultTableModel
});
org.aswing.table.DefaultTextHeaderCell = function() {
	org.aswing.table.DefaultTextCell.call(this);
	org.aswing.table.DefaultTextCell.prototype.setHorizontalAlignment.call(this,0);
	org.aswing.table.DefaultTextCell.prototype.setBorder.call(this,org.aswing.UIManager.getBorder("TableHeader.cellBorder"));
	org.aswing.table.DefaultTextCell.prototype.setBackgroundDecorator.call(this,org.aswing.UIManager.getGroundDecorator("TableHeader.cellBackground"));
	org.aswing.table.DefaultTextCell.prototype.setOpaque.call(this,false);
	var f = new Array();
	f.push(new openfl.filters.DropShadowFilter(1,45,16777215,0.2,1,1,1,1));
	org.aswing.table.DefaultTextCell.prototype.setTextFilters.call(this,f);
};
$hxClasses["org.aswing.table.DefaultTextHeaderCell"] = org.aswing.table.DefaultTextHeaderCell;
org.aswing.table.DefaultTextHeaderCell.__name__ = ["org","aswing","table","DefaultTextHeaderCell"];
org.aswing.table.DefaultTextHeaderCell.__super__ = org.aswing.table.DefaultTextCell;
org.aswing.table.DefaultTextHeaderCell.prototype = $extend(org.aswing.table.DefaultTextCell.prototype,{
	setTableCellStatus: function(table,isSelected,row,column) {
		var header = table.getTableHeader();
		if(header != null) {
			org.aswing.table.DefaultTextCell.prototype.setBackground.call(this,header.getBackground());
			org.aswing.table.DefaultTextCell.prototype.setForeground.call(this,header.getForeground());
			org.aswing.table.DefaultTextCell.prototype.setFont.call(this,header.getFont());
		}
	}
	,__class__: org.aswing.table.DefaultTextHeaderCell
});
org.aswing.table.TableCellFactory = function() { };
$hxClasses["org.aswing.table.TableCellFactory"] = org.aswing.table.TableCellFactory;
org.aswing.table.TableCellFactory.__name__ = ["org","aswing","table","TableCellFactory"];
org.aswing.table.TableCellFactory.prototype = {
	__class__: org.aswing.table.TableCellFactory
};
org.aswing.table.GeneralTableCellFactory = function(cellClass) {
	this.cellClass = cellClass;
};
$hxClasses["org.aswing.table.GeneralTableCellFactory"] = org.aswing.table.GeneralTableCellFactory;
org.aswing.table.GeneralTableCellFactory.__name__ = ["org","aswing","table","GeneralTableCellFactory"];
org.aswing.table.GeneralTableCellFactory.__interfaces__ = [org.aswing.table.TableCellFactory];
org.aswing.table.GeneralTableCellFactory.prototype = {
	createNewCell: function(isHeader) {
		return org.aswing.AsWingUtils["as"](Type.createInstance(this.cellClass,[]),org.aswing.table.TableCell);
	}
	,toString: function() {
		return "GeneralTableCellFactory[cellClass:" + Std.string(this.cellClass) + "]";
	}
	,__class__: org.aswing.table.GeneralTableCellFactory
};
org.aswing.table.GeneralTableCellFactoryUIResource = function(cellClass) {
	org.aswing.table.GeneralTableCellFactory.call(this,cellClass);
};
$hxClasses["org.aswing.table.GeneralTableCellFactoryUIResource"] = org.aswing.table.GeneralTableCellFactoryUIResource;
org.aswing.table.GeneralTableCellFactoryUIResource.__name__ = ["org","aswing","table","GeneralTableCellFactoryUIResource"];
org.aswing.table.GeneralTableCellFactoryUIResource.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.table.GeneralTableCellFactoryUIResource.__super__ = org.aswing.table.GeneralTableCellFactory;
org.aswing.table.GeneralTableCellFactoryUIResource.prototype = $extend(org.aswing.table.GeneralTableCellFactory.prototype,{
	__class__: org.aswing.table.GeneralTableCellFactoryUIResource
});
org.aswing.table.JTableHeader = function(cm) {
	org.aswing.Container.call(this);
	this.setName("JTableHeader");
	this.setFocusable(false);
	if(cm == null) cm = this.createDefaultColumnModel();
	this.setColumnModel(cm);
	this.initializeLocalVars();
	this.updateUI();
};
$hxClasses["org.aswing.table.JTableHeader"] = org.aswing.table.JTableHeader;
org.aswing.table.JTableHeader.__name__ = ["org","aswing","table","JTableHeader"];
org.aswing.table.JTableHeader.__interfaces__ = [org.aswing.table.TableColumnModelListener];
org.aswing.table.JTableHeader.__super__ = org.aswing.Container;
org.aswing.table.JTableHeader.prototype = $extend(org.aswing.Container.prototype,{
	updateUI: function() {
		this.setUI(org.aswing.UIManager.getUI(this));
		this.resizeAndRepaint();
		this.invalidate();
	}
	,getDefaultBasicUIClass: function() {
		return org.aswing.plaf.basic.BasicTableHeaderUI;
	}
	,getUIClassID: function() {
		return org.aswing.table.JTableHeader.uiClassID;
	}
	,invalidate: function() {
		if(this.parent == this.getTable()) this.valid = false; else org.aswing.Container.prototype.invalidate.call(this);
	}
	,revalidate: function() {
		if(this.parent == this.getTable()) this.valid = false; else org.aswing.Container.prototype.revalidate.call(this);
	}
	,isValidateRoot: function() {
		return this.parent == this.getTable();
	}
	,repaint: function() {
		if(this.parent == this.getTable()) {
		} else org.aswing.Container.prototype.repaint.call(this);
	}
	,setTable: function(table) {
		this.table = table;
	}
	,getTable: function() {
		return this.table;
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight < 1) {
			console.log("Error : New row height less than 1");
			throw new org.aswing.error.Error("New row height less than 1");
		}
		this.rowHeight = rowHeight;
		this.resizeAndRepaint();
	}
	,getRowHeight: function() {
		return this.rowHeight;
	}
	,setReorderingAllowed: function(reorderingAllowed) {
		this.reorderingAllowed = reorderingAllowed;
	}
	,getReorderingAllowed: function() {
		return this.reorderingAllowed;
	}
	,setResizingAllowed: function(resizingAllowed) {
		this.resizingAllowed = resizingAllowed;
	}
	,getResizingAllowed: function() {
		return this.resizingAllowed;
	}
	,getResizingColumn: function() {
		return this.resizingColumn;
	}
	,setDefaultRenderer: function(defaultRenderer) {
		this.defaultRenderer = defaultRenderer;
	}
	,getDefaultRenderer: function() {
		return this.defaultRenderer;
	}
	,columnAtPoint: function(point) {
		var x = point.x;
		return this.getColumnModel().getColumnIndexAtX(x);
	}
	,getHeaderRect: function(column) {
		var r = new org.aswing.geom.IntRectangle();
		var cm = this.getColumnModel();
		r.height = this.getHeight();
		if(column < 0) {
		} else if(column >= cm.getColumnCount()) r.x = this.getWidth(); else {
			var _g = 0;
			while(_g < column) {
				var i = _g++;
				r.x += cm.getColumn(i).getWidth();
			}
			r.width = cm.getColumn(column).getWidth();
		}
		return r;
	}
	,setColumnModel: function(columnModel) {
		if(columnModel == null) {
			console.log("Cannot set a null ColumnModel, Ignored");
			return;
		}
		var old = this.columnModel;
		if(columnModel != old) {
			if(old != null) old.removeColumnModelListener(this);
			this.columnModel = columnModel;
			columnModel.addColumnModelListener(this);
			this.resizeAndRepaint();
		}
	}
	,getColumnModel: function() {
		return this.columnModel;
	}
	,columnAdded: function(e) {
		this.resizeAndRepaint();
	}
	,columnRemoved: function(e) {
		this.resizeAndRepaint();
	}
	,columnMoved: function(e) {
		this.repaint();
	}
	,columnMarginChanged: function(source) {
		this.resizeAndRepaint();
	}
	,columnSelectionChanged: function(source,firstIndex,lastIndex,programmatic) {
	}
	,createDefaultColumnModel: function() {
		return new org.aswing.table.DefaultTableColumnModel();
	}
	,createDefaultRenderer: function() {
		return new org.aswing.table.GeneralTableCellFactoryUIResource(org.aswing.table.DefaultTextHeaderCell);
	}
	,initializeLocalVars: function() {
		this.setOpaque(true);
		this.setRowHeight(24);
		this.table = null;
		this.reorderingAllowed = true;
		this.resizingAllowed = true;
		this.resizingColumn = null;
		this.setDefaultRenderer(this.createDefaultRenderer());
	}
	,resizeAndRepaint: function() {
		this.revalidate();
		this.repaint();
	}
	,setResizingColumn: function(aColumn) {
		this.resizingColumn = aColumn;
	}
	,__class__: org.aswing.table.JTableHeader
});
org.aswing.table.PoorTextCell = function() {
	org.aswing.Component.call(this);
	this.setOpaque(true);
	this.textField = new openfl.text.TextField();
	this.textField.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
	this.textField.selectable = false;
	this.textField.mouseEnabled = false;
	this.setFontValidated(false);
	this.addChild(this.textField);
};
$hxClasses["org.aswing.table.PoorTextCell"] = org.aswing.table.PoorTextCell;
org.aswing.table.PoorTextCell.__name__ = ["org","aswing","table","PoorTextCell"];
org.aswing.table.PoorTextCell.__interfaces__ = [org.aswing.table.TableCell];
org.aswing.table.PoorTextCell.__super__ = org.aswing.Component;
org.aswing.table.PoorTextCell.prototype = $extend(org.aswing.Component.prototype,{
	paint: function(b) {
		var t;
		if(this.text == null) t = ""; else t = this.text;
		if(this.textField.get_text() != t) this.textField.set_text(t);
		if(!this.isFontValidated()) {
			org.aswing.AsWingUtils.applyTextFont(this.textField,this.getFont());
			this.setFontValidated(true);
		}
		org.aswing.AsWingUtils.applyTextColor(this.textField,this.getForeground());
		this.textField.set_x(b.x);
		this.textField.set_y(b.y + (b.height - this.textField.get_textHeight()) / 2);
		if(this.isOpaque()) {
			this.get_graphics().clear();
			var g = new org.aswing.graphics.Graphics2D(this.get_graphics());
			g.fillRectangle(new org.aswing.graphics.SolidBrush(this.getBackground()),b.x,b.y,b.width,b.height);
		}
	}
	,setComBounds: function(b) {
		this.readyToPaint = true;
		if(!b.equals(this.bounds)) {
			if(b.width != this.bounds.width || b.height != this.bounds.height) this.repaint();
			this.bounds.setRect(b);
			this.locate();
			this.valid = false;
		}
	}
	,invalidate: function() {
		this.valid = false;
	}
	,revalidate: function() {
		this.valid = false;
	}
	,setText: function(text) {
		if(text != this.text) {
			this.text = text;
			this.repaint();
		}
	}
	,getText: function() {
		return this.text;
	}
	,setTableCellStatus: function(table,isSelected,row,column) {
		if(isSelected) {
			this.setBackground(table.getSelectionBackground());
			this.setForeground(table.getSelectionForeground());
		} else {
			this.setBackground(table.getBackground());
			this.setForeground(table.getForeground());
		}
		this.setFont(table.getFont());
	}
	,setCellValue: function(value) {
		this.cellValue = value;
		this.setText(Std.string(value) + "");
	}
	,getCellValue: function() {
		return this.cellValue;
	}
	,getCellComponent: function() {
		return this;
	}
	,toString: function() {
		return "PoorTextCell[component:" + org.aswing.Component.prototype.toString.call(this) + "]\n";
	}
	,__class__: org.aswing.table.PoorTextCell
});
org.aswing.table.Resizable2 = function() { };
$hxClasses["org.aswing.table.Resizable2"] = org.aswing.table.Resizable2;
org.aswing.table.Resizable2.__name__ = ["org","aswing","table","Resizable2"];
org.aswing.table.Resizable2.prototype = {
	__class__: org.aswing.table.Resizable2
};
org.aswing.table.Resizable2Imp1 = function(r,flag) {
	this.r = r;
	this.flag = flag;
};
$hxClasses["org.aswing.table.Resizable2Imp1"] = org.aswing.table.Resizable2Imp1;
org.aswing.table.Resizable2Imp1.__name__ = ["org","aswing","table","Resizable2Imp1"];
org.aswing.table.Resizable2Imp1.__interfaces__ = [org.aswing.table.Resizable2];
org.aswing.table.Resizable2Imp1.prototype = {
	getElementCount: function() {
		return this.r.getElementCount();
	}
	,getLowerBoundAt: function(i) {
		if(this.flag) return this.r.getLowerBoundAt(i); else return this.r.getMidPointAt(i);
	}
	,getUpperBoundAt: function(i) {
		if(this.flag) return this.r.getMidPointAt(i); else return this.r.getUpperBoundAt(i);
	}
	,setSizeAt: function(newSize,i) {
		this.r.setSizeAt(newSize,i);
	}
	,__class__: org.aswing.table.Resizable2Imp1
};
org.aswing.table.Resizable3 = function() { };
$hxClasses["org.aswing.table.Resizable3"] = org.aswing.table.Resizable3;
org.aswing.table.Resizable3.__name__ = ["org","aswing","table","Resizable3"];
org.aswing.table.Resizable3.__interfaces__ = [org.aswing.table.Resizable2];
org.aswing.table.Resizable3.prototype = {
	__class__: org.aswing.table.Resizable3
};
org.aswing.table.Resizable3Imp1 = function(cm,inverse) {
	this.cm = cm;
	this.inverse = inverse;
};
$hxClasses["org.aswing.table.Resizable3Imp1"] = org.aswing.table.Resizable3Imp1;
org.aswing.table.Resizable3Imp1.__name__ = ["org","aswing","table","Resizable3Imp1"];
org.aswing.table.Resizable3Imp1.__interfaces__ = [org.aswing.table.Resizable3];
org.aswing.table.Resizable3Imp1.prototype = {
	getElementCount: function() {
		return this.cm.getColumnCount();
	}
	,getLowerBoundAt: function(i) {
		return this.cm.getColumn(i).getMinWidth();
	}
	,getUpperBoundAt: function(i) {
		return this.cm.getColumn(i).getMaxWidth();
	}
	,getMidPointAt: function(i) {
		if(this.inverse != true) return this.cm.getColumn(i).getPreferredWidth(); else return this.cm.getColumn(i).getWidth();
	}
	,setSizeAt: function(s,i) {
		if(this.inverse != true) this.cm.getColumn(i).setWidth(s); else this.cm.getColumn(i).setPreferredWidth(s);
	}
	,__class__: org.aswing.table.Resizable3Imp1
};
org.aswing.table.Resizable3Imp2 = function(cm,start,end) {
	this.cm = cm;
	this.start = start;
	this.end = end;
};
$hxClasses["org.aswing.table.Resizable3Imp2"] = org.aswing.table.Resizable3Imp2;
org.aswing.table.Resizable3Imp2.__name__ = ["org","aswing","table","Resizable3Imp2"];
org.aswing.table.Resizable3Imp2.__interfaces__ = [org.aswing.table.Resizable3];
org.aswing.table.Resizable3Imp2.prototype = {
	getElementCount: function() {
		return this.end - this.start;
	}
	,getLowerBoundAt: function(i) {
		return this.cm.getColumn(i + this.start).getMinWidth();
	}
	,getUpperBoundAt: function(i) {
		return this.cm.getColumn(i + this.start).getMaxWidth();
	}
	,getMidPointAt: function(i) {
		return this.cm.getColumn(i + this.start).getWidth();
	}
	,setSizeAt: function(s,i) {
		this.cm.getColumn(i + this.start).setWidth(s);
	}
	,__class__: org.aswing.table.Resizable3Imp2
};
org.aswing.table.TableColumn = function(modelIndex,width,cellRenderer,cellEditor) {
	if(width == null) width = 75;
	if(modelIndex == null) modelIndex = 0;
	this.modelIndex = modelIndex;
	this.width = width;
	this.preferredWidth = width;
	this.cellRenderer = cellRenderer;
	this.cellEditor = cellEditor;
	this.minWidth = 17;
	this.maxWidth = 100000;
	this.isResizable = true;
	this.headerValue = null;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.table.TableColumn"] = org.aswing.table.TableColumn;
org.aswing.table.TableColumn.__name__ = ["org","aswing","table","TableColumn"];
org.aswing.table.TableColumn.__super__ = openfl.events.EventDispatcher;
org.aswing.table.TableColumn.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	firePropertyChangeIfReallyChanged: function(propertyName,oldValue,newValue) {
		if(oldValue != newValue) this.dispatchEvent(new org.aswing.event.PropertyChangeEvent(propertyName,oldValue,newValue));
	}
	,setModelIndex: function(modelIndex) {
		var old = this.modelIndex;
		this.modelIndex = modelIndex;
		this.firePropertyChangeIfReallyChanged("modelIndex",old,modelIndex);
	}
	,getModelIndex: function() {
		return this.modelIndex;
	}
	,setIdentifier: function(identifier) {
		var old = this.identifier;
		this.identifier = identifier;
		this.firePropertyChangeIfReallyChanged("identifier",old,identifier);
	}
	,getIdentifier: function() {
		if(this.identifier != null) return this.identifier; else return this.getHeaderValue();
	}
	,setHeaderValue: function(headerValue) {
		var old = this.headerValue;
		this.headerValue = headerValue;
		this.firePropertyChangeIfReallyChanged("headerValue",old,headerValue);
	}
	,getHeaderValue: function() {
		return this.headerValue;
	}
	,setHeaderCellFactory: function(headerRenderer) {
		var old = this.headerRenderer;
		this.headerRenderer = headerRenderer;
		this.firePropertyChangeIfReallyChanged("headerRenderer",old,headerRenderer);
	}
	,getHeaderCellFactory: function() {
		return this.headerRenderer;
	}
	,setCellFactory: function(cellRenderer) {
		var old = this.cellRenderer;
		this.cellRenderer = cellRenderer;
		this.firePropertyChangeIfReallyChanged("cellRenderer",old,cellRenderer);
	}
	,getCellFactory: function() {
		return this.cellRenderer;
	}
	,setCellEditor: function(cellEditor) {
		var old = this.cellEditor;
		this.cellEditor = cellEditor;
		this.firePropertyChangeIfReallyChanged("cellEditor",old,cellEditor);
	}
	,getCellEditor: function() {
		return this.cellEditor;
	}
	,setWidth: function(width) {
		var old = this.width;
		this.width = Std["int"](Math.min(Math.max(width,this.minWidth),this.maxWidth));
		this.firePropertyChangeIfReallyChanged("width",old,this.width);
	}
	,getWidth: function() {
		return this.width;
	}
	,setPreferredWidth: function(preferredWidth) {
		var old = this.preferredWidth;
		this.preferredWidth = Std["int"](Math.min(Math.max(preferredWidth,this.minWidth),this.maxWidth));
		this.firePropertyChangeIfReallyChanged("preferredWidth",old,this.preferredWidth);
	}
	,getPreferredWidth: function() {
		return this.preferredWidth;
	}
	,setMinWidth: function(minWidth) {
		var old = this.minWidth;
		this.minWidth = Std["int"](Math.max(minWidth,0));
		if(this.width < minWidth) this.setWidth(minWidth);
		if(this.preferredWidth < minWidth) this.setPreferredWidth(minWidth);
		this.firePropertyChangeIfReallyChanged("minWidth",old,this.minWidth);
	}
	,getMinWidth: function() {
		return this.minWidth;
	}
	,setMaxWidth: function(maxWidth) {
		var old = this.maxWidth;
		this.maxWidth = Std["int"](Math.max(this.minWidth,maxWidth));
		if(this.width > maxWidth) this.setWidth(maxWidth);
		if(this.preferredWidth > maxWidth) this.setPreferredWidth(maxWidth);
		this.firePropertyChangeIfReallyChanged("maxWidth",old,this.maxWidth);
	}
	,getMaxWidth: function() {
		return this.maxWidth;
	}
	,setResizable: function(isResizable) {
		var old = this.isResizable;
		this.isResizable = isResizable;
		this.firePropertyChangeIfReallyChanged("isResizable",old,this.isResizable);
	}
	,getResizable: function() {
		return this.isResizable;
	}
	,sizeWidthToFit: function() {
		if(this.headerRenderer == null) return;
		var cell = this.headerRenderer.createNewCell(true);
		cell.setCellValue(this.getHeaderValue());
		var c = cell.getCellComponent();
		this.setMinWidth(c.getMinimumSize().width);
		this.setMaxWidth(c.getMaximumSize().width);
		this.setPreferredWidth(c.getPreferredSize().width);
		this.setWidth(this.getPreferredWidth());
	}
	,addPropertyChangeListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("propertyChange",listener,false,priority,useWeakReference);
	}
	,removePropertyChangeListener: function(listener) {
		this.removeEventListener("propertyChange",listener);
	}
	,createDefaultHeaderRenderer: function() {
		var factory = new org.aswing.table.GeneralTableCellFactoryUIResource(org.aswing.table.DefaultTextCell);
		return factory;
	}
	,__class__: org.aswing.table.TableColumn
});
org.aswing.table.TableColumnModelEvent = function(source,from,_to) {
	org.aswing.event.ModelEvent.call(this,source);
	this.fromIndex = from;
	this.toIndex = _to;
};
$hxClasses["org.aswing.table.TableColumnModelEvent"] = org.aswing.table.TableColumnModelEvent;
org.aswing.table.TableColumnModelEvent.__name__ = ["org","aswing","table","TableColumnModelEvent"];
org.aswing.table.TableColumnModelEvent.__super__ = org.aswing.event.ModelEvent;
org.aswing.table.TableColumnModelEvent.prototype = $extend(org.aswing.event.ModelEvent.prototype,{
	getFromIndex: function() {
		return this.fromIndex;
	}
	,getToIndex: function() {
		return this.toIndex;
	}
	,__class__: org.aswing.table.TableColumnModelEvent
});
org.aswing.table.sorter = {};
org.aswing.table.sorter.Arrow = function(descending,size) {
	this.shape = new openfl.display.Shape();
	if(descending) this.arrow = Math.PI / 2; else this.arrow = -Math.PI / 2;
	this.width = size;
};
$hxClasses["org.aswing.table.sorter.Arrow"] = org.aswing.table.sorter.Arrow;
org.aswing.table.sorter.Arrow.__name__ = ["org","aswing","table","sorter","Arrow"];
org.aswing.table.sorter.Arrow.__interfaces__ = [org.aswing.Icon];
org.aswing.table.sorter.Arrow.prototype = {
	getIconWidth: function(c) {
		return this.width;
	}
	,getIconHeight: function(c) {
		return this.width;
	}
	,updateIcon: function(c,g,x,y) {
		this.shape.get_graphics().clear();
		g = new org.aswing.graphics.Graphics2D(this.shape.get_graphics());
		var center = new openfl.geom.Point(x,c.getHeight() / 2);
		var w = this.width;
		var ps1 = new Array();
		ps1.push(this.nextPoint(center,this.arrow,w / 2 / 2));
		var back = this.nextPoint(center,this.arrow + Math.PI,w / 2 / 2);
		ps1.push(this.nextPoint(back,this.arrow - Math.PI / 2,w / 2));
		ps1.push(this.nextPoint(back,this.arrow + Math.PI / 2,w / 2));
		var cl = c.getMideground();
		var style;
		var adjuster = c.getStyleTune().get_mide();
		if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) {
			var b;
			if(js.Boot.__instanceof(c,org.aswing.AbstractButton)) b = c; else b = null;
			var model = b.getModel();
			var isPressing = model.isArmed() || model.isSelected();
			var hue = cl.getHue();
			var offHue = hue + 0.21;
			if(offHue > 1) offHue = offHue - 1;
			if(offHue < 0) offHue = offHue + 1;
			if(!b.isEnabled()) {
				cl = cl.offsetHLS(0,-0.06,-0.03);
				adjuster = adjuster.sharpen(0.4);
				cl = cl.offsetHLS(0,-0.10,-0.10);
			} else if(isPressing) {
				adjuster = adjuster.sharpen(0.8);
				cl = cl.offsetHLS(offHue - hue,-0.06,0);
			} else if(model.isRollOver()) cl = cl.offsetHLS(offHue - hue,0.1,0.3);
		}
		style = new org.aswing.StyleResult(cl,adjuster);
		var matrix = new openfl.geom.Matrix();
		matrix.createGradientBox(w + 1,w + 1,0.333333333333333315 * Math.PI,x + w / 8 - 0.5,y + w / 8 - 0.5);
		var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.RADIAL,[style.clight.getRGB(),style.cdark.getRGB()],[style.clight.getAlpha(),style.cdark.getAlpha()],[0,255],matrix);
		g.fillPolygon(brush,ps1);
		var f = new Array();
		f.push(new openfl.filters.DropShadowFilter(1,45,0,style.shadow,0,0,1,1));
		this.shape.set_filters(f);
	}
	,nextPoint: function(p,dir,dis) {
		return new openfl.geom.Point(p.x + Math.cos(dir) * dis,p.y + Math.sin(dir) * dis);
	}
	,getDisplay: function(c) {
		return this.shape;
	}
	,__class__: org.aswing.table.sorter.Arrow
};
org.aswing.table.sorter.Directive = function(column,direction) {
	this.column = column;
	this.direction = direction;
};
$hxClasses["org.aswing.table.sorter.Directive"] = org.aswing.table.sorter.Directive;
org.aswing.table.sorter.Directive.__name__ = ["org","aswing","table","sorter","Directive"];
org.aswing.table.sorter.Directive.prototype = {
	__class__: org.aswing.table.sorter.Directive
};
org.aswing.table.sorter.Row = function(tableSorter,index) {
	this.tableSorter = tableSorter;
	this.modelIndex = index;
};
$hxClasses["org.aswing.table.sorter.Row"] = org.aswing.table.sorter.Row;
org.aswing.table.sorter.Row.__name__ = ["org","aswing","table","sorter","Row"];
org.aswing.table.sorter.Row.prototype = {
	compareTo: function(o) {
		var row1 = this.modelIndex;
		var row2 = (js.Boot.__instanceof(o,org.aswing.table.sorter.Row)?o:null).modelIndex;
		var sortingColumns = this.tableSorter.getSortingColumns();
		var tableModel = this.tableSorter.getTableModel();
		var _g1 = 0;
		var _g = sortingColumns.length;
		while(_g1 < _g) {
			var i = _g1++;
			var directive = org.aswing.AsWingUtils["as"](sortingColumns[i],org.aswing.table.sorter.Directive);
			var column = directive.column;
			var o1 = tableModel.getValueAt(row1,column);
			var o2 = tableModel.getValueAt(row2,column);
			var comparison = 0;
			if(o1 == null && o2 == null) comparison = 0; else if(o1 == null) comparison = -1; else if(o2 == null) comparison = 1; else {
				var comparator = this.tableSorter.getComparator(column);
				comparison = comparator(o1,o2);
			}
			if(comparison != 0) if(directive.direction == -1) return -comparison; else return comparison;
		}
		return 0;
	}
	,getModelIndex: function() {
		return this.modelIndex;
	}
	,__class__: org.aswing.table.sorter.Row
};
org.aswing.table.sorter.SortableHeaderRenderer = function(originalRenderer,tableSorter) {
	this.originalRenderer = originalRenderer;
	this.tableSorter = tableSorter;
};
$hxClasses["org.aswing.table.sorter.SortableHeaderRenderer"] = org.aswing.table.sorter.SortableHeaderRenderer;
org.aswing.table.sorter.SortableHeaderRenderer.__name__ = ["org","aswing","table","sorter","SortableHeaderRenderer"];
org.aswing.table.sorter.SortableHeaderRenderer.__interfaces__ = [org.aswing.table.TableCellFactory];
org.aswing.table.sorter.SortableHeaderRenderer.prototype = {
	createNewCell: function(isHeader) {
		return new org.aswing.table.sorter.SortableTextHeaderCell(this.tableSorter);
	}
	,getTableCellFactory: function() {
		return null;
	}
	,__class__: org.aswing.table.sorter.SortableHeaderRenderer
};
org.aswing.table.sorter.SortableTextHeaderCell = function(tableSorter) {
	org.aswing.table.DefaultTextHeaderCell.call(this);
	this.setBorder(org.aswing.UIManager.getBorder("TableHeader.sortableCellBorder"));
	this.setBackgroundDecorator(org.aswing.UIManager.getGroundDecorator("TableHeader.sortableCellBackground"));
	this.tableSorter = tableSorter;
	this.setHorizontalTextPosition(2);
	this.setIconTextGap(6);
	this.setMideground(null);
	this.setStyleTune(null);
};
$hxClasses["org.aswing.table.sorter.SortableTextHeaderCell"] = org.aswing.table.sorter.SortableTextHeaderCell;
org.aswing.table.sorter.SortableTextHeaderCell.__name__ = ["org","aswing","table","sorter","SortableTextHeaderCell"];
org.aswing.table.sorter.SortableTextHeaderCell.__super__ = org.aswing.table.DefaultTextHeaderCell;
org.aswing.table.sorter.SortableTextHeaderCell.prototype = $extend(org.aswing.table.DefaultTextHeaderCell.prototype,{
	setTableCellStatus: function(table,isSelected,row,column) {
		org.aswing.table.DefaultTextHeaderCell.prototype.setTableCellStatus.call(this,table,isSelected,row,column);
		var modelColumn = table.convertColumnIndexToModel(column);
		this.setIcon(this.tableSorter.getHeaderRendererIcon(modelColumn,this.getFont().getSize() - 2));
	}
	,__class__: org.aswing.table.sorter.SortableTextHeaderCell
});
org.aswing.table.sorter.TableSorter = function(tableModel,tableHeader) {
	org.aswing.table.AbstractTableModel.call(this);
	this.initStatics();
	this.columnComparators = new haxe.ds.StringMap();
	this.sortingColumns = new Array();
	this.columnSortables = new Array();
	this.tableModelListener = this;
	this.setTableHeader(tableHeader);
	this.setTableModel(tableModel);
};
$hxClasses["org.aswing.table.sorter.TableSorter"] = org.aswing.table.sorter.TableSorter;
org.aswing.table.sorter.TableSorter.__name__ = ["org","aswing","table","sorter","TableSorter"];
org.aswing.table.sorter.TableSorter.__interfaces__ = [org.aswing.event.TableModelListener];
org.aswing.table.sorter.TableSorter.__super__ = org.aswing.table.AbstractTableModel;
org.aswing.table.sorter.TableSorter.prototype = $extend(org.aswing.table.AbstractTableModel.prototype,{
	initStatics: function() {
		if(org.aswing.table.sorter.TableSorter.inited != true) {
			org.aswing.table.sorter.TableSorter.EMPTY_DIRECTIVE = new org.aswing.table.sorter.Directive(-1,0);
			org.aswing.table.sorter.TableSorter.NUMBER_COMAPRATOR = function(o1,o2) {
				o1 = Std.parseFloat(o1);
				o2 = Std.parseFloat(o2);
				if(o1 == o2) return 0; else if(o1 > o2) return 1; else return -1;
			};
			org.aswing.table.sorter.TableSorter.LEXICAL_COMPARATOR = function(o11,o21) {
				o11 = o11.toString();
				o21 = o21.toString();
				if(o11 == o21) return 0; else if(o11 > o21) return 1; else return -1;
			};
			org.aswing.table.sorter.TableSorter.inited = true;
		}
	}
	,clearSortingState: function() {
		this.viewToModel = null;
		this.modelToView = null;
	}
	,getTableModel: function() {
		return this.tableModel;
	}
	,setTableModel: function(tableModel) {
		if(this.tableModel != null) this.tableModel.removeTableModelListener(this.tableModelListener);
		this.tableModel = tableModel;
		if(this.tableModel != null) this.tableModel.addTableModelListener(this.tableModelListener);
		this.clearSortingState();
		this.fireTableStructureChanged();
	}
	,getTableHeader: function() {
		return this.tableHeader;
	}
	,setTableHeader: function(tableHeader) {
		if(this.tableHeader != null) {
			this.tableHeader.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__mousePress));
			this.tableHeader.removeEventListener("release",$bind(this,this.__mouseRelease));
			var defaultRenderer = this.tableHeader.getDefaultRenderer();
			if(js.Boot.__instanceof(defaultRenderer,org.aswing.table.sorter.SortableHeaderRenderer)) this.tableHeader.setDefaultRenderer((js.Boot.__instanceof(defaultRenderer,org.aswing.table.sorter.SortableHeaderRenderer)?defaultRenderer:null).getTableCellFactory());
		}
		this.tableHeader = tableHeader;
		if(this.tableHeader != null) {
			this.tableHeader.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__mousePress));
			this.tableHeader.addEventListener("release",$bind(this,this.__mouseRelease));
			new org.aswing.table.sorter.SortableHeaderRenderer(this.tableHeader.getDefaultRenderer(),this);
			this.tableHeader.setDefaultRenderer(new org.aswing.table.sorter.SortableHeaderRenderer(this.tableHeader.getDefaultRenderer(),this));
		}
	}
	,isSorting: function() {
		return this.sortingColumns.length != 0;
	}
	,getSortingColumns: function() {
		return this.sortingColumns;
	}
	,setColumnSortable: function(column,sortable) {
		if(this.isColumnSortable(column) != sortable) {
			this.columnSortables[column] = sortable;
			if(!sortable && this.getSortingStatus(column) != 0) this.setSortingStatus(column,0);
		}
	}
	,isColumnSortable: function(column) {
		return this.columnSortables[column] != false;
	}
	,getDirective: function(column) {
		var _g1 = 0;
		var _g = this.sortingColumns.length;
		while(_g1 < _g) {
			var i = _g1++;
			var directive = org.aswing.AsWingUtils["as"](this.sortingColumns[i],org.aswing.table.sorter.Directive);
			if(directive.column == column) return directive;
		}
		return org.aswing.table.sorter.TableSorter.EMPTY_DIRECTIVE;
	}
	,getSortingStatus: function(column) {
		return this.getDirective(column).direction | 0;
	}
	,sortingStatusChanged: function() {
		this.clearSortingState();
		this.fireTableDataChanged();
		if(this.tableHeader != null) this.tableHeader.repaint();
	}
	,setSortingStatus: function(column,status) {
		var directive = this.getDirective(column);
		if(directive != org.aswing.table.sorter.TableSorter.EMPTY_DIRECTIVE) org.aswing.util.ArrayUtils.removeFromArray(this.sortingColumns,directive);
		if(status != 0) this.sortingColumns.push(new org.aswing.table.sorter.Directive(column,status));
		this.sortingStatusChanged();
	}
	,getHeaderRendererIcon: function(column,size) {
		var directive = this.getDirective(column);
		if(directive == org.aswing.table.sorter.TableSorter.EMPTY_DIRECTIVE) return null;
		return new org.aswing.table.sorter.Arrow(directive.direction == -1,size);
	}
	,cancelSorting: function() {
		this.sortingColumns.splice(0,this.sortingColumns.length);
		this.sortingStatusChanged();
	}
	,setColumnComparator: function(columnClass,comparator) {
		if(comparator == null) this.columnComparators.remove(columnClass); else this.columnComparators.set(columnClass,comparator);
	}
	,getComparator: function(column) {
		var columnType = this.tableModel.getColumnClass(column);
		var comparator = this.columnComparators.get(columnType);
		if(comparator != null) return comparator;
		if(columnType == "Number") return org.aswing.table.sorter.TableSorter.NUMBER_COMAPRATOR; else return org.aswing.table.sorter.TableSorter.LEXICAL_COMPARATOR;
	}
	,getViewToModel: function() {
		if(this.viewToModel == null) {
			var tableModelRowCount = this.tableModel.getRowCount();
			this.viewToModel = new Array();
			var _g = 0;
			while(_g < tableModelRowCount) {
				var row = _g++;
				this.viewToModel[row] = new org.aswing.table.sorter.Row(this,row);
			}
			if(this.isSorting()) this.viewToModel.sort($bind(this,this.sortImp));
		}
		return this.viewToModel;
	}
	,sortImp: function(row1,row2) {
		return row1.compareTo(row2);
	}
	,modelIndex: function(viewIndex) {
		return this.getViewToModel()[viewIndex].getModelIndex();
	}
	,getModelToView: function() {
		if(this.modelToView == null) {
			var n = this.getViewToModel().length;
			this.modelToView = new Array();
			var _g = 0;
			while(_g < n) {
				var i = _g++;
				this.modelToView[this.modelIndex(i)] = i;
			}
		}
		return this.modelToView;
	}
	,getRowCount: function() {
		if(this.tableModel == null) return 0; else return this.tableModel.getRowCount();
	}
	,getColumnCount: function() {
		if(this.tableModel == null) return 0; else return this.tableModel.getColumnCount();
	}
	,getColumnName: function(column) {
		return this.tableModel.getColumnName(column);
	}
	,getColumnClass: function(column) {
		return this.tableModel.getColumnClass(column);
	}
	,isCellEditable: function(row,column) {
		return this.tableModel.isCellEditable(this.modelIndex(row),column);
	}
	,getValueAt: function(row,column) {
		return this.tableModel.getValueAt(this.modelIndex(row),column);
	}
	,setValueAt: function(aValue,row,column) {
		this.tableModel.setValueAt(aValue,this.modelIndex(row),column);
	}
	,tableChanged: function(e) {
		if(!this.isSorting()) {
			this.clearSortingState();
			this.fireTableChanged(e);
			return;
		}
		if(e.getFirstRow() == -1) {
			this.cancelSorting();
			this.fireTableChanged(e);
			return;
		}
		var column = e.getColumn();
		if(e.getFirstRow() == e.getLastRow() && column != -1 && this.getSortingStatus(column) == 0 && this.modelToView != null) {
			var viewIndex = this.getModelToView()[e.getFirstRow()];
			this.fireTableChanged(new org.aswing.event.TableModelEvent(this,viewIndex,viewIndex,column,e.getType()));
			return;
		}
		this.clearSortingState();
		this.fireTableDataChanged();
		return;
	}
	,__mousePress: function(e) {
		var header = org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.table.JTableHeader);
		this.pressedPoint = header.getMousePosition();
	}
	,__mouseRelease: function(e) {
		if(e.isReleasedOutSide()) return;
		var h = org.aswing.AsWingUtils["as"](e.currentTarget,org.aswing.table.JTableHeader);
		var point = h.getMousePosition();
		if(!point.equals(this.pressedPoint)) return;
		var columnModel = h.getColumnModel();
		var viewColumn = columnModel.getColumnIndexAtX(h.getMousePosition().x);
		if(viewColumn == -1) return;
		var column = columnModel.getColumn(viewColumn).getModelIndex();
		if(column != -1 && this.isColumnSortable(column)) {
			var status = this.getSortingStatus(column);
			if(e.ctrlKey != true) this.cancelSorting();
			status = this.nextSortingStatus(status,e.shiftKey);
			this.setSortingStatus(column,status);
		}
	}
	,nextSortingStatus: function(curStatus,shiftKey) {
		var status = curStatus;
		status = status + (shiftKey?-1:1);
		status = (status + 4) % 3 - 1;
		return status;
	}
	,__class__: org.aswing.table.sorter.TableSorter
});
org.aswing.tree.RowMapper = function() { };
$hxClasses["org.aswing.tree.RowMapper"] = org.aswing.tree.RowMapper;
org.aswing.tree.RowMapper.__name__ = ["org","aswing","tree","RowMapper"];
org.aswing.tree.RowMapper.prototype = {
	__class__: org.aswing.tree.RowMapper
};
org.aswing.tree.AbstractLayoutCache = function() {
};
$hxClasses["org.aswing.tree.AbstractLayoutCache"] = org.aswing.tree.AbstractLayoutCache;
org.aswing.tree.AbstractLayoutCache.__name__ = ["org","aswing","tree","AbstractLayoutCache"];
org.aswing.tree.AbstractLayoutCache.__interfaces__ = [org.aswing.tree.RowMapper];
org.aswing.tree.AbstractLayoutCache.prototype = {
	setNodeDimensions: function(nd) {
		this.nodeDimensions = nd;
	}
	,getNodeDimensions: function() {
		return this.nodeDimensions;
	}
	,setModel: function(newModel) {
		this.treeModel = newModel;
	}
	,getModel: function() {
		return this.treeModel;
	}
	,setRootVisible: function(rootVisible) {
		this.rootVisible = rootVisible;
	}
	,isRootVisible: function() {
		return this.rootVisible;
	}
	,setRowHeight: function(rowHeight) {
		this.rowHeight = rowHeight;
	}
	,getRowHeight: function() {
		return this.rowHeight;
	}
	,setSelectionModel: function(newLSM) {
		if(this.treeSelectionModel != null) this.treeSelectionModel.setRowMapper(null);
		this.treeSelectionModel = newLSM;
		if(this.treeSelectionModel != null) this.treeSelectionModel.setRowMapper(this);
	}
	,getSelectionModel: function() {
		return this.treeSelectionModel;
	}
	,getPreferredHeight: function() {
		var rowCount = this.getRowCount();
		if(rowCount > 0) {
			var bounds = this.getBounds(this.getPathForRow(rowCount - 1),null);
			if(bounds != null) return bounds.y + bounds.height;
		}
		return 0;
	}
	,getPreferredWidth: function(bounds) {
		var rowCount = this.getRowCount();
		if(rowCount > 0) {
			var firstPath;
			var endY;
			if(bounds == null) {
				firstPath = this.getPathForRow(0);
				endY = 2147483647;
			} else {
				firstPath = this.getPathClosestTo(bounds.x,bounds.y);
				endY = bounds.height + bounds.y;
			}
			var paths = this.getVisiblePathsFrom(firstPath,2147483647);
			var pn = paths.length;
			if(paths != null && pn > 0) {
				var pBounds = this.getBounds(org.aswing.AsWingUtils["as"](paths[0],org.aswing.tree.TreePath),null);
				var width;
				if(pBounds != null) {
					width = pBounds.x + pBounds.width;
					if(pBounds.y >= endY) return width;
				} else width = 0;
				var i = 1;
				while(pBounds != null && i < pn) {
					pBounds = this.getBounds(org.aswing.AsWingUtils["as"](paths[i],org.aswing.tree.TreePath),pBounds);
					if(pBounds != null && pBounds.y < endY) width = Std["int"](Math.max(width,pBounds.x + pBounds.width)); else pBounds = null;
					i++;
				}
				return width;
			}
		}
		return 0;
	}
	,isExpanded: function(path) {
		throw new org.aswing.error.ImpMissError();
		return false;
	}
	,getBounds: function(path,placeIn) {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,getPathForRow: function(row) {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,getRowForPath: function(path) {
		throw new org.aswing.error.ImpMissError();
		return 0;
	}
	,getRowContainingYLocation: function(location) {
		throw new org.aswing.error.ImpMissError();
		return 0;
	}
	,getPathClosestTo: function(x,y) {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,getVisiblePathsFrom: function(path,totalCount) {
		throw new org.aswing.error.ImpMissError();
		return null;
	}
	,getVisibleChildCount: function(path) {
		throw new org.aswing.error.ImpMissError();
		return 0;
	}
	,setExpandedState: function(path,isExpanded) {
		throw new org.aswing.error.ImpMissError();
	}
	,getExpandedState: function(path) {
		throw new org.aswing.error.ImpMissError();
		return false;
	}
	,getRowCount: function() {
		throw new org.aswing.error.ImpMissError();
		return 0;
	}
	,invalidateSizes: function() {
		throw new org.aswing.error.ImpMissError();
	}
	,invalidatePathBounds: function(path) {
		throw new org.aswing.error.ImpMissError();
	}
	,treeNodesChanged: function(e) {
		throw new org.aswing.error.ImpMissError();
	}
	,treeNodesInserted: function(e) {
		throw new org.aswing.error.ImpMissError();
	}
	,treeNodesRemoved: function(e) {
		throw new org.aswing.error.ImpMissError();
	}
	,treeStructureChanged: function(e) {
		throw new org.aswing.error.ImpMissError();
	}
	,getRowsForPaths: function(paths) {
		if(paths == null) return null;
		var numPaths = paths.length;
		var rows = new Array();
		var _g = 0;
		while(_g < numPaths) {
			var counter = _g++;
			rows[counter] = this.getRowForPath(paths[counter]);
		}
		return rows;
	}
	,countNodeDimensions: function(value,row,depth,expanded,placeIn) {
		var nd = this.getNodeDimensions();
		if(nd != null) return nd.countNodeDimensions(value,row,depth,expanded,placeIn);
		return null;
	}
	,__class__: org.aswing.tree.AbstractLayoutCache
};
org.aswing.tree.TreeNode = function() { };
$hxClasses["org.aswing.tree.TreeNode"] = org.aswing.tree.TreeNode;
org.aswing.tree.TreeNode.__name__ = ["org","aswing","tree","TreeNode"];
org.aswing.tree.TreeNode.prototype = {
	__class__: org.aswing.tree.TreeNode
};
org.aswing.tree.MutableTreeNode = function() { };
$hxClasses["org.aswing.tree.MutableTreeNode"] = org.aswing.tree.MutableTreeNode;
org.aswing.tree.MutableTreeNode.__name__ = ["org","aswing","tree","MutableTreeNode"];
org.aswing.tree.MutableTreeNode.__interfaces__ = [org.aswing.tree.TreeNode];
org.aswing.tree.MutableTreeNode.prototype = {
	__class__: org.aswing.tree.MutableTreeNode
};
org.aswing.tree.DefaultMutableTreeNode = function(userObject,allowsChildren) {
	if(allowsChildren == null) allowsChildren = true;
	org.aswing.tree.DefaultMutableTreeNode.AWML_INDEX++;
	this.awmlIndex = org.aswing.tree.DefaultMutableTreeNode.AWML_INDEX;
	this.parent = null;
	this.allowsChildren = allowsChildren;
	this.userObject = userObject;
};
$hxClasses["org.aswing.tree.DefaultMutableTreeNode"] = org.aswing.tree.DefaultMutableTreeNode;
org.aswing.tree.DefaultMutableTreeNode.__name__ = ["org","aswing","tree","DefaultMutableTreeNode"];
org.aswing.tree.DefaultMutableTreeNode.__interfaces__ = [org.aswing.tree.MutableTreeNode];
org.aswing.tree.DefaultMutableTreeNode.prototype = {
	getAwmlIndex: function() {
		return this.awmlIndex;
	}
	,insert: function(newChild,childIndex) {
		if(this.allowsChildren == false) {
			console.log("Error : node does not allow children");
			throw new org.aswing.error.Error("node does not allow children");
		} else if(newChild == null) {
			console.log("Error : new child is null");
			throw new org.aswing.error.Error("new child is null");
		} else if(this.isNodeAncestor(newChild)) {
			console.log("Error : new child is an ancestor");
			throw new org.aswing.error.Error("new child is an ancestor");
		}
		var oldParent = org.aswing.AsWingUtils["as"](newChild.getParent(),org.aswing.tree.MutableTreeNode);
		if(oldParent != null) oldParent.remove(newChild);
		newChild.setParent(this);
		if(this._children == null) this._children = new org.aswing.util.ArrayList();
		this._children.append(newChild,childIndex);
	}
	,removeAt: function(childIndex) {
		var child = org.aswing.AsWingUtils["as"](this.getChildAt(childIndex),org.aswing.tree.MutableTreeNode);
		if(child != null) {
			this._children.removeAt(childIndex);
			child.setParent(null);
		}
	}
	,setParent: function(newParent) {
		this.parent = newParent;
	}
	,getParent: function() {
		return this.parent;
	}
	,getChildAt: function(index) {
		if(this._children == null) {
			console.log("Error : node has no children");
			throw new org.aswing.error.Error("node has no children");
		}
		return org.aswing.AsWingUtils["as"](this._children.get(index),org.aswing.tree.TreeNode);
	}
	,getChildCount: function() {
		if(this._children == null) return 0; else return this._children.size();
	}
	,getIndex: function(aChild) {
		if(!this.isNodeChild(aChild)) return -1;
		return this.childrenIndexOf(aChild);
	}
	,childrenIndexOf: function(aChild) {
		var _g1 = 0;
		var _g = this._children.size();
		while(_g1 < _g) {
			var i = _g1++;
			if(this._children.get(i).getAwmlIndex() == aChild.getAwmlIndex()) return i;
		}
		return -1;
	}
	,children: function() {
		if(this._children == null) return []; else return this._children.toArray();
	}
	,setAllowsChildren: function(allows) {
		if(allows != this.allowsChildren) {
			this.allowsChildren = allows;
			if(this.allowsChildren != true) this.removeAllChildren();
		}
	}
	,getAllowsChildren: function() {
		return this.allowsChildren;
	}
	,setUserObject: function(userObject) {
		this.userObject = userObject;
	}
	,getUserObject: function() {
		return this.userObject;
	}
	,removeFromParent: function() {
		var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.MutableTreeNode);
		if(parent != null) parent.remove(this);
	}
	,remove: function(aChild) {
		if(!this.isNodeChild(aChild)) {
			console.log("argument is not a child");
			return;
		}
		this.removeAt(this.getIndex(aChild));
	}
	,removeAllChildren: function() {
		var _g1 = 0;
		var _g = this.getChildCount();
		while(_g1 < _g) {
			var i = _g1++;
			this.removeAt(i);
		}
	}
	,append: function(newChild) {
		if(newChild != null && newChild.getParent() == this) this.insert(newChild,this.getChildCount() - 1); else this.insert(newChild,this.getChildCount());
	}
	,isNodeAncestor: function(anotherNode) {
		if(anotherNode == null) return false;
		var ancestor = this;
		do if(ancestor == anotherNode) return true; while((ancestor = ancestor.getParent()) != null);
		return false;
	}
	,isNodeDescendant: function(anotherNode) {
		if(anotherNode == null) return false;
		return anotherNode.isNodeAncestor(this);
	}
	,getSharedAncestor: function(aNode) {
		if(aNode == this) return this; else if(aNode == null) return null;
		var level1;
		var level2;
		var diff;
		var node1;
		var node2;
		level1 = this.getLevel();
		level2 = aNode.getLevel();
		if(level2 > level1) {
			diff = level2 - level1;
			node1 = aNode;
			node2 = this;
		} else {
			diff = level1 - level2;
			node1 = this;
			node2 = aNode;
		}
		while(diff > 0) {
			node1 = node1.getParent();
			diff--;
		}
		do {
			if(node1 == node2) return node1;
			node1 = node1.getParent();
			node2 = node2.getParent();
		} while(node1 != null);
		if(node1 != null || node2 != null) {
			console.log("Error : nodes should be null");
			throw new org.aswing.error.Error("nodes should be null");
		}
		return null;
	}
	,isNodeRelated: function(aNode) {
		return aNode != null && this.getRoot() == aNode.getRoot();
	}
	,getDepth: function() {
		var last = null;
		var enum_ = this.breadthFirstEnumeration();
		last = enum_[enum_.length - 1];
		if(last == null) {
			console.log("Error : nodes should be null");
			throw new org.aswing.error.Error("nodes should be null");
		}
		return (js.Boot.__instanceof(last,org.aswing.tree.DefaultMutableTreeNode)?last:null).getLevel() - this.getLevel();
	}
	,getLevel: function() {
		var ancestor;
		var levels = 0;
		ancestor = this;
		while((ancestor = ancestor.getParent()) != null) levels++;
		return levels;
	}
	,getPath: function() {
		return this.getPathToRoot(this,0);
	}
	,getPathToRoot: function(aNode,depth) {
		var retNodes;
		if(aNode == null) {
			if(depth == 0) return null; else retNodes = new Array();
		} else {
			depth++;
			retNodes = this.getPathToRoot(aNode.getParent(),depth);
			retNodes[retNodes.length - depth] = aNode;
		}
		return retNodes;
	}
	,getUserObjectPath: function() {
		var realPath = this.getPath();
		var retPath = new Array();
		var _g1 = 0;
		var _g = realPath.length;
		while(_g1 < _g) {
			var counter = _g1++;
			retPath[counter] = org.aswing.AsWingUtils["as"](realPath[counter],org.aswing.tree.DefaultMutableTreeNode).getUserObject();
		}
		return retPath;
	}
	,getRoot: function() {
		var ancestor = this;
		var previous;
		do {
			previous = ancestor;
			ancestor = ancestor.getParent();
		} while(ancestor != null);
		return previous;
	}
	,isRoot: function() {
		return this.getParent() == null;
	}
	,getNextNode: function() {
		if(this.getChildCount() == 0) {
			var nextSibling = this.getNextSibling();
			if(nextSibling == null) {
				var aNode = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.DefaultMutableTreeNode);
				do {
					if(aNode == null) return null;
					nextSibling = aNode.getNextSibling();
					if(nextSibling != null) return nextSibling;
					aNode = org.aswing.AsWingUtils["as"](aNode.getParent(),org.aswing.tree.DefaultMutableTreeNode);
				} while(true);
				return null;
			} else return nextSibling;
		} else return org.aswing.AsWingUtils["as"](this.getChildAt(0),org.aswing.tree.DefaultMutableTreeNode);
	}
	,getPreviousNode: function() {
		var previousSibling;
		var myParent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.DefaultMutableTreeNode);
		if(myParent == null) return null;
		previousSibling = this.getPreviousSibling();
		if(previousSibling != null) {
			if(previousSibling.getChildCount() == 0) return previousSibling; else return previousSibling.getLastLeaf();
		} else return myParent;
	}
	,preorderEnumeration: function() {
		var arr = new Array();
		this.fillPreorder(this,arr);
		return arr;
	}
	,fillPreorder: function(node,arr) {
		arr.push(node);
		var cd = node.children();
		if(cd != null && cd.length > 0) {
			var _g1 = 0;
			var _g = cd.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.fillPreorder(cd[i],arr);
			}
		}
	}
	,postorderEnumeration: function() {
		var arr = new Array();
		this.fillPostorder(this,arr);
		return arr;
	}
	,fillPostorder: function(node,arr) {
		var cd = node.children();
		if(cd != null && cd.length > 0) {
			var _g1 = 0;
			var _g = cd.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.fillPostorder(cd[i],arr);
			}
		} else arr.push(node);
	}
	,breadthFirstEnumeration: function() {
		var arr = new Array();
		var queue = new Array();
		queue.push(this);
		while(queue.length > 0) {
			var node = org.aswing.AsWingUtils["as"](queue.shift(),org.aswing.tree.TreeNode);
			arr.push(node);
			var cd = node.children();
			if(cd != null && cd.length > 0) {
				var _g1 = 0;
				var _g = cd.length;
				while(_g1 < _g) {
					var i = _g1++;
					queue.push(cd[i]);
				}
			}
		}
		return arr;
	}
	,depthFirstEnumeration: function() {
		return this.postorderEnumeration();
	}
	,pathFromAncestorEnumeration: function(ancestor) {
		var descendant = this;
		if(ancestor == null || descendant == null) {
			console.log("Error : argument is null");
			throw new org.aswing.error.Error("argument is null");
		}
		var current;
		var stack = new Array();
		stack.push(descendant);
		current = descendant;
		while(current != ancestor) {
			current = current.getParent();
			if(current == null && descendant != ancestor) {
				console.log("Error : " + "node " + Std.string(ancestor) + " is not an ancestor of " + Std.string(descendant));
				throw new org.aswing.error.Error("node " + Std.string(ancestor) + " is not an ancestor of " + Std.string(descendant));
			}
			stack.push(current);
		}
		stack.reverse();
		return stack;
	}
	,isNodeChild: function(aNode) {
		var retval;
		if(aNode == null) retval = false; else if(this.getChildCount() == 0) retval = false; else retval = aNode.getParent() == this;
		return retval;
	}
	,getFirstChild: function() {
		if(this.getChildCount() == 0) return null;
		return this.getChildAt(0);
	}
	,getLastChild: function() {
		if(this.getChildCount() == 0) return null;
		return this.getChildAt(this.getChildCount() - 1);
	}
	,getChildAfter: function(aChild) {
		if(aChild == null) {
			console.log("Error : argument is null");
			throw new org.aswing.error.Error("argument is null");
		}
		var index = this.getIndex(aChild);
		if(index == -1) {
			console.log("Error : node is not a child");
			throw new org.aswing.error.Error("node is not a child");
		}
		if(index < this.getChildCount() - 1) return this.getChildAt(index + 1); else return null;
	}
	,getChildBefore: function(aChild) {
		if(aChild == null) {
			console.log("Error : argument is null");
			throw new org.aswing.error.Error("argument is null");
		}
		var index = this.getIndex(aChild);
		if(index == -1) {
			console.log("Error : node is not a child");
			throw new org.aswing.error.Error("node is not a child");
		}
		if(index > 0) return this.getChildAt(index - 1); else return null;
	}
	,isNodeSibling: function(anotherNode) {
		var retval = false;
		if(anotherNode == null) retval = false; else if(anotherNode == this) retval = true; else {
			var myParent = this.getParent();
			retval = myParent != null && myParent == anotherNode.getParent();
			var mp = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.DefaultMutableTreeNode);
			if(retval && !mp.isNodeChild(anotherNode)) {
				console.log("Error : sibling has different parent");
				throw new org.aswing.error.Error("sibling has different parent");
			}
		}
		return retval;
	}
	,getSiblingCount: function() {
		var myParent = this.getParent();
		if(myParent == null) return 1; else return myParent.getChildCount();
	}
	,getNextSibling: function() {
		var retval;
		var myParent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.DefaultMutableTreeNode);
		if(myParent == null) retval = null; else retval = org.aswing.AsWingUtils["as"](myParent.getChildAfter(this),org.aswing.tree.DefaultMutableTreeNode);
		if(retval != null && !this.isNodeSibling(retval)) {
			console.log("Error : child of parent is not a sibling");
			throw new org.aswing.error.Error("child of parent is not a sibling");
		}
		return retval;
	}
	,getPreviousSibling: function() {
		var retval;
		var myParent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.DefaultMutableTreeNode);
		if(myParent == null) retval = null; else retval = org.aswing.AsWingUtils["as"](myParent.getChildBefore(this),org.aswing.tree.DefaultMutableTreeNode);
		if(retval != null && !this.isNodeSibling(retval)) {
			console.log("Error : child of parent is not a sibling");
			throw new org.aswing.error.Error("child of parent is not a sibling");
		}
		return retval;
	}
	,isLeaf: function() {
		return this.getChildCount() == 0;
	}
	,getFirstLeaf: function() {
		var node = this;
		while(!node.isLeaf()) node = org.aswing.AsWingUtils["as"](node.getFirstChild(),org.aswing.tree.DefaultMutableTreeNode);
		return node;
	}
	,getLastLeaf: function() {
		var node = this;
		while(!node.isLeaf()) node = org.aswing.AsWingUtils["as"](node.getLastChild(),org.aswing.tree.DefaultMutableTreeNode);
		return node;
	}
	,getNextLeaf: function() {
		var nextSibling;
		var myParent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.DefaultMutableTreeNode);
		if(myParent == null) return null;
		nextSibling = this.getNextSibling();
		if(nextSibling != null) return nextSibling.getFirstLeaf();
		return myParent.getNextLeaf();
	}
	,getPreviousLeaf: function() {
		var previousSibling;
		var myParent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.DefaultMutableTreeNode);
		if(myParent == null) return null;
		previousSibling = this.getPreviousSibling();
		if(previousSibling != null) return previousSibling.getLastLeaf();
		return myParent.getPreviousLeaf();
	}
	,getLeafCount: function() {
		var count = 0;
		var node;
		var enum_ = this.breadthFirstEnumeration();
		var _g1 = 0;
		var _g = enum_.length;
		while(_g1 < _g) {
			var i = _g1++;
			node = org.aswing.AsWingUtils["as"](enum_[i],org.aswing.tree.TreeNode);
			if(node.isLeaf()) count++;
		}
		if(count < 1) throw new org.aswing.error.Error("tree has zero leaves");
		return count;
	}
	,toString: function() {
		if(this.userObject == null) return null; else return this.userObject.toString();
	}
	,__class__: org.aswing.tree.DefaultMutableTreeNode
};
org.aswing.tree.TreeCell = function() { };
$hxClasses["org.aswing.tree.TreeCell"] = org.aswing.tree.TreeCell;
org.aswing.tree.TreeCell.__name__ = ["org","aswing","tree","TreeCell"];
org.aswing.tree.TreeCell.__interfaces__ = [org.aswing.Cell];
org.aswing.tree.TreeCell.prototype = {
	__class__: org.aswing.tree.TreeCell
};
org.aswing.tree.DefaultTreeCell = function() {
	org.aswing.JLabel.call(this);
	this.setHorizontalAlignment(2);
	this.setOpaque(true);
};
$hxClasses["org.aswing.tree.DefaultTreeCell"] = org.aswing.tree.DefaultTreeCell;
org.aswing.tree.DefaultTreeCell.__name__ = ["org","aswing","tree","DefaultTreeCell"];
org.aswing.tree.DefaultTreeCell.__interfaces__ = [org.aswing.tree.TreeCell];
org.aswing.tree.DefaultTreeCell.__super__ = org.aswing.JLabel;
org.aswing.tree.DefaultTreeCell.prototype = $extend(org.aswing.JLabel.prototype,{
	setComBounds: function(b) {
		if(!b.equals(this.bounds)) {
			this.bounds.setRect(b);
			this.locate();
			this.valid = false;
		}
	}
	,invalidate: function() {
		this.clearPreferSizeCaches();
		this.valid = false;
	}
	,revalidate: function() {
		this.valid = false;
	}
	,repaint: function() {
	}
	,getExpandedFolderIcon: function() {
		return this.expanded_folder_icon;
	}
	,getCollapsedFolderIcon: function() {
		return this.collapsed_folder_icon;
	}
	,getLeafIcon: function() {
		return this.leaf_icon;
	}
	,createExpandedFolderIcon: function(tree) {
		return tree.getUI().getIcon("Tree.folderExpandedIcon");
	}
	,createCollapsedFolderIcon: function(tree) {
		return tree.getUI().getIcon("Tree.folderCollapsedIcon");
	}
	,createLeafIcon: function(tree) {
		return tree.getUI().getIcon("Tree.leafIcon");
	}
	,setCellValue: function(value) {
		this.readyToPaint = true;
		this.value = value;
		this.setText(Std.string(value) + "");
	}
	,getCellValue: function() {
		return this.value;
	}
	,setTreeCellStatus: function(tree,selected,expanded,leaf,row) {
		if(this.expanded_folder_icon == null) {
			this.expanded_folder_icon = this.createExpandedFolderIcon(tree);
			this.getUI().putDefault("Tree.folderExpandedImage",tree.getUI().getDefault("Tree.folderExpandedImage"));
		}
		if(this.collapsed_folder_icon == null) {
			this.collapsed_folder_icon = this.createCollapsedFolderIcon(tree);
			this.getUI().putDefault("Tree.folderCollapsedImage",tree.getUI().getDefault("Tree.folderCollapsedImage"));
		}
		if(this.leaf_icon == null) {
			this.leaf_icon = this.createLeafIcon(tree);
			this.getUI().putDefault("Tree.leafImage",tree.getUI().getDefault("Tree.leafImage"));
		}
		if(selected) {
			this.setBackground(tree.getSelectionBackground());
			this.setForeground(tree.getSelectionForeground());
		} else {
			this.setBackground(tree.getBackground());
			this.setForeground(tree.getForeground());
		}
		this.setFont(tree.getFont());
		if(leaf) this.setIcon(this.getLeafIcon()); else if(expanded) this.setIcon(this.getExpandedFolderIcon()); else this.setIcon(this.getCollapsedFolderIcon());
	}
	,getCellComponent: function() {
		return this;
	}
	,toString: function() {
		return "TreeCell[label:" + org.aswing.JLabel.prototype.toString.call(this) + "]\n";
	}
	,__class__: org.aswing.tree.DefaultTreeCell
});
org.aswing.tree.TreeModel = function() { };
$hxClasses["org.aswing.tree.TreeModel"] = org.aswing.tree.TreeModel;
org.aswing.tree.TreeModel.__name__ = ["org","aswing","tree","TreeModel"];
org.aswing.tree.TreeModel.prototype = {
	__class__: org.aswing.tree.TreeModel
};
org.aswing.tree.DefaultTreeModel = function(root,asc) {
	if(asc == null) asc = false;
	this.root = root;
	this._asksAllowsChildren = asc;
	this.listenerList = new Array();
};
$hxClasses["org.aswing.tree.DefaultTreeModel"] = org.aswing.tree.DefaultTreeModel;
org.aswing.tree.DefaultTreeModel.__name__ = ["org","aswing","tree","DefaultTreeModel"];
org.aswing.tree.DefaultTreeModel.__interfaces__ = [org.aswing.tree.TreeModel];
org.aswing.tree.DefaultTreeModel.prototype = {
	setAsksAllowsChildren: function(newValue) {
		this._asksAllowsChildren = newValue;
	}
	,asksAllowsChildren: function() {
		return this._asksAllowsChildren;
	}
	,setRoot: function(root) {
		var oldRoot = this.root;
		this.root = root;
		if(root == null && oldRoot != null) this.fireTreeStructureChanged2(this,null); else this.nodeStructureChanged(root);
	}
	,getRoot: function() {
		return this.root;
	}
	,getIndexOfChild: function(parent,child) {
		if(parent == null || child == null) return -1;
		return (js.Boot.__instanceof(parent,org.aswing.tree.TreeNode)?parent:null).getIndex(js.Boot.__instanceof(child,org.aswing.tree.TreeNode)?child:null);
	}
	,getChild: function(parent,index) {
		return (js.Boot.__instanceof(parent,org.aswing.tree.TreeNode)?parent:null).getChildAt(index);
	}
	,getChildCount: function(parent) {
		return (js.Boot.__instanceof(parent,org.aswing.tree.TreeNode)?parent:null).getChildCount();
	}
	,isLeaf: function(node) {
		if(this.asksAllowsChildren()) return !(js.Boot.__instanceof(node,org.aswing.tree.TreeNode)?node:null).getAllowsChildren();
		return (js.Boot.__instanceof(node,org.aswing.tree.TreeNode)?node:null).isLeaf();
	}
	,valueForPathChanged: function(path,newValue) {
		var aNode = org.aswing.AsWingUtils["as"](path.getLastPathComponent(),org.aswing.tree.MutableTreeNode);
		aNode.setUserObject(newValue);
		this.nodeChanged(aNode);
	}
	,insertNodeInto: function(newChild,parent,index) {
		parent.insert(newChild,index);
		this.nodesWereInserted(parent,[index]);
	}
	,removeNodeFromParent: function(node) {
		var parent = org.aswing.AsWingUtils["as"](node.getParent(),org.aswing.tree.MutableTreeNode);
		if(parent == null) {
			console.log("Error : node does not have a parent.");
			throw new org.aswing.error.Error("node does not have a parent.");
		}
		var childIndex = [parent.getIndex(node)];
		parent.removeAt(childIndex[0]);
		var removedArray = [node];
		this.nodesWereRemoved(parent,childIndex,removedArray);
	}
	,nodeChanged: function(node) {
		if(this.listenerList != null && node != null) {
			var parent = node.getParent();
			if(parent != null) {
				var anIndex = parent.getIndex(node);
				if(anIndex != -1) this.nodesChanged(parent,[anIndex]);
			} else if(node == this.getRoot()) this.nodesChanged(node,null);
		}
	}
	,reload: function(node) {
		if(node == null) node = this.root;
		if(node != null) this.fireTreeStructureChanged(this,this.getPathToRoot(node),null,null);
	}
	,nodesWereInserted: function(node,childIndices) {
		if(this.listenerList != null && node != null && childIndices != null && childIndices.length > 0) {
			var cCount = childIndices.length;
			var newChildren = new Array();
			var _g = 0;
			while(_g < cCount) {
				var counter = _g++;
				newChildren[counter] = node.getChildAt(childIndices[counter]);
			}
			this.fireTreeNodesInserted(this,this.getPathToRoot(node),childIndices,newChildren);
		}
	}
	,nodesWereRemoved: function(node,childIndices,removedChildren) {
		if(node != null && childIndices != null) this.fireTreeNodesRemoved(this,this.getPathToRoot(node),childIndices,removedChildren);
	}
	,nodesChanged: function(node,childIndices) {
		if(node != null) {
			if(childIndices != null) {
				var cCount = childIndices.length;
				if(cCount > 0) {
					var cChildren = new Array();
					var _g = 0;
					while(_g < cCount) {
						var counter = _g++;
						cChildren[counter] = node.getChildAt(childIndices[counter]);
					}
					this.fireTreeNodesChanged(this,this.getPathToRoot(node),childIndices,cChildren);
				}
			} else if(node == this.getRoot()) this.fireTreeNodesChanged(this,this.getPathToRoot(node),null,null);
		}
	}
	,nodeStructureChanged: function(node) {
		if(node != null) this.fireTreeStructureChanged(this,this.getPathToRoot(node),null,null);
	}
	,getPathToRoot: function(aNode,depth) {
		if(depth == null) depth = 0;
		var retNodes;
		if(aNode == null) {
			if(depth == 0) return null; else retNodes = new Array();
		} else {
			depth++;
			if(aNode == this.root) retNodes = new Array(); else retNodes = this.getPathToRoot(aNode.getParent(),depth);
			retNodes[retNodes.length - depth] = aNode;
		}
		return retNodes;
	}
	,addTreeModelListener: function(l) {
		this.listenerList.push(l);
	}
	,removeTreeModelListener: function(l) {
		org.aswing.util.ArrayUtils.removeFromArray(this.listenerList,l);
	}
	,fireTreeNodesChanged: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org.aswing.event.TreeModelEvent(source,new org.aswing.tree.TreePath(path),childIndices,children);
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.event.TreeModelListener);
			lis.treeNodesChanged(e);
		}
	}
	,fireTreeNodesInserted: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org.aswing.event.TreeModelEvent(source,new org.aswing.tree.TreePath(path),childIndices,children);
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.event.TreeModelListener);
			lis.treeNodesInserted(e);
		}
	}
	,fireTreeNodesRemoved: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org.aswing.event.TreeModelEvent(source,new org.aswing.tree.TreePath(path),childIndices,children);
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.event.TreeModelListener);
			lis.treeNodesRemoved(e);
		}
	}
	,fireTreeStructureChanged: function(source,path,childIndices,children) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org.aswing.event.TreeModelEvent(source,new org.aswing.tree.TreePath(path),childIndices,children);
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.event.TreeModelListener);
			lis.treeStructureChanged(e);
		}
	}
	,fireTreeStructureChanged2: function(source,path) {
		var listeners = this.listenerList;
		var e = null;
		var _g1 = 0;
		var _g = listeners.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(e == null) e = new org.aswing.event.TreeModelEvent(source,path);
			var lis = org.aswing.AsWingUtils["as"](listeners[i],org.aswing.event.TreeModelListener);
			lis.treeStructureChanged(e);
		}
	}
	,toString: function() {
		return "DefaultTreeModel[root:" + Std.string(this.root) + "]";
	}
	,__class__: org.aswing.tree.DefaultTreeModel
};
org.aswing.tree.TreeSelectionModel = function() { };
$hxClasses["org.aswing.tree.TreeSelectionModel"] = org.aswing.tree.TreeSelectionModel;
org.aswing.tree.TreeSelectionModel.__name__ = ["org","aswing","tree","TreeSelectionModel"];
org.aswing.tree.TreeSelectionModel.prototype = {
	__class__: org.aswing.tree.TreeSelectionModel
};
org.aswing.tree.DefaultTreeSelectionModel = function() {
	this.listSelectionModel = new org.aswing.DefaultListSelectionModel();
	this.selectionMode = 4;
	this.leadIndex = this.leadRow = -1;
	this.uniquePaths = new org.aswing.tree.TreePathMap();
	this.lastPaths = new org.aswing.tree.TreePathMap();
	this.tempPaths = new Array();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.aswing.tree.DefaultTreeSelectionModel"] = org.aswing.tree.DefaultTreeSelectionModel;
org.aswing.tree.DefaultTreeSelectionModel.__name__ = ["org","aswing","tree","DefaultTreeSelectionModel"];
org.aswing.tree.DefaultTreeSelectionModel.__interfaces__ = [org.aswing.tree.TreeSelectionModel];
org.aswing.tree.DefaultTreeSelectionModel.__super__ = openfl.events.EventDispatcher;
org.aswing.tree.DefaultTreeSelectionModel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	setRowMapper: function(newMapper) {
		this.rowMapper = newMapper;
		this.resetRowSelection();
	}
	,getRowMapper: function() {
		return this.rowMapper;
	}
	,setSelectionMode: function(mode) {
		var oldMode = this.selectionMode;
		this.selectionMode = mode;
		if(this.selectionMode != 1 && this.selectionMode != 2 && this.selectionMode != 4) this.selectionMode = 4;
		if(oldMode != this.selectionMode) this.firePropertyChange("selectionMode",oldMode,this.selectionMode);
	}
	,firePropertyChange: function(name,oldValue,newValue) {
		this.dispatchEvent(new org.aswing.event.PropertyChangeEvent(name,oldValue,newValue));
	}
	,getSelectionMode: function() {
		return this.selectionMode;
	}
	,setSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		if(path == null) this.setSelectionPaths(null,programmatic); else this.setSelectionPaths([path],programmatic);
	}
	,setSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
		var newCount;
		var newCounter;
		var oldCount;
		var oldCounter;
		var paths = pPaths;
		if(paths == null) newCount = 0; else newCount = paths.length;
		if(this.selection == null) oldCount = 0; else oldCount = this.selection.length;
		if(newCount + oldCount != 0) {
			if(this.selectionMode == 1) {
				if(newCount > 1) {
					paths = [pPaths[0]];
					newCount = 1;
				}
			} else if(this.selectionMode == 2) {
				if(newCount > 0 && !this.arePathsContiguous(paths)) {
					paths = [pPaths[0]];
					newCount = 1;
				}
			}
			var validCount = 0;
			var beginLeadPath = this.leadPath;
			var cPaths = new org.aswing.util.ArrayList();
			var path;
			this.lastPaths.clear();
			this.leadPath = null;
			var _g = 0;
			while(_g < newCount) {
				var newCounter1 = _g++;
				path = paths[newCounter1];
				if(path != null && this.lastPaths.get(path) == null) {
					validCount++;
					this.lastPaths.put(path,true);
					if(this.uniquePaths.get(path) == null) cPaths.append(new org.aswing.tree.PathPlaceHolder(path,true));
					this.leadPath = path;
				}
			}
			var newSelection;
			if(validCount == 0) newSelection = null; else if(validCount != newCount) {
				newSelection = new Array();
				validCount = 0;
				var $it0 = this.lastPaths.keys();
				while( $it0.hasNext() ) {
					var key = $it0.next();
					newSelection[validCount++] = key;
				}
			} else newSelection = paths.slice();
			var _g1 = 0;
			while(_g1 < oldCount) {
				var oldCounter1 = _g1++;
				path = this.selection[oldCounter1];
				if(path != null && this.lastPaths.get(path) == null) cPaths.append(new org.aswing.tree.PathPlaceHolder(path,false));
			}
			this.selection = newSelection;
			var tempHT = this.uniquePaths;
			this.uniquePaths = this.lastPaths;
			this.lastPaths = tempHT;
			this.lastPaths.clear();
			if(this.selection != null) this.insureUniqueness();
			this.updateLeadIndex();
			this.resetRowSelection();
			if(cPaths.size() > 0) this.notifyPathChange(cPaths,beginLeadPath,programmatic);
		}
	}
	,addSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		if(path != null) this.addSelectionPaths([path],programmatic);
	}
	,addSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		var newPathLength;
		if(paths == null) newPathLength = 0; else newPathLength = paths.length;
		if(newPathLength <= 0) return;
		if(this.selectionMode == 1) this.setSelectionPaths(paths); else if(this.selectionMode == 2 && !this.canPathsBeAdded(paths)) {
			if(this.arePathsContiguous(paths)) this.setSelectionPaths(paths); else this.setSelectionPaths([paths[0]]);
		} else {
			var counter;
			var validCount;
			var oldCount;
			var beginLeadPath = this.leadPath;
			var cPaths = null;
			if(this.selection == null) oldCount = 0; else oldCount = this.selection.length;
			this.lastPaths.clear();
			counter = 0;
			validCount = 0;
			var _g = 0;
			while(_g < newPathLength) {
				var counter1 = _g++;
				var path = paths[counter1];
				if(path != null) {
					if(this.uniquePaths.get(path) == null) {
						validCount++;
						if(cPaths == null) cPaths = new org.aswing.util.ArrayList();
						cPaths.append(new org.aswing.tree.PathPlaceHolder(path,true));
						this.uniquePaths.put(path,true);
						this.lastPaths.put(path,true);
					}
					this.leadPath = path;
				}
			}
			if(this.leadPath == null) this.leadPath = beginLeadPath;
			if(validCount > 0) {
				var newSelection = new Array();
				if(oldCount > 0) newSelection = this.selection.slice();
				if(validCount != paths.length) {
					var $it0 = this.lastPaths.keys();
					while( $it0.hasNext() ) {
						var newPaths = $it0.next();
						newSelection.push(newPaths);
					}
				} else newSelection = newSelection.concat(paths);
				this.selection = newSelection;
				this.insureUniqueness();
				this.updateLeadIndex();
				this.resetRowSelection();
				this.notifyPathChange(cPaths,beginLeadPath,programmatic);
			} else this.leadPath = beginLeadPath;
			this.lastPaths.clear();
		}
	}
	,removeSelectionPath: function(path,programmatic) {
		if(programmatic == null) programmatic = true;
		if(path != null) this.removeSelectionPaths([path],programmatic);
	}
	,removeSelectionPaths: function(paths,programmatic) {
		if(programmatic == null) programmatic = true;
		if(paths != null && this.selection != null && paths.length > 0) {
			if(!this.canPathsBeRemoved(paths)) this.clearSelection(); else {
				var pathsToRemove = null;
				var _g1 = 0;
				var _g = paths.length;
				while(_g1 < _g) {
					var removeCounter = _g1++;
					var path = paths[removeCounter];
					if(path != null) {
						if(this.uniquePaths.get(path) != null) {
							if(pathsToRemove == null) pathsToRemove = new org.aswing.util.ArrayList();
							this.uniquePaths.remove(path);
							pathsToRemove.append(new org.aswing.tree.PathPlaceHolder(path,false));
						}
					}
				}
				if(pathsToRemove != null) {
					var removeCount = pathsToRemove.size();
					var beginLeadPath = this.leadPath;
					if(removeCount == this.selection.length) this.selection = null; else {
						var validCount = 0;
						this.selection = new Array();
						var $it0 = this.uniquePaths.keys();
						while( $it0.hasNext() ) {
							var pEnum = $it0.next();
							this.selection[validCount++] = pEnum;
						}
					}
					if(this.leadPath != null && this.uniquePaths.get(this.leadPath) == null) {
						if(this.selection != null) this.leadPath = this.selection[this.selection.length - 1]; else this.leadPath = null;
					} else if(this.selection != null) this.leadPath = this.selection[this.selection.length - 1]; else this.leadPath = null;
					this.updateLeadIndex();
					this.resetRowSelection();
					this.notifyPathChange(pathsToRemove,beginLeadPath,programmatic);
				}
			}
		}
	}
	,getSelectionPath: function() {
		if(this.selection != null) return this.selection[0]; else return null;
	}
	,getSelectionPaths: function() {
		if(this.selection != null) return this.selection.slice();
		return null;
	}
	,getSelectionCount: function() {
		if(this.selection == null) return 0; else return this.selection.length;
	}
	,isPathSelected: function(path) {
		if(path != null) return this.uniquePaths.get(path) != null; else return false;
	}
	,isSelectionEmpty: function() {
		return this.selection == null;
	}
	,clearSelection: function(programmatic) {
		if(programmatic == null) programmatic = true;
		if(this.selection != null) {
			var selSize = this.selection.length;
			var newness = new Array();
			var _g = 0;
			while(_g < selSize) {
				var counter = _g++;
				newness[counter] = false;
			}
			var event = new org.aswing.event.TreeSelectionEvent(this,programmatic,this.selection,newness,this.leadPath,null);
			this.leadPath = null;
			this.leadIndex = this.leadRow = -1;
			this.uniquePaths.clear();
			this.selection = null;
			this.resetRowSelection();
			this.fireValueChanged(event);
		}
	}
	,fireValueChanged: function(e) {
		this.dispatchEvent(e);
	}
	,getSelectionRows: function() {
		if(this.rowMapper != null && this.selection != null) {
			var counter;
			var rows = this.rowMapper.getRowsForPaths(this.selection);
			if(rows != null) {
				var invisCount = 0;
				var _g1 = 0;
				var _g = rows.length;
				while(_g1 < _g) {
					var counter1 = _g1++;
					if(rows[counter1] == -1) invisCount++;
				}
				if(invisCount > 0) {
					if(invisCount == rows.length) rows = null; else {
						var tempRows = new Array();
						counter = rows.length - 1;
						var visCounter = 0;
						while(counter >= 0) {
							if(rows[counter] != -1) tempRows[visCounter++] = rows[counter];
							counter--;
						}
						rows = tempRows;
					}
				}
			}
			return rows;
		}
		return null;
	}
	,getMinSelectionRow: function() {
		return this.listSelectionModel.getMinSelectionIndex();
	}
	,getMaxSelectionRow: function() {
		return this.listSelectionModel.getMaxSelectionIndex();
	}
	,isRowSelected: function(row) {
		return this.listSelectionModel.isSelectedIndex(row);
	}
	,resetRowSelection: function() {
		this.listSelectionModel.clearSelection();
		if(this.selection != null && this.rowMapper != null) {
			var aRow;
			var rows = this.rowMapper.getRowsForPaths(this.selection);
			var counter = 0;
			var maxCounter = this.selection.length;
			var _g = 0;
			while(_g < maxCounter) {
				var counter1 = _g++;
				aRow = rows[counter1];
				if(aRow != -1) this.listSelectionModel.addSelectionInterval(aRow,aRow);
			}
			if(this.leadIndex != -1 && rows != null) this.leadRow = rows[this.leadIndex]; else if(this.leadPath != null) {
				this.tempPaths[0] = this.leadPath;
				rows = this.rowMapper.getRowsForPaths(this.tempPaths);
				if(rows != null) this.leadRow = rows[0]; else this.leadRow = -1;
			} else this.leadRow = -1;
			this.insureRowContinuity();
		} else this.leadRow = -1;
	}
	,getLeadSelectionRow: function() {
		return this.leadRow;
	}
	,getLeadSelectionPath: function() {
		return this.leadPath;
	}
	,addPropertyChangeListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("propertyChange",listener,false,priority,useWeakReference);
	}
	,removePropertyChangeListener: function(listener) {
		this.removeEventListener("propertyChange",listener);
	}
	,addTreeSelectionListener: function(listener,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		this.addEventListener("treeSelectionChanged",listener,false,priority,useWeakReference);
	}
	,removeTreeSelectionListener: function(listener) {
		this.removeEventListener("treeSelectionChanged",listener);
	}
	,insureRowContinuity: function() {
		if(this.selectionMode == 2 && this.selection != null && this.rowMapper != null) {
			var lModel = this.listSelectionModel;
			var min = lModel.getMinSelectionIndex();
			if(min != -1) {
				var counter = min;
				var maxCounter = lModel.getMaxSelectionIndex();
				while(counter <= maxCounter) {
					if(!lModel.isSelectedIndex(counter)) {
						if(counter == min) this.clearSelection(); else {
							var newSel = new Array();
							var selectionIndex = this.rowMapper.getRowsForPaths(this.selection);
							var _g1 = 0;
							var _g = selectionIndex.length;
							while(_g1 < _g) {
								var i = _g1++;
								if(selectionIndex[i] < counter) newSel[(selectionIndex[i] | 0) - min] = this.selection[i];
							}
							this.setSelectionPaths(newSel);
							break;
						}
					}
					counter++;
				}
			}
		} else if(this.selectionMode == 1 && this.selection != null && this.selection.length > 1) this.setSelectionPath(this.selection[0]);
	}
	,arePathsContiguous: function(paths) {
		if(this.rowMapper == null || paths.length < 2) return true; else {
			var bitSet = new Array();
			var anIndex;
			var counter;
			var min;
			var pathCount = paths.length;
			var validCount = 0;
			var tempPath = [paths[0]];
			min = this.rowMapper.getRowsForPaths(tempPath)[0];
			var _g = 0;
			while(_g < pathCount) {
				var counter1 = _g++;
				if(paths[counter1] != null) {
					tempPath[0] = paths[counter1];
					var rows = this.rowMapper.getRowsForPaths(tempPath);
					if(rows == null) return false;
					anIndex = rows[0];
					if(anIndex == -1 || anIndex < min - pathCount || anIndex > min + pathCount) return false;
					if(anIndex < min) min = anIndex;
					if(!(bitSet[anIndex] == true)) {
						bitSet[anIndex] = true;
						validCount++;
					}
				}
			}
			var maxCounter = validCount + min;
			var _g1 = min;
			while(_g1 < maxCounter) {
				var counter2 = _g1++;
				if(!(bitSet[counter2] == true)) return false;
			}
		}
		return true;
	}
	,canPathsBeAdded: function(paths) {
		if(paths == null || paths.length == 0 || this.rowMapper == null || this.selection == null || this.selectionMode == 4) return true; else {
			var bitSet = new Array();
			var lModel = this.listSelectionModel;
			var anIndex;
			var counter;
			var min = lModel.getMinSelectionIndex();
			var max = lModel.getMaxSelectionIndex();
			var tempPath = new Array();
			if(min != -1) {
				var _g1 = min;
				var _g = max + 1;
				while(_g1 < _g) {
					var counter1 = _g1++;
					if(lModel.isSelectedIndex(counter1)) bitSet[counter1] = true;
				}
			} else {
				tempPath[0] = paths[0];
				min = max = this.rowMapper.getRowsForPaths(tempPath)[0];
			}
			var _g11 = 0;
			var _g2 = paths.length;
			while(_g11 < _g2) {
				var counter2 = _g11++;
				if(paths[counter2] != null) {
					tempPath[0] = paths[counter2];
					var rows = this.rowMapper.getRowsForPaths(tempPath);
					if(rows == null) return false;
					anIndex = rows[0];
					min = Std["int"](Math.min(anIndex,min));
					max = Std["int"](Math.max(anIndex,max));
					if(anIndex == -1) return false;
					bitSet[anIndex] = true;
				}
			}
			var _g12 = min;
			var _g3 = max + 1;
			while(_g12 < _g3) {
				var counter3 = _g12++;
				if(!(bitSet[counter3] == true)) return false;
			}
		}
		return true;
	}
	,canPathsBeRemoved: function(paths) {
		if(this.rowMapper == null || this.selection == null || this.selectionMode == 4) return true; else {
			var bitSet = new Array();
			var counter;
			var pathCount = paths.length;
			var min = -1;
			var validCount = 0;
			var tempPath = new Array();
			var rows;
			this.lastPaths.clear();
			var _g = 0;
			while(_g < pathCount) {
				var counter1 = _g++;
				if(paths[counter1] != null) this.lastPaths.put(paths[counter1],true);
			}
			var _g1 = 0;
			var _g2 = this.selection.length;
			while(_g1 < _g2) {
				var counter2 = _g1++;
				if(this.lastPaths.get(this.selection[counter2]) == null) {
					tempPath[0] = this.selection[counter2];
					rows = this.rowMapper.getRowsForPaths(tempPath);
					if(rows != null && rows[0] != -1 && !(bitSet[rows[0]] == true)) {
						validCount++;
						if(min == -1) min = rows[0]; else min = Std["int"](Math.min(min,rows[0]));
						bitSet[rows[0]] = true;
					}
				}
			}
			this.lastPaths.clear();
			if(validCount > 1) {
				var _g11 = min;
				var _g3 = min + validCount;
				while(_g11 < _g3) {
					var counter3 = _g11++;
					if(!(bitSet[counter3] == true)) return false;
				}
			}
		}
		return true;
	}
	,notifyPathChange: function(changedPaths,oldLeadSelection,programmatic) {
		var cPathCount = changedPaths.size();
		var newness = new Array();
		var paths = new Array();
		var placeholder;
		var _g = 0;
		while(_g < cPathCount) {
			var counter = _g++;
			placeholder = org.aswing.AsWingUtils["as"](changedPaths.get(counter),org.aswing.tree.PathPlaceHolder);
			newness[counter] = placeholder.isNew;
			paths[counter] = placeholder.path;
		}
		var event = new org.aswing.event.TreeSelectionEvent(this,programmatic,paths,newness,oldLeadSelection,this.leadPath);
		this.fireValueChanged(event);
	}
	,updateLeadIndex: function() {
		if(this.leadPath != null) {
			if(this.selection == null) {
				this.leadPath = null;
				this.leadIndex = this.leadRow = -1;
			} else {
				this.leadRow = this.leadIndex = -1;
				var _g1 = 0;
				var _g = this.selection.length;
				while(_g1 < _g) {
					var counter = _g1++;
					if(this.selection[counter] == this.leadPath) {
						this.leadIndex = counter;
						break;
					}
				}
			}
		} else this.leadIndex = -1;
	}
	,insureUniqueness: function() {
	}
	,toString: function() {
		return "DefaultTreeSelectionModel[" + Std.string(this.getSelectionPaths()) + "]";
	}
	,__class__: org.aswing.tree.DefaultTreeSelectionModel
});
org.aswing.tree.EmptySelectionModel = function() {
	org.aswing.tree.DefaultTreeSelectionModel.call(this);
};
$hxClasses["org.aswing.tree.EmptySelectionModel"] = org.aswing.tree.EmptySelectionModel;
org.aswing.tree.EmptySelectionModel.__name__ = ["org","aswing","tree","EmptySelectionModel"];
org.aswing.tree.EmptySelectionModel.sharedInstance = function() {
	if(org.aswing.tree.EmptySelectionModel._sharedInstance == null) org.aswing.tree.EmptySelectionModel._sharedInstance = new org.aswing.tree.EmptySelectionModel();
	return org.aswing.tree.EmptySelectionModel._sharedInstance;
};
org.aswing.tree.EmptySelectionModel.__super__ = org.aswing.tree.DefaultTreeSelectionModel;
org.aswing.tree.EmptySelectionModel.prototype = $extend(org.aswing.tree.DefaultTreeSelectionModel.prototype,{
	setSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
	}
	,addSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
	}
	,removeSelectionPaths: function(pPaths,programmatic) {
		if(programmatic == null) programmatic = true;
	}
	,__class__: org.aswing.tree.EmptySelectionModel
});
org.aswing.tree.EnumerationInfo = function() {
};
$hxClasses["org.aswing.tree.EnumerationInfo"] = org.aswing.tree.EnumerationInfo;
org.aswing.tree.EnumerationInfo.__name__ = ["org","aswing","tree","EnumerationInfo"];
org.aswing.tree.EnumerationInfo.prototype = {
	__class__: org.aswing.tree.EnumerationInfo
};
org.aswing.tree.FHTreeStateNode = function(layoutCache,userObject,childIndex,row) {
	org.aswing.tree.DefaultMutableTreeNode.call(this,userObject);
	this.childIndex = childIndex;
	this.row = row;
	this.layoutCache = layoutCache;
	this.childCount = 0;
	this.expanded = false;
};
$hxClasses["org.aswing.tree.FHTreeStateNode"] = org.aswing.tree.FHTreeStateNode;
org.aswing.tree.FHTreeStateNode.__name__ = ["org","aswing","tree","FHTreeStateNode"];
org.aswing.tree.FHTreeStateNode.__super__ = org.aswing.tree.DefaultMutableTreeNode;
org.aswing.tree.FHTreeStateNode.prototype = $extend(org.aswing.tree.DefaultMutableTreeNode.prototype,{
	setPath: function(p) {
		this.path = p;
	}
	,setRow: function(r) {
		this.row = r;
	}
	,setParent: function(parent) {
		org.aswing.tree.DefaultMutableTreeNode.prototype.setParent.call(this,parent);
		if(parent != null) {
			this.path = (js.Boot.__instanceof(parent,org.aswing.tree.FHTreeStateNode)?parent:null).getTreePath().pathByAddingChild(this.getUserObject());
			this.layoutCache.addMapping(this);
		}
	}
	,removeAt: function(childIndex) {
		var node = org.aswing.AsWingUtils["as"](this.getChildAt(childIndex),org.aswing.tree.FHTreeStateNode);
		node.removeFromMapping();
		org.aswing.tree.DefaultMutableTreeNode.prototype.removeAt.call(this,childIndex);
	}
	,setUserObject: function(o) {
		org.aswing.tree.DefaultMutableTreeNode.prototype.setUserObject.call(this,o);
		if(this.path != null) {
			var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
			if(parent != null) this.resetChildrenPaths(parent.getTreePath()); else this.resetChildrenPaths(null);
		}
	}
	,getChildIndex: function() {
		return this.childIndex;
	}
	,getTreePath: function() {
		return this.path;
	}
	,getChildAtModelIndex: function(index) {
		var _g1 = 0;
		var _g = this.getChildCount();
		while(_g1 < _g) {
			var counter = _g1++;
			if(org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode).childIndex == index) return org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode);
		}
		return null;
	}
	,isVisible: function() {
		var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
		if(parent == null) return true;
		return parent.isExpanded() && parent.isVisible();
	}
	,getRow: function() {
		return this.row;
	}
	,getRowToModelIndex: function(index) {
		var child;
		var counter = 0;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			child = org.aswing.AsWingUtils["as"](this.getChildAt(counter1),org.aswing.tree.FHTreeStateNode);
			if(child.childIndex >= index) {
				if(child.childIndex == index) return child.row;
				if(counter1 == 0) return this.getRow() + 1 + index;
				return child.row - (child.childIndex - index);
			}
		}
		return this.getRow() + 1 + this.getTotalChildCount() - (this.childCount - index);
	}
	,getTotalChildCount: function() {
		if(this.isExpanded()) {
			var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
			var pIndex;
			if(parent != null && (pIndex = parent.getIndex(this)) + 1 < parent.getChildCount()) {
				var nextSibling = org.aswing.AsWingUtils["as"](parent.getChildAt(pIndex + 1),org.aswing.tree.FHTreeStateNode);
				return nextSibling.row - this.row - (nextSibling.childIndex - this.childIndex) | 0;
			} else {
				var retCount = this.childCount;
				var _g1 = 0;
				var _g = this.getChildCount();
				while(_g1 < _g) {
					var counter = _g1++;
					retCount += org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode).getTotalChildCount();
				}
				return retCount;
			}
		}
		return 0;
	}
	,isExpanded: function() {
		return this.expanded;
	}
	,getVisibleLevel: function() {
		if(this.layoutCache.isRootVisible()) return this.getLevel(); else return this.getLevel() - 1;
	}
	,resetChildrenPaths: function(parentPath) {
		this.layoutCache.removeMapping(this);
		if(parentPath == null) this.path = new org.aswing.tree.TreePath([this.getUserObject()]); else this.path = parentPath.pathByAddingChild(this.getUserObject());
		this.layoutCache.addMapping(this);
		var _g1 = 0;
		var _g = this.getChildCount();
		while(_g1 < _g) {
			var counter = _g1++;
			org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode).resetChildrenPaths(this.path);
		}
	}
	,removeFromMapping: function() {
		if(this.path != null) {
			this.layoutCache.removeMapping(this);
			var _g1 = 0;
			var _g = this.getChildCount();
			while(_g1 < _g) {
				var counter = _g1++;
				org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode).removeFromMapping();
			}
		}
	}
	,createChildFor: function(userObject) {
		var newChildIndex = this.layoutCache.getModel().getIndexOfChild(this.getUserObject(),userObject);
		if(newChildIndex < 0) return null;
		var aNode;
		var child = this.layoutCache.createNodeForValue(userObject,newChildIndex);
		var childRow;
		if(this.isVisible()) childRow = this.getRowToModelIndex(newChildIndex); else childRow = -1;
		child.row = childRow;
		var counter = 0;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			aNode = org.aswing.AsWingUtils["as"](this.getChildAt(counter1),org.aswing.tree.FHTreeStateNode);
			if(aNode.childIndex > newChildIndex) {
				this.insert(child,counter1);
				return child;
			}
		}
		this.append(child);
		return child;
	}
	,adjustRowBy: function(amount,startIndex) {
		if(startIndex == null) startIndex = -2;
		var counter;
		if(startIndex == -2) {
			this.row += amount;
			if(this.expanded) {
				var _g1 = 0;
				var _g = this.getChildCount();
				while(_g1 < _g) {
					var counter1 = _g1++;
					org.aswing.AsWingUtils["as"](this.getChildAt(counter1),org.aswing.tree.FHTreeStateNode).adjustRowBy(amount);
				}
			}
		} else {
			if(this.expanded) {
				var _g11 = startIndex;
				var _g2 = this.getChildCount();
				while(_g11 < _g2) {
					var counter2 = _g11++;
					org.aswing.AsWingUtils["as"](this.getChildAt(counter2),org.aswing.tree.FHTreeStateNode).adjustRowBy(amount);
				}
			}
			var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
			if(parent != null) parent.adjustRowBy(amount,parent.getIndex(this) + 1);
		}
	}
	,didExpand: function() {
		var nextRow = this.setRowAndChildren(this.row);
		var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
		var childRowCount = nextRow - this.row - 1;
		if(parent != null) parent.adjustRowBy(childRowCount,parent.getIndex(this) + 1);
		this.layoutCache.adjustRowCountBy(childRowCount);
	}
	,setRowAndChildren: function(nextRow) {
		this.row = nextRow;
		if(!this.isExpanded()) return this.row + 1;
		var lastRow = this.row + 1;
		var lastModelIndex = 0;
		var child;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter = _g++;
			child = org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode);
			lastRow += child.childIndex - lastModelIndex;
			lastModelIndex = child.childIndex + 1;
			if(child.expanded) lastRow = child.setRowAndChildren(lastRow); else child.row = lastRow++;
		}
		return lastRow + this.childCount - lastModelIndex;
	}
	,resetChildrenRowsFrom: function(newRow,childIndex,modelIndex) {
		var lastRow = newRow;
		var lastModelIndex = modelIndex;
		var node;
		var maxCounter = this.getChildCount();
		var _g = childIndex;
		while(_g < maxCounter) {
			var counter = _g++;
			node = org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode);
			lastRow += node.childIndex - lastModelIndex;
			lastModelIndex = node.childIndex + 1;
			if(!node.expanded) lastRow = node.setRowAndChildren(lastRow); else node.row = lastRow++;
		}
		lastRow += this.childCount - lastModelIndex;
		node = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
		if(node != null) node.resetChildrenRowsFrom(lastRow,node.getIndex(this) + 1,this.childIndex + 1); else this.layoutCache.setRowCount(lastRow);
	}
	,makeVisible: function() {
		var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
		if(parent != null) parent.expandParentAndReceiver();
	}
	,expandParentAndReceiver: function() {
		var parent = org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode);
		if(parent != null) parent.expandParentAndReceiver();
		this.expand();
	}
	,expand: function() {
		if(!this.expanded && !this.isLeaf()) {
			var visible = this.isVisible();
			this.expanded = true;
			this.childCount = this.layoutCache.getModel().getChildCount(this.getUserObject());
			if(visible) this.didExpand();
			if(visible && this.layoutCache.getSelectionModel() != null) this.layoutCache.getSelectionModel().resetRowSelection();
		}
	}
	,collapse: function(adjustRows) {
		if(this.expanded) {
			if(this.isVisible() && adjustRows) {
				var childCount = this.getTotalChildCount();
				this.expanded = false;
				this.layoutCache.adjustRowCountBy(-childCount);
				this.adjustRowBy(-childCount,0);
			} else this.expanded = false;
			if(adjustRows && this.isVisible() && this.layoutCache.getSelectionModel() != null) this.layoutCache.getSelectionModel().resetRowSelection();
		}
	}
	,isLeaf: function() {
		var model = this.layoutCache.getModel();
		if(model != null) return model.isLeaf(this.getUserObject()); else return true;
	}
	,removeChildAtModelIndex: function(modelIndex,isChildVisible) {
		var childNode = this.getChildAtModelIndex(modelIndex);
		if(childNode != null) {
			var row = childNode.getRow();
			var index = this.getIndex(childNode);
			childNode.collapse(false);
			this.removeAt(index);
			this.adjustChildIndexs(index,-1);
			this.childCount--;
			if(!isChildVisible) this.resetChildrenRowsFrom(row,index,modelIndex);
		} else {
			var maxCounter = this.getChildCount();
			var aChild;
			var counter = 0;
			while(counter < maxCounter) {
				aChild = org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode);
				if(aChild.childIndex >= modelIndex) {
					if(isChildVisible) {
						this.adjustRowBy(-1,counter);
						this.layoutCache.adjustRowCountBy(-1);
					}
					while(counter < maxCounter) {
						org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode).childIndex--;
						counter++;
					}
					this.childCount--;
					return;
				}
			}
			if(isChildVisible) {
				this.adjustRowBy(-1,maxCounter);
				this.layoutCache.adjustRowCountBy(-1);
			}
			this.childCount--;
		}
	}
	,adjustChildIndexs: function(index,amount) {
		var counter = index;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			org.aswing.AsWingUtils["as"](this.getChildAt(counter1),org.aswing.tree.FHTreeStateNode).childIndex += amount;
		}
	}
	,childInsertedAtModelIndex: function(index,isExpandedAndVisible) {
		var aChild;
		var maxCounter = this.getChildCount();
		var _g = 0;
		while(_g < maxCounter) {
			var counter = _g++;
			aChild = org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode);
			if(aChild.childIndex >= index) {
				if(isExpandedAndVisible) {
					this.adjustRowBy(1,counter);
					this.layoutCache.adjustRowCountBy(1);
				}
				while(counter < maxCounter) org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode).childIndex--;
				this.childCount++;
				return;
			}
		}
		if(isExpandedAndVisible) {
			this.adjustRowBy(1,maxCounter);
			this.layoutCache.adjustRowCountBy(1);
		}
		this.childCount++;
	}
	,getPathForRow: function(row,nextRow,info) {
		if(this.row == row) {
			info.node = this;
			info.isNodeParentNode = false;
			info.childIndex = this.childIndex;
			return true;
		}
		var child;
		var lastChild = null;
		var counter = 0;
		var maxCounter = this.getChildCount();
		var lastChildEndRow;
		var _g = 0;
		while(_g < maxCounter) {
			var counter1 = _g++;
			child = org.aswing.AsWingUtils["as"](this.getChildAt(counter1),org.aswing.tree.FHTreeStateNode);
			if(child.row > row) {
				if(counter1 == 0) {
					info.node = this;
					info.isNodeParentNode = true;
					info.childIndex = row - this.row - 1;
					return true;
				} else {
					lastChildEndRow = 1 + child.row - (child.childIndex - lastChild.childIndex);
					if(row < lastChildEndRow) return lastChild.getPathForRow(row,lastChildEndRow,info);
					info.node = this;
					info.isNodeParentNode = true;
					info.childIndex = row - lastChildEndRow + lastChild.childIndex + 1;
					return true;
				}
			}
			lastChild = child;
		}
		if(lastChild != null) {
			lastChildEndRow = nextRow - (this.childCount - lastChild.childIndex) + 1;
			if(row < lastChildEndRow) return lastChild.getPathForRow(row,lastChildEndRow,info);
			info.node = this;
			info.isNodeParentNode = true;
			info.childIndex = row - lastChildEndRow + lastChild.childIndex + 1;
			return true;
		} else {
			var retChildIndex = row - this.row - 1;
			if(retChildIndex >= this.childCount) return false;
			info.node = this;
			info.isNodeParentNode = true;
			info.childIndex = retChildIndex;
			return true;
		}
	}
	,getCountTo: function(stopIndex) {
		var aChild;
		var retCount = stopIndex + 1;
		var counter = 0;
		var maxCounter = this.getChildCount();
		counter = 0;
		while(counter < maxCounter) {
			aChild = org.aswing.AsWingUtils["as"](this.getChildAt(counter),org.aswing.tree.FHTreeStateNode);
			if(aChild.childIndex >= stopIndex) counter = maxCounter; else retCount += aChild.getTotalChildCount();
		}
		if(this.parent != null) return retCount + org.aswing.AsWingUtils["as"](this.getParent(),org.aswing.tree.FHTreeStateNode).getCountTo(this.childIndex);
		if(!this.layoutCache.isRootVisible()) return retCount - 1;
		return retCount;
	}
	,__class__: org.aswing.tree.FHTreeStateNode
});
org.aswing.tree.FixedHeightLayoutCache = function() {
	org.aswing.tree.AbstractLayoutCache.call(this);
	this.rowCount = 0;
	this.rootVisible = false;
	this.tempStacks = new org.aswing.util.Stack();
	this.boundsBuffer = new org.aswing.geom.IntRectangle();
	this.treePathMapping = new org.aswing.tree.TreePathMap();
	this.info = new org.aswing.tree.SearchInfo(this);
	this.setRowHeight(16);
};
$hxClasses["org.aswing.tree.FixedHeightLayoutCache"] = org.aswing.tree.FixedHeightLayoutCache;
org.aswing.tree.FixedHeightLayoutCache.__name__ = ["org","aswing","tree","FixedHeightLayoutCache"];
org.aswing.tree.FixedHeightLayoutCache.__super__ = org.aswing.tree.AbstractLayoutCache;
org.aswing.tree.FixedHeightLayoutCache.prototype = $extend(org.aswing.tree.AbstractLayoutCache.prototype,{
	setModel: function(newModel) {
		org.aswing.tree.AbstractLayoutCache.prototype.setModel.call(this,newModel);
		this.rebuild(false);
	}
	,setRootVisible: function(rootVisible) {
		if(this.isRootVisible() != rootVisible) {
			org.aswing.tree.AbstractLayoutCache.prototype.setRootVisible.call(this,rootVisible);
			if(this.root != null) {
				if(rootVisible) {
					this.rowCount++;
					this.root.adjustRowBy(1);
				} else {
					this.rowCount--;
					this.root.adjustRowBy(-1);
				}
				this.visibleNodesChanged();
			}
		}
	}
	,setRowHeight: function(rowHeight) {
		if(rowHeight <= 0) {
			console.log("Error : FixedHeightLayoutCache only supports row heights greater than 0");
			throw new org.aswing.error.Error("FixedHeightLayoutCache only supports row heights greater than 0");
		}
		if(this.getRowHeight() != rowHeight) {
			org.aswing.tree.AbstractLayoutCache.prototype.setRowHeight.call(this,rowHeight);
			this.visibleNodesChanged();
		}
	}
	,setRowCount: function(rc) {
		this.rowCount = rc;
	}
	,getRowCount: function() {
		return this.rowCount;
	}
	,invalidatePathBounds: function(path) {
	}
	,invalidateSizes: function() {
		this.visibleNodesChanged();
	}
	,isExpanded: function(path) {
		if(path != null) {
			var lastNode = this.getNodeForPath(path,true,false);
			return lastNode != null && lastNode.isExpanded();
		}
		return false;
	}
	,getBounds: function(path,placeIn) {
		if(path == null) return null;
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return this.getBounds2(node,-1,placeIn);
		var parentPath = path.getParentPath();
		node = this.getNodeForPath(parentPath,true,false);
		if(node != null) {
			var childIndex = this.treeModel.getIndexOfChild(parentPath.getLastPathComponent(),path.getLastPathComponent());
			if(childIndex != -1) return this.getBounds2(node,childIndex,placeIn);
		}
		return null;
	}
	,getPathForRow: function(row) {
		if(row >= 0 && row < this.getRowCount()) {
			if(this.root.getPathForRow(row,this.getRowCount(),this.info)) return this.info.getPath();
		}
		return null;
	}
	,getRowForPath: function(path) {
		if(path == null || this.root == null) return -1;
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return node.getRow();
		var parentPath = path.getParentPath();
		node = this.getNodeForPath(parentPath,true,false);
		if(node != null && node.isExpanded()) return node.getRowToModelIndex(this.treeModel.getIndexOfChild(parentPath.getLastPathComponent(),path.getLastPathComponent()));
		return -1;
	}
	,getPathClosestTo: function(x,y) {
		if(this.getRowCount() == 0) return null;
		var row = this.getRowContainingYLocation(y);
		return this.getPathForRow(row);
	}
	,getVisibleChildCount: function(path) {
		var node = this.getNodeForPath(path,true,false);
		if(node == null) return 0;
		return node.getTotalChildCount();
	}
	,getVisiblePathsFrom: function(path,totalCount) {
		if(path == null) return null;
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return this.getVisibleFHTreeStateNodes(node,-1,totalCount);
		var parentPath = path.getParentPath();
		node = this.getNodeForPath(parentPath,true,false);
		if(node != null && node.isExpanded()) return this.getVisibleFHTreeStateNodes(node,this.treeModel.getIndexOfChild(parentPath.getLastPathComponent(),path.getLastPathComponent()),totalCount);
		return null;
	}
	,nextVisibleFHTreeStateNode: function(info) {
		var nextIndex = info.nextIndex | 0;
		var parent = info.parent;
		var retObject;
		if(nextIndex == -1) retObject = parent.getTreePath(); else {
			var node = parent.getChildAtModelIndex(nextIndex);
			if(node == null) retObject = parent.getTreePath().pathByAddingChild(this.treeModel.getChild(parent.getUserObject(),nextIndex)); else retObject = node.getTreePath();
		}
		this.updateNextObject(info);
		info.enumCount--;
		return retObject;
	}
	,hasMoreVisibleFHTreeStateNode: function(info) {
		return info.enumCount > 0 && info.parent != null;
	}
	,updateNextObject: function(info) {
		if(!this.updateNextIndex(info)) this.findNextValidParent(info);
	}
	,updateNextIndex: function(info) {
		if(info.nextIndex == -1 && !info.parent.isExpanded()) return false;
		if(info.childCount == 0) return false;
		info.nextIndex++;
		if(info.nextIndex >= info.childCount) return false;
		var child = info.parent.getChildAtModelIndex(info.nextIndex | 0);
		if(child != null && child.isExpanded()) {
			info.parent = child;
			info.nextIndex = -1;
			info.childCount = this.treeModel.getChildCount(child.getUserObject());
		}
		return true;
	}
	,findNextValidParent: function(info) {
		if(info.parent == this.root) {
			info.parent = null;
			return false;
		}
		while(info.parent != null) {
			var newParent = org.aswing.AsWingUtils["as"](info.parent.getParent(),org.aswing.tree.FHTreeStateNode);
			if(newParent != null) {
				info.nextIndex = info.parent.getChildIndex();
				info.parent = newParent;
				info.childCount = this.treeModel.getChildCount(info.parent.getUserObject());
				if(this.updateNextIndex(info)) return true;
			} else info.parent = null;
		}
		return false;
	}
	,getVisibleFHTreeStateNodes: function(parent,startIndex,totalCount) {
		var nodes = new Array();
		var info = new org.aswing.tree.EnumerationInfo();
		info.parent = parent;
		info.nextIndex = startIndex;
		info.childCount = this.treeModel.getChildCount(parent.getUserObject());
		info.enumCount = totalCount;
		while(this.hasMoreVisibleFHTreeStateNode(info)) nodes.push(this.nextVisibleFHTreeStateNode(info));
		return nodes;
	}
	,setExpandedState: function(path,isExpanded) {
		if(isExpanded) this.ensurePathIsExpanded(path,true); else if(path != null) {
			var parentPath = path.getParentPath();
			if(parentPath != null) {
				var parentNode = this.getNodeForPath(parentPath,false,true);
				if(parentNode != null) parentNode.makeVisible();
			}
			var childNode = this.getNodeForPath(path,true,false);
			if(childNode != null) childNode.collapse(true);
		}
	}
	,getExpandedState: function(path) {
		var node = this.getNodeForPath(path,true,false);
		if(node != null) return node.isVisible() && node.isExpanded(); else return false;
	}
	,treeNodesChanged: function(e) {
		if(e != null) {
			var changedIndexs;
			var changedParent = this.getNodeForPath(e.getTreePath(),false,false);
			var maxCounter;
			changedIndexs = e.getChildIndices();
			if(changedParent != null) {
				if(changedIndexs != null && (maxCounter = changedIndexs.length) > 0) {
					var parentValue = changedParent.getUserObject();
					var _g = 0;
					while(_g < maxCounter) {
						var counter = _g++;
						var child = changedParent.getChildAtModelIndex(changedIndexs[counter]);
						if(child != null) child.setUserObject(this.treeModel.getChild(parentValue,changedIndexs[counter]));
					}
					if(changedParent.isVisible() && changedParent.isExpanded()) this.visibleNodesChanged();
				} else if(changedParent == this.root && changedParent.isVisible() && changedParent.isExpanded()) this.visibleNodesChanged();
			}
		}
	}
	,treeNodesInserted: function(e) {
		if(e != null) {
			var changedIndexs;
			var changedParent = this.getNodeForPath(e.getTreePath(),false,false);
			var maxCounter;
			changedIndexs = e.getChildIndices();
			if(changedParent != null && changedIndexs != null && (maxCounter = changedIndexs.length) > 0) {
				var isVisible = changedParent.isVisible() && changedParent.isExpanded();
				var _g = 0;
				while(_g < maxCounter) {
					var counter = _g++;
					changedParent.childInsertedAtModelIndex(changedIndexs[counter],isVisible);
				}
				if(isVisible && this.treeSelectionModel != null) this.treeSelectionModel.resetRowSelection();
				if(changedParent.isVisible()) this.visibleNodesChanged();
			}
		}
	}
	,treeNodesRemoved: function(e) {
		if(e != null) {
			var changedIndexs;
			var maxCounter;
			var parentPath = e.getTreePath();
			var changedParentNode = this.getNodeForPath(parentPath,false,false);
			changedIndexs = e.getChildIndices();
			if(changedParentNode != null && changedIndexs != null && (maxCounter = changedIndexs.length) > 0) {
				var isVisible = changedParentNode.isVisible() && changedParentNode.isExpanded();
				var _g = 0;
				while(_g < maxCounter) {
					var counter = _g++;
					changedParentNode.removeChildAtModelIndex(changedIndexs[counter],isVisible);
				}
				if(isVisible) {
					if(this.treeSelectionModel != null) this.treeSelectionModel.resetRowSelection();
					if(this.treeModel.getChildCount(changedParentNode.getUserObject()) == 0 && changedParentNode.isLeaf()) changedParentNode.collapse(false);
					this.visibleNodesChanged();
				} else if(changedParentNode.isVisible()) this.visibleNodesChanged();
			}
		}
	}
	,treeStructureChanged: function(e) {
		if(e != null) {
			var changedPath = e.getTreePath();
			var changedNode = this.getNodeForPath(changedPath,false,false);
			if(changedNode == this.root || changedNode == null && (changedPath == null && this.treeModel != null && this.treeModel.getRoot() == null || changedPath != null && changedPath.getPathCount() <= 1)) this.rebuild(true); else if(changedNode != null) {
				var wasExpanded;
				var wasVisible;
				var parent = org.aswing.AsWingUtils["as"](changedNode.getParent(),org.aswing.tree.FHTreeStateNode);
				wasExpanded = changedNode.isExpanded();
				wasVisible = changedNode.isVisible();
				var index = parent.getIndex(changedNode);
				changedNode.collapse(false);
				parent.removeAt(index);
				if(wasVisible && wasExpanded) {
					var row = changedNode.getRow();
					parent.resetChildrenRowsFrom(row,index,changedNode.getChildIndex());
					changedNode = this.getNodeForPath(changedPath,false,true);
					changedNode.expand();
				}
				if(this.treeSelectionModel != null && wasVisible && wasExpanded) this.treeSelectionModel.resetRowSelection();
				if(wasVisible) this.visibleNodesChanged();
			}
		}
	}
	,visibleNodesChanged: function() {
	}
	,getBounds2: function(parent,childIndex,placeIn) {
		var expanded;
		var level;
		var row;
		var value;
		if(childIndex == -1) {
			row = parent.getRow();
			value = parent.getUserObject();
			expanded = parent.isExpanded();
			level = parent.getLevel();
		} else {
			row = parent.getRowToModelIndex(childIndex);
			value = this.treeModel.getChild(parent.getUserObject(),childIndex);
			expanded = false;
			level = parent.getLevel() + 1;
		}
		var bounds = this.countNodeDimensions(value,row,level,expanded,this.boundsBuffer);
		if(bounds == null) return null;
		if(placeIn == null) placeIn = new org.aswing.geom.IntRectangle();
		placeIn.x = bounds.x;
		placeIn.height = this.getRowHeight();
		placeIn.y = row * placeIn.height;
		placeIn.width = bounds.width;
		return placeIn;
	}
	,adjustRowCountBy: function(changeAmount) {
		this.rowCount += changeAmount;
	}
	,addMapping: function(node) {
		this.treePathMapping.put(node.getTreePath(),node);
	}
	,removeMapping: function(node) {
		this.treePathMapping.remove(node.getTreePath());
	}
	,getMapping: function(path) {
		return org.aswing.AsWingUtils["as"](this.treePathMapping.get(path),org.aswing.tree.FHTreeStateNode);
	}
	,rebuild: function(clearSelection) {
		var rootUO = null;
		this.treePathMapping.clear();
		if(this.treeModel != null) rootUO = this.treeModel.getRoot();
		if(this.treeModel != null && rootUO != null) {
			this.root = this.createNodeForValue(rootUO,0);
			this.root.setPath(new org.aswing.tree.TreePath([rootUO]));
			this.addMapping(this.root);
			if(this.isRootVisible()) {
				this.rowCount = 1;
				this.root.setRow(0);
			} else {
				this.rowCount = 0;
				this.root.setRow(-1);
			}
			this.root.expand();
		} else {
			this.root = null;
			this.rowCount = 0;
		}
		if(clearSelection && this.treeSelectionModel != null) this.treeSelectionModel.clearSelection();
		this.visibleNodesChanged();
	}
	,getRowContainingYLocation: function(location) {
		if(this.getRowCount() == 0) return -1;
		return Math.floor(Math.max(0,Math.min(this.getRowCount() - 1,location / this.getRowHeight())));
	}
	,ensurePathIsExpanded: function(aPath,expandLast) {
		if(aPath != null) {
			if(this.treeModel.isLeaf(aPath.getLastPathComponent())) {
				aPath = aPath.getParentPath();
				expandLast = true;
			}
			if(aPath != null) {
				var lastNode = this.getNodeForPath(aPath,false,true);
				if(lastNode != null) {
					lastNode.makeVisible();
					if(expandLast) lastNode.expand();
					return true;
				}
			}
		}
		return false;
	}
	,createNodeForValue: function(value,childIndex) {
		return new org.aswing.tree.FHTreeStateNode(this,value,childIndex,-1);
	}
	,getNodeForPath: function(path,onlyIfVisible,shouldCreate) {
		if(path != null) {
			var node;
			node = this.getMapping(path);
			if(node != null) {
				if(onlyIfVisible && !node.isVisible()) return null;
				return node;
			}
			if(onlyIfVisible) return null;
			var paths;
			if(this.tempStacks.size() == 0) paths = new org.aswing.util.Stack(); else paths = org.aswing.AsWingUtils["as"](this.tempStacks.pop(),org.aswing.util.Stack);
			try {
				paths.push(path);
				path = path.getParentPath();
				node = null;
				while(path != null) {
					node = this.getMapping(path);
					if(node != null) {
						while(node != null && paths.size() > 0) {
							path = org.aswing.AsWingUtils["as"](paths.pop(),org.aswing.tree.TreePath);
							node = node.createChildFor(path.getLastPathComponent());
						}
						return node;
					}
					paths.push(path);
					path = path.getParentPath();
				}
			} catch( e ) {
				if( js.Boot.__instanceof(e,org.aswing.error.Error) ) {
					paths.clear();
					this.tempStacks.push(paths);
				} else throw(e);
			}
			return null;
		}
		return null;
	}
	,__class__: org.aswing.tree.FixedHeightLayoutCache
});
org.aswing.tree.TreeCellFactory = function() { };
$hxClasses["org.aswing.tree.TreeCellFactory"] = org.aswing.tree.TreeCellFactory;
org.aswing.tree.TreeCellFactory.__name__ = ["org","aswing","tree","TreeCellFactory"];
org.aswing.tree.TreeCellFactory.prototype = {
	__class__: org.aswing.tree.TreeCellFactory
};
org.aswing.tree.GeneralTreeCellFactory = function(cellClass) {
	this.cellClass = cellClass;
};
$hxClasses["org.aswing.tree.GeneralTreeCellFactory"] = org.aswing.tree.GeneralTreeCellFactory;
org.aswing.tree.GeneralTreeCellFactory.__name__ = ["org","aswing","tree","GeneralTreeCellFactory"];
org.aswing.tree.GeneralTreeCellFactory.__interfaces__ = [org.aswing.tree.TreeCellFactory];
org.aswing.tree.GeneralTreeCellFactory.prototype = {
	createNewCell: function() {
		return org.aswing.AsWingUtils["as"](Type.createInstance(this.cellClass,[]),org.aswing.tree.TreeCell);
	}
	,toString: function() {
		return "GeneralTreeCellFactory[cellClass:" + Std.string(this.cellClass) + "]";
	}
	,__class__: org.aswing.tree.GeneralTreeCellFactory
};
org.aswing.tree.GeneralTreeCellFactoryUIResource = function(cellClass) {
	org.aswing.tree.GeneralTreeCellFactory.call(this,cellClass);
};
$hxClasses["org.aswing.tree.GeneralTreeCellFactoryUIResource"] = org.aswing.tree.GeneralTreeCellFactoryUIResource;
org.aswing.tree.GeneralTreeCellFactoryUIResource.__name__ = ["org","aswing","tree","GeneralTreeCellFactoryUIResource"];
org.aswing.tree.GeneralTreeCellFactoryUIResource.__interfaces__ = [org.aswing.plaf.UIResource];
org.aswing.tree.GeneralTreeCellFactoryUIResource.__super__ = org.aswing.tree.GeneralTreeCellFactory;
org.aswing.tree.GeneralTreeCellFactoryUIResource.prototype = $extend(org.aswing.tree.GeneralTreeCellFactory.prototype,{
	__class__: org.aswing.tree.GeneralTreeCellFactoryUIResource
});
org.aswing.tree.PathPlaceHolder = function(path,isNew) {
	this.path = path;
	this.isNew = isNew;
};
$hxClasses["org.aswing.tree.PathPlaceHolder"] = org.aswing.tree.PathPlaceHolder;
org.aswing.tree.PathPlaceHolder.__name__ = ["org","aswing","tree","PathPlaceHolder"];
org.aswing.tree.PathPlaceHolder.prototype = {
	__class__: org.aswing.tree.PathPlaceHolder
};
org.aswing.tree.SearchInfo = function(layoutCatch) {
	this.layoutCatch = layoutCatch;
};
$hxClasses["org.aswing.tree.SearchInfo"] = org.aswing.tree.SearchInfo;
org.aswing.tree.SearchInfo.__name__ = ["org","aswing","tree","SearchInfo"];
org.aswing.tree.SearchInfo.prototype = {
	getPath: function() {
		if(this.node == null) return null;
		if(this.isNodeParentNode) return this.node.getTreePath().pathByAddingChild(this.layoutCatch.getModel().getChild(this.node.getUserObject(),this.childIndex | 0));
		return this.node.getTreePath();
	}
	,__class__: org.aswing.tree.SearchInfo
};
org.aswing.tree.TreeFolderIcon = function() {
};
$hxClasses["org.aswing.tree.TreeFolderIcon"] = org.aswing.tree.TreeFolderIcon;
org.aswing.tree.TreeFolderIcon.__name__ = ["org","aswing","tree","TreeFolderIcon"];
org.aswing.tree.TreeFolderIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.tree.TreeFolderIcon.prototype = {
	getIconWidth: function(c) {
		return 16;
	}
	,getIconHeight: function(c) {
		return 16;
	}
	,updateIcon: function(com,g,x,y) {
		var borderColor = new org.aswing.ASColor(5592405);
		var b = new org.aswing.geom.IntRectangle(0,0,16,16);
		b.grow(0,-1);
		b.height -= 1;
		b.move(x,y);
		var flapSize = 5;
		var backPoints = new Array();
		backPoints.push(new openfl.geom.Point(b.x,b.y));
		backPoints.push(new openfl.geom.Point(b.x + flapSize,b.y));
		backPoints.push(new openfl.geom.Point(b.x + flapSize + 1,b.y + 1));
		backPoints.push(new openfl.geom.Point(b.width - 3,b.y + 1));
		backPoints.push(new openfl.geom.Point(b.width - 3,b.height));
		backPoints.push(new openfl.geom.Point(b.x,b.height));
		var colors = [15133166,9344189];
		var alphas = [0.392156862745098034,0.392156862745098034];
		var ratios = [0,255];
		var matrix = new openfl.geom.Matrix();
		matrix.createGradientBox(b.width,b.height,0,b.x,b.y);
		var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,colors,alphas,ratios,matrix);
		g.fillPolygon(brush,backPoints);
		g.drawPolygon(new org.aswing.graphics.Pen(borderColor,0.5),backPoints);
		alphas = [0.901960784313725505,0.901960784313725505];
		brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,colors,alphas,ratios,matrix);
		var frontPoints = new Array();
		frontPoints.push(new openfl.geom.Point(b.x,b.height));
		frontPoints.push(new openfl.geom.Point(b.x + 3,b.y + 3));
		frontPoints.push(new openfl.geom.Point(b.width,b.y + 3));
		frontPoints.push(new openfl.geom.Point(b.width - 3,b.height));
		g.fillPolygon(brush,frontPoints);
		g.drawPolygon(new org.aswing.graphics.Pen(borderColor,0.25),frontPoints);
	}
	,getDisplay: function(c) {
		return null;
	}
	,destroy: function() {
	}
	,__class__: org.aswing.tree.TreeFolderIcon
};
org.aswing.tree.TreeLeafIcon = function() {
};
$hxClasses["org.aswing.tree.TreeLeafIcon"] = org.aswing.tree.TreeLeafIcon;
org.aswing.tree.TreeLeafIcon.__name__ = ["org","aswing","tree","TreeLeafIcon"];
org.aswing.tree.TreeLeafIcon.__interfaces__ = [org.aswing.plaf.UIResource,org.aswing.Icon];
org.aswing.tree.TreeLeafIcon.prototype = {
	getIconWidth: function(c) {
		return 16;
	}
	,getIconHeight: function(c) {
		return 16;
	}
	,updateIcon: function(com,g,x,y) {
		var b = new org.aswing.geom.IntRectangle(0,0,16,16);
		b.grow(-2,-1);
		b.move(x,y);
		var foldSize = 4;
		var points = new Array();
		points.push(new openfl.geom.Point(b.x,b.y));
		points.push(new openfl.geom.Point(b.width - foldSize,b.y));
		points.push(new openfl.geom.Point(b.width,b.y + foldSize));
		points.push(new openfl.geom.Point(b.width,b.height));
		points.push(new openfl.geom.Point(b.x,b.height));
		var colors = [15133166,9344189];
		var alphas = [0.392156862745098034,0.392156862745098034];
		var ratios = [0,255];
		var matrix = new openfl.geom.Matrix();
		matrix.createGradientBox(b.width,b.height,0,b.x,b.y);
		var brush = new org.aswing.graphics.GradientBrush(org.aswing.graphics.GradientBrush.LINEAR,colors,alphas,ratios,matrix);
		g.fillPolygon(brush,points);
		g.drawPolygon(new org.aswing.graphics.Pen(org.aswing.ASColor.BLACK,0.5),points);
		var foldPoints = new Array();
		foldPoints.push(new openfl.geom.Point(b.width - foldSize,b.y));
		foldPoints.push(new openfl.geom.Point(b.width - foldSize,b.y + foldSize));
		foldPoints.push(new openfl.geom.Point(b.width,b.y + foldSize));
		g.drawPolyline(new org.aswing.graphics.Pen(org.aswing.ASColor.BLACK,0.5),foldPoints);
	}
	,getDisplay: function(c) {
		return null;
	}
	,destroy: function() {
	}
	,__class__: org.aswing.tree.TreeLeafIcon
};
org.aswing.tree.TreePath = function(path) {
	if(path == null || path.length == 0) {
		console.log("Error : path in TreePath must be non null and not empty.");
		throw new org.aswing.error.Error("path in TreePath must be non null and not empty.");
	}
	this.lastPathComponent = path[path.length - 1];
	if(path.length > 1) {
		var pp = path.slice();
		pp.pop();
		this.parentPath = new org.aswing.tree.TreePath(pp);
	}
};
$hxClasses["org.aswing.tree.TreePath"] = org.aswing.tree.TreePath;
org.aswing.tree.TreePath.__name__ = ["org","aswing","tree","TreePath"];
org.aswing.tree.TreePath.createTreePath = function(parent,lastElement) {
	if(lastElement == null) {
		console.log("path in TreePath must be non null.");
		throw new org.aswing.error.Error("path in TreePath must be non null.");
	}
	var tp = new org.aswing.tree.TreePath([null]);
	tp.parentPath = parent;
	tp.lastPathComponent = lastElement;
	return tp;
};
org.aswing.tree.TreePath.prototype = {
	getPath: function() {
		var i = this.getPathCount();
		var result = new Array();
		i--;
		var path = this;
		while(path != null) {
			result[i] = path.lastPathComponent;
			i--;
			path = path.parentPath;
		}
		return result;
	}
	,getLastPathComponent: function() {
		return this.lastPathComponent;
	}
	,getPathCount: function() {
		var result = 0;
		var path = this;
		while(path != null) {
			result++;
			path = path.parentPath;
		}
		return result;
	}
	,getPathComponent: function(element) {
		var pathLength = this.getPathCount();
		if(element < 0 || element >= pathLength) return null;
		var path = this;
		var _g = element;
		while(_g < pathLength) {
			var i = _g++;
			path = path.parentPath;
		}
		return path.lastPathComponent;
	}
	,equals: function(o) {
		if(o == this) return true;
		if(js.Boot.__instanceof(o,org.aswing.tree.TreePath)) {
			var oTreePath;
			if(js.Boot.__instanceof(o,org.aswing.tree.TreePath)) oTreePath = o; else oTreePath = null;
			if(this.getPathCount() != oTreePath.getPathCount()) return false;
			var path = this;
			while(path != null) {
				if(path.lastPathComponent != oTreePath.lastPathComponent) return false;
				oTreePath = oTreePath.parentPath;
				path = path.parentPath;
			}
			return true;
		}
		return false;
	}
	,isDescendant: function(aTreePath) {
		if(aTreePath == this) return true;
		if(aTreePath != null) {
			var pathLength = this.getPathCount();
			var oPathLength = aTreePath.getPathCount();
			if(oPathLength < pathLength) return false;
			while(oPathLength > pathLength) {
				aTreePath = aTreePath.getParentPath();
				oPathLength--;
			}
			return this.equals(aTreePath);
		}
		return false;
	}
	,pathByAddingChild: function(child) {
		if(child == null) {
			console.log("Null child not allowed");
			throw new org.aswing.error.Error("Null child not allowed");
		}
		return org.aswing.tree.TreePath.createTreePath(this,child);
	}
	,getParentPath: function() {
		return this.parentPath;
	}
	,toString: function() {
		return "TreePath[" + Std.string(this.getPath()) + "]";
	}
	,__class__: org.aswing.tree.TreePath
};
org.aswing.tree.TreePathMap = function() {
	this.keyMap = new haxe.ds.IntMap();
	this.map = new haxe.ds.IntMap();
};
$hxClasses["org.aswing.tree.TreePathMap"] = org.aswing.tree.TreePathMap;
org.aswing.tree.TreePathMap.__name__ = ["org","aswing","tree","TreePathMap"];
org.aswing.tree.TreePathMap.prototype = {
	size: function() {
		var len = 0;
		var $it0 = this.map.keys();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			len++;
		}
		return len;
	}
	,isEmpty: function() {
		var len = 0;
		var $it0 = this.map.keys();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			len++;
		}
		return len == 0;
	}
	,keys: function() {
		return this.keyMap.iterator();
	}
	,values: function() {
		return this.map.iterator();
	}
	,containsValue: function(value) {
		var $it0 = this.map.keys();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(this.map.get(i) == value) return true;
		}
		return false;
	}
	,containsKey: function(key) {
		return this.keyMap.get(key.getLastPathComponent().getAwmlIndex()) != null;
	}
	,get: function(key) {
		return this.map.get(key.getLastPathComponent().getAwmlIndex());
	}
	,getValue: function(key) {
		return this.map.get(key.getLastPathComponent().getAwmlIndex());
	}
	,put: function(key,value) {
		this.keyMap.set(key.getLastPathComponent().getAwmlIndex(),key);
		return this.map.set(key.getLastPathComponent().getAwmlIndex(),value);
	}
	,remove: function(key) {
		this.keyMap.remove(key.getLastPathComponent().getAwmlIndex());
		return this.map.remove(key.getLastPathComponent().getAwmlIndex());
	}
	,clear: function() {
		this.keyMap = new haxe.ds.IntMap();
		this.map = new haxe.ds.IntMap();
	}
	,clone: function() {
		var temp = new org.aswing.tree.TreePathMap();
		temp.map = new haxe.ds.IntMap();
		temp.keyMap = new haxe.ds.IntMap();
		var $it0 = this.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			temp.keyMap.set(key.getLastPathComponent().getAwmlIndex(),key);
			temp.map.set(key.getLastPathComponent().getAwmlIndex(),this.map.get(key.getLastPathComponent().getAwmlIndex()));
		}
		return temp;
	}
	,toString: function() {
		return this.map.toString();
	}
	,__class__: org.aswing.tree.TreePathMap
};
org.aswing.util.ArrayList = function() {
	this._elements = new Array();
};
$hxClasses["org.aswing.util.ArrayList"] = org.aswing.util.ArrayList;
org.aswing.util.ArrayList.__name__ = ["org","aswing","util","ArrayList"];
org.aswing.util.ArrayList.__interfaces__ = [org.aswing.util.List];
org.aswing.util.ArrayList.prototype = {
	each: function(operation) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			operation(this._elements[i]);
		}
	}
	,eachWithout: function(obj,operation) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] != obj) operation(this._elements[i]);
		}
	}
	,get: function(i) {
		return this._elements[i];
	}
	,elementAt: function(i) {
		return this.get(i);
	}
	,append: function(obj,index) {
		if(index == null) index = -1;
		if(index == -1) this._elements.push(obj); else {
			var x = obj;
			this._elements.splice(index,0,x);
		}
	}
	,appendAll: function(arr,index) {
		if(index == null) index = -1;
		if(arr == null || arr.length <= 0) return;
		if(index == -1 || index == this._elements.length) this._elements = this._elements.concat(arr); else if(index == 0) this._elements = arr.concat(this._elements); else {
			var right = this._elements.splice(index,this._elements.length - index);
			this._elements = this._elements.concat(arr);
			this._elements = this._elements.concat(right);
		}
	}
	,replaceAt: function(index,obj) {
		if(index < 0 || index >= this.size()) return null; else {
			var oldObj = this._elements[index];
			this._elements[index] = obj;
			return oldObj;
		}
	}
	,removeAt: function(index) {
		if(index < 0 || index >= this.size()) return null; else {
			var obj = this._elements[index];
			this._elements.splice(index,1);
			return obj;
		}
	}
	,remove: function(obj) {
		if((function($this) {
			var $r;
			var x = obj;
			$r = HxOverrides.remove($this._elements,x);
			return $r;
		}(this))) return obj; else return null;
	}
	,removeRange: function(fromIndex,toIndex) {
		fromIndex = Std["int"](Math.max(0,fromIndex));
		toIndex = Std["int"](Math.min(toIndex,this._elements.length - 1));
		if(fromIndex > toIndex) return []; else return this._elements.splice(fromIndex,toIndex - fromIndex + 1);
	}
	,indexOf: function(obj) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] == obj) return i;
		}
		return -1;
	}
	,appendList: function(list,index) {
		if(index == null) index = -1;
		this.appendAll(list.toArray(),index);
	}
	,pop: function() {
		if(this.size() > 0) return this._elements.pop(); else return null;
	}
	,shift: function() {
		if(this.size() > 0) return this._elements.shift(); else return null;
	}
	,lastIndexOf: function(obj) {
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._elements[i] == obj) return i;
		}
		return -1;
	}
	,contains: function(obj) {
		return this.indexOf(obj) >= 0;
	}
	,first: function() {
		return this._elements[0];
	}
	,last: function() {
		return this._elements[this._elements.length - 1];
	}
	,size: function() {
		return this._elements.length;
	}
	,setElementAt: function(index,element) {
		this.replaceAt(index,element);
	}
	,getSize: function() {
		return this.size();
	}
	,clear: function() {
		if(!this.isEmpty()) {
			this._elements.splice(0,this._elements.length);
			this._elements = new Array();
		}
	}
	,clone: function() {
		var cloned = new org.aswing.util.ArrayList();
		var _g1 = 0;
		var _g = this._elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			cloned.append(this._elements[i]);
		}
		return cloned;
	}
	,isEmpty: function() {
		if(this._elements.length > 0) return false; else return true;
	}
	,toArray: function() {
		return this._elements.slice();
	}
	,subArray: function(startIndex,length) {
		return this._elements.slice(startIndex,Std["int"](Math.min(startIndex + length,this.size())));
	}
	,sort: function(compare,options) {
		this._elements.sort(compare);
		return this._elements;
	}
	,sortOn: function(compare,options) {
		this._elements.sort(compare);
		return this._elements;
	}
	,toString: function() {
		return "ArrayList : " + this._elements.toString();
	}
	,__class__: org.aswing.util.ArrayList
};
org.aswing.util.ArrayUtils = function() { };
$hxClasses["org.aswing.util.ArrayUtils"] = org.aswing.util.ArrayUtils;
org.aswing.util.ArrayUtils.__name__ = ["org","aswing","util","ArrayUtils"];
org.aswing.util.ArrayUtils.each = function(arr,operation) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		operation(arr[i]);
	}
};
org.aswing.util.ArrayUtils.setSize = function(arr,size) {
	if(size < 0) size = 0;
	if(size == arr.length) return;
	if(size > arr.length) arr[size - 1] = null; else arr.splice(size,1);
};
org.aswing.util.ArrayUtils.removeFromArray = function(arr,obj) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(arr[i] == obj) {
			arr.splice(i,1);
			return i;
		}
	}
	return -1;
};
org.aswing.util.ArrayUtils.removeAllFromArray = function(arr,obj) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(arr[i] == obj) arr.splice(i,1);
	}
};
org.aswing.util.ArrayUtils.removeAllBehindSomeIndex = function(array,index) {
	if(index <= 0) {
		array.splice(0,array.length);
		return;
	}
	var arrLen = array.length;
	var _g = index + 1;
	while(_g < arrLen) {
		var i = _g++;
		array.pop();
	}
};
org.aswing.util.ArrayUtils.indexInArray = function(arr,obj) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(arr[i] == obj) return i;
	}
	return -1;
};
org.aswing.util.ArrayUtils.cloneArray = function(arr) {
	return arr.slice();
};
org.aswing.util.ArrayUtils.reverse = function(x) {
	var t = "";
	var i = x.length;
	while(i-- >= 0) t += x.charAt(i);
	return t;
};
org.aswing.util.DepthManager = function() { };
$hxClasses["org.aswing.util.DepthManager"] = org.aswing.util.DepthManager;
org.aswing.util.DepthManager.__name__ = ["org","aswing","util","DepthManager"];
org.aswing.util.DepthManager.bringToBottom = function(mc) {
	var parent = mc.parent;
	if(parent == null) return;
	if(parent.getChildIndex(mc) != 0) parent.setChildIndex(mc,0);
};
org.aswing.util.DepthManager.bringToTop = function(mc) {
	var parent = mc.parent;
	if(parent == null) return;
	var maxIndex = parent.__children.length - 1;
	if(parent.getChildIndex(mc) != maxIndex) parent.setChildIndex(mc,maxIndex);
};
org.aswing.util.DepthManager.isTop = function(mc) {
	var parent = mc.parent;
	if(parent == null) return true;
	return parent.__children.length - 1 == parent.getChildIndex(mc);
};
org.aswing.util.DepthManager.isBottom = function(mc) {
	var parent = mc.parent;
	if(parent == null) return true;
	var depth = parent.getChildIndex(mc);
	if(depth == 0) return true;
	return false;
};
org.aswing.util.DepthManager.isJustBelow = function(mc,aboveMC) {
	var parent = mc.parent;
	if(parent == null) return false;
	if(aboveMC.parent != parent) return false;
	return parent.getChildIndex(mc) == parent.getChildIndex(aboveMC) - 1;
};
org.aswing.util.DepthManager.isJustAbove = function(mc,belowMC) {
	return org.aswing.util.DepthManager.isJustBelow(belowMC,mc);
};
org.aswing.util.HashSet = function() {
	this.length = 0;
	this.container = new Array();
};
$hxClasses["org.aswing.util.HashSet"] = org.aswing.util.HashSet;
org.aswing.util.HashSet.__name__ = ["org","aswing","util","HashSet"];
org.aswing.util.HashSet.prototype = {
	getKeyIndex: function(key) {
		var _g1 = 0;
		var _g = this.container.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.container[i] == key) return i;
		}
		return -1;
	}
	,size: function() {
		return this.length;
	}
	,add: function(o) {
		if(!this.contains(o)) this.length++;
		this.container.push(o);
	}
	,contains: function(o) {
		return this.getKeyIndex(o) > -1;
	}
	,isEmpty: function() {
		return this.length == 0;
	}
	,remove: function(o) {
		if(this.contains(o)) {
			this.container.splice(this.getKeyIndex(o),1);
			this.length--;
			return true;
		} else return false;
	}
	,clear: function() {
		this.container = new Array();
		this.length = 0;
	}
	,addAll: function(arr) {
		var _g = 0;
		while(_g < arr.length) {
			var i = arr[_g];
			++_g;
			this.add(i);
		}
	}
	,removeAll: function(arr) {
		var _g = 0;
		while(_g < arr.length) {
			var i = arr[_g];
			++_g;
			this.remove(i);
		}
	}
	,containsAll: function(arr) {
		var _g1 = 0;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.contains(arr[i])) return false;
		}
		return true;
	}
	,each: function(func) {
		var itr = HxOverrides.iter(this.container);
		while( itr.hasNext() ) {
			var i = itr.next();
			func(i);
		}
	}
	,toArray: function() {
		return this.container.slice();
	}
	,__class__: org.aswing.util.HashSet
};
org.aswing.util.Reflection = function() { };
$hxClasses["org.aswing.util.Reflection"] = org.aswing.util.Reflection;
org.aswing.util.Reflection.__name__ = ["org","aswing","util","Reflection"];
org.aswing.util.Reflection.createDisplayObjectInstance = function(fullClassName,applicationDomain) {
	return org.aswing.AsWingUtils["as"](org.aswing.util.Reflection.createInstance(fullClassName,applicationDomain),openfl.display.DisplayObject);
};
org.aswing.util.Reflection.createInstance = function(fullClassName,applicationDomain) {
	var assetClass = Type.resolveClass(fullClassName);
	if(assetClass != null) return Type.createInstance(assetClass,[]);
	return null;
};
org.aswing.util.Reflection.getClass = function(fullClassName,applicationDomain) {
	if(applicationDomain == null) {
	}
	var assetClass = null;
	return assetClass;
};
org.aswing.util.Reflection.getFullClassName = function(o) {
	return Type.getClassName(o);
};
org.aswing.util.Reflection.getClassName = function(x) {
	if(js.Boot.__instanceof(x,Class)) {
		var s = Type.getClassName(x);
		var pos = s.lastIndexOf(".") + 1;
		return HxOverrides.substr(s,pos,null);
	} else if(Type.getClass(x) != null) return org.aswing.util.Reflection.getClassName(Type.getClass(x)); else return "";
};
org.aswing.util.Reflection.getPackageName = function(x) {
	if(typeof(x) == "string") {
		var s = x;
		var i = s.lastIndexOf(".");
		if(i != -1) return HxOverrides.substr(s,0,i); else return "";
	} else if(js.Boot.__instanceof(x,Class)) {
		var s1 = Type.getClassName(x);
		var i1 = s1.lastIndexOf(".");
		if(i1 != -1) return HxOverrides.substr(s1,0,i1); else return "";
	} else if(Type.getClass(x) != null) return org.aswing.util.Reflection.getPackageName(Type.getClass(x)); else throw "invalid argument";
};
org.aswing.util.Stack = function() {
	org.aswing.util.ArrayList.call(this);
};
$hxClasses["org.aswing.util.Stack"] = org.aswing.util.Stack;
org.aswing.util.Stack.__name__ = ["org","aswing","util","Stack"];
org.aswing.util.Stack.__super__ = org.aswing.util.ArrayList;
org.aswing.util.Stack.prototype = $extend(org.aswing.util.ArrayList.prototype,{
	empty: function() {
		return this._elements.length == 0;
	}
	,peek: function() {
		return this._elements[this._elements.length - 1];
	}
	,pop: function() {
		return this._elements.pop();
	}
	,push: function(item) {
		this._elements.push(item);
		return item;
	}
	,search: function(o) {
		var i = this.lastIndexOf(o);
		if(i >= 0) return this.size() - i;
		return -1;
	}
	,__class__: org.aswing.util.Stack
});
org.aswing.util.StringUtils = function() { };
$hxClasses["org.aswing.util.StringUtils"] = org.aswing.util.StringUtils;
org.aswing.util.StringUtils.__name__ = ["org","aswing","util","StringUtils"];
org.aswing.util.StringUtils.isString = function(value) {
	return typeof(value) == "string";
};
org.aswing.util.StringUtils.castString = function(str) {
	if(typeof(str) == "string") return str; else return null;
};
org.aswing.util.StringUtils.replace = function(targetString,oldString,newString) {
	return targetString.split(oldString).join(newString);
};
org.aswing.util.StringUtils.trim = function(targetString) {
	return org.aswing.util.StringUtils.trimLeft(org.aswing.util.StringUtils.trimRight(targetString));
};
org.aswing.util.StringUtils.trimLeft = function(targetString) {
	var tempIndex = 0;
	var tempChar = "";
	var _g1 = 0;
	var _g = targetString.length;
	while(_g1 < _g) {
		var i = _g1++;
		tempChar = targetString.charAt(i);
		if(tempChar != " ") {
			tempIndex = i;
			break;
		}
	}
	return HxOverrides.substr(targetString,tempIndex,null);
};
org.aswing.util.StringUtils.trimRight = function(targetString) {
	var tempIndex = targetString.length - 1;
	var tempChar = "";
	var _g1 = 0;
	var _g = targetString.length;
	while(_g1 < _g) {
		var i = _g1++;
		tempChar = targetString.charAt(i);
		if(tempChar != " ") {
			tempIndex = i;
			break;
		}
	}
	return HxOverrides.substr(targetString,0,tempIndex + 1);
};
org.aswing.util.StringUtils.getCharsArray = function(targetString,hasBlankSpace) {
	var tempString = targetString;
	if(hasBlankSpace == false) tempString = org.aswing.util.StringUtils.trim(targetString);
	return tempString.split("");
};
org.aswing.util.StringUtils.startsWith = function(targetString,subString) {
	return targetString.indexOf(subString) == 0;
};
org.aswing.util.StringUtils.endsWith = function(targetString,subString) {
	return targetString.lastIndexOf(subString) == targetString.length - subString.length;
};
org.aswing.util.StringUtils.isLetter = function(chars) {
	if(chars == null || chars == "") return false;
	var _g1 = 0;
	var _g = chars.length;
	while(_g1 < _g) {
		var i = _g1++;
		var code = HxOverrides.cca(chars,i);
		if(code < 65 || code > 122 || code > 90 && code < 97) return false;
	}
	return true;
};
org.aswing.util.WeakReference = function() {
};
$hxClasses["org.aswing.util.WeakReference"] = org.aswing.util.WeakReference;
org.aswing.util.WeakReference.__name__ = ["org","aswing","util","WeakReference"];
org.aswing.util.WeakReference.prototype = {
	set_value: function(v) {
		if(v == null) this.weakDic = null; else this.weakDic = v;
		return v;
	}
	,get_value: function() {
		if(this.weakDic != null) return this.weakDic;
		return null;
	}
	,clear: function() {
		this.weakDic = null;
	}
	,__class__: org.aswing.util.WeakReference
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
var tools = {};
tools.Helper = function() { };
$hxClasses["tools.Helper"] = tools.Helper;
tools.Helper.__name__ = ["tools","Helper"];
tools.Helper.getAnchorIdFromUrl = function(url) {
	var ereg = new EReg("url[(](.+)[)]","");
	var id;
	if(ereg.match(url)) id = ereg.matched(1); else id = url;
	if(id.indexOf("\"") != -1) id = HxOverrides.substr(id,1,id.length - 2);
	if(id.indexOf("'") != -1) id = HxOverrides.substr(id,1,id.length - 2);
	if(null == id) return null;
	if(id.indexOf("#") != -1) id = id.substring(id.indexOf("#") + 1,id.length);
	return id;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe.Resource.content = [];
openfl.display.DisplayObject.GRAPHICS_INVALID = 2;
openfl.display.DisplayObject.MATRIX_INVALID = 4;
openfl.display.DisplayObject.MATRIX_CHAIN_INVALID = 8;
openfl.display.DisplayObject.MATRIX_OVERRIDDEN = 16;
openfl.display.DisplayObject.TRANSFORM_INVALID = 32;
openfl.display.DisplayObject.BOUNDS_INVALID = 64;
openfl.display.DisplayObject.RENDER_VALIDATE_IN_PROGRESS = 1024;
openfl.display.DisplayObject.ALL_RENDER_FLAGS = 98;
org.aswing.ASColor.WHITE = new org.aswing.ASColor(16777215);
org.aswing.ASColor.LIGHT_GRAY = new org.aswing.ASColor(12632256);
org.aswing.ASColor.GRAY = new org.aswing.ASColor(8421504);
org.aswing.ASColor.DARK_GRAY = new org.aswing.ASColor(4210752);
org.aswing.ASColor.BLACK = new org.aswing.ASColor(0);
org.aswing.ASColor.RED = new org.aswing.ASColor(16711680);
org.aswing.ASColor.PINK = new org.aswing.ASColor(16756655);
org.aswing.ASColor.ORANGE = new org.aswing.ASColor(16762880);
org.aswing.ASColor.HALO_ORANGE = new org.aswing.ASColor(16761344);
org.aswing.ASColor.YELLOW = new org.aswing.ASColor(16776960);
org.aswing.ASColor.GREEN = new org.aswing.ASColor(65280);
org.aswing.ASColor.HALO_GREEN = new org.aswing.ASColor(8453965);
org.aswing.ASColor.MAGENTA = new org.aswing.ASColor(16711935);
org.aswing.ASColor.CYAN = new org.aswing.ASColor(65535);
org.aswing.ASColor.BLUE = new org.aswing.ASColor(255);
org.aswing.ASColor.HALO_BLUE = new org.aswing.ASColor(2881013);
org.aswing.Component.MAX_CLICK_INTERVAL = 400;
org.aswing.Component.AWML_INDEX = 0;
org.aswing.Component.bg_trigger_brush = new org.aswing.graphics.SolidBrush(new org.aswing.ASColor(0,0));
org.aswing.AbstractListCell.AWML_INDEX = 0;
org.aswing.JLabel.CENTER = 0;
org.aswing.JLabel.TOP = 1;
org.aswing.JLabel.LEFT = 2;
org.aswing.JLabel.BOTTOM = 3;
org.aswing.JLabel.RIGHT = 4;
org.aswing.JLabel.HORIZONTAL = 0;
org.aswing.JLabel.VERTICAL = 1;
haxe.Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe.Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe.Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe.Template.expr_int = new EReg("^[0-9]+$","");
haxe.Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe.Template.globals = { };
haxe.Unserializer.DEFAULT_RESOLVER = Type;
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.crypto.Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe.crypto.Base64.BYTES = haxe.io.Bytes.ofString(haxe.crypto.Base64.CHARS);
haxe.ds.ObjectMap.count = 0;
openfl.Lib.HTML_ACCELEROMETER_EVENT_TYPE = "devicemotion";
openfl.Lib.HTML_ORIENTATION_EVENT_TYPE = "orientationchange";
openfl.Lib.DEFAULT_HEIGHT = 500;
openfl.Lib.DEFAULT_WIDTH = 500;
openfl.Lib.HTML_DIV_EVENT_TYPES = ["resize","mouseover","mouseout","mousewheel","dblclick","click"];
openfl.Lib.HTML_TOUCH_EVENT_TYPES = ["touchstart","touchmove","touchend"];
openfl.Lib.HTML_TOUCH_ALT_EVENT_TYPES = ["mousedown","mousemove","mouseup"];
openfl.Lib.HTML_WINDOW_EVENT_TYPES = ["keyup","keypress","keydown","resize","blur","focus","paste"];
openfl.Lib.NME_IDENTIFIER = "haxe:openfl";
openfl.Lib.SNAP_IDENTIFIER = "haxe-openfl-svg";
openfl.Lib.VENDOR_HTML_TAG = "data-";
openfl.Lib.starttime = haxe.Timer.stamp();
openfl.display._BitmapData.MinstdGenerator.a = 16807;
openfl.display._BitmapData.MinstdGenerator.m = -2147483648 - 1;
openfl.display.BitmapDataChannel.ALPHA = 8;
openfl.display.BitmapDataChannel.BLUE = 4;
openfl.display.BitmapDataChannel.GREEN = 2;
openfl.display.BitmapDataChannel.RED = 1;
openfl.display.Graphics.TILE_SCALE = 1;
openfl.display.Graphics.TILE_ROTATION = 2;
openfl.display.Graphics.TILE_RGB = 4;
openfl.display.Graphics.TILE_ALPHA = 8;
openfl.display.Graphics.TILE_TRANS_2x2 = 16;
openfl.display.Graphics.TILE_BLEND_NORMAL = 0;
openfl.display.Graphics.TILE_BLEND_ADD = 65536;
openfl.display.Graphics.BMP_REPEAT = 16;
openfl.display.Graphics.BMP_SMOOTH = 65536;
openfl.display.Graphics.CORNER_ROUND = 0;
openfl.display.Graphics.CORNER_MITER = 4096;
openfl.display.Graphics.CORNER_BEVEL = 8192;
openfl.display.Graphics.CURVE = 2;
openfl.display.Graphics.END_NONE = 0;
openfl.display.Graphics.END_ROUND = 256;
openfl.display.Graphics.END_SQUARE = 512;
openfl.display.Graphics.LINE = 1;
openfl.display.Graphics.MOVE = 0;
openfl.display.Graphics.__MAX_DIM = 5000;
openfl.display.Graphics.PIXEL_HINTING = 16384;
openfl.display.Graphics.RADIAL = 1;
openfl.display.Graphics.SCALE_HORIZONTAL = 2;
openfl.display.Graphics.SCALE_NONE = 0;
openfl.display.Graphics.SCALE_NORMAL = 3;
openfl.display.Graphics.SCALE_VERTICAL = 1;
openfl.display.Graphics.SPREAD_REPEAT = 2;
openfl.display.Graphics.SPREAD_REFLECT = 4;
openfl.display.GraphicsPathCommand.LINE_TO = 2;
openfl.display.GraphicsPathCommand.MOVE_TO = 1;
openfl.display.GraphicsPathCommand.CURVE_TO = 3;
openfl.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl.display.GraphicsPathCommand.NO_OP = 0;
openfl.display.GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl.events.Event.ACTIVATE = "activate";
openfl.events.Event.ADDED = "added";
openfl.events.Event.ADDED_TO_STAGE = "addedToStage";
openfl.events.Event.CANCEL = "cancel";
openfl.events.Event.CHANGE = "change";
openfl.events.Event.CLOSE = "close";
openfl.events.Event.COMPLETE = "complete";
openfl.events.Event.CONNECT = "connect";
openfl.events.Event.CONTEXT3D_CREATE = "context3DCreate";
openfl.events.Event.DEACTIVATE = "deactivate";
openfl.events.Event.ENTER_FRAME = "enterFrame";
openfl.events.Event.ID3 = "id3";
openfl.events.Event.INIT = "init";
openfl.events.Event.MOUSE_LEAVE = "mouseLeave";
openfl.events.Event.OPEN = "open";
openfl.events.Event.REMOVED = "removed";
openfl.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl.events.Event.RENDER = "render";
openfl.events.Event.STAGE_RENDERED = "stageRendered";
openfl.events.Event.RESIZE = "resize";
openfl.events.Event.SCROLL = "scroll";
openfl.events.Event.SELECT = "select";
openfl.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl.events.Event.UNLOAD = "unload";
openfl.events.Event.SOUND_COMPLETE = "soundComplete";
openfl.events.Event.PASTE = "paste";
openfl.events.MouseEvent.CLICK = "click";
openfl.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl.events.MouseEvent.MOUSE_DOWN = "mouseDown";
openfl.events.MouseEvent.MOUSE_MOVE = "mouseMove";
openfl.events.MouseEvent.MOUSE_OUT = "mouseOut";
openfl.events.MouseEvent.MOUSE_OVER = "mouseOver";
openfl.events.MouseEvent.MOUSE_UP = "mouseUp";
openfl.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl.events.MouseEvent.RIGHT_CLICK = "rightClick";
openfl.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl.events.MouseEvent.ROLL_OUT = "rollOut";
openfl.events.MouseEvent.ROLL_OVER = "rollOver";
openfl.display.Stage.NAME = "Stage";
openfl.display.Stage.OrientationPortrait = 1;
openfl.display.Stage.OrientationPortraitUpsideDown = 2;
openfl.display.Stage.OrientationLandscapeRight = 3;
openfl.display.Stage.OrientationLandscapeLeft = 4;
openfl.display.Stage.__acceleration = { x : 0.0, y : 1.0, z : 0.0};
openfl.display.Stage.DEFAULT_FRAMERATE = 0.0;
openfl.display.Stage.UI_EVENTS_QUEUE_MAX = 1000;
openfl.display.Stage.__mouseChanges = [openfl.events.MouseEvent.MOUSE_OUT,openfl.events.MouseEvent.MOUSE_OVER,openfl.events.MouseEvent.ROLL_OUT,openfl.events.MouseEvent.ROLL_OVER];
openfl.display.Stage.__touchChanges = ["touchOut","touchOver","touchRollOut","touchRollOver"];
openfl.display.StageQuality.BEST = "best";
openfl.display.StageQuality.HIGH = "high";
openfl.display.StageQuality.MEDIUM = "medium";
openfl.display.StageQuality.LOW = "low";
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl.errors.Error.DEFAULT_TO_STRING = "Error";
openfl.events.TextEvent.LINK = "link";
openfl.events.TextEvent.TEXT_INPUT = "textInput";
openfl.events.ErrorEvent.ERROR = "error";
openfl.events.Listener.sIDs = 1;
openfl.events.EventPhase.CAPTURING_PHASE = 0;
openfl.events.EventPhase.AT_TARGET = 1;
openfl.events.EventPhase.BUBBLING_PHASE = 2;
openfl.events.FocusEvent.FOCUS_IN = "focusIn";
openfl.events.FocusEvent.FOCUS_OUT = "focusOut";
openfl.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl.events.IOErrorEvent.IO_ERROR = "ioError";
openfl.events.KeyboardEvent.KEY_DOWN = "keyDown";
openfl.events.KeyboardEvent.KEY_UP = "keyUp";
openfl.events.KeyboardEvent.KEY_PRESS = "keyPressed";
openfl.events.ProgressEvent.PROGRESS = "progress";
openfl.events.ProgressEvent.SOCKET_DATA = "socketData";
openfl.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl.events.TouchEvent.TOUCH_END = "touchEnd";
openfl.events.TouchEvent.TOUCH_MOVE = "touchMove";
openfl.events.TouchEvent.TOUCH_OUT = "touchOut";
openfl.events.TouchEvent.TOUCH_OVER = "touchOver";
openfl.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl.events.TouchEvent.TOUCH_TAP = "touchTap";
openfl.filters.BitmapFilterType.FULL = "full";
openfl.filters.BitmapFilterType.INNER = "inner";
openfl.filters.BitmapFilterType.OUTER = "outer";
openfl.filters.DropShadowFilter.DEGREES_FULL_RADIUS = 360.0;
openfl.geom.Transform.DEG_TO_RAD = Math.PI / 180.0;
openfl.media.Sound.EXTENSION_MP3 = "mp3";
openfl.media.Sound.EXTENSION_OGG = "ogg";
openfl.media.Sound.EXTENSION_WAV = "wav";
openfl.media.Sound.EXTENSION_AAC = "aac";
openfl.media.Sound.MEDIA_TYPE_MP3 = "audio/mpeg";
openfl.media.Sound.MEDIA_TYPE_OGG = "audio/ogg; codecs=\"vorbis\"";
openfl.media.Sound.MEDIA_TYPE_WAV = "audio/wav; codecs=\"1\"";
openfl.media.Sound.MEDIA_TYPE_AAC = "audio/mp4; codecs=\"mp4a.40.2\"";
openfl.net.URLRequestMethod.DELETE = "DELETE";
openfl.net.URLRequestMethod.GET = "GET";
openfl.net.URLRequestMethod.HEAD = "HEAD";
openfl.net.URLRequestMethod.OPTIONS = "OPTIONS";
openfl.net.URLRequestMethod.POST = "POST";
openfl.net.URLRequestMethod.PUT = "PUT";
openfl.system.ApplicationDomain.currentDomain = new openfl.system.ApplicationDomain(null);
openfl.system.SecurityDomain.currentDomain = new openfl.system.SecurityDomain();
openfl.text.Font.DEFAULT_FONT_DATA = "q:55oy6:ascentd950.5y4:dataad84d277.5d564d277.5d564d320.5d293d1024d187.5d1024d442.5d362.5d84d362.5d84d277.5hy6:_widthd651.5y4:xMaxd564y4:xMind84y4:yMaxd746.5y4:yMind0y7:_heightd662.5y7:leadingd168y7:descentd241.5y8:charCodei55y15:leftsideBearingd84y12:advanceWidthd651.5y8:commandsai1i2i2i2i2i2i2i2hg:111oR0d950.5R1ad313.5d528.5d239.5d528.5d196.5d586.25d153.5d644d153.5d744.5d153.5d845d196.25d902.75d239d960.5d313.5d960.5d387d960.5d430d902.5d473d844.5d473d744.5d473d645d430d586.75d387d528.5d313.5d528.5d313.5d450.5d433.5d450.5d502d528.5d570.5d606.5d570.5d744.5d570.5d882d502d960.25d433.5d1038.5d313.5d1038.5d193d1038.5d124.75d960.25d56.5d882d56.5d744.5d56.5d606.5d124.75d528.5d193d450.5d313.5d450.5hR2d626.5R3d570.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i111R11d56.5R12d626.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:54oR0d950.5R1ad338d610.5d270d610.5d230.25d657d190.5d703.5d190.5d784.5d190.5d865d230.25d911.75d270d958.5d338d958.5d406d958.5d445.75d911.75d485.5d865d485.5d784.5d485.5d703.5d445.75d657d406d610.5d338d610.5d538.5d294d538.5d386d500.5d368d461.75d358.5d423d349d385d349d285d349d232.25d416.5d179.5d484d172d620.5d201.5d577d246d553.75d290.5d530.5d344d530.5d456.5d530.5d521.75d598.75d587d667d587d784.5d587d899.5d519d969d451d1038.5d338d1038.5d208.5d1038.5d140d939.25d71.5d840d71.5d651.5d71.5d474.5d155.5d369.25d239.5d264d381d264d419d264d457.75d271.5d496.5d279d538.5d294hR2d651.5R3d587R4d71.5R5d760R6d-14.5R7d688.5R8d168R9d241.5R10i54R11d71.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3hg:110oR0d950.5R1ad562d686d562d1024d470d1024d470d689d470d609.5d439d570d408d530.5d346d530.5d271.5d530.5d228.5d578d185.5d625.5d185.5d707.5d185.5d1024d93d1024d93d464d185.5d464d185.5d551d218.5d500.5d263.25d475.5d308d450.5d366.5d450.5d463d450.5d512.5d510.25d562d570d562d686hR2d649R3d562R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i110R11d93R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:53oR0d950.5R1ad110.5d277.5d507d277.5d507d362.5d203d362.5d203d545.5d225d538d247d534.25d269d530.5d291d530.5d416d530.5d489d599d562d667.5d562d784.5d562d905d487d971.75d412d1038.5d275.5d1038.5d228.5d1038.5d179.75d1030.5d131d1022.5d79d1006.5d79d905d124d929.5d172d941.5d220d953.5d273.5d953.5d360d953.5d410.5d908d461d862.5d461d784.5d461d706.5d410.5d661d360d615.5d273.5d615.5d233d615.5d192.75d624.5d152.5d633.5d110.5d652.5d110.5d277.5hR2d651.5R3d562R4d79R5d746.5R6d-14.5R7d667.5R8d168R9d241.5R10i53R11d79R12d651.5R13ai1i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3i2hg:109oR0d950.5R1ad532.5d571.5d567d509.5d615d480d663d450.5d728d450.5d815.5d450.5d863d511.75d910.5d573d910.5d686d910.5d1024d818d1024d818d689d818d608.5d789.5d569.5d761d530.5d702.5d530.5d631d530.5d589.5d578d548d625.5d548d707.5d548d1024d455.5d1024d455.5d689d455.5d608d427d569.25d398.5d530.5d339d530.5d268.5d530.5d227d578.25d185.5d626d185.5d707.5d185.5d1024d93d1024d93d464d185.5d464d185.5d551d217d499.5d261d475d305d450.5d365.5d450.5d426.5d450.5d469.25d481.5d512d512.5d532.5d571.5hR2d997.5R3d910.5R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i109R11d93R12d997.5R13ai1i3i3i3i3i2i2i2i3i3i3i3i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:52oR0d950.5R1ad387d365.5d132d764d387d764d387d365.5d360.5d277.5d487.5d277.5d487.5d764d594d764d594d848d487.5d848d487.5d1024d387d1024d387d848d50d848d50d750.5d360.5d277.5hR2d651.5R3d594R4d50R5d746.5R6d0R7d696.5R8d168R9d241.5R10i52R11d50R12d651.5R13ai1i2i2i2i1i2i2i2i2i2i2i2i2i2i2i2hg:108oR0d950.5R1ad96.5d246d188.5d246d188.5d1024d96.5d1024d96.5d246hR2d284.5R3d188.5R4d96.5R5d778R6d0R7d681.5R8d168R9d241.5R10i108R11d96.5R12d284.5R13ai1i2i2i2i2hg:51oR0d950.5R1ad415.5d621.5d488d637d528.75d686d569.5d735d569.5d807d569.5d917.5d493.5d978d417.5d1038.5d277.5d1038.5d230.5d1038.5d180.75d1029.25d131d1020d78d1001.5d78d904d120d928.5d170d941d220d953.5d274.5d953.5d369.5d953.5d419.25d916d469d878.5d469d807d469d741d422.75d703.75d376.5d666.5d294d666.5d207d666.5d207d583.5d298d583.5d372.5d583.5d412d553.75d451.5d524d451.5d468d451.5d410.5d410.75d379.75d370d349d294d349d252.5d349d205d358d157.5d367d100.5d386d100.5d296d158d280d208.25d272d258.5d264d303d264d418d264d485d316.25d552d368.5d552d457.5d552d519.5d516.5d562.25d481d605d415.5d621.5hR2d651.5R3d569.5R4d78R5d760R6d-14.5R7d682R8d168R9d241.5R10i51R11d78R12d651.5R13ai1i3i3i3i3i3i3i2i3i3i3i3i3i3i2i2i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:107oR0d950.5R1ad93d246d185.5d246d185.5d705.5d460d464d577.5d464d280.5d726d590d1024d470d1024d185.5d750.5d185.5d1024d93d1024d93d246hR2d593R3d590R4d93R5d778R6d0R7d685R8d168R9d241.5R10i107R11d93R12d593R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:50oR0d950.5R1ad196.5d939d549d939d549d1024d75d1024d75d939d132.5d879.5d231.75d779.25d331d679d356.5d650d405d595.5d424.25d557.75d443.5d520d443.5d483.5d443.5d424d401.75d386.5d360d349d293d349d245.5d349d192.75d365.5d140d382d80d415.5d80d313.5d141d289d194d276.5d247d264d291d264d407d264d476d322d545d380d545d477d545d523d527.75d564.25d510.5d605.5d465d661.5d452.5d676d385.5d745.25d318.5d814.5d196.5d939hR2d651.5R3d549R4d75R5d760R6d0R7d685R8d168R9d241.5R10i50R11d75R12d651.5R13ai1i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:106oR0d950.5R1ad96.5d464d188.5d464d188.5d1034d188.5d1141d147.75d1189d107d1237d16.5d1237d-18.5d1237d-18.5d1159d6d1159d58.5d1159d77.5d1134.75d96.5d1110.5d96.5d1034d96.5d464d96.5d246d188.5d246d188.5d362.5d96.5d362.5d96.5d246hR2d284.5R3d188.5R4d-18.5R5d778R6d-213R7d796.5R8d168R9d241.5R10i106R11d-18.5R12d284.5R13ai1i2i2i3i3i2i2i2i3i3i2i1i2i2i2i2hg:49oR0d950.5R1ad127d939d292d939d292d369.5d112.5d405.5d112.5d313.5d291d277.5d392d277.5d392d939d557d939d557d1024d127d1024d127d939hR2d651.5R3d557R4d112.5R5d746.5R6d0R7d634R8d168R9d241.5R10i49R11d112.5R12d651.5R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:105oR0d950.5R1ad96.5d464d188.5d464d188.5d1024d96.5d1024d96.5d464d96.5d246d188.5d246d188.5d362.5d96.5d362.5d96.5d246hR2d284.5R3d188.5R4d96.5R5d778R6d0R7d681.5R8d168R9d241.5R10i105R11d96.5R12d284.5R13ai1i2i2i2i2i1i2i2i2i2hg:48oR0d950.5R1ad325.5d344d247.5d344d208.25d420.75d169d497.5d169d651.5d169d805d208.25d881.75d247.5d958.5d325.5d958.5d404d958.5d443.25d881.75d482.5d805d482.5d651.5d482.5d497.5d443.25d420.75d404d344d325.5d344d325.5d264d451d264d517.25d363.25d583.5d462.5d583.5d651.5d583.5d840d517.25d939.25d451d1038.5d325.5d1038.5d200d1038.5d133.75d939.25d67.5d840d67.5d651.5d67.5d462.5d133.75d363.25d200d264d325.5d264hR2d651.5R3d583.5R4d67.5R5d760R6d-14.5R7d692.5R8d168R9d241.5R10i48R11d67.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:104oR0d950.5R1ad562d686d562d1024d470d1024d470d689d470d609.5d439d570d408d530.5d346d530.5d271.5d530.5d228.5d578d185.5d625.5d185.5d707.5d185.5d1024d93d1024d93d246d185.5d246d185.5d551d218.5d500.5d263.25d475.5d308d450.5d366.5d450.5d463d450.5d512.5d510.25d562d570d562d686hR2d649R3d562R4d93R5d778R6d0R7d685R8d168R9d241.5R10i104R11d93R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:47oR0d950.5R1ad260d277.5d345d277.5d85d1119d0d1119d260d277.5hR2d345R3d345R4d0R5d746.5R6d-95R7d746.5R8d168R9d241.5R10i47R11d0R12d345R13ai1i2i2i2i2hg:103oR0d950.5R1ad465d737.5d465d637.5d423.75d582.5d382.5d527.5d308d527.5d234d527.5d192.75d582.5d151.5d637.5d151.5d737.5d151.5d837d192.75d892d234d947d308d947d382.5d947d423.75d892d465d837d465d737.5d557d954.5d557d1097.5d493.5d1167.25d430d1237d299d1237d250.5d1237d207.5d1229.75d164.5d1222.5d124d1207.5d124d1118d164.5d1140d204d1150.5d243.5d1161d284.5d1161d375d1161d420d1113.75d465d1066.5d465d971d465d925.5d436.5d975d392d999.5d347.5d1024d285.5d1024d182.5d1024d119.5d945.5d56.5d867d56.5d737.5d56.5d607.5d119.5d529d182.5d450.5d285.5d450.5d347.5d450.5d392d475d436.5d499.5d465d549d465d464d557d464d557d954.5hR2d650R3d557R4d56.5R5d573.5R6d-213R7d517R8d168R9d241.5R10i103R11d56.5R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i2i3i3i3i3i2i3i3i3i3i3i3i3i3i2i2i2hg:46oR0d950.5R1ad109.5d897d215d897d215d1024d109.5d1024d109.5d897hR2d325.5R3d215R4d109.5R5d127R6d0R7d17.5R8d168R9d241.5R10i46R11d109.5R12d325.5R13ai1i2i2i2i2hg:102oR0d950.5R1ad380d246d380d322.5d292d322.5d242.5d322.5d223.25d342.5d204d362.5d204d414.5d204d464d355.5d464d355.5d535.5d204d535.5d204d1024d111.5d1024d111.5d535.5d23.5d535.5d23.5d464d111.5d464d111.5d425d111.5d331.5d155d288.75d198.5d246d293d246d380d246hR2d360.5R3d380R4d23.5R5d778R6d0R7d754.5R8d168R9d241.5R10i102R11d23.5R12d360.5R13ai1i2i2i3i3i2i2i2i2i2i2i2i2i2i2i2i3i3i2hg:45oR0d950.5R1ad50d702.5d319.5d702.5d319.5d784.5d50d784.5d50d702.5hR2d369.5R3d319.5R4d50R5d321.5R6d239.5R7d271.5R8d168R9d241.5R10i45R11d50R12d369.5R13ai1i2i2i2i2hg:101oR0d950.5R1ad575.5d721d575.5d766d152.5d766d158.5d861d209.75d910.75d261d960.5d352.5d960.5d405.5d960.5d455.25d947.5d505d934.5d554d908.5d554d995.5d504.5d1016.5d452.5d1027.5d400.5d1038.5d347d1038.5d213d1038.5d134.75d960.5d56.5d882.5d56.5d749.5d56.5d612d130.75d531.25d205d450.5d331d450.5d444d450.5d509.75d523.25d575.5d596d575.5d721d483.5d694d482.5d618.5d441.25d573.5d400d528.5d332d528.5d255d528.5d208.75d572d162.5d615.5d155.5d694.5d483.5d694hR2d630R3d575.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i101R11d56.5R12d630R13ai1i2i2i3i3i3i3i2i3i3i3i3i3i3i3i3i1i3i3i3i3i2hg:44oR0d950.5R1ad120d897d225.5d897d225.5d983d143.5d1143d79d1143d120d983d120d897hR2d325.5R3d225.5R4d79R5d127R6d-119R7d48R8d168R9d241.5R10i44R11d79R12d325.5R13ai1i2i2i2i2i2i2hg:100oR0d950.5R1ad465d549d465d246d557d246d557d1024d465d1024d465d940d436d990d391.75d1014.25d347.5d1038.5d285.5d1038.5d184d1038.5d120.25d957.5d56.5d876.5d56.5d744.5d56.5d612.5d120.25d531.5d184d450.5d285.5d450.5d347.5d450.5d391.75d474.75d436d499d465d549d151.5d744.5d151.5d846d193.25d903.75d235d961.5d308d961.5d381d961.5d423d903.75d465d846d465d744.5d465d643d423d585.25d381d527.5d308d527.5d235d527.5d193.25d585.25d151.5d643d151.5d744.5hR2d650R3d557R4d56.5R5d778R6d-14.5R7d721.5R8d168R9d241.5R10i100R11d56.5R12d650R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:43oR0d950.5R1ad471d382d471d660.5d749.5d660.5d749.5d745.5d471d745.5d471d1024d387d1024d387d745.5d108.5d745.5d108.5d660.5d387d660.5d387d382d471d382hR2d858R3d749.5R4d108.5R5d642R6d0R7d533.5R8d168R9d241.5R10i43R11d108.5R12d858R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:99oR0d950.5R1ad499.5d485.5d499.5d571.5d460.5d550d421.25d539.25d382d528.5d342d528.5d252.5d528.5d203d585.25d153.5d642d153.5d744.5d153.5d847d203d903.75d252.5d960.5d342d960.5d382d960.5d421.25d949.75d460.5d939d499.5d917.5d499.5d1002.5d461d1020.5d419.75d1029.5d378.5d1038.5d332d1038.5d205.5d1038.5d131d959d56.5d879.5d56.5d744.5d56.5d607.5d131.75d529d207d450.5d338d450.5d380.5d450.5d421d459.25d461.5d468d499.5d485.5hR2d563R3d499.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i99R11d56.5R12d563R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:42oR0d950.5R1ad481.5d400.5d302d497.5d481.5d595d452.5d644d284.5d542.5d284.5d731d227.5d731d227.5d542.5d59.5d644d30.5d595d210d497.5d30.5d400.5d59.5d351d227.5d452.5d227.5d264d284.5d264d284.5d452.5d452.5d351d481.5d400.5hR2d512R3d481.5R4d30.5R5d760R6d293R7d729.5R8d168R9d241.5R10i42R11d30.5R12d512R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2hg:98oR0d950.5R1ad498.5d744.5d498.5d643d456.75d585.25d415d527.5d342d527.5d269d527.5d227.25d585.25d185.5d643d185.5d744.5d185.5d846d227.25d903.75d269d961.5d342d961.5d415d961.5d456.75d903.75d498.5d846d498.5d744.5d185.5d549d214.5d499d258.75d474.75d303d450.5d364.5d450.5d466.5d450.5d530.25d531.5d594d612.5d594d744.5d594d876.5d530.25d957.5d466.5d1038.5d364.5d1038.5d303d1038.5d258.75d1014.25d214.5d990d185.5d940d185.5d1024d93d1024d93d246d185.5d246d185.5d549hR2d650R3d594R4d93R5d778R6d-14.5R7d685R8d168R9d241.5R10i98R11d93R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i2i2hg:41oR0d950.5R1ad82d247d162d247d237d365d274.25d478d311.5d591d311.5d702.5d311.5d814.5d274.25d928d237d1041.5d162d1159d82d1159d148.5d1044.5d181.25d931.25d214d818d214d702.5d214d587d181.25d474.5d148.5d362d82d247hR2d399.5R3d311.5R4d82R5d777R6d-135R7d695R8d168R9d241.5R10i41R11d82R12d399.5R13ai1i2i3i3i3i3i2i3i3i3i3hg:97oR0d950.5R1ad351d742.5d239.5d742.5d196.5d768d153.5d793.5d153.5d855d153.5d904d185.75d932.75d218d961.5d273.5d961.5d350d961.5d396.25d907.25d442.5d853d442.5d763d442.5d742.5d351d742.5d534.5d704.5d534.5d1024d442.5d1024d442.5d939d411d990d364d1014.25d317d1038.5d249d1038.5d163d1038.5d112.25d990.25d61.5d942d61.5d861d61.5d766.5d124.75d718.5d188d670.5d313.5d670.5d442.5d670.5d442.5d661.5d442.5d598d400.75d563.25d359d528.5d283.5d528.5d235.5d528.5d190d540d144.5d551.5d102.5d574.5d102.5d489.5d153d470d200.5d460.25d248d450.5d293d450.5d414.5d450.5d474.5d513.5d534.5d576.5d534.5d704.5hR2d627.5R3d534.5R4d61.5R5d573.5R6d-14.5R7d512R8d168R9d241.5R10i97R11d61.5R12d627.5R13ai1i3i3i3i3i3i3i2i2i1i2i2i2i3i3i3i3i3i3i2i2i3i3i3i3i2i3i3i3i3hg:40oR0d950.5R1ad317.5d247d250.5d362d218d474.5d185.5d587d185.5d702.5d185.5d818d218.25d931.25d251d1044.5d317.5d1159d237.5d1159d162.5d1041.5d125.25d928d88d814.5d88d702.5d88d591d125d478d162d365d237.5d247d317.5d247hR2d399.5R3d317.5R4d88R5d777R6d-135R7d689R8d168R9d241.5R10i40R11d88R12d399.5R13ai1i3i3i3i3i2i3i3i3i3i2hg:96oR0d950.5R1ad183.5d205d324.5d392d248d392d85d205d183.5d205hR2d512R3d324.5R4d85R5d819R6d632R7d734R8d168R9d241.5R10i96R11d85R12d512R13ai1i2i2i2i2hg:39oR0d950.5R1ad183.5d277.5d183.5d555d98.5d555d98.5d277.5d183.5d277.5hR2d281.5R3d183.5R4d98.5R5d746.5R6d469R7d648R8d168R9d241.5R10i39R11d98.5R12d281.5R13ai1i2i2i2i2hg:95oR0d950.5R1ad522d1194d522d1265.5d-10d1265.5d-10d1194d522d1194hR2d512R3d522R4d-10R5d-170R6d-241.5R7d-160R8d168R9d241.5R10i95R11d-10R12d512R13ai1i2i2i2i2hg:38oR0d950.5R1ad249d622.5d203.5d663d182.25d703.25d161d743.5d161d787.5d161d860.5d214d909d267d957.5d347d957.5d394.5d957.5d436d941.75d477.5d926d514d894d249d622.5d319.5d566.5d573.5d826.5d603d782d619.5d731.25d636d680.5d639d623.5d732d623.5d726d689.5d700d754d674d818.5d627.5d881.5d767d1024d641d1024d569.5d950.5d517.5d995d460.5d1016.75d403.5d1038.5d338d1038.5d217.5d1038.5d141d969.75d64.5d901d64.5d793.5d64.5d729.5d98d673.25d131.5d617d198.5d567.5d174.5d536d162d504.75d149.5d473.5d149.5d443.5d149.5d362.5d205d313.25d260.5d264d352.5d264d394d264d435.25d273d476.5d282d519d300d519d391d475.5d367.5d436d355.25d396.5d343d362.5d343d310d343d277.25d370.75d244.5d398.5d244.5d442.5d244.5d468d259.25d493.75d274d519.5d319.5d566.5hR2d798.5R3d767R4d64.5R5d760R6d-14.5R7d695.5R8d168R9d241.5R10i38R11d64.5R12d798.5R13ai1i3i3i3i3i3i3i2i1i2i3i3i2i3i3i2i2i2i3i3i3i3i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3hg:94oR0d950.5R1ad478d277.5d749.5d556d649d556d429d358.5d209d556d108.5d556d380d277.5d478d277.5hR2d858R3d749.5R4d108.5R5d746.5R6d468R7d638R8d168R9d241.5R10i94R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:37oR0d950.5R1ad744.5d695.5d701d695.5d676.25d732.5d651.5d769.5d651.5d835.5d651.5d900.5d676.25d937.75d701d975d744.5d975d787d975d811.75d937.75d836.5d900.5d836.5d835.5d836.5d770d811.75d732.75d787d695.5d744.5d695.5d744.5d632d823.5d632d870d687d916.5d742d916.5d835.5d916.5d929d869.75d983.75d823d1038.5d744.5d1038.5d664.5d1038.5d618d983.75d571.5d929d571.5d835.5d571.5d741.5d618.25d686.75d665d632d744.5d632d228.5d327.5d185.5d327.5d160.75d364.75d136d402d136d467d136d533d160.5d570d185d607d228.5d607d272d607d296.75d570d321.5d533d321.5d467d321.5d402.5d296.5d365d271.5d327.5d228.5d327.5d680d264d760d264d293d1038.5d213d1038.5d680d264d228.5d264d307.5d264d354.5d318.75d401.5d373.5d401.5d467d401.5d561.5d354.75d616d308d670.5d228.5d670.5d149d670.5d102.75d615.75d56.5d561d56.5d467d56.5d374d103d319d149.5d264d228.5d264hR2d973R3d916.5R4d56.5R5d760R6d-14.5R7d703.5R8d168R9d241.5R10i37R11d56.5R12d973R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i1i2i2i2i2i1i3i3i3i3i3i3i3i3hg:93oR0d950.5R1ad311.5d246d311.5d1159d99.5d1159d99.5d1087.5d219d1087.5d219d317.5d99.5d317.5d99.5d246d311.5d246hR2d399.5R3d311.5R4d99.5R5d778R6d-135R7d678.5R8d168R9d241.5R10i93R11d99.5R12d399.5R13ai1i2i2i2i2i2i2i2i2hg:36oR0d950.5R1ad346d1174.5d296d1174.5d295.5d1024d243d1023d190.5d1011.75d138d1000.5d85d978d85d888d136d920d188.25d936.25d240.5d952.5d296d953d296d725d185.5d707d135.25d664d85d621d85d546d85d464.5d139.5d417.5d194d370.5d296d363.5d296d246d346d246d346d362d392.5d364d436d371.75d479.5d379.5d521d393d521d480.5d479.5d459.5d435.75d448d392d436.5d346d434.5d346d648d459.5d665.5d513d710.5d566.5d755.5d566.5d833.5d566.5d918d509.75d966.75d453d1015.5d346d1023d346d1174.5d296d639d296d434d238d440.5d207.5d467d177d493.5d177d537.5d177d580.5d205.25d604.5d233.5d628.5d296d639d346d735d346d951.5d409.5d943d441.75d915.5d474d888d474d843d474d799d443.25d773d412.5d747d346d735hR2d651.5R3d566.5R4d85R5d778R6d-150.5R7d693R8d168R9d241.5R10i36R11d85R12d651.5R13ai1i2i2i3i3i2i3i3i2i3i3i3i3i2i2i2i3i3i2i3i3i2i3i3i3i3i2i1i2i3i3i3i3i1i2i3i3i3i3hg:92oR0d950.5R1ad85d277.5d345d1119d260d1119d0d277.5d85d277.5hR2d345R3d345R4d0R5d746.5R6d-95R7d746.5R8d168R9d241.5R10i92R11d0R12d345R13ai1i2i2i2i2hg:35oR0d950.5R1ad523.5d573.5d378d573.5d336d740.5d482.5d740.5d523.5d573.5d448.5d289d396.5d496.5d542.5d496.5d595d289d675d289d623.5d496.5d779.5d496.5d779.5d573.5d604d573.5d563d740.5d722d740.5d722d817d543.5d817d491.5d1024d411.5d1024d463d817d316.5d817d265d1024d184.5d1024d236.5d817d79d817d79d740.5d255d740.5d297d573.5d136d573.5d136d496.5d316.5d496.5d367.5d289d448.5d289hR2d858R3d779.5R4d79R5d735R6d0R7d656R8d168R9d241.5R10i35R11d79R12d858R13ai1i2i2i2i2i1i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2hg:91oR0d950.5R1ad88d246d300d246d300d317.5d180d317.5d180d1087.5d300d1087.5d300d1159d88d1159d88d246hR2d399.5R3d300R4d88R5d778R6d-135R7d690R8d168R9d241.5R10i91R11d88R12d399.5R13ai1i2i2i2i2i2i2i2i2hg:34oR0d950.5R1ad183.5d277.5d183.5d555d98.5d555d98.5d277.5d183.5d277.5d372.5d277.5d372.5d555d287.5d555d287.5d277.5d372.5d277.5hR2d471R3d372.5R4d98.5R5d746.5R6d469R7d648R8d168R9d241.5R10i34R11d98.5R12d471R13ai1i2i2i2i2i1i2i2i2i2hg:90oR0d950.5R1ad57.5d277.5d644d277.5d644d354.5d172d939d655.5d939d655.5d1024d46d1024d46d947d518d362.5d57.5d362.5d57.5d277.5hR2d701.5R3d655.5R4d46R5d746.5R6d0R7d700.5R8d168R9d241.5R10i90R11d46R12d701.5R13ai1i2i2i2i2i2i2i2i2i2i2hg:33oR0d950.5R1ad154.5d897d256d897d256d1024d154.5d1024d154.5d897d154.5d277.5d256d277.5d256d605d246d783.5d165d783.5d154.5d605d154.5d277.5hR2d410.5R3d256R4d154.5R5d746.5R6d0R7d592R8d168R9d241.5R10i33R11d154.5R12d410.5R13ai1i2i2i2i2i1i2i2i2i2i2i2hg:89oR0d950.5R1ad-2d277.5d106.5d277.5d313.5d584.5d519d277.5d627.5d277.5d363.5d668.5d363.5d1024d262d1024d262d668.5d-2d277.5hR2d625.5R3d627.5R4d-2R5d746.5R6d0R7d748.5R8d168R9d241.5R10i89R11d-2R12d625.5R13ai1i2i2i2i2i2i2i2i2i2hg:32oR0d950.5R1ahR2d325.5R3d0R4d0R5d0R6d0R7d0R8d168R9d241.5R10i32R11d0R12d325.5R13ahg:88oR0d950.5R1ad64.5d277.5d173d277.5d358.5d555d545d277.5d653.5d277.5d413.5d636d669.5d1024d561d1024d351d706.5d139.5d1024d30.5d1024d297d625.5d64.5d277.5hR2d701.5R3d669.5R4d30.5R5d746.5R6d0R7d716R8d168R9d241.5R10i88R11d30.5R12d701.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:87oR0d950.5R1ad34d277.5d136d277.5d293d908.5d449.5d277.5d563d277.5d720d908.5d876.5d277.5d979d277.5d791.5d1024d664.5d1024d507d376d348d1024d221d1024d34d277.5hR2d1012.5R3d979R4d34R5d746.5R6d0R7d712.5R8d168R9d241.5R10i87R11d34R12d1012.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:86oR0d950.5R1ad293d1024d8d277.5d113.5d277.5d350d906d587d277.5d692d277.5d407.5d1024d293d1024hR2d700.5R3d692R4d8R5d746.5R6d0R7d738.5R8d168R9d241.5R10i86R11d8R12d700.5R13ai1i2i2i2i2i2i2i2hg:85oR0d950.5R1ad89d277.5d190.5d277.5d190.5d731d190.5d851d234d903.75d277.5d956.5d375d956.5d472d956.5d515.5d903.75d559d851d559d731d559d277.5d660.5d277.5d660.5d743.5d660.5d889.5d588.25d964d516d1038.5d375d1038.5d233.5d1038.5d161.25d964d89d889.5d89d743.5d89d277.5hR2d749.5R3d660.5R4d89R5d746.5R6d-14.5R7d657.5R8d168R9d241.5R10i85R11d89R12d749.5R13ai1i2i2i3i3i3i3i2i2i2i3i3i3i3i2hg:84oR0d950.5R1ad-3d277.5d628.5d277.5d628.5d362.5d363.5d362.5d363.5d1024d262d1024d262d362.5d-3d362.5d-3d277.5hR2d625.5R3d628.5R4d-3R5d746.5R6d0R7d749.5R8d168R9d241.5R10i84R11d-3R12d625.5R13ai1i2i2i2i2i2i2i2i2hg:83oR0d950.5R1ad548d302d548d400.5d490.5d373d439.5d359.5d388.5d346d341d346d258.5d346d213.75d378d169d410d169d469d169d518.5d198.75d543.75d228.5d569d311.5d584.5d372.5d597d485.5d618.5d539.25d672.75d593d727d593d818d593d926.5d520.25d982.5d447.5d1038.5d307d1038.5d254d1038.5d194.25d1026.5d134.5d1014.5d70.5d991d70.5d887d132d921.5d191d939d250d956.5d307d956.5d393.5d956.5d440.5d922.5d487.5d888.5d487.5d825.5d487.5d770.5d453.75d739.5d420d708.5d343d693d281.5d681d168.5d658.5d118d610.5d67.5d562.5d67.5d477d67.5d378d137.25d321d207d264d329.5d264d382d264d436.5d273.5d491d283d548d302hR2d650R3d593R4d67.5R5d760R6d-14.5R7d692.5R8d168R9d241.5R10i83R11d67.5R12d650R13ai1i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:82oR0d950.5R1ad454.5d674d487d685d517.75d721d548.5d757d579.5d820d682d1024d573.5d1024d478d832.5d441d757.5d406.25d733d371.5d708.5d311.5d708.5d201.5d708.5d201.5d1024d100.5d1024d100.5d277.5d328.5d277.5d456.5d277.5d519.5d331d582.5d384.5d582.5d492.5d582.5d563d549.75d609.5d517d656d454.5d674d201.5d360.5d201.5d625.5d328.5d625.5d401.5d625.5d438.75d591.75d476d558d476d492.5d476d427d438.75d393.75d401.5d360.5d328.5d360.5d201.5d360.5hR2d711.5R3d682R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i82R11d100.5R12d711.5R13ai1i3i3i2i2i2i3i3i2i2i2i2i2i3i3i3i3i1i2i2i3i3i3i3i2hg:81oR0d950.5R1ad403.5d346d293.5d346d228.75d428d164d510d164d651.5d164d792.5d228.75d874.5d293.5d956.5d403.5d956.5d513.5d956.5d577.75d874.5d642d792.5d642d651.5d642d510d577.75d428d513.5d346d403.5d346d545d1010.5d678d1156d556d1156d445.5d1036.5d429d1037.5d420.25d1038d411.5d1038.5d403.5d1038.5d246d1038.5d151.75d933.25d57.5d828d57.5d651.5d57.5d474.5d151.75d369.25d246d264d403.5d264d560.5d264d654.5d369.25d748.5d474.5d748.5d651.5d748.5d781.5d696.25d874d644d966.5d545d1010.5hR2d806R3d748.5R4d57.5R5d760R6d-132R7d702.5R8d168R9d241.5R10i81R11d57.5R12d806R13ai1i3i3i3i3i3i3i3i3i1i2i2i2i3i3i3i3i3i3i3i3i3i3hg:80oR0d950.5R1ad201.5d360.5d201.5d641d328.5d641d399d641d437.5d604.5d476d568d476d500.5d476d433.5d437.5d397d399d360.5d328.5d360.5d201.5d360.5d100.5d277.5d328.5d277.5d454d277.5d518.25d334.25d582.5d391d582.5d500.5d582.5d611d518.25d667.5d454d724d328.5d724d201.5d724d201.5d1024d100.5d1024d100.5d277.5hR2d617.5R3d582.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i80R11d100.5R12d617.5R13ai1i2i2i3i3i3i3i2i1i2i3i3i3i3i2i2i2i2hg:79oR0d950.5R1ad403.5d346d293.5d346d228.75d428d164d510d164d651.5d164d792.5d228.75d874.5d293.5d956.5d403.5d956.5d513.5d956.5d577.75d874.5d642d792.5d642d651.5d642d510d577.75d428d513.5d346d403.5d346d403.5d264d560.5d264d654.5d369.25d748.5d474.5d748.5d651.5d748.5d828d654.5d933.25d560.5d1038.5d403.5d1038.5d246d1038.5d151.75d933.5d57.5d828.5d57.5d651.5d57.5d474.5d151.75d369.25d246d264d403.5d264hR2d806R3d748.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i79R11d57.5R12d806R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:78oR0d950.5R1ad100.5d277.5d236.5d277.5d567.5d902d567.5d277.5d665.5d277.5d665.5d1024d529.5d1024d198.5d399.5d198.5d1024d100.5d1024d100.5d277.5hR2d766R3d665.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i78R11d100.5R12d766R13ai1i2i2i2i2i2i2i2i2i2i2hg:77oR0d950.5R1ad100.5d277.5d251d277.5d441.5d785.5d633d277.5d783.5d277.5d783.5d1024d685d1024d685d368.5d492.5d880.5d391d880.5d198.5d368.5d198.5d1024d100.5d1024d100.5d277.5hR2d883.5R3d783.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i77R11d100.5R12d883.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:76oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d939d565d939d565d1024d100.5d1024d100.5d277.5hR2d570.5R3d565R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i76R11d100.5R12d570.5R13ai1i2i2i2i2i2i2hg:75oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d593d536.5d277.5d666.5d277.5d296d625.5d693d1024d560d1024d201.5d664.5d201.5d1024d100.5d1024d100.5d277.5hR2d671.5R3d693R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i75R11d100.5R12d671.5R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:74oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d972d201.5d1107d150.25d1168d99d1229d-14.5d1229d-53d1229d-53d1144d-21.5d1144d45.5d1144d73d1106.5d100.5d1069d100.5d972d100.5d277.5hR2d302R3d201.5R4d-53R5d746.5R6d-205R7d799.5R8d168R9d241.5R10i74R11d-53R12d302R13ai1i2i2i3i3i2i2i2i3i3i2hg:73oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d1024d100.5d1024d100.5d277.5hR2d302R3d201.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i73R11d100.5R12d302R13ai1i2i2i2i2hg:72oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d583.5d568.5d583.5d568.5d277.5d669.5d277.5d669.5d1024d568.5d1024d568.5d668.5d201.5d668.5d201.5d1024d100.5d1024d100.5d277.5hR2d770R3d669.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i72R11d100.5R12d770R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:71oR0d950.5R1ad609.5d917.5d609.5d717d444.5d717d444.5d634d709.5d634d709.5d954.5d651d996d580.5d1017.25d510d1038.5d430d1038.5d255d1038.5d156.25d936.25d57.5d834d57.5d651.5d57.5d468.5d156.25d366.25d255d264d430d264d503d264d568.75d282d634.5d300d690d335d690d442.5d634d395d571d371d508d347d438.5d347d301.5d347d232.75d423.5d164d500d164d651.5d164d802.5d232.75d879d301.5d955.5d438.5d955.5d492d955.5d534d946.25d576d937d609.5d917.5hR2d793.5R3d709.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i71R11d57.5R12d793.5R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:70oR0d950.5R1ad100.5d277.5d529.5d277.5d529.5d362.5d201.5d362.5d201.5d582.5d497.5d582.5d497.5d667.5d201.5d667.5d201.5d1024d100.5d1024d100.5d277.5hR2d589R3d529.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i70R11d100.5R12d589R13ai1i2i2i2i2i2i2i2i2i2i2hg:126oR0d950.5R1ad749.5d615.5d749.5d704.5d697d744d652.25d761d607.5d778d559d778d504d778d431d748.5d425.5d746.5d423d745.5d419.5d744d412d741.5d334.5d710.5d287.5d710.5d243.5d710.5d200.5d729.75d157.5d749d108.5d790.5d108.5d701.5d161d662d205.75d644.75d250.5d627.5d299d627.5d354d627.5d427.5d657.5d432.5d659.5d435d660.5d439d662d446d664.5d523.5d695.5d570.5d695.5d613.5d695.5d655.75d676.5d698d657.5d749.5d615.5hR2d858R3d749.5R4d108.5R5d408.5R6d233.5R7d300R8d168R9d241.5R10i126R11d108.5R12d858R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:69oR0d950.5R1ad100.5d277.5d572.5d277.5d572.5d362.5d201.5d362.5d201.5d583.5d557d583.5d557d668.5d201.5d668.5d201.5d939d581.5d939d581.5d1024d100.5d1024d100.5d277.5hR2d647R3d581.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i69R11d100.5R12d647R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:125oR0d950.5R1ad128d1119d163d1119d233d1119d254.25d1097.5d275.5d1076d275.5d1004.5d275.5d880.5d275.5d802.5d298d767d320.5d731.5d376d718d320.5d705.5d298d670d275.5d634.5d275.5d556d275.5d432d275.5d361d254.25d339.25d233d317.5d163d317.5d128d317.5d128d246d159.5d246d284d246d325.75d282.75d367.5d319.5d367.5d430d367.5d550d367.5d624.5d394.5d653.25d421.5d682d492.5d682d523.5d682d523.5d753.5d492.5d753.5d421.5d753.5d394.5d782.5d367.5d811.5d367.5d887d367.5d1006.5d367.5d1117d325.75d1154d284d1191d159.5d1191d128d1191d128d1119hR2d651.5R3d523.5R4d128R5d778R6d-167R7d650R8d168R9d241.5R10i125R11d128R12d651.5R13ai1i2i3i3i2i3i3i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2hg:68oR0d950.5R1ad201.5d360.5d201.5d941d323.5d941d478d941d549.75d871d621.5d801d621.5d650d621.5d500d549.75d430.25d478d360.5d323.5d360.5d201.5d360.5d100.5d277.5d308d277.5d525d277.5d626.5d367.75d728d458d728d650d728d843d626d933.5d524d1024d308d1024d100.5d1024d100.5d277.5hR2d788.5R3d728R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i68R11d100.5R12d788.5R13ai1i2i2i3i3i3i3i2i1i2i3i3i3i3i2i2hg:124oR0d950.5R1ad215d241.5d215d1265.5d130d1265.5d130d241.5d215d241.5hR2d345R3d215R4d130R5d782.5R6d-241.5R7d652.5R8d168R9d241.5R10i124R11d130R12d345R13ai1i2i2i2i2hg:67oR0d950.5R1ad659.5d335d659.5d441.5d608.5d394d550.75d370.5d493d347d428d347d300d347d232d425.25d164d503.5d164d651.5d164d799d232d877.25d300d955.5d428d955.5d493d955.5d550.75d932d608.5d908.5d659.5d861d659.5d966.5d606.5d1002.5d547.25d1020.5d488d1038.5d422d1038.5d252.5d1038.5d155d934.75d57.5d831d57.5d651.5d57.5d471.5d155d367.75d252.5d264d422d264d489d264d548.25d281.75d607.5d299.5d659.5d335hR2d715R3d659.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i67R11d57.5R12d715R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:123oR0d950.5R1ad523.5d1119d523.5d1191d492.5d1191d368d1191d325.75d1154d283.5d1117d283.5d1006.5d283.5d887d283.5d811.5d256.5d782.5d229.5d753.5d158.5d753.5d128d753.5d128d682d158.5d682d230d682d256.75d653.25d283.5d624.5d283.5d550d283.5d430d283.5d319.5d325.75d282.75d368d246d492.5d246d523.5d246d523.5d317.5d489.5d317.5d419d317.5d397.5d339.5d376d361.5d376d432d376d556d376d634.5d353.25d670d330.5d705.5d275.5d718d331d731.5d353.5d767d376d802.5d376d880.5d376d1004.5d376d1075d397.5d1097d419d1119d489.5d1119d523.5d1119hR2d651.5R3d523.5R4d128R5d778R6d-167R7d650R8d168R9d241.5R10i123R11d128R12d651.5R13ai1i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i3i3i2i3i3i2hg:66oR0d950.5R1ad201.5d667.5d201.5d941d363.5d941d445d941d484.25d907.25d523.5d873.5d523.5d804d523.5d734d484.25d700.75d445d667.5d363.5d667.5d201.5d667.5d201.5d360.5d201.5d585.5d351d585.5d425d585.5d461.25d557.75d497.5d530d497.5d473d497.5d416.5d461.25d388.5d425d360.5d351d360.5d201.5d360.5d100.5d277.5d358.5d277.5d474d277.5d536.5d325.5d599d373.5d599d462d599d530.5d567d571d535d611.5d473d621.5d547.5d637.5d588.75d688.25d630d739d630d815d630d915d562d969.5d494d1024d368.5d1024d100.5d1024d100.5d277.5hR2d702.5R3d630R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i66R11d100.5R12d702.5R13ai1i2i2i3i3i3i3i2i1i2i2i3i3i3i3i2i1i2i3i3i3i3i3i3i3i3i2i2hg:122oR0d950.5R1ad56.5d464d493.5d464d493.5d548d147.5d950.5d493.5d950.5d493.5d1024d44d1024d44d940d390d537.5d56.5d537.5d56.5d464hR2d537.5R3d493.5R4d44R5d560R6d0R7d516R8d168R9d241.5R10i122R11d44R12d537.5R13ai1i2i2i2i2i2i2i2i2i2i2hg:65oR0d950.5R1ad350d377d213d748.5d487.5d748.5d350d377d293d277.5d407.5d277.5d692d1024d587d1024d519d832.5d182.5d832.5d114.5d1024d8d1024d293d277.5hR2d700.5R3d692R4d8R5d746.5R6d0R7d738.5R8d168R9d241.5R10i65R11d8R12d700.5R13ai1i2i2i2i1i2i2i2i2i2i2i2i2hg:121oR0d950.5R1ad329.5d1076d290.5d1176d253.5d1206.5d216.5d1237d154.5d1237d81d1237d81d1160d135d1160d173d1160d194d1142d215d1124d240.5d1057d257d1015d30.5d464d128d464d303d902d478d464d575.5d464d329.5d1076hR2d606R3d575.5R4d30.5R5d560R6d-213R7d529.5R8d168R9d241.5R10i121R11d30.5R12d606R13ai1i3i3i2i2i2i3i3i2i2i2i2i2i2i2hg:64oR0d950.5R1ad381d755.5d381d827d416.5d867.75d452d908.5d514d908.5d575.5d908.5d610.75d867.5d646d826.5d646d755.5d646d685.5d610d644.25d574d603d513d603d452.5d603d416.75d644d381d685d381d755.5d653.5d905d623.5d943.5d584.75d961.75d546d980d494.5d980d408.5d980d354.75d917.75d301d855.5d301d755.5d301d655.5d355d593d409d530.5d494.5d530.5d546d530.5d585d549.25d624d568d653.5d606d653.5d540.5d725d540.5d725d908.5d798d897.5d839.25d841.75d880.5d786d880.5d697.5d880.5d644d864.75d597d849d550d817d510d765d444.5d690.25d409.75d615.5d375d527.5d375d466d375d409.5d391.25d353d407.5d305d439.5d226.5d490.5d182.25d573.25d138d656d138d752.5d138d832d166.75d901.5d195.5d971d250d1024d302.5d1076d371.5d1103.25d440.5d1130.5d519d1130.5d583.5d1130.5d645.75d1108.75d708d1087d760d1046.5d805d1102d742.5d1150.5d668.75d1176.25d595d1202d519d1202d426.5d1202d344.5d1169.25d262.5d1136.5d198.5d1074d134.5d1011.5d101d929.25d67.5d847d67.5d752.5d67.5d661.5d101.5d579d135.5d496.5d198.5d434d263d370.5d347.5d336.75d432d303d526.5d303d632.5d303d723.25d346.5d814d390d875.5d470d913d519d932.75d576.5d952.5d634d952.5d695.5d952.5d827d873d903d793.5d979d653.5d982d653.5d905hR2d1024R3d952.5R4d67.5R5d721R6d-178R7d653.5R8d168R9d241.5R10i64R11d67.5R12d1024R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i2hg:120oR0d950.5R1ad562d464d359.5d736.5d572.5d1024d464d1024d301d804d138d1024d29.5d1024d247d731d48d464d156.5d464d305d663.5d453.5d464d562d464hR2d606R3d572.5R4d29.5R5d560R6d0R7d530.5R8d168R9d241.5R10i120R11d29.5R12d606R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:63oR0d950.5R1ad195.5d897d297d897d297d1024d195.5d1024d195.5d897d294d823.5d198.5d823.5d198.5d746.5d198.5d696d212.5d663.5d226.5d631d271.5d588d316.5d543.5d345d517d357.75d493.5d370.5d470d370.5d445.5d370.5d401d337.75d373.5d305d346d251d346d211.5d346d166.75d363.5d122d381d73.5d414.5d73.5d320.5d120.5d292d168.75d278d217d264d268.5d264d360.5d264d416.25d312.5d472d361d472d440.5d472d478.5d454d512.75d436d547d391d590d347d633d323.5d656.5d313.75d669.75d304d683d300d695.5d297d706d295.5d721d294d736d294d762d294d823.5hR2d543.5R3d472R4d73.5R5d760R6d0R7d686.5R8d168R9d241.5R10i63R11d73.5R12d543.5R13ai1i2i2i2i2i1i2i2i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i2hg:119oR0d950.5R1ad43d464d135d464d250d901d364.5d464d473d464d588d901d702.5d464d794.5d464d648d1024d539.5d1024d419d565d298d1024d189.5d1024d43d464hR2d837.5R3d794.5R4d43R5d560R6d0R7d517R8d168R9d241.5R10i119R11d43R12d837.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:62oR0d950.5R1ad108.5d520d108.5d429d749.5d661.5d749.5d744.5d108.5d977d108.5d886d623.5d703.5d108.5d520hR2d858R3d749.5R4d108.5R5d595R6d47R7d486.5R8d168R9d241.5R10i62R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:118oR0d950.5R1ad30.5d464d128d464d303d934d478d464d575.5d464d365.5d1024d240.5d1024d30.5d464hR2d606R3d575.5R4d30.5R5d560R6d0R7d529.5R8d168R9d241.5R10i118R11d30.5R12d606R13ai1i2i2i2i2i2i2i2hg:61oR0d950.5R1ad108.5d559d749.5d559d749.5d643d108.5d643d108.5d559d108.5d763d749.5d763d749.5d848d108.5d848d108.5d763hR2d858R3d749.5R4d108.5R5d465R6d176R7d356.5R8d168R9d241.5R10i61R11d108.5R12d858R13ai1i2i2i2i2i1i2i2i2i2hg:117oR0d950.5R1ad87d803d87d464d179d464d179d799.5d179d879d210d918.75d241d958.5d303d958.5d377.5d958.5d420.75d911d464d863.5d464d781.5d464d464d556d464d556d1024d464d1024d464d938d430.5d989d386.25d1013.75d342d1038.5d283.5d1038.5d187d1038.5d137d978.5d87d918.5d87d803hR2d649R3d556R4d87R5d560R6d-14.5R7d473R8d168R9d241.5R10i117R11d87R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:60oR0d950.5R1ad749.5d520d233.5d703.5d749.5d886d749.5d977d108.5d744.5d108.5d661.5d749.5d429d749.5d520hR2d858R3d749.5R4d108.5R5d595R6d47R7d486.5R8d168R9d241.5R10i60R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:116oR0d950.5R1ad187.5d305d187.5d464d377d464d377d535.5d187.5d535.5d187.5d839.5d187.5d908d206.25d927.5d225d947d282.5d947d377d947d377d1024d282.5d1024d176d1024d135.5d984.25d95d944.5d95d839.5d95d535.5d27.5d535.5d27.5d464d95d464d95d305d187.5d305hR2d401.5R3d377R4d27.5R5d719R6d0R7d691.5R8d168R9d241.5R10i116R11d27.5R12d401.5R13ai1i2i2i2i2i2i3i3i2i2i2i3i3i2i2i2i2i2i2hg:59oR0d950.5R1ad120d494.5d225.5d494.5d225.5d621.5d120d621.5d120d494.5d120d897d225.5d897d225.5d983d143.5d1143d79d1143d120d983d120d897hR2d345R3d225.5R4d79R5d529.5R6d-119R7d450.5R8d168R9d241.5R10i59R11d79R12d345R13ai1i2i2i2i2i1i2i2i2i2i2i2hg:115oR0d950.5R1ad453.5d480.5d453.5d567.5d414.5d547.5d372.5d537.5d330.5d527.5d285.5d527.5d217d527.5d182.75d548.5d148.5d569.5d148.5d611.5d148.5d643.5d173d661.75d197.5d680d271.5d696.5d303d703.5d401d724.5d442.25d762.75d483.5d801d483.5d869.5d483.5d947.5d421.75d993d360d1038.5d252d1038.5d207d1038.5d158.25d1029.75d109.5d1021d55.5d1003.5d55.5d908.5d106.5d935d156d948.25d205.5d961.5d254d961.5d319d961.5d354d939.25d389d917d389d876.5d389d839d363.75d819d338.5d799d253d780.5d221d773d135.5d755d97.5d717.75d59.5d680.5d59.5d615.5d59.5d536.5d115.5d493.5d171.5d450.5d274.5d450.5d325.5d450.5d370.5d458d415.5d465.5d453.5d480.5hR2d533.5R3d483.5R4d55.5R5d573.5R6d-14.5R7d518R8d168R9d241.5R10i115R11d55.5R12d533.5R13ai1i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:58oR0d950.5R1ad120d897d225.5d897d225.5d1024d120d1024d120d897d120d494.5d225.5d494.5d225.5d621.5d120d621.5d120d494.5hR2d345R3d225.5R4d120R5d529.5R6d0R7d409.5R8d168R9d241.5R10i58R11d120R12d345R13ai1i2i2i2i2i1i2i2i2i2hg:114oR0d950.5R1ad421d550d405.5d541d387.25d536.75d369d532.5d347d532.5d269d532.5d227.25d583.25d185.5d634d185.5d729d185.5d1024d93d1024d93d464d185.5d464d185.5d551d214.5d500d261d475.25d307.5d450.5d374d450.5d383.5d450.5d395d451.75d406.5d453d420.5d455.5d421d550hR2d421R3d421R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i114R11d93R12d421R13ai1i3i3i3i3i2i2i2i2i2i3i3i3i3i2hg:57oR0d950.5R1ad112.5d1008.5d112.5d916.5d150.5d934.5d189.5d944d228.5d953.5d266d953.5d366d953.5d418.75d886.25d471.5d819d479d682d450d725d405.5d748d361d771d307d771d195d771d129.75d703.25d64.5d635.5d64.5d518d64.5d403d132.5d333.5d200.5d264d313.5d264d443d264d511.25d363.25d579.5d462.5d579.5d651.5d579.5d828d495.75d933.25d412d1038.5d270.5d1038.5d232.5d1038.5d193.5d1031d154.5d1023.5d112.5d1008.5d313.5d692d381.5d692d421.25d645.5d461d599d461d518d461d437.5d421.25d390.75d381.5d344d313.5d344d245.5d344d205.75d390.75d166d437.5d166d518d166d599d205.75d645.5d245.5d692d313.5d692hR2d651.5R3d579.5R4d64.5R5d760R6d-14.5R7d695.5R8d168R9d241.5R10i57R11d64.5R12d651.5R13ai1i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:113oR0d950.5R1ad151.5d744.5d151.5d846d193.25d903.75d235d961.5d308d961.5d381d961.5d423d903.75d465d846d465d744.5d465d643d423d585.25d381d527.5d308d527.5d235d527.5d193.25d585.25d151.5d643d151.5d744.5d465d940d436d990d391.75d1014.25d347.5d1038.5d285.5d1038.5d184d1038.5d120.25d957.5d56.5d876.5d56.5d744.5d56.5d612.5d120.25d531.5d184d450.5d285.5d450.5d347.5d450.5d391.75d474.75d436d499d465d549d465d464d557d464d557d1237d465d1237d465d940hR2d650R3d557R4d56.5R5d573.5R6d-213R7d517R8d168R9d241.5R10i113R11d56.5R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i2i2hg:56oR0d950.5R1ad325.5d669.5d253.5d669.5d212.25d708d171d746.5d171d814d171d881.5d212.25d920d253.5d958.5d325.5d958.5d397.5d958.5d439d919.75d480.5d881d480.5d814d480.5d746.5d439.25d708d398d669.5d325.5d669.5d224.5d626.5d159.5d610.5d123.25d566d87d521.5d87d457.5d87d368d150.75d316d214.5d264d325.5d264d437d264d500.5d316d564d368d564d457.5d564d521.5d527.75d566d491.5d610.5d427d626.5d500d643.5d540.75d693d581.5d742.5d581.5d814d581.5d922.5d515.25d980.5d449d1038.5d325.5d1038.5d202d1038.5d135.75d980.5d69.5d922.5d69.5d814d69.5d742.5d110.5d693d151.5d643.5d224.5d626.5d187.5d467d187.5d525d223.75d557.5d260d590d325.5d590d390.5d590d427.25d557.5d464d525d464d467d464d409d427.25d376.5d390.5d344d325.5d344d260d344d223.75d376.5d187.5d409d187.5d467hR2d651.5R3d581.5R4d69.5R5d760R6d-14.5R7d690.5R8d168R9d241.5R10i56R11d69.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:112oR0d950.5R1ad185.5d940d185.5d1237d93d1237d93d464d185.5d464d185.5d549d214.5d499d258.75d474.75d303d450.5d364.5d450.5d466.5d450.5d530.25d531.5d594d612.5d594d744.5d594d876.5d530.25d957.5d466.5d1038.5d364.5d1038.5d303d1038.5d258.75d1014.25d214.5d990d185.5d940d498.5d744.5d498.5d643d456.75d585.25d415d527.5d342d527.5d269d527.5d227.25d585.25d185.5d643d185.5d744.5d185.5d846d227.25d903.75d269d961.5d342d961.5d415d961.5d456.75d903.75d498.5d846d498.5d744.5hR2d650R3d594R4d93R5d573.5R6d-213R7d480.5R8d168R9d241.5R10i112R11d93R12d650R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hgh";
openfl.text.Font.DEFAULT_FONT_SCALE = 9.0;
openfl.text.Font.DEFAULT_FONT_NAME = "Bitstream_Vera_Sans";
openfl.text.Font.DEFAULT_CLASS_NAME = "openfl.text.Font";
openfl.text.Font.__registeredFonts = new Array();
openfl.text.TextField.mDefaultFont = "Bitstream_Vera_Sans";
openfl.text.FontInstance.mSolidFonts = new haxe.ds.StringMap();
openfl.text.TextFieldType.DYNAMIC = "DYNAMIC";
openfl.text.TextFieldType.INPUT = "INPUT";
openfl.ui.Keyboard.NUMBER_0 = 48;
openfl.ui.Keyboard.NUMBER_1 = 49;
openfl.ui.Keyboard.NUMBER_2 = 50;
openfl.ui.Keyboard.NUMBER_3 = 51;
openfl.ui.Keyboard.NUMBER_4 = 52;
openfl.ui.Keyboard.NUMBER_5 = 53;
openfl.ui.Keyboard.NUMBER_6 = 54;
openfl.ui.Keyboard.NUMBER_7 = 55;
openfl.ui.Keyboard.NUMBER_8 = 56;
openfl.ui.Keyboard.NUMBER_9 = 57;
openfl.ui.Keyboard.A = 65;
openfl.ui.Keyboard.B = 66;
openfl.ui.Keyboard.C = 67;
openfl.ui.Keyboard.D = 68;
openfl.ui.Keyboard.E = 69;
openfl.ui.Keyboard.F = 70;
openfl.ui.Keyboard.G = 71;
openfl.ui.Keyboard.H = 72;
openfl.ui.Keyboard.I = 73;
openfl.ui.Keyboard.J = 74;
openfl.ui.Keyboard.K = 75;
openfl.ui.Keyboard.L = 76;
openfl.ui.Keyboard.M = 77;
openfl.ui.Keyboard.N = 78;
openfl.ui.Keyboard.O = 79;
openfl.ui.Keyboard.P = 80;
openfl.ui.Keyboard.Q = 81;
openfl.ui.Keyboard.R = 82;
openfl.ui.Keyboard.S = 83;
openfl.ui.Keyboard.T = 84;
openfl.ui.Keyboard.U = 85;
openfl.ui.Keyboard.V = 86;
openfl.ui.Keyboard.W = 87;
openfl.ui.Keyboard.X = 88;
openfl.ui.Keyboard.Y = 89;
openfl.ui.Keyboard.Z = 90;
openfl.ui.Keyboard.NUMPAD_0 = 96;
openfl.ui.Keyboard.NUMPAD_1 = 97;
openfl.ui.Keyboard.NUMPAD_2 = 98;
openfl.ui.Keyboard.NUMPAD_3 = 99;
openfl.ui.Keyboard.NUMPAD_4 = 100;
openfl.ui.Keyboard.NUMPAD_5 = 101;
openfl.ui.Keyboard.NUMPAD_6 = 102;
openfl.ui.Keyboard.NUMPAD_7 = 103;
openfl.ui.Keyboard.NUMPAD_8 = 104;
openfl.ui.Keyboard.NUMPAD_9 = 105;
openfl.ui.Keyboard.NUMPAD_MULTIPLY = 106;
openfl.ui.Keyboard.NUMPAD_ADD = 107;
openfl.ui.Keyboard.NUMPAD_ENTER = 108;
openfl.ui.Keyboard.NUMPAD_SUBTRACT = 109;
openfl.ui.Keyboard.NUMPAD_DECIMAL = 110;
openfl.ui.Keyboard.NUMPAD_DIVIDE = 111;
openfl.ui.Keyboard.F1 = 112;
openfl.ui.Keyboard.F2 = 113;
openfl.ui.Keyboard.F3 = 114;
openfl.ui.Keyboard.F4 = 115;
openfl.ui.Keyboard.F5 = 116;
openfl.ui.Keyboard.F6 = 117;
openfl.ui.Keyboard.F7 = 118;
openfl.ui.Keyboard.F8 = 119;
openfl.ui.Keyboard.F9 = 120;
openfl.ui.Keyboard.F10 = 121;
openfl.ui.Keyboard.F11 = 122;
openfl.ui.Keyboard.F12 = 123;
openfl.ui.Keyboard.F13 = 124;
openfl.ui.Keyboard.F14 = 125;
openfl.ui.Keyboard.F15 = 126;
openfl.ui.Keyboard.BACKSPACE = 8;
openfl.ui.Keyboard.TAB = 9;
openfl.ui.Keyboard.ENTER = 13;
openfl.ui.Keyboard.SHIFT = 16;
openfl.ui.Keyboard.CONTROL = 17;
openfl.ui.Keyboard.CAPS_LOCK = 18;
openfl.ui.Keyboard.ESCAPE = 27;
openfl.ui.Keyboard.SPACE = 32;
openfl.ui.Keyboard.PAGE_UP = 33;
openfl.ui.Keyboard.PAGE_DOWN = 34;
openfl.ui.Keyboard.END = 35;
openfl.ui.Keyboard.HOME = 36;
openfl.ui.Keyboard.LEFT = 37;
openfl.ui.Keyboard.RIGHT = 39;
openfl.ui.Keyboard.UP = 38;
openfl.ui.Keyboard.DOWN = 40;
openfl.ui.Keyboard.INSERT = 45;
openfl.ui.Keyboard.DELETE = 46;
openfl.ui.Keyboard.NUMLOCK = 144;
openfl.ui.Keyboard.BREAK = 19;
openfl.ui.Keyboard.SEMICOLON = 186;
openfl.ui.Keyboard.EQUAL = 187;
openfl.ui.Keyboard.COMMA = 188;
openfl.ui.Keyboard.MINUS = 189;
openfl.ui.Keyboard.PERIOD = 190;
openfl.ui.Keyboard.SLASH = 191;
openfl.ui.Keyboard.BACKQUOTE = 192;
openfl.ui.Keyboard.LEFTBRACKET = 219;
openfl.ui.Keyboard.BACKSLASH = 220;
openfl.ui.Keyboard.RIGHTBRACKET = 221;
openfl.ui.Keyboard.DOM_VK_CANCEL = 3;
openfl.ui.Keyboard.DOM_VK_HELP = 6;
openfl.ui.Keyboard.DOM_VK_BACK_SPACE = 8;
openfl.ui.Keyboard.DOM_VK_TAB = 9;
openfl.ui.Keyboard.DOM_VK_CLEAR = 12;
openfl.ui.Keyboard.DOM_VK_RETURN = 13;
openfl.ui.Keyboard.DOM_VK_ENTER = 14;
openfl.ui.Keyboard.DOM_VK_SHIFT = 16;
openfl.ui.Keyboard.DOM_VK_CONTROL = 17;
openfl.ui.Keyboard.DOM_VK_ALT = 18;
openfl.ui.Keyboard.DOM_VK_PAUSE = 19;
openfl.ui.Keyboard.DOM_VK_CAPS_LOCK = 20;
openfl.ui.Keyboard.DOM_VK_ESCAPE = 27;
openfl.ui.Keyboard.DOM_VK_SPACE = 32;
openfl.ui.Keyboard.DOM_VK_PAGE_UP = 33;
openfl.ui.Keyboard.DOM_VK_PAGE_DOWN = 34;
openfl.ui.Keyboard.DOM_VK_END = 35;
openfl.ui.Keyboard.DOM_VK_HOME = 36;
openfl.ui.Keyboard.DOM_VK_LEFT = 37;
openfl.ui.Keyboard.DOM_VK_UP = 38;
openfl.ui.Keyboard.DOM_VK_RIGHT = 39;
openfl.ui.Keyboard.DOM_VK_DOWN = 40;
openfl.ui.Keyboard.DOM_VK_PRINTSCREEN = 44;
openfl.ui.Keyboard.DOM_VK_INSERT = 45;
openfl.ui.Keyboard.DOM_VK_DELETE = 46;
openfl.ui.Keyboard.DOM_VK_0 = 48;
openfl.ui.Keyboard.DOM_VK_1 = 49;
openfl.ui.Keyboard.DOM_VK_2 = 50;
openfl.ui.Keyboard.DOM_VK_3 = 51;
openfl.ui.Keyboard.DOM_VK_4 = 52;
openfl.ui.Keyboard.DOM_VK_5 = 53;
openfl.ui.Keyboard.DOM_VK_6 = 54;
openfl.ui.Keyboard.DOM_VK_7 = 55;
openfl.ui.Keyboard.DOM_VK_8 = 56;
openfl.ui.Keyboard.DOM_VK_9 = 57;
openfl.ui.Keyboard.DOM_VK_SEMICOLON = 59;
openfl.ui.Keyboard.DOM_VK_EQUALS = 61;
openfl.ui.Keyboard.DOM_VK_A = 65;
openfl.ui.Keyboard.DOM_VK_B = 66;
openfl.ui.Keyboard.DOM_VK_C = 67;
openfl.ui.Keyboard.DOM_VK_D = 68;
openfl.ui.Keyboard.DOM_VK_E = 69;
openfl.ui.Keyboard.DOM_VK_F = 70;
openfl.ui.Keyboard.DOM_VK_G = 71;
openfl.ui.Keyboard.DOM_VK_H = 72;
openfl.ui.Keyboard.DOM_VK_I = 73;
openfl.ui.Keyboard.DOM_VK_J = 74;
openfl.ui.Keyboard.DOM_VK_K = 75;
openfl.ui.Keyboard.DOM_VK_L = 76;
openfl.ui.Keyboard.DOM_VK_M = 77;
openfl.ui.Keyboard.DOM_VK_N = 78;
openfl.ui.Keyboard.DOM_VK_O = 79;
openfl.ui.Keyboard.DOM_VK_P = 80;
openfl.ui.Keyboard.DOM_VK_Q = 81;
openfl.ui.Keyboard.DOM_VK_R = 82;
openfl.ui.Keyboard.DOM_VK_S = 83;
openfl.ui.Keyboard.DOM_VK_T = 84;
openfl.ui.Keyboard.DOM_VK_U = 85;
openfl.ui.Keyboard.DOM_VK_V = 86;
openfl.ui.Keyboard.DOM_VK_W = 87;
openfl.ui.Keyboard.DOM_VK_X = 88;
openfl.ui.Keyboard.DOM_VK_Y = 89;
openfl.ui.Keyboard.DOM_VK_Z = 90;
openfl.ui.Keyboard.DOM_VK_CONTEXT_MENU = 93;
openfl.ui.Keyboard.DOM_VK_NUMPAD0 = 96;
openfl.ui.Keyboard.DOM_VK_NUMPAD1 = 97;
openfl.ui.Keyboard.DOM_VK_NUMPAD2 = 98;
openfl.ui.Keyboard.DOM_VK_NUMPAD3 = 99;
openfl.ui.Keyboard.DOM_VK_NUMPAD4 = 100;
openfl.ui.Keyboard.DOM_VK_NUMPAD5 = 101;
openfl.ui.Keyboard.DOM_VK_NUMPAD6 = 102;
openfl.ui.Keyboard.DOM_VK_NUMPAD7 = 103;
openfl.ui.Keyboard.DOM_VK_NUMPAD8 = 104;
openfl.ui.Keyboard.DOM_VK_NUMPAD9 = 105;
openfl.ui.Keyboard.DOM_VK_MULTIPLY = 106;
openfl.ui.Keyboard.DOM_VK_ADD = 107;
openfl.ui.Keyboard.DOM_VK_SEPARATOR = 108;
openfl.ui.Keyboard.DOM_VK_SUBTRACT = 109;
openfl.ui.Keyboard.DOM_VK_DECIMAL = 110;
openfl.ui.Keyboard.DOM_VK_DIVIDE = 111;
openfl.ui.Keyboard.DOM_VK_F1 = 112;
openfl.ui.Keyboard.DOM_VK_F2 = 113;
openfl.ui.Keyboard.DOM_VK_F3 = 114;
openfl.ui.Keyboard.DOM_VK_F4 = 115;
openfl.ui.Keyboard.DOM_VK_F5 = 116;
openfl.ui.Keyboard.DOM_VK_F6 = 117;
openfl.ui.Keyboard.DOM_VK_F7 = 118;
openfl.ui.Keyboard.DOM_VK_F8 = 119;
openfl.ui.Keyboard.DOM_VK_F9 = 120;
openfl.ui.Keyboard.DOM_VK_F10 = 121;
openfl.ui.Keyboard.DOM_VK_F11 = 122;
openfl.ui.Keyboard.DOM_VK_F12 = 123;
openfl.ui.Keyboard.DOM_VK_F13 = 124;
openfl.ui.Keyboard.DOM_VK_F14 = 125;
openfl.ui.Keyboard.DOM_VK_F15 = 126;
openfl.ui.Keyboard.DOM_VK_F16 = 127;
openfl.ui.Keyboard.DOM_VK_F17 = 128;
openfl.ui.Keyboard.DOM_VK_F18 = 129;
openfl.ui.Keyboard.DOM_VK_F19 = 130;
openfl.ui.Keyboard.DOM_VK_F20 = 131;
openfl.ui.Keyboard.DOM_VK_F21 = 132;
openfl.ui.Keyboard.DOM_VK_F22 = 133;
openfl.ui.Keyboard.DOM_VK_F23 = 134;
openfl.ui.Keyboard.DOM_VK_F24 = 135;
openfl.ui.Keyboard.DOM_VK_NUM_LOCK = 144;
openfl.ui.Keyboard.DOM_VK_SCROLL_LOCK = 145;
openfl.ui.Keyboard.DOM_VK_COMMA = 188;
openfl.ui.Keyboard.DOM_VK_PERIOD = 190;
openfl.ui.Keyboard.DOM_VK_SLASH = 191;
openfl.ui.Keyboard.DOM_VK_BACK_QUOTE = 192;
openfl.ui.Keyboard.DOM_VK_OPEN_BRACKET = 219;
openfl.ui.Keyboard.DOM_VK_BACK_SLASH = 220;
openfl.ui.Keyboard.DOM_VK_CLOSE_BRACKET = 221;
openfl.ui.Keyboard.DOM_VK_QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_META = 224;
openfl.ui.Keyboard.DOM_VK_KANA = 21;
openfl.ui.Keyboard.DOM_VK_HANGUL = 21;
openfl.ui.Keyboard.DOM_VK_JUNJA = 23;
openfl.ui.Keyboard.DOM_VK_FINAL = 24;
openfl.ui.Keyboard.DOM_VK_HANJA = 25;
openfl.ui.Keyboard.DOM_VK_KANJI = 25;
openfl.ui.Keyboard.DOM_VK_CONVERT = 28;
openfl.ui.Keyboard.DOM_VK_NONCONVERT = 29;
openfl.ui.Keyboard.DOM_VK_ACEPT = 30;
openfl.ui.Keyboard.DOM_VK_MODECHANGE = 31;
openfl.ui.Keyboard.DOM_VK_SELECT = 41;
openfl.ui.Keyboard.DOM_VK_PRINT = 42;
openfl.ui.Keyboard.DOM_VK_EXECUTE = 43;
openfl.ui.Keyboard.DOM_VK_SLEEP = 95;
openfl.utils.Endian.BIG_ENDIAN = "bigEndian";
openfl.utils.Endian.LITTLE_ENDIAN = "littleEndian";
openfl.utils.Uuid.UID_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
org.aswing.AWKeyboard.A = 65;
org.aswing.AWKeyboard.B = 66;
org.aswing.AWKeyboard.C = 67;
org.aswing.AWKeyboard.D = 68;
org.aswing.AWKeyboard.E = 69;
org.aswing.AWKeyboard.F = 70;
org.aswing.AWKeyboard.G = 71;
org.aswing.AWKeyboard.H = 72;
org.aswing.AWKeyboard.I = 73;
org.aswing.AWKeyboard.J = 74;
org.aswing.AWKeyboard.K = 75;
org.aswing.AWKeyboard.L = 76;
org.aswing.AWKeyboard.M = 77;
org.aswing.AWKeyboard.N = 78;
org.aswing.AWKeyboard.O = 79;
org.aswing.AWKeyboard.P = 80;
org.aswing.AWKeyboard.Q = 81;
org.aswing.AWKeyboard.R = 82;
org.aswing.AWKeyboard.S = 83;
org.aswing.AWKeyboard.T = 84;
org.aswing.AWKeyboard.U = 85;
org.aswing.AWKeyboard.V = 86;
org.aswing.AWKeyboard.W = 87;
org.aswing.AWKeyboard.X = 88;
org.aswing.AWKeyboard.Y = 89;
org.aswing.AWKeyboard.Z = 90;
org.aswing.AWKeyboard.ALTERNATE = 18;
org.aswing.AWKeyboard.BACKQUOTE = 192;
org.aswing.AWKeyboard.BACKSLASH = 220;
org.aswing.AWKeyboard.BACKSPACE = 8;
org.aswing.AWKeyboard.CAPS_LOCK = 20;
org.aswing.AWKeyboard.COMMA = 188;
org.aswing.AWKeyboard.COMMAND = 15;
org.aswing.AWKeyboard.CONTROL = 17;
org.aswing.AWKeyboard.DELETE = 46;
org.aswing.AWKeyboard.DOWN = 40;
org.aswing.AWKeyboard.END = 35;
org.aswing.AWKeyboard.ENTER = 13;
org.aswing.AWKeyboard.EQUAL = 187;
org.aswing.AWKeyboard.ESCAPE = 27;
org.aswing.AWKeyboard.F1 = 112;
org.aswing.AWKeyboard.F2 = 113;
org.aswing.AWKeyboard.F3 = 114;
org.aswing.AWKeyboard.F4 = 115;
org.aswing.AWKeyboard.F5 = 116;
org.aswing.AWKeyboard.F6 = 117;
org.aswing.AWKeyboard.F7 = 118;
org.aswing.AWKeyboard.F8 = 119;
org.aswing.AWKeyboard.F9 = 120;
org.aswing.AWKeyboard.F10 = 121;
org.aswing.AWKeyboard.F11 = 122;
org.aswing.AWKeyboard.F12 = 123;
org.aswing.AWKeyboard.F13 = 124;
org.aswing.AWKeyboard.F14 = 125;
org.aswing.AWKeyboard.F15 = 126;
org.aswing.AWKeyboard.HOME = 36;
org.aswing.AWKeyboard.INSERT = 45;
org.aswing.AWKeyboard.LEFT = 37;
org.aswing.AWKeyboard.LEFTBRACKET = 219;
org.aswing.AWKeyboard.MINUS = 189;
org.aswing.AWKeyboard.NUMBER_0 = 48;
org.aswing.AWKeyboard.NUMBER_1 = 49;
org.aswing.AWKeyboard.NUMBER_2 = 50;
org.aswing.AWKeyboard.NUMBER_3 = 51;
org.aswing.AWKeyboard.NUMBER_4 = 52;
org.aswing.AWKeyboard.NUMBER_5 = 53;
org.aswing.AWKeyboard.NUMBER_6 = 54;
org.aswing.AWKeyboard.NUMBER_7 = 55;
org.aswing.AWKeyboard.NUMBER_8 = 56;
org.aswing.AWKeyboard.NUMBER_9 = 57;
org.aswing.AWKeyboard.NUMPAD = 21;
org.aswing.AWKeyboard.NUMPAD_0 = 96;
org.aswing.AWKeyboard.NUMPAD_1 = 97;
org.aswing.AWKeyboard.NUMPAD_2 = 98;
org.aswing.AWKeyboard.NUMPAD_3 = 99;
org.aswing.AWKeyboard.NUMPAD_4 = 100;
org.aswing.AWKeyboard.NUMPAD_5 = 101;
org.aswing.AWKeyboard.NUMPAD_6 = 102;
org.aswing.AWKeyboard.NUMPAD_7 = 103;
org.aswing.AWKeyboard.NUMPAD_8 = 104;
org.aswing.AWKeyboard.NUMPAD_9 = 105;
org.aswing.AWKeyboard.NUMPAD_ADD = 107;
org.aswing.AWKeyboard.NUMPAD_DECIMAL = 110;
org.aswing.AWKeyboard.NUMPAD_DIVIDE = 111;
org.aswing.AWKeyboard.NUMPAD_ENTER = 108;
org.aswing.AWKeyboard.NUMPAD_MULTIPLY = 106;
org.aswing.AWKeyboard.NUMPAD_SUBTRACT = 109;
org.aswing.AWKeyboard.PAGE_DOWN = 34;
org.aswing.AWKeyboard.PAGE_UP = 33;
org.aswing.AWKeyboard.PERIOD = 190;
org.aswing.AWKeyboard.QUOTE = 222;
org.aswing.AWKeyboard.RIGHT = 39;
org.aswing.AWKeyboard.RIGHTBRACKET = 221;
org.aswing.AWKeyboard.SEMICOLON = 186;
org.aswing.AWKeyboard.SHIFT = 16;
org.aswing.AWKeyboard.SLASH = 191;
org.aswing.AWKeyboard.SPACE = 32;
org.aswing.AWKeyboard.TAB = 9;
org.aswing.AWKeyboard.UP = 38;
org.aswing.AbstractButton.CENTER = 0;
org.aswing.AbstractButton.TOP = 1;
org.aswing.AbstractButton.LEFT = 2;
org.aswing.AbstractButton.BOTTOM = 3;
org.aswing.AbstractButton.RIGHT = 4;
org.aswing.AbstractButton.HORIZONTAL = 0;
org.aswing.AbstractButton.VERTICAL = 1;
org.aswing.AbstractTabbedPane.CENTER = 0;
org.aswing.AbstractTabbedPane.TOP = 1;
org.aswing.AbstractTabbedPane.LEFT = 2;
org.aswing.AbstractTabbedPane.BOTTOM = 3;
org.aswing.AbstractTabbedPane.RIGHT = 4;
org.aswing.AbstractTabbedPane.HORIZONTAL = 0;
org.aswing.AbstractTabbedPane.VERTICAL = 1;
org.aswing.AsWingConstants.MAX_VALUE = 2147483647;
org.aswing.AsWingConstants.MIN_VALUE = -2147483648;
org.aswing.AsWingConstants.NONE = -1;
org.aswing.AsWingConstants.CENTER = 0;
org.aswing.AsWingConstants.TOP = 1;
org.aswing.AsWingConstants.LEFT = 2;
org.aswing.AsWingConstants.BOTTOM = 3;
org.aswing.AsWingConstants.RIGHT = 4;
org.aswing.AsWingConstants.NORTH = 1;
org.aswing.AsWingConstants.NORTH_EAST = 2;
org.aswing.AsWingConstants.EAST = 3;
org.aswing.AsWingConstants.SOUTH_EAST = 4;
org.aswing.AsWingConstants.SOUTH = 5;
org.aswing.AsWingConstants.SOUTH_WEST = 6;
org.aswing.AsWingConstants.WEST = 7;
org.aswing.AsWingConstants.NORTH_WEST = 8;
org.aswing.AsWingConstants.HORIZONTAL = 0;
org.aswing.AsWingConstants.VERTICAL = 1;
org.aswing.AsWingManager.nextFrameCalls = new Array();
org.aswing.AsWingManager.preventNullFocus = true;
org.aswing.AsWingUtils.CENTER = 0;
org.aswing.AsWingUtils.TOP = 1;
org.aswing.AsWingUtils.LEFT = 2;
org.aswing.AsWingUtils.BOTTOM = 3;
org.aswing.AsWingUtils.RIGHT = 4;
org.aswing.AsWingUtils.HORIZONTAL = 0;
org.aswing.AsWingUtils.VERTICAL = 1;
org.aswing.AsWingUtils.TEXT_FIELD = new openfl.text.TextField();
org.aswing.AssetPane.PREFER_SIZE_BOTH = 0;
org.aswing.AssetPane.PREFER_SIZE_IMAGE = 1;
org.aswing.AssetPane.PREFER_SIZE_LAYOUT = 2;
org.aswing.AssetPane.SCALE_NONE = 0;
org.aswing.AssetPane.SCALE_FIT_PANE = 1;
org.aswing.AssetPane.SCALE_STRETCH_PANE = 2;
org.aswing.AssetPane.SCALE_FIT_WIDTH = 3;
org.aswing.AssetPane.SCALE_FIT_HEIGHT = 4;
org.aswing.AssetPane.SCALE_CUSTOM = 5;
org.aswing.AssetPane.CENTER = 0;
org.aswing.AssetPane.TOP = 1;
org.aswing.AssetPane.LEFT = 2;
org.aswing.AssetPane.BOTTOM = 3;
org.aswing.AssetPane.RIGHT = 4;
org.aswing.BorderLayout.NORTH = "North";
org.aswing.BorderLayout.SOUTH = "South";
org.aswing.BorderLayout.EAST = "East";
org.aswing.BorderLayout.WEST = "West";
org.aswing.BorderLayout.CENTER = "Center";
org.aswing.BorderLayout.BEFORE_FIRST_LINE = "First";
org.aswing.BorderLayout.AFTER_LAST_LINE = "Last";
org.aswing.BorderLayout.BEFORE_LINE_BEGINS = "Before";
org.aswing.BorderLayout.AFTER_LINE_ENDS = "After";
org.aswing.BorderLayout.PAGE_START = "First";
org.aswing.BorderLayout.PAGE_END = "Last";
org.aswing.BorderLayout.LINE_START = "Before";
org.aswing.BorderLayout.LINE_END = "After";
org.aswing.BoxLayout.X_AXIS = 0;
org.aswing.BoxLayout.Y_AXIS = 1;
org.aswing.Cursor.H_RESIZE_CURSOR = "System.hResizeCursor";
org.aswing.Cursor.V_RESIZE_CURSOR = "System.vResizeCursor";
org.aswing.Cursor.H_MOVE_CURSOR = "System.hMoveCursor";
org.aswing.Cursor.V_MOVE_CURSOR = "System.vMoveCursor";
org.aswing.Cursor.HV_RESIZE_CURSOR = "System.hvResizeCursor";
org.aswing.Cursor.HV_MOVE_CURSOR = "System.hvMoveCursor";
org.aswing.util.WeakMap.nextObjectID = 0;
org.aswing.CursorManager.managers = new org.aswing.util.WeakMap();
org.aswing.DefaultListSelectionModel.SINGLE_SELECTION = 0;
org.aswing.DefaultListSelectionModel.MULTIPLE_SELECTION = 1;
org.aswing.DefaultListSelectionModel.MIN = -1;
org.aswing.DefaultListSelectionModel.MAX = 2147483647;
org.aswing.FlowLayout.LEFT = 2;
org.aswing.FlowLayout.CENTER = 0;
org.aswing.FlowLayout.RIGHT = 4;
org.aswing.FocusManager.managers = new org.aswing.util.WeakMap();
org.aswing.FocusManager.defaultTraversalEnabled = true;
org.aswing.JAdjuster.HORIZONTAL = 0;
org.aswing.JAdjuster.VERTICAL = 1;
org.aswing.JFrame.NORMAL = 0;
org.aswing.JFrame.ICONIFIED = 2;
org.aswing.JFrame.MAXIMIZED_HORIZ = 4;
org.aswing.JFrame.MAXIMIZED_VERT = 8;
org.aswing.JFrame.MAXIMIZED = 12;
org.aswing.JFrame.DO_NOTHING_ON_CLOSE = 0;
org.aswing.JFrame.HIDE_ON_CLOSE = 1;
org.aswing.JFrame.DISPOSE_ON_CLOSE = 2;
org.aswing.JFrame.PROPERTY_TITLE_BAR = "titleBar";
org.aswing.JList.AUTO_INCREMENT = -2147483648;
org.aswing.JList.SINGLE_SELECTION = 0;
org.aswing.JList.MULTIPLE_SELECTION = 1;
org.aswing.JList.DND_NONE = 0;
org.aswing.JList.DND_MOVE = 1;
org.aswing.JList.DND_COPY = 2;
org.aswing.JOptionPane.OK_STR = "OK";
org.aswing.JOptionPane.CANCEL_STR = "Cancel";
org.aswing.JOptionPane.YES_STR = "Yes";
org.aswing.JOptionPane.NO_STR = "No";
org.aswing.JOptionPane.CLOSE_STR = "Close";
org.aswing.JOptionPane.OK = 1;
org.aswing.JOptionPane.CANCEL = 2;
org.aswing.JOptionPane.YES = 4;
org.aswing.JOptionPane.NO = 8;
org.aswing.JOptionPane.CLOSE = 16;
org.aswing.JPopupMenu.popupMenuMouseDownListening = false;
org.aswing.JPopupMenu.showingMenuPopups = new Array();
org.aswing.JProgressBar.HORIZONTAL = 0;
org.aswing.JProgressBar.VERTICAL = 1;
org.aswing.JScrollBar.HORIZONTAL = 0;
org.aswing.JScrollBar.VERTICAL = 1;
org.aswing.JScrollPane.SCROLLBAR_AS_NEEDED = 0;
org.aswing.JScrollPane.SCROLLBAR_NEVER = 1;
org.aswing.JScrollPane.SCROLLBAR_ALWAYS = 2;
org.aswing.JSeparator.HORIZONTAL = 0;
org.aswing.JSeparator.VERTICAL = 1;
org.aswing.JToolTip.WAIT_TIME = 600;
org.aswing.JToolTip.FAST_OCCUR_TIME = 50;
org.aswing.JToolTip.last_tip_dropped_time = 0;
org.aswing.JSlider.HORIZONTAL = 0;
org.aswing.JSlider.VERTICAL = 1;
org.aswing.JSplitPane.VERTICAL_SPLIT = 1;
org.aswing.JSplitPane.HORIZONTAL_SPLIT = 0;
org.aswing.JSplitPane.LEFT = "left";
org.aswing.JSplitPane.RIGHT = "right";
org.aswing.JSplitPane.DIVIDER = "divider";
org.aswing.JTabbedPane.TOP = 1;
org.aswing.JTabbedPane.LEFT = 2;
org.aswing.JTabbedPane.BOTTOM = 3;
org.aswing.JTabbedPane.RIGHT = 4;
org.aswing.JTable.AUTO_INCREMENT = -2147483647;
org.aswing.JTable.AUTO_RESIZE_OFF = 0;
org.aswing.JTable.AUTO_RESIZE_NEXT_COLUMN = 1;
org.aswing.JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS = 2;
org.aswing.JTable.AUTO_RESIZE_LAST_COLUMN = 3;
org.aswing.JTable.AUTO_RESIZE_ALL_COLUMNS = 4;
org.aswing.JTable.SINGLE_SELECTION = 0;
org.aswing.JTable.MULTIPLE_SELECTION = 1;
org.aswing.JTextArea.AUTO_INCREMENT = -2147483648;
org.aswing.JTextArea.defaultMaxChars = 0;
org.aswing.JTextField.defaultMaxChars = 0;
org.aswing.JToolBar.HORIZONTAL = 0;
org.aswing.JToolBar.VERTICAL = 1;
org.aswing.JTree.SINGLE_TREE_SELECTION = 1;
org.aswing.JTree.CONTIGUOUS_TREE_SELECTION = 2;
org.aswing.JTree.DISCONTIGUOUS_TREE_SELECTION = 4;
org.aswing.JTree.AUTO_INCREMENT = -2147483648;
org.aswing.JTree.TEMP_STACK_SIZE = 11;
org.aswing.JTree.CELL_FACTORY_PROPERTY = "cellFactory";
org.aswing.JTree.TREE_MODEL_PROPERTY = "model";
org.aswing.JTree.ROOT_VISIBLE_PROPERTY = "rootVisible";
org.aswing.JTree.ROW_HEIGHT_PROPERTY = "rowHeight";
org.aswing.JTree.CELL_EDITOR_PROPERTY = "cellEditor";
org.aswing.JTree.EDITABLE_PROPERTY = "editable";
org.aswing.JTree.SELECTION_MODEL_PROPERTY = "selectionModel";
org.aswing.JTree.VISIBLE_ROW_COUNT_PROPERTY = "visibleRowCount";
org.aswing.JTree.INVOKES_STOP_CELL_EDITING_PROPERTY = "invokesStopCellEditing";
org.aswing.JTree.SCROLLS_ON_EXPAND_PROPERTY = "scrollsOnExpand";
org.aswing.JTree.TOGGLE_CLICK_COUNT_PROPERTY = "toggleClickCount";
org.aswing.JTree.LEAD_SELECTION_PATH_PROPERTY = "leadSelectionPath";
org.aswing.JTree.ANCHOR_SELECTION_PATH_PROPERTY = "anchorSelectionPath";
org.aswing.JTree.EXPANDS_SELECTED_PATHS_PROPERTY = "expandsSelectedPaths";
org.aswing.JTree.FONT_PROPERTY = "font";
org.aswing.JViewport.AUTO_INCREMENT = -2147483648;
org.aswing.JViewport.CENTER = 0;
org.aswing.JViewport.TOP = 1;
org.aswing.JViewport.LEFT = 2;
org.aswing.JViewport.BOTTOM = 3;
org.aswing.JViewport.RIGHT = 4;
org.aswing.KeySequence.LIMITER = "+";
org.aswing.KeyStroke.VK_0 = new org.aswing.KeyStroke("0",48);
org.aswing.KeyStroke.VK_1 = new org.aswing.KeyStroke("1",49);
org.aswing.KeyStroke.VK_2 = new org.aswing.KeyStroke("2",50);
org.aswing.KeyStroke.VK_3 = new org.aswing.KeyStroke("3",51);
org.aswing.KeyStroke.VK_4 = new org.aswing.KeyStroke("4",52);
org.aswing.KeyStroke.VK_5 = new org.aswing.KeyStroke("5",53);
org.aswing.KeyStroke.VK_6 = new org.aswing.KeyStroke("6",54);
org.aswing.KeyStroke.VK_7 = new org.aswing.KeyStroke("7",55);
org.aswing.KeyStroke.VK_8 = new org.aswing.KeyStroke("8",56);
org.aswing.KeyStroke.VK_9 = new org.aswing.KeyStroke("9",57);
org.aswing.KeyStroke.VK_A = new org.aswing.KeyStroke("A",65);
org.aswing.KeyStroke.VK_B = new org.aswing.KeyStroke("B",66);
org.aswing.KeyStroke.VK_C = new org.aswing.KeyStroke("C",67);
org.aswing.KeyStroke.VK_D = new org.aswing.KeyStroke("D",68);
org.aswing.KeyStroke.VK_E = new org.aswing.KeyStroke("E",69);
org.aswing.KeyStroke.VK_F = new org.aswing.KeyStroke("F",70);
org.aswing.KeyStroke.VK_G = new org.aswing.KeyStroke("G",71);
org.aswing.KeyStroke.VK_H = new org.aswing.KeyStroke("H",72);
org.aswing.KeyStroke.VK_I = new org.aswing.KeyStroke("I",73);
org.aswing.KeyStroke.VK_J = new org.aswing.KeyStroke("J",74);
org.aswing.KeyStroke.VK_K = new org.aswing.KeyStroke("K",75);
org.aswing.KeyStroke.VK_L = new org.aswing.KeyStroke("L",76);
org.aswing.KeyStroke.VK_M = new org.aswing.KeyStroke("M",77);
org.aswing.KeyStroke.VK_N = new org.aswing.KeyStroke("N",78);
org.aswing.KeyStroke.VK_O = new org.aswing.KeyStroke("O",79);
org.aswing.KeyStroke.VK_P = new org.aswing.KeyStroke("P",80);
org.aswing.KeyStroke.VK_Q = new org.aswing.KeyStroke("Q",81);
org.aswing.KeyStroke.VK_R = new org.aswing.KeyStroke("R",82);
org.aswing.KeyStroke.VK_S = new org.aswing.KeyStroke("S",83);
org.aswing.KeyStroke.VK_T = new org.aswing.KeyStroke("T",84);
org.aswing.KeyStroke.VK_U = new org.aswing.KeyStroke("U",85);
org.aswing.KeyStroke.VK_V = new org.aswing.KeyStroke("V",86);
org.aswing.KeyStroke.VK_W = new org.aswing.KeyStroke("W",87);
org.aswing.KeyStroke.VK_X = new org.aswing.KeyStroke("X",88);
org.aswing.KeyStroke.VK_Y = new org.aswing.KeyStroke("Y",89);
org.aswing.KeyStroke.VK_Z = new org.aswing.KeyStroke("Z",90);
org.aswing.KeyStroke.VK_F1 = new org.aswing.KeyStroke("F1",112);
org.aswing.KeyStroke.VK_F2 = new org.aswing.KeyStroke("F2",113);
org.aswing.KeyStroke.VK_F3 = new org.aswing.KeyStroke("F3",114);
org.aswing.KeyStroke.VK_F4 = new org.aswing.KeyStroke("F4",115);
org.aswing.KeyStroke.VK_F5 = new org.aswing.KeyStroke("F5",116);
org.aswing.KeyStroke.VK_F6 = new org.aswing.KeyStroke("F6",117);
org.aswing.KeyStroke.VK_F7 = new org.aswing.KeyStroke("F7",118);
org.aswing.KeyStroke.VK_F8 = new org.aswing.KeyStroke("F8",119);
org.aswing.KeyStroke.VK_F9 = new org.aswing.KeyStroke("F9",120);
org.aswing.KeyStroke.VK_F10 = new org.aswing.KeyStroke("F10",121);
org.aswing.KeyStroke.VK_F11 = new org.aswing.KeyStroke("F11",122);
org.aswing.KeyStroke.VK_F12 = new org.aswing.KeyStroke("F12",123);
org.aswing.KeyStroke.VK_F13 = new org.aswing.KeyStroke("F13",124);
org.aswing.KeyStroke.VK_F14 = new org.aswing.KeyStroke("F14",125);
org.aswing.KeyStroke.VK_F15 = new org.aswing.KeyStroke("F15",126);
org.aswing.KeyStroke.VK_NUMPAD_0 = new org.aswing.KeyStroke("Numpad_0",96);
org.aswing.KeyStroke.VK_NUMPAD_1 = new org.aswing.KeyStroke("Numpad_1",97);
org.aswing.KeyStroke.VK_NUMPAD_2 = new org.aswing.KeyStroke("Numpad_2",98);
org.aswing.KeyStroke.VK_NUMPAD_3 = new org.aswing.KeyStroke("Numpad_3",99);
org.aswing.KeyStroke.VK_NUMPAD_4 = new org.aswing.KeyStroke("Numpad_4",100);
org.aswing.KeyStroke.VK_NUMPAD_5 = new org.aswing.KeyStroke("Numpad_5",101);
org.aswing.KeyStroke.VK_NUMPAD_6 = new org.aswing.KeyStroke("Numpad_6",102);
org.aswing.KeyStroke.VK_NUMPAD_7 = new org.aswing.KeyStroke("Numpad_7",103);
org.aswing.KeyStroke.VK_NUMPAD_8 = new org.aswing.KeyStroke("Numpad_8",104);
org.aswing.KeyStroke.VK_NUMPAD_9 = new org.aswing.KeyStroke("Numpad_9",105);
org.aswing.KeyStroke.VK_NUMPAD_MULTIPLY = new org.aswing.KeyStroke("Numpad_Multiply",106);
org.aswing.KeyStroke.VK_NUMPAD_ADD = new org.aswing.KeyStroke("Numpad_Add",107);
org.aswing.KeyStroke.VK_NUMPAD_ENTER = new org.aswing.KeyStroke("Numpad_Enter",108);
org.aswing.KeyStroke.VK_NUMPAD_SUBTRACT = new org.aswing.KeyStroke("Numpad_Subtract",109);
org.aswing.KeyStroke.VK_NUMPAD_DECIMAL = new org.aswing.KeyStroke("Numpad_Decimal",110);
org.aswing.KeyStroke.VK_NUMPAD_DIVIDE = new org.aswing.KeyStroke("Numpad_Divide",111);
org.aswing.KeyStroke.VK_BACKSPACE = new org.aswing.KeyStroke("Backspace",8);
org.aswing.KeyStroke.VK_TAB = new org.aswing.KeyStroke("Tab",9);
org.aswing.KeyStroke.VK_ENTER = new org.aswing.KeyStroke("Enter",13);
org.aswing.KeyStroke.VK_SHIFT = new org.aswing.KeyStroke("Shift",16);
org.aswing.KeyStroke.VK_CONTROL = new org.aswing.KeyStroke("Ctrl",17);
org.aswing.KeyStroke.VK_ESCAPE = new org.aswing.KeyStroke("Esc",27);
org.aswing.KeyStroke.VK_SPACE = new org.aswing.KeyStroke("Space",32);
org.aswing.KeyStroke.VK_CAPS_LOCK = new org.aswing.KeyStroke("Cap",20);
org.aswing.KeyStroke.VK_NUM_LOCK = new org.aswing.KeyStroke("Num",144);
org.aswing.KeyStroke.VK_SCROLL_LOCK = new org.aswing.KeyStroke("Scroll",145);
org.aswing.KeyStroke.VK_PAUSE = new org.aswing.KeyStroke("Pause",19);
org.aswing.KeyStroke.VK_PAGE_UP = new org.aswing.KeyStroke("PageUp",33);
org.aswing.KeyStroke.VK_PAGE_DOWN = new org.aswing.KeyStroke("PageDown",34);
org.aswing.KeyStroke.VK_END = new org.aswing.KeyStroke("End",35);
org.aswing.KeyStroke.VK_HOME = new org.aswing.KeyStroke("Home",36);
org.aswing.KeyStroke.VK_INSERT = new org.aswing.KeyStroke("Insert",45);
org.aswing.KeyStroke.VK_DELETE = new org.aswing.KeyStroke("Delete",46);
org.aswing.KeyStroke.VK_LEFT = new org.aswing.KeyStroke("Left",37);
org.aswing.KeyStroke.VK_UP = new org.aswing.KeyStroke("Up",38);
org.aswing.KeyStroke.VK_RIGHT = new org.aswing.KeyStroke("Right",39);
org.aswing.KeyStroke.VK_DOWN = new org.aswing.KeyStroke("Down",40);
org.aswing.KeyStroke.VK_WINDOWS = new org.aswing.KeyStroke("Win",91);
org.aswing.KeyStroke.VK_MENU = new org.aswing.KeyStroke("Menu",93);
org.aswing.KeyboardManager.defaultMnemonicModifier = [org.aswing.AWKeyboard.CONTROL,org.aswing.AWKeyboard.SHIFT];
org.aswing.ScrollPaneLayout.TOP_LEFT = 3;
org.aswing.ScrollPaneLayout.TOP_RIGHT = 2;
org.aswing.ScrollPaneLayout.BOTTOM_LEFT = 1;
org.aswing.ScrollPaneLayout.BOTTOM_RIGHT = 0;
org.aswing.SimpleButtonIcon.eabledFilters = [];
org.aswing.SimpleButtonIconToggle.eabledFilters = [];
org.aswing.SoftBoxLayout.X_AXIS = 0;
org.aswing.SoftBoxLayout.Y_AXIS = 1;
org.aswing.SoftBoxLayout.LEFT = 2;
org.aswing.SoftBoxLayout.CENTER = 0;
org.aswing.SoftBoxLayout.RIGHT = 4;
org.aswing.SoftBoxLayout.TOP = 1;
org.aswing.SoftBoxLayout.BOTTOM = 3;
org.aswing.VectorListModel.CASEINSENSITIVE = 1;
org.aswing.VectorListModel.DESCENDING = 2;
org.aswing.VectorListModel.UNIQUESORT = 4;
org.aswing.VectorListModel.RETURNINDEXEDARRAY = 8;
org.aswing.VectorListModel.NUMERIC = 16;
org.aswing.WindowLayout.TITLE = "Title";
org.aswing.WindowLayout.CONTENT = "Content";
org.aswing.border.BevelBorder.RAISED = 0;
org.aswing.border.BevelBorder.LOWERED = 1;
org.aswing.border.SideLineBorder.NORTH = 0;
org.aswing.border.SideLineBorder.SOUTH = 1;
org.aswing.border.SideLineBorder.EAST = 2;
org.aswing.border.SideLineBorder.WEST = 3;
org.aswing.border.TitledBorder.DEFAULT_LINE_THICKNESS = 1;
org.aswing.border.TitledBorder.TOP = 1;
org.aswing.border.TitledBorder.BOTTOM = 3;
org.aswing.border.TitledBorder.CENTER = 0;
org.aswing.border.TitledBorder.LEFT = 2;
org.aswing.border.TitledBorder.RIGHT = 4;
org.aswing.border.TitledBorder.GAP = 1;
org.aswing.dnd.DragManager.TYPE_NONE = 0;
org.aswing.dnd.DragManager.TYPE_MOVE = 1;
org.aswing.dnd.DragManager.TYPE_COPY = 2;
org.aswing.dnd.DragManager.DEFAULT_DROP_MOTION = new org.aswing.dnd.DirectlyRemoveMotion();
org.aswing.dnd.DragManager.DEFAULT_REJECT_DROP_MOTION = new org.aswing.dnd.RejectedMotion();
org.aswing.dnd.DragManager.s_isDragging = false;
org.aswing.dnd.DragManager.listeners = new Array();
org.aswing.event.AWEvent.ACT = "act";
org.aswing.event.AWEvent.ACT_COMPLETE = "act_complete";
org.aswing.event.AWEvent.SHOWN = "shown";
org.aswing.event.AWEvent.HIDDEN = "hidden";
org.aswing.event.AWEvent.PAINT = "paint";
org.aswing.event.AWEvent.FOCUS_GAINED = "focusGained";
org.aswing.event.AWEvent.FOCUS_LOST = "focusLost";
org.aswing.event.ClickCountEvent.CLICK_COUNT = "clickCount";
org.aswing.event.ContainerEvent.COM_ADDED = "comAdded";
org.aswing.event.ContainerEvent.COM_REMOVED = "comRemoved";
org.aswing.event.DragAndDropEvent.DRAG_RECOGNIZED = "dragRecognized";
org.aswing.event.DragAndDropEvent.DRAG_START = "dragStart";
org.aswing.event.DragAndDropEvent.DRAG_ENTER = "dragEnter";
org.aswing.event.DragAndDropEvent.DRAG_OVERRING = "dragOverring";
org.aswing.event.DragAndDropEvent.DRAG_EXIT = "dragExit";
org.aswing.event.DragAndDropEvent.DRAG_DROP = "dragDrop";
org.aswing.event.FocusKeyEvent.FOCUS_KEY_DOWN = "focusKeyDown";
org.aswing.event.FocusKeyEvent.FOCUS_KEY_UP = "focusKeyUp";
org.aswing.event.InteractiveEvent.STATE_CHANGED = "stateChanged";
org.aswing.event.InteractiveEvent.SELECTION_CHANGED = "selectionChanged";
org.aswing.event.InteractiveEvent.SCROLL_CHANGED = "scrollChanged";
org.aswing.event.InteractiveEvent.TEXT_CHANGED = "textChanged";
org.aswing.event.FrameEvent.FRAME_ICONIFIED = "frameIconified";
org.aswing.event.FrameEvent.FRAME_RESTORED = "frameRestored";
org.aswing.event.FrameEvent.FRAME_MAXIMIZED = "frameMaximized";
org.aswing.event.FrameEvent.FRAME_ABILITY_CHANGED = "frameAbilityChanged";
org.aswing.event.FrameEvent.FRAME_CLOSING = "frameClosing";
org.aswing.event.ListItemEvent.ITEM_CLICK = "itemClick";
org.aswing.event.ListItemEvent.ITEM_DOUBLE_CLICK = "itemDoubleClick";
org.aswing.event.ListItemEvent.ITEM_MOUSE_DOWN = "itemMouseDown";
org.aswing.event.ListItemEvent.ITEM_ROLL_OVER = "itemRollOver";
org.aswing.event.ListItemEvent.ITEM_ROLL_OUT = "itemRollOut";
org.aswing.event.ListItemEvent.ITEM_RELEASE_OUT_SIDE = "itemReleaseOutSide";
org.aswing.event.MovedEvent.MOVED = "moved";
org.aswing.event.PopupEvent.POPUP_OPENED = "popupOpened";
org.aswing.event.PopupEvent.POPUP_CLOSED = "popupClosed";
org.aswing.event.PropertyChangeEvent.PROPERTY_CHANGE = "propertyChange";
org.aswing.event.ReleaseEvent.RELEASE = "release";
org.aswing.event.ReleaseEvent.RELEASE_OUT_SIDE = "releaseOutSide";
org.aswing.event.ResizedEvent.RESIZED = "resized";
org.aswing.event.ScrollPaneEvent.SCROLLBAR_STATE_CHANGED = "scrollbarStateChanged";
org.aswing.event.ScrollPaneEvent.VIEWPORT_CHANGED = "viewportChanged";
org.aswing.event.SelectionEvent.LIST_SELECTION_CHANGED = "listSelectionChanged";
org.aswing.event.SelectionEvent.ROW_SELECTION_CHANGED = "rowSelectionChanged";
org.aswing.event.SelectionEvent.COLUMN_SELECTION_CHANGED = "columnSelectionChanged";
org.aswing.event.TableCellEditEvent.EDITING_STARTED = "tableCellEditingStarted";
org.aswing.event.TableCellEditEvent.EDITING_CANCELED = "tableCellEditingCanceled";
org.aswing.event.TableCellEditEvent.EDITING_STOPPED = "tableCellEditingStopped";
org.aswing.event.TableModelEvent.INSERT = "insert";
org.aswing.event.TableModelEvent.UPDATE = "update";
org.aswing.event.TableModelEvent.DELETE = "delete";
org.aswing.event.TableModelEvent.HEADER_ROW = -1;
org.aswing.event.TableModelEvent.ALL_COLUMNS = -1;
org.aswing.event.ToolTipEvent.TIP_TEXT_CHANGED = "tipTextChanged";
org.aswing.event.ToolTipEvent.TIP_SHOWING = "tipShowing";
org.aswing.event.TreeCellEditEvent.EDITING_STARTED = "treeCellEditingStarted";
org.aswing.event.TreeCellEditEvent.EDITING_CANCELED = "treeCellEditingCanceled";
org.aswing.event.TreeCellEditEvent.EDITING_STOPPED = "treeCellEditingStopped";
org.aswing.event.TreeEvent.TREE_EXPANDED = "treeExpanded";
org.aswing.event.TreeEvent.TREE_COLLAPSED = "treeCollapsed";
org.aswing.event.TreeEvent.TREE_WILL_EXPAND = "treeWillExpand";
org.aswing.event.TreeEvent.TREE_WILL_COLLAPSE = "treeWillCollapse";
org.aswing.event.TreeSelectionEvent.TREE_SELECTION_CHANGED = "treeSelectionChanged";
org.aswing.event.WindowEvent.WINDOW_ACTIVATED = "windowActived";
org.aswing.event.WindowEvent.WINDOW_DEACTIVATED = "windowDeactived";
org.aswing.graphics.GradientBrush.LINEAR = openfl.display.GradientType.LINEAR;
org.aswing.graphics.GradientBrush.RADIAL = openfl.display.GradientType.RADIAL;
org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE = new org.aswing.plaf.DefaultEmptyDecoraterResource();
org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_BACKGROUND_COLOR = new org.aswing.plaf.ASColorUIResource(0);
org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_FOREGROUND_COLOR = new org.aswing.plaf.ASColorUIResource(16777215);
org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_MIDEGROUND_COLOR = new org.aswing.plaf.ASColorUIResource(1673215);
org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_FONT = new org.aswing.plaf.ASFontUIResource();
org.aswing.plaf.DefaultEmptyDecoraterResource.DEFAULT_STYLE_TUNE = new org.aswing.plaf.UIStyleTune();
org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_COLOR = new org.aswing.ASColor(0);
org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_FONT = new org.aswing.ASFont();
org.aswing.plaf.DefaultEmptyDecoraterResource.NULL_STYLE_TUNE = new org.aswing.StyleTune(0,0,0);
org.aswing.plaf.EmptyUIResources.BORDER = org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE;
org.aswing.plaf.EmptyUIResources.ICON = org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE;
org.aswing.plaf.EmptyUIResources.DECORATOR = org.aswing.plaf.DefaultEmptyDecoraterResource.INSTANCE;
org.aswing.plaf.EmptyUIResources.INSETS = new org.aswing.plaf.InsetsUIResource();
org.aswing.plaf.EmptyUIResources.FONT = new org.aswing.plaf.ASFontUIResource();
org.aswing.plaf.EmptyUIResources.COLOR = new org.aswing.plaf.ASColorUIResource();
org.aswing.plaf.EmptyUIResources.STYLE_TUNE = new org.aswing.plaf.UIStyleTune();
org.aswing.plaf.basic.BasicAccordionUI.MOTION_SPEED = 50;
org.aswing.plaf.basic.BasicButtonUI.viewRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicButtonUI.textRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicButtonUI.iconRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.MAX_TEXT_WIDTH = "maxTextWidth";
org.aswing.plaf.basic.BasicMenuItemUI.MAX_ACC_WIDTH = "maxAccWidth";
org.aswing.plaf.basic.BasicMenuItemUI.zeroRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.iconRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.textRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.acceleratorRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.checkIconRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.arrowIconRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.viewRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicMenuItemUI.r = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicGraphicsUtils.gradientRatio = [0,255];
org.aswing.plaf.basic.BasicGraphicsUtils.roundRectBtmFix = 0.5;
org.aswing.plaf.basic.BasicGraphicsUtils.sharedMatrix = new openfl.geom.Matrix();
org.aswing.plaf.basic.BasicLabelUI.viewRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicLabelUI.textRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicLabelUI.iconRect = new org.aswing.geom.IntRectangle();
org.aswing.plaf.basic.BasicScrollBarUI.scrollSpeedThrottle = 60;
org.aswing.plaf.basic.BasicScrollBarUI.initialScrollSpeedThrottle = 500;
org.aswing.plaf.basic.BasicSliderUI.scrollSpeedThrottle = 60;
org.aswing.plaf.basic.BasicSliderUI.initialScrollSpeedThrottle = 500;
org.aswing.plaf.basic.BasicStepperUI.continueSpeedThrottle = 60;
org.aswing.plaf.basic.BasicStepperUI.initialContinueSpeedThrottle = 500;
org.aswing.plaf.basic.DefaultMenuLayout.X_AXIS = 0;
org.aswing.plaf.basic.DefaultMenuLayout.Y_AXIS = 1;
org.aswing.plaf.basic.icon.TitleIcon.WIDTH = 16;
org.aswing.plaf.basic.icon.TitleIcon.HEIGHT = 12;
org.aswing.resizer.DefaultResizer.RESIZE_MC_WIDTH = 4;
org.aswing.table.JTableHeader.uiClassID = "TableHeaderUI";
org.aswing.table.TableColumn.COLUMN_WIDTH_PROPERTY = "columWidth";
org.aswing.table.TableColumn.HEADER_VALUE_PROPERTY = "headerValue";
org.aswing.table.TableColumn.HEADER_RENDERER_PROPERTY = "headerRenderer";
org.aswing.table.TableColumn.CELL_RENDERER_PROPERTY = "cellRenderer";
org.aswing.table.sorter.TableSorter.DESCENDING = -1;
org.aswing.table.sorter.TableSorter.NOT_SORTED = 0;
org.aswing.table.sorter.TableSorter.ASCENDING = 1;
org.aswing.table.sorter.TableSorter.inited = false;
org.aswing.tree.DefaultMutableTreeNode.AWML_INDEX = 0;
org.aswing.tree.DefaultTreeSelectionModel.SINGLE_TREE_SELECTION = 1;
org.aswing.tree.DefaultTreeSelectionModel.CONTIGUOUS_TREE_SELECTION = 2;
org.aswing.tree.DefaultTreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION = 4;
org.aswing.tree.DefaultTreeSelectionModel.SELECTION_MODE_PROPERTY = "selectionMode";
org.aswing.tree.DefaultTreeSelectionModel.ON_PROPERTY_CHANGED = "onPropertyChanged";
org.aswing.tree.DefaultTreeSelectionModel.ON_SELECTION_CHANGED = "onSelectionChanged";
org.aswing.util.ArrayList.CASEINSENSITIVE = 1;
org.aswing.util.ArrayList.DESCENDING = 2;
org.aswing.util.ArrayList.UNIQUESORT = 4;
org.aswing.util.ArrayList.RETURNINDEXEDARRAY = 8;
org.aswing.util.ArrayList.NUMERIC = 16;
ApplicationMain.main();
})();
